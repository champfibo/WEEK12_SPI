
WEEK_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d0  080098a0  080098a0  000198a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a170  0800a170  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800a170  0800a170  0001a170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a178  0800a178  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a178  0800a178  0001a178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a17c  0800a17c  0001a17c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800a180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000088  0800a204  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  0800a204  000203e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa69  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020cb  00000000  00000000  0002fb1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f70  00000000  00000000  00031be8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e68  00000000  00000000  00032b58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017732  00000000  00000000  000339c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b399  00000000  00000000  0004b0f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094641  00000000  00000000  0005648b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eaacc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004864  00000000  00000000  000eab48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009884 	.word	0x08009884

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08009884 	.word	0x08009884

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2f>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b94:	bf24      	itt	cs
 8000b96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9e:	d90d      	bls.n	8000bbc <__aeabi_d2f+0x30>
 8000ba0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bb0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb4:	bf08      	it	eq
 8000bb6:	f020 0001 	biceq.w	r0, r0, #1
 8000bba:	4770      	bx	lr
 8000bbc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bc0:	d121      	bne.n	8000c06 <__aeabi_d2f+0x7a>
 8000bc2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc6:	bfbc      	itt	lt
 8000bc8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	4770      	bxlt	lr
 8000bce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bd2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd6:	f1c2 0218 	rsb	r2, r2, #24
 8000bda:	f1c2 0c20 	rsb	ip, r2, #32
 8000bde:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be2:	fa20 f002 	lsr.w	r0, r0, r2
 8000be6:	bf18      	it	ne
 8000be8:	f040 0001 	orrne.w	r0, r0, #1
 8000bec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf8:	ea40 000c 	orr.w	r0, r0, ip
 8000bfc:	fa23 f302 	lsr.w	r3, r3, r2
 8000c00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c04:	e7cc      	b.n	8000ba0 <__aeabi_d2f+0x14>
 8000c06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0a:	d107      	bne.n	8000c1c <__aeabi_d2f+0x90>
 8000c0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c10:	bf1e      	ittt	ne
 8000c12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c1a:	4770      	bxne	lr
 8000c1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <__aeabi_uldivmod>:
 8000c2c:	b953      	cbnz	r3, 8000c44 <__aeabi_uldivmod+0x18>
 8000c2e:	b94a      	cbnz	r2, 8000c44 <__aeabi_uldivmod+0x18>
 8000c30:	2900      	cmp	r1, #0
 8000c32:	bf08      	it	eq
 8000c34:	2800      	cmpeq	r0, #0
 8000c36:	bf1c      	itt	ne
 8000c38:	f04f 31ff 	movne.w	r1, #4294967295
 8000c3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c40:	f000 b972 	b.w	8000f28 <__aeabi_idiv0>
 8000c44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c4c:	f000 f806 	bl	8000c5c <__udivmoddi4>
 8000c50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c58:	b004      	add	sp, #16
 8000c5a:	4770      	bx	lr

08000c5c <__udivmoddi4>:
 8000c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c60:	9e08      	ldr	r6, [sp, #32]
 8000c62:	4604      	mov	r4, r0
 8000c64:	4688      	mov	r8, r1
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d14b      	bne.n	8000d02 <__udivmoddi4+0xa6>
 8000c6a:	428a      	cmp	r2, r1
 8000c6c:	4615      	mov	r5, r2
 8000c6e:	d967      	bls.n	8000d40 <__udivmoddi4+0xe4>
 8000c70:	fab2 f282 	clz	r2, r2
 8000c74:	b14a      	cbz	r2, 8000c8a <__udivmoddi4+0x2e>
 8000c76:	f1c2 0720 	rsb	r7, r2, #32
 8000c7a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c7e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c82:	4095      	lsls	r5, r2
 8000c84:	ea47 0803 	orr.w	r8, r7, r3
 8000c88:	4094      	lsls	r4, r2
 8000c8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c8e:	0c23      	lsrs	r3, r4, #16
 8000c90:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c94:	fa1f fc85 	uxth.w	ip, r5
 8000c98:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c9c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ca0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	d909      	bls.n	8000cbc <__udivmoddi4+0x60>
 8000ca8:	18eb      	adds	r3, r5, r3
 8000caa:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cae:	f080 811b 	bcs.w	8000ee8 <__udivmoddi4+0x28c>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 8118 	bls.w	8000ee8 <__udivmoddi4+0x28c>
 8000cb8:	3f02      	subs	r7, #2
 8000cba:	442b      	add	r3, r5
 8000cbc:	1a5b      	subs	r3, r3, r1
 8000cbe:	b2a4      	uxth	r4, r4
 8000cc0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ccc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cd0:	45a4      	cmp	ip, r4
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x8c>
 8000cd4:	192c      	adds	r4, r5, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	f080 8107 	bcs.w	8000eec <__udivmoddi4+0x290>
 8000cde:	45a4      	cmp	ip, r4
 8000ce0:	f240 8104 	bls.w	8000eec <__udivmoddi4+0x290>
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	442c      	add	r4, r5
 8000ce8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cec:	eba4 040c 	sub.w	r4, r4, ip
 8000cf0:	2700      	movs	r7, #0
 8000cf2:	b11e      	cbz	r6, 8000cfc <__udivmoddi4+0xa0>
 8000cf4:	40d4      	lsrs	r4, r2
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e9c6 4300 	strd	r4, r3, [r6]
 8000cfc:	4639      	mov	r1, r7
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0xbe>
 8000d06:	2e00      	cmp	r6, #0
 8000d08:	f000 80eb 	beq.w	8000ee2 <__udivmoddi4+0x286>
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	e9c6 0100 	strd	r0, r1, [r6]
 8000d12:	4638      	mov	r0, r7
 8000d14:	4639      	mov	r1, r7
 8000d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1a:	fab3 f783 	clz	r7, r3
 8000d1e:	2f00      	cmp	r7, #0
 8000d20:	d147      	bne.n	8000db2 <__udivmoddi4+0x156>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d302      	bcc.n	8000d2c <__udivmoddi4+0xd0>
 8000d26:	4282      	cmp	r2, r0
 8000d28:	f200 80fa 	bhi.w	8000f20 <__udivmoddi4+0x2c4>
 8000d2c:	1a84      	subs	r4, r0, r2
 8000d2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d32:	2001      	movs	r0, #1
 8000d34:	4698      	mov	r8, r3
 8000d36:	2e00      	cmp	r6, #0
 8000d38:	d0e0      	beq.n	8000cfc <__udivmoddi4+0xa0>
 8000d3a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d3e:	e7dd      	b.n	8000cfc <__udivmoddi4+0xa0>
 8000d40:	b902      	cbnz	r2, 8000d44 <__udivmoddi4+0xe8>
 8000d42:	deff      	udf	#255	; 0xff
 8000d44:	fab2 f282 	clz	r2, r2
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	f040 808f 	bne.w	8000e6c <__udivmoddi4+0x210>
 8000d4e:	1b49      	subs	r1, r1, r5
 8000d50:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d54:	fa1f f885 	uxth.w	r8, r5
 8000d58:	2701      	movs	r7, #1
 8000d5a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d5e:	0c23      	lsrs	r3, r4, #16
 8000d60:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb08 f10c 	mul.w	r1, r8, ip
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d907      	bls.n	8000d80 <__udivmoddi4+0x124>
 8000d70:	18eb      	adds	r3, r5, r3
 8000d72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0x122>
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	f200 80cd 	bhi.w	8000f18 <__udivmoddi4+0x2bc>
 8000d7e:	4684      	mov	ip, r0
 8000d80:	1a59      	subs	r1, r3, r1
 8000d82:	b2a3      	uxth	r3, r4
 8000d84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d88:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d8c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d90:	fb08 f800 	mul.w	r8, r8, r0
 8000d94:	45a0      	cmp	r8, r4
 8000d96:	d907      	bls.n	8000da8 <__udivmoddi4+0x14c>
 8000d98:	192c      	adds	r4, r5, r4
 8000d9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9e:	d202      	bcs.n	8000da6 <__udivmoddi4+0x14a>
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	f200 80b6 	bhi.w	8000f12 <__udivmoddi4+0x2b6>
 8000da6:	4618      	mov	r0, r3
 8000da8:	eba4 0408 	sub.w	r4, r4, r8
 8000dac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000db0:	e79f      	b.n	8000cf2 <__udivmoddi4+0x96>
 8000db2:	f1c7 0c20 	rsb	ip, r7, #32
 8000db6:	40bb      	lsls	r3, r7
 8000db8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dbc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dc0:	fa01 f407 	lsl.w	r4, r1, r7
 8000dc4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dc8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dcc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dd0:	4325      	orrs	r5, r4
 8000dd2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000dd6:	0c2c      	lsrs	r4, r5, #16
 8000dd8:	fb08 3319 	mls	r3, r8, r9, r3
 8000ddc:	fa1f fa8e 	uxth.w	sl, lr
 8000de0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000de4:	fb09 f40a 	mul.w	r4, r9, sl
 8000de8:	429c      	cmp	r4, r3
 8000dea:	fa02 f207 	lsl.w	r2, r2, r7
 8000dee:	fa00 f107 	lsl.w	r1, r0, r7
 8000df2:	d90b      	bls.n	8000e0c <__udivmoddi4+0x1b0>
 8000df4:	eb1e 0303 	adds.w	r3, lr, r3
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	f080 8087 	bcs.w	8000f0e <__udivmoddi4+0x2b2>
 8000e00:	429c      	cmp	r4, r3
 8000e02:	f240 8084 	bls.w	8000f0e <__udivmoddi4+0x2b2>
 8000e06:	f1a9 0902 	sub.w	r9, r9, #2
 8000e0a:	4473      	add	r3, lr
 8000e0c:	1b1b      	subs	r3, r3, r4
 8000e0e:	b2ad      	uxth	r5, r5
 8000e10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e14:	fb08 3310 	mls	r3, r8, r0, r3
 8000e18:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e1c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e20:	45a2      	cmp	sl, r4
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x1da>
 8000e24:	eb1e 0404 	adds.w	r4, lr, r4
 8000e28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2c:	d26b      	bcs.n	8000f06 <__udivmoddi4+0x2aa>
 8000e2e:	45a2      	cmp	sl, r4
 8000e30:	d969      	bls.n	8000f06 <__udivmoddi4+0x2aa>
 8000e32:	3802      	subs	r0, #2
 8000e34:	4474      	add	r4, lr
 8000e36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	eba4 040a 	sub.w	r4, r4, sl
 8000e42:	454c      	cmp	r4, r9
 8000e44:	46c2      	mov	sl, r8
 8000e46:	464b      	mov	r3, r9
 8000e48:	d354      	bcc.n	8000ef4 <__udivmoddi4+0x298>
 8000e4a:	d051      	beq.n	8000ef0 <__udivmoddi4+0x294>
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d069      	beq.n	8000f24 <__udivmoddi4+0x2c8>
 8000e50:	ebb1 050a 	subs.w	r5, r1, sl
 8000e54:	eb64 0403 	sbc.w	r4, r4, r3
 8000e58:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e5c:	40fd      	lsrs	r5, r7
 8000e5e:	40fc      	lsrs	r4, r7
 8000e60:	ea4c 0505 	orr.w	r5, ip, r5
 8000e64:	e9c6 5400 	strd	r5, r4, [r6]
 8000e68:	2700      	movs	r7, #0
 8000e6a:	e747      	b.n	8000cfc <__udivmoddi4+0xa0>
 8000e6c:	f1c2 0320 	rsb	r3, r2, #32
 8000e70:	fa20 f703 	lsr.w	r7, r0, r3
 8000e74:	4095      	lsls	r5, r2
 8000e76:	fa01 f002 	lsl.w	r0, r1, r2
 8000e7a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e7e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e82:	4338      	orrs	r0, r7
 8000e84:	0c01      	lsrs	r1, r0, #16
 8000e86:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e8a:	fa1f f885 	uxth.w	r8, r5
 8000e8e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e96:	fb07 f308 	mul.w	r3, r7, r8
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000ea0:	d907      	bls.n	8000eb2 <__udivmoddi4+0x256>
 8000ea2:	1869      	adds	r1, r5, r1
 8000ea4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ea8:	d22f      	bcs.n	8000f0a <__udivmoddi4+0x2ae>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d92d      	bls.n	8000f0a <__udivmoddi4+0x2ae>
 8000eae:	3f02      	subs	r7, #2
 8000eb0:	4429      	add	r1, r5
 8000eb2:	1acb      	subs	r3, r1, r3
 8000eb4:	b281      	uxth	r1, r0
 8000eb6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eba:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb00 f308 	mul.w	r3, r0, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d907      	bls.n	8000eda <__udivmoddi4+0x27e>
 8000eca:	1869      	adds	r1, r5, r1
 8000ecc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ed0:	d217      	bcs.n	8000f02 <__udivmoddi4+0x2a6>
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d915      	bls.n	8000f02 <__udivmoddi4+0x2a6>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	4429      	add	r1, r5
 8000eda:	1ac9      	subs	r1, r1, r3
 8000edc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ee0:	e73b      	b.n	8000d5a <__udivmoddi4+0xfe>
 8000ee2:	4637      	mov	r7, r6
 8000ee4:	4630      	mov	r0, r6
 8000ee6:	e709      	b.n	8000cfc <__udivmoddi4+0xa0>
 8000ee8:	4607      	mov	r7, r0
 8000eea:	e6e7      	b.n	8000cbc <__udivmoddi4+0x60>
 8000eec:	4618      	mov	r0, r3
 8000eee:	e6fb      	b.n	8000ce8 <__udivmoddi4+0x8c>
 8000ef0:	4541      	cmp	r1, r8
 8000ef2:	d2ab      	bcs.n	8000e4c <__udivmoddi4+0x1f0>
 8000ef4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ef8:	eb69 020e 	sbc.w	r2, r9, lr
 8000efc:	3801      	subs	r0, #1
 8000efe:	4613      	mov	r3, r2
 8000f00:	e7a4      	b.n	8000e4c <__udivmoddi4+0x1f0>
 8000f02:	4660      	mov	r0, ip
 8000f04:	e7e9      	b.n	8000eda <__udivmoddi4+0x27e>
 8000f06:	4618      	mov	r0, r3
 8000f08:	e795      	b.n	8000e36 <__udivmoddi4+0x1da>
 8000f0a:	4667      	mov	r7, ip
 8000f0c:	e7d1      	b.n	8000eb2 <__udivmoddi4+0x256>
 8000f0e:	4681      	mov	r9, r0
 8000f10:	e77c      	b.n	8000e0c <__udivmoddi4+0x1b0>
 8000f12:	3802      	subs	r0, #2
 8000f14:	442c      	add	r4, r5
 8000f16:	e747      	b.n	8000da8 <__udivmoddi4+0x14c>
 8000f18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f1c:	442b      	add	r3, r5
 8000f1e:	e72f      	b.n	8000d80 <__udivmoddi4+0x124>
 8000f20:	4638      	mov	r0, r7
 8000f22:	e708      	b.n	8000d36 <__udivmoddi4+0xda>
 8000f24:	4637      	mov	r7, r6
 8000f26:	e6e9      	b.n	8000cfc <__udivmoddi4+0xa0>

08000f28 <__aeabi_idiv0>:
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	0000      	movs	r0, r0
	...

08000f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f30:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8000f34:	b08e      	sub	sp, #56	; 0x38
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f38:	f003 f962 	bl	8004200 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3c:	f002 fc0e 	bl	800375c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f40:	f002 fdb8 	bl	8003ab4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f44:	f002 fd96 	bl	8003a74 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f48:	f002 fd6a 	bl	8003a20 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000f4c:	f002 fcc0 	bl	80038d0 <MX_SPI3_Init>
  MX_ADC1_Init();
 8000f50:	f002 fc6c 	bl	800382c <MX_ADC1_Init>
  MX_TIM3_Init();
 8000f54:	f002 fcf4 	bl	8003940 <MX_TIM3_Init>
  MX_TIM11_Init();
 8000f58:	f002 fd3e 	bl	80039d8 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);
 8000f5c:	48bf      	ldr	r0, [pc, #764]	; (800125c <main+0x32c>)
 8000f5e:	f005 fd36 	bl	80069ce <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim11);
 8000f62:	48bf      	ldr	r0, [pc, #764]	; (8001260 <main+0x330>)
 8000f64:	f005 fd57 	bl	8006a16 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	49be      	ldr	r1, [pc, #760]	; (8001264 <main+0x334>)
 8000f6c:	48be      	ldr	r0, [pc, #760]	; (8001268 <main+0x338>)
 8000f6e:	f003 fb3d 	bl	80045ec <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f78:	48bc      	ldr	r0, [pc, #752]	; (800126c <main+0x33c>)
 8000f7a:	f004 fd29 	bl	80059d0 <HAL_GPIO_WritePin>

	 char temp[]="HELLO WORLD\r\n please type something to test UART\r\n";
 8000f7e:	4bbc      	ldr	r3, [pc, #752]	; (8001270 <main+0x340>)
 8000f80:	463c      	mov	r4, r7
 8000f82:	461d      	mov	r5, r3
 8000f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f90:	682b      	ldr	r3, [r5, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	8022      	strh	r2, [r4, #0]
 8000f96:	3402      	adds	r4, #2
 8000f98:	0c1b      	lsrs	r3, r3, #16
 8000f9a:	7023      	strb	r3, [r4, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff f91e 	bl	80001e0 <strlen>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	b29a      	uxth	r2, r3
 8000fa8:	4639      	mov	r1, r7
 8000faa:	230a      	movs	r3, #10
 8000fac:	48b1      	ldr	r0, [pc, #708]	; (8001274 <main+0x344>)
 8000fae:	f006 f926 	bl	80071fe <HAL_UART_Transmit>
		static uint64_t timestamp =0;



		/*Method 2 Interrupt Mode*/
				HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 32);
 8000fb2:	2220      	movs	r2, #32
 8000fb4:	49b0      	ldr	r1, [pc, #704]	; (8001278 <main+0x348>)
 8000fb6:	48af      	ldr	r0, [pc, #700]	; (8001274 <main+0x344>)
 8000fb8:	f006 f9ba 	bl	8007330 <HAL_UART_Receive_IT>

				/*Method 2 W/ 1 Char Received*/
				int16_t inputchar = UARTRecieveIT();
 8000fbc:	f002 fe92 	bl	8003ce4 <UARTRecieveIT>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	86fb      	strh	r3, [r7, #54]	; 0x36
				if(inputchar!=-1)
 8000fc4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8000fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fcc:	d011      	beq.n	8000ff2 <main+0xc2>
				{

					sprintf(TxDataBuffer, "ReceivedChar:[%c]\r\n", inputchar);
 8000fce:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	49a9      	ldr	r1, [pc, #676]	; (800127c <main+0x34c>)
 8000fd6:	48aa      	ldr	r0, [pc, #680]	; (8001280 <main+0x350>)
 8000fd8:	f007 f844 	bl	8008064 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000fdc:	48a8      	ldr	r0, [pc, #672]	; (8001280 <main+0x350>)
 8000fde:	f7ff f8ff 	bl	80001e0 <strlen>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fea:	49a5      	ldr	r1, [pc, #660]	; (8001280 <main+0x350>)
 8000fec:	48a1      	ldr	r0, [pc, #644]	; (8001274 <main+0x344>)
 8000fee:	f006 f906 	bl	80071fe <HAL_UART_Transmit>
				}

				switch (STATE_Display)
 8000ff2:	4ba4      	ldr	r3, [pc, #656]	; (8001284 <main+0x354>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b29      	cmp	r3, #41	; 0x29
 8000ff8:	f201 8711 	bhi.w	8002e1e <main+0x1eee>
 8000ffc:	a201      	add	r2, pc, #4	; (adr r2, 8001004 <main+0xd4>)
 8000ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001002:	bf00      	nop
 8001004:	080010ad 	.word	0x080010ad
 8001008:	08002e1f 	.word	0x08002e1f
 800100c:	08002e1f 	.word	0x08002e1f
 8001010:	08002e1f 	.word	0x08002e1f
 8001014:	08002e1f 	.word	0x08002e1f
 8001018:	08002e1f 	.word	0x08002e1f
 800101c:	08002e1f 	.word	0x08002e1f
 8001020:	08002e1f 	.word	0x08002e1f
 8001024:	08002e1f 	.word	0x08002e1f
 8001028:	08002e1f 	.word	0x08002e1f
 800102c:	080010b7 	.word	0x080010b7
 8001030:	080010e7 	.word	0x080010e7
 8001034:	08002e1f 	.word	0x08002e1f
 8001038:	08002e1f 	.word	0x08002e1f
 800103c:	08002e1f 	.word	0x08002e1f
 8001040:	08002e1f 	.word	0x08002e1f
 8001044:	08002e1f 	.word	0x08002e1f
 8001048:	08002e1f 	.word	0x08002e1f
 800104c:	08002e1f 	.word	0x08002e1f
 8001050:	08002e1f 	.word	0x08002e1f
 8001054:	080011d1 	.word	0x080011d1
 8001058:	08001201 	.word	0x08001201
 800105c:	08002e1f 	.word	0x08002e1f
 8001060:	08002e1f 	.word	0x08002e1f
 8001064:	08002e1f 	.word	0x08002e1f
 8001068:	08002e1f 	.word	0x08002e1f
 800106c:	08002e1f 	.word	0x08002e1f
 8001070:	08002e1f 	.word	0x08002e1f
 8001074:	08002e1f 	.word	0x08002e1f
 8001078:	08002e1f 	.word	0x08002e1f
 800107c:	08001c43 	.word	0x08001c43
 8001080:	08001c73 	.word	0x08001c73
 8001084:	08002e1f 	.word	0x08002e1f
 8001088:	08002e1f 	.word	0x08002e1f
 800108c:	08002e1f 	.word	0x08002e1f
 8001090:	08002e1f 	.word	0x08002e1f
 8001094:	08002e1f 	.word	0x08002e1f
 8001098:	08002e1f 	.word	0x08002e1f
 800109c:	08002e1f 	.word	0x08002e1f
 80010a0:	08002e1f 	.word	0x08002e1f
 80010a4:	080024af 	.word	0x080024af
 80010a8:	080024df 	.word	0x080024df
						    {
						    case StateDisplay_Start:
						      STATE_Display = StateDisplay_MenuRoot_Print;
 80010ac:	4b75      	ldr	r3, [pc, #468]	; (8001284 <main+0x354>)
 80010ae:	220a      	movs	r2, #10
 80010b0:	701a      	strb	r2, [r3, #0]
						      break;
 80010b2:	f001 beb4 	b.w	8002e1e <main+0x1eee>

						    case StateDisplay_MenuRoot_Print: //display one time state
						    	sprintf(TxDataBuffer, "*****MainMenu***** \r\n 1: Sawtooth \r\n 2: Sine wave \r\n 3: Square wave \r\n");
 80010b6:	4a72      	ldr	r2, [pc, #456]	; (8001280 <main+0x350>)
 80010b8:	4b73      	ldr	r3, [pc, #460]	; (8001288 <main+0x358>)
 80010ba:	4610      	mov	r0, r2
 80010bc:	4619      	mov	r1, r3
 80010be:	2347      	movs	r3, #71	; 0x47
 80010c0:	461a      	mov	r2, r3
 80010c2:	f006 ffbb 	bl	800803c <memcpy>
						    	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80010c6:	486e      	ldr	r0, [pc, #440]	; (8001280 <main+0x350>)
 80010c8:	f7ff f88a 	bl	80001e0 <strlen>
 80010cc:	4603      	mov	r3, r0
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d4:	496a      	ldr	r1, [pc, #424]	; (8001280 <main+0x350>)
 80010d6:	4867      	ldr	r0, [pc, #412]	; (8001274 <main+0x344>)
 80010d8:	f006 f891 	bl	80071fe <HAL_UART_Transmit>
						      STATE_Display = StateDisplay_MenuRoot_WaitInput;
 80010dc:	4b69      	ldr	r3, [pc, #420]	; (8001284 <main+0x354>)
 80010de:	220b      	movs	r2, #11
 80010e0:	701a      	strb	r2, [r3, #0]
						      break;
 80010e2:	f001 be9c 	b.w	8002e1e <main+0x1eee>


						    case StateDisplay_MenuRoot_WaitInput: //wait state for input

						      switch (inputchar)
 80010e6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80010ea:	2b31      	cmp	r3, #49	; 0x31
 80010ec:	d00a      	beq.n	8001104 <main+0x1d4>
 80010ee:	2b31      	cmp	r3, #49	; 0x31
 80010f0:	dc03      	bgt.n	80010fa <main+0x1ca>
 80010f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f6:	d068      	beq.n	80011ca <main+0x29a>
 80010f8:	e04d      	b.n	8001196 <main+0x266>
 80010fa:	2b32      	cmp	r3, #50	; 0x32
 80010fc:	d020      	beq.n	8001140 <main+0x210>
 80010fe:	2b33      	cmp	r3, #51	; 0x33
 8001100:	d03f      	beq.n	8001182 <main+0x252>
 8001102:	e048      	b.n	8001196 <main+0x266>
						      case -1:
						      	break;

						      case '1':

						        STATE_Display = StateDisplay_MenuSawtooth_Print;
 8001104:	4b5f      	ldr	r3, [pc, #380]	; (8001284 <main+0x354>)
 8001106:	2214      	movs	r2, #20
 8001108:	701a      	strb	r2, [r3, #0]
						        a=1;       //  (1 on)(0 off)
 800110a:	4b60      	ldr	r3, [pc, #384]	; (800128c <main+0x35c>)
 800110c:	2201      	movs	r2, #1
 800110e:	601a      	str	r2, [r3, #0]
						        mode =1;   // output
 8001110:	4b5f      	ldr	r3, [pc, #380]	; (8001290 <main+0x360>)
 8001112:	2201      	movs	r2, #1
 8001114:	601a      	str	r2, [r3, #0]
						        Status_sawtooth = 0;  //positive/negative ramp
 8001116:	4b5f      	ldr	r3, [pc, #380]	; (8001294 <main+0x364>)
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
						        sprintf(TxDataBuffer, " Sawtooth \r\n ");
 800111c:	4a58      	ldr	r2, [pc, #352]	; (8001280 <main+0x350>)
 800111e:	4b5e      	ldr	r3, [pc, #376]	; (8001298 <main+0x368>)
 8001120:	4614      	mov	r4, r2
 8001122:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001124:	c407      	stmia	r4!, {r0, r1, r2}
 8001126:	8023      	strh	r3, [r4, #0]
						        HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001128:	4855      	ldr	r0, [pc, #340]	; (8001280 <main+0x350>)
 800112a:	f7ff f859 	bl	80001e0 <strlen>
 800112e:	4603      	mov	r3, r0
 8001130:	b29a      	uxth	r2, r3
 8001132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001136:	4952      	ldr	r1, [pc, #328]	; (8001280 <main+0x350>)
 8001138:	484e      	ldr	r0, [pc, #312]	; (8001274 <main+0x344>)
 800113a:	f006 f860 	bl	80071fe <HAL_UART_Transmit>


						        break;
 800113e:	e045      	b.n	80011cc <main+0x29c>
						      case '2':
						        STATE_Display = StateDisplay_MenuSine_Print;
 8001140:	4b50      	ldr	r3, [pc, #320]	; (8001284 <main+0x354>)
 8001142:	221e      	movs	r2, #30
 8001144:	701a      	strb	r2, [r3, #0]
						        a=1;
 8001146:	4b51      	ldr	r3, [pc, #324]	; (800128c <main+0x35c>)
 8001148:	2201      	movs	r2, #1
 800114a:	601a      	str	r2, [r3, #0]
						        mode=2;
 800114c:	4b50      	ldr	r3, [pc, #320]	; (8001290 <main+0x360>)
 800114e:	2202      	movs	r2, #2
 8001150:	601a      	str	r2, [r3, #0]
						        timestampsin = micros();
 8001152:	f002 fdad 	bl	8003cb0 <micros>
 8001156:	4603      	mov	r3, r0
 8001158:	460c      	mov	r4, r1
 800115a:	4a50      	ldr	r2, [pc, #320]	; (800129c <main+0x36c>)
 800115c:	e9c2 3400 	strd	r3, r4, [r2]
						        sprintf(TxDataBuffer, " Sine \r\n ");
 8001160:	4b47      	ldr	r3, [pc, #284]	; (8001280 <main+0x350>)
 8001162:	4a4f      	ldr	r2, [pc, #316]	; (80012a0 <main+0x370>)
 8001164:	ca07      	ldmia	r2, {r0, r1, r2}
 8001166:	c303      	stmia	r3!, {r0, r1}
 8001168:	801a      	strh	r2, [r3, #0]
						          HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800116a:	4845      	ldr	r0, [pc, #276]	; (8001280 <main+0x350>)
 800116c:	f7ff f838 	bl	80001e0 <strlen>
 8001170:	4603      	mov	r3, r0
 8001172:	b29a      	uxth	r2, r3
 8001174:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001178:	4941      	ldr	r1, [pc, #260]	; (8001280 <main+0x350>)
 800117a:	483e      	ldr	r0, [pc, #248]	; (8001274 <main+0x344>)
 800117c:	f006 f83f 	bl	80071fe <HAL_UART_Transmit>
						        break;
 8001180:	e024      	b.n	80011cc <main+0x29c>
						      case '3':
						      	 STATE_Display =StateDisplay_MenuSquare_Print;
 8001182:	4b40      	ldr	r3, [pc, #256]	; (8001284 <main+0x354>)
 8001184:	2228      	movs	r2, #40	; 0x28
 8001186:	701a      	strb	r2, [r3, #0]
						      	a=1;
 8001188:	4b40      	ldr	r3, [pc, #256]	; (800128c <main+0x35c>)
 800118a:	2201      	movs	r2, #1
 800118c:	601a      	str	r2, [r3, #0]
						      	mode=3;
 800118e:	4b40      	ldr	r3, [pc, #256]	; (8001290 <main+0x360>)
 8001190:	2203      	movs	r2, #3
 8001192:	601a      	str	r2, [r3, #0]
						      	break;
 8001194:	e01a      	b.n	80011cc <main+0x29c>
						      default: // actully error , you can add error message
						    	  sprintf(TxDataBuffer, "unidentified input \r\n");
 8001196:	4a3a      	ldr	r2, [pc, #232]	; (8001280 <main+0x350>)
 8001198:	4b42      	ldr	r3, [pc, #264]	; (80012a4 <main+0x374>)
 800119a:	4614      	mov	r4, r2
 800119c:	461d      	mov	r5, r3
 800119e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011a6:	6020      	str	r0, [r4, #0]
 80011a8:	3404      	adds	r4, #4
 80011aa:	8021      	strh	r1, [r4, #0]
						    	   HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80011ac:	4834      	ldr	r0, [pc, #208]	; (8001280 <main+0x350>)
 80011ae:	f7ff f817 	bl	80001e0 <strlen>
 80011b2:	4603      	mov	r3, r0
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ba:	4931      	ldr	r1, [pc, #196]	; (8001280 <main+0x350>)
 80011bc:	482d      	ldr	r0, [pc, #180]	; (8001274 <main+0x344>)
 80011be:	f006 f81e 	bl	80071fe <HAL_UART_Transmit>
						        STATE_Display = StateDisplay_MenuRoot_Print;
 80011c2:	4b30      	ldr	r3, [pc, #192]	; (8001284 <main+0x354>)
 80011c4:	220a      	movs	r2, #10
 80011c6:	701a      	strb	r2, [r3, #0]
						        break;
 80011c8:	e000      	b.n	80011cc <main+0x29c>
						      	break;
 80011ca:	bf00      	nop
						      }
						      break;
 80011cc:	f001 be27 	b.w	8002e1e <main+0x1eee>

						      //Menu 1 sawtooth

						      case StateDisplay_MenuSawtooth_Print: //display state

						      	sprintf(TxDataBuffer, "Sawtooth \r\n a. +0.1 Hz \r\n s. -0.1 Hz \r\n d. On/Off \r\n f.reverse \r\n x. Back \r\n g. V High +0.1V \r\n h. High -0.1V \r\n j. V Low +0.1V \r\n k. Low -0.1V  \r\n");
 80011d0:	4a2b      	ldr	r2, [pc, #172]	; (8001280 <main+0x350>)
 80011d2:	4b35      	ldr	r3, [pc, #212]	; (80012a8 <main+0x378>)
 80011d4:	4610      	mov	r0, r2
 80011d6:	4619      	mov	r1, r3
 80011d8:	2394      	movs	r3, #148	; 0x94
 80011da:	461a      	mov	r2, r3
 80011dc:	f006 ff2e 	bl	800803c <memcpy>
						      	 HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80011e0:	4827      	ldr	r0, [pc, #156]	; (8001280 <main+0x350>)
 80011e2:	f7fe fffd 	bl	80001e0 <strlen>
 80011e6:	4603      	mov	r3, r0
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ee:	4924      	ldr	r1, [pc, #144]	; (8001280 <main+0x350>)
 80011f0:	4820      	ldr	r0, [pc, #128]	; (8001274 <main+0x344>)
 80011f2:	f006 f804 	bl	80071fe <HAL_UART_Transmit>

						      	STATE_Display = StateDisplay_MenuSawtooth_WaitInput;
 80011f6:	4b23      	ldr	r3, [pc, #140]	; (8001284 <main+0x354>)
 80011f8:	2215      	movs	r2, #21
 80011fa:	701a      	strb	r2, [r3, #0]
						      break;
 80011fc:	f001 be0f 	b.w	8002e1e <main+0x1eee>

						      case StateDisplay_MenuSawtooth_WaitInput: //make decision state
						      	 switch (inputchar)
 8001200:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001204:	2b67      	cmp	r3, #103	; 0x67
 8001206:	f000 81ef 	beq.w	80015e8 <main+0x6b8>
 800120a:	2b67      	cmp	r3, #103	; 0x67
 800120c:	dc11      	bgt.n	8001232 <main+0x302>
 800120e:	2b61      	cmp	r3, #97	; 0x61
 8001210:	f000 8082 	beq.w	8001318 <main+0x3e8>
 8001214:	2b61      	cmp	r3, #97	; 0x61
 8001216:	dc05      	bgt.n	8001224 <main+0x2f4>
 8001218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800121c:	f000 850e 	beq.w	8001c3c <main+0xd0c>
 8001220:	f000 bcf2 	b.w	8001c08 <main+0xcd8>
 8001224:	2b64      	cmp	r3, #100	; 0x64
 8001226:	d041      	beq.n	80012ac <main+0x37c>
 8001228:	2b66      	cmp	r3, #102	; 0x66
 800122a:	f000 817f 	beq.w	800152c <main+0x5fc>
 800122e:	f000 bceb 	b.w	8001c08 <main+0xcd8>
 8001232:	2b6b      	cmp	r3, #107	; 0x6b
 8001234:	f000 840d 	beq.w	8001a52 <main+0xb22>
 8001238:	2b6b      	cmp	r3, #107	; 0x6b
 800123a:	dc07      	bgt.n	800124c <main+0x31c>
 800123c:	2b68      	cmp	r3, #104	; 0x68
 800123e:	f000 826f 	beq.w	8001720 <main+0x7f0>
 8001242:	2b6a      	cmp	r3, #106	; 0x6a
 8001244:	f000 8353 	beq.w	80018ee <main+0x9be>
 8001248:	f000 bcde 	b.w	8001c08 <main+0xcd8>
 800124c:	2b73      	cmp	r3, #115	; 0x73
 800124e:	f000 80d1 	beq.w	80013f4 <main+0x4c4>
 8001252:	2b78      	cmp	r3, #120	; 0x78
 8001254:	f000 8163 	beq.w	800151e <main+0x5ee>
 8001258:	f000 bcd6 	b.w	8001c08 <main+0xcd8>
 800125c:	20000220 	.word	0x20000220
 8001260:	20000300 	.word	0x20000300
 8001264:	200001bc 	.word	0x200001bc
 8001268:	200002b8 	.word	0x200002b8
 800126c:	40020000 	.word	0x40020000
 8001270:	08009f10 	.word	0x08009f10
 8001274:	200003a0 	.word	0x200003a0
 8001278:	20000124 	.word	0x20000124
 800127c:	080098a0 	.word	0x080098a0
 8001280:	200000a4 	.word	0x200000a4
 8001284:	200001a4 	.word	0x200001a4
 8001288:	080098b4 	.word	0x080098b4
 800128c:	200001ac 	.word	0x200001ac
 8001290:	200001b8 	.word	0x200001b8
 8001294:	200001dc 	.word	0x200001dc
 8001298:	080098fc 	.word	0x080098fc
 800129c:	20000200 	.word	0x20000200
 80012a0:	0800990c 	.word	0x0800990c
 80012a4:	08009918 	.word	0x08009918
 80012a8:	08009930 	.word	0x08009930
						      		     case -1:
						      		    	 break;


						      		           case 'd': // on/off
						      		             if (a==0)
 80012ac:	4bb0      	ldr	r3, [pc, #704]	; (8001570 <main+0x640>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d114      	bne.n	80012de <main+0x3ae>
						      		             {

						      		            	 sprintf(TxDataBuffer, "Turned On \r\n");
 80012b4:	4aaf      	ldr	r2, [pc, #700]	; (8001574 <main+0x644>)
 80012b6:	4bb0      	ldr	r3, [pc, #704]	; (8001578 <main+0x648>)
 80012b8:	4614      	mov	r4, r2
 80012ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012bc:	c407      	stmia	r4!, {r0, r1, r2}
 80012be:	7023      	strb	r3, [r4, #0]
						      		            	 HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80012c0:	48ac      	ldr	r0, [pc, #688]	; (8001574 <main+0x644>)
 80012c2:	f7fe ff8d 	bl	80001e0 <strlen>
 80012c6:	4603      	mov	r3, r0
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ce:	49a9      	ldr	r1, [pc, #676]	; (8001574 <main+0x644>)
 80012d0:	48aa      	ldr	r0, [pc, #680]	; (800157c <main+0x64c>)
 80012d2:	f005 ff94 	bl	80071fe <HAL_UART_Transmit>
						      		            	 a=1;
 80012d6:	4ba6      	ldr	r3, [pc, #664]	; (8001570 <main+0x640>)
 80012d8:	2201      	movs	r2, #1
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	e017      	b.n	800130e <main+0x3de>

						      		             }
						      		             else if (a==1)
 80012de:	4ba4      	ldr	r3, [pc, #656]	; (8001570 <main+0x640>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d113      	bne.n	800130e <main+0x3de>
						      		             {
						      		            	 	 a=0;
 80012e6:	4ba2      	ldr	r3, [pc, #648]	; (8001570 <main+0x640>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
						      		             		sprintf(TxDataBuffer, "Turned Off \r\n");
 80012ec:	4aa1      	ldr	r2, [pc, #644]	; (8001574 <main+0x644>)
 80012ee:	4ba4      	ldr	r3, [pc, #656]	; (8001580 <main+0x650>)
 80012f0:	4614      	mov	r4, r2
 80012f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012f4:	c407      	stmia	r4!, {r0, r1, r2}
 80012f6:	8023      	strh	r3, [r4, #0]
						      		             		 HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80012f8:	489e      	ldr	r0, [pc, #632]	; (8001574 <main+0x644>)
 80012fa:	f7fe ff71 	bl	80001e0 <strlen>
 80012fe:	4603      	mov	r3, r0
 8001300:	b29a      	uxth	r2, r3
 8001302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001306:	499b      	ldr	r1, [pc, #620]	; (8001574 <main+0x644>)
 8001308:	489c      	ldr	r0, [pc, #624]	; (800157c <main+0x64c>)
 800130a:	f005 ff78 	bl	80071fe <HAL_UART_Transmit>

						      		             		 }
						      		           STATE_Display = StateDisplay_MenuSawtooth_Print;
 800130e:	4b9d      	ldr	r3, [pc, #628]	; (8001584 <main+0x654>)
 8001310:	2214      	movs	r2, #20
 8001312:	701a      	strb	r2, [r3, #0]

						      		             break;
 8001314:	f000 bc93 	b.w	8001c3e <main+0xd0e>
						      		           case 'a':  // เพิ่มความถี่
						      		        	   a=1;
 8001318:	4b95      	ldr	r3, [pc, #596]	; (8001570 <main+0x640>)
 800131a:	2201      	movs	r2, #1
 800131c:	601a      	str	r2, [r3, #0]
						      		             if(F_sawtooth <10)
 800131e:	4b9a      	ldr	r3, [pc, #616]	; (8001588 <main+0x658>)
 8001320:	edd3 7a00 	vldr	s15, [r3]
 8001324:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001328:	eef4 7ac7 	vcmpe.f32	s15, s14
 800132c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001330:	d546      	bpl.n	80013c0 <main+0x490>
						      		             {
						      		            	F_sawtooth+=0.1;
 8001332:	4b95      	ldr	r3, [pc, #596]	; (8001588 <main+0x658>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f90e 	bl	8000558 <__aeabi_f2d>
 800133c:	a38a      	add	r3, pc, #552	; (adr r3, 8001568 <main+0x638>)
 800133e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001342:	f7fe ffab 	bl	800029c <__adddf3>
 8001346:	4603      	mov	r3, r0
 8001348:	460c      	mov	r4, r1
 800134a:	4618      	mov	r0, r3
 800134c:	4621      	mov	r1, r4
 800134e:	f7ff fc1d 	bl	8000b8c <__aeabi_d2f>
 8001352:	4602      	mov	r2, r0
 8001354:	4b8c      	ldr	r3, [pc, #560]	; (8001588 <main+0x658>)
 8001356:	601a      	str	r2, [r3, #0]
						      		            	t=F_sawtooth*10;
 8001358:	4b8b      	ldr	r3, [pc, #556]	; (8001588 <main+0x658>)
 800135a:	edd3 7a00 	vldr	s15, [r3]
 800135e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001362:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001366:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800136a:	ee17 2a90 	vmov	r2, s15
 800136e:	4b87      	ldr	r3, [pc, #540]	; (800158c <main+0x65c>)
 8001370:	601a      	str	r2, [r3, #0]
						      		            	sprintf(TxDataBuffer," F_sawtooth is [%d.%d] Hz \r\n" ,t/10,t%10);
 8001372:	4b86      	ldr	r3, [pc, #536]	; (800158c <main+0x65c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a86      	ldr	r2, [pc, #536]	; (8001590 <main+0x660>)
 8001378:	fb82 1203 	smull	r1, r2, r2, r3
 800137c:	1092      	asrs	r2, r2, #2
 800137e:	17db      	asrs	r3, r3, #31
 8001380:	1ad0      	subs	r0, r2, r3
 8001382:	4b82      	ldr	r3, [pc, #520]	; (800158c <main+0x65c>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	4b82      	ldr	r3, [pc, #520]	; (8001590 <main+0x660>)
 8001388:	fb83 1302 	smull	r1, r3, r3, r2
 800138c:	1099      	asrs	r1, r3, #2
 800138e:	17d3      	asrs	r3, r2, #31
 8001390:	1ac9      	subs	r1, r1, r3
 8001392:	460b      	mov	r3, r1
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	440b      	add	r3, r1
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	1ad1      	subs	r1, r2, r3
 800139c:	460b      	mov	r3, r1
 800139e:	4602      	mov	r2, r0
 80013a0:	497c      	ldr	r1, [pc, #496]	; (8001594 <main+0x664>)
 80013a2:	4874      	ldr	r0, [pc, #464]	; (8001574 <main+0x644>)
 80013a4:	f006 fe5e 	bl	8008064 <siprintf>
						      		            	 HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80013a8:	4872      	ldr	r0, [pc, #456]	; (8001574 <main+0x644>)
 80013aa:	f7fe ff19 	bl	80001e0 <strlen>
 80013ae:	4603      	mov	r3, r0
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b6:	496f      	ldr	r1, [pc, #444]	; (8001574 <main+0x644>)
 80013b8:	4870      	ldr	r0, [pc, #448]	; (800157c <main+0x64c>)
 80013ba:	f005 ff20 	bl	80071fe <HAL_UART_Transmit>
 80013be:	e014      	b.n	80013ea <main+0x4ba>
						      		             }
						      		             else
						      		             {
						      		            	sprintf(TxDataBuffer," the highest frequency \r\n" );
 80013c0:	4a6c      	ldr	r2, [pc, #432]	; (8001574 <main+0x644>)
 80013c2:	4b75      	ldr	r3, [pc, #468]	; (8001598 <main+0x668>)
 80013c4:	4614      	mov	r4, r2
 80013c6:	461d      	mov	r5, r3
 80013c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013d0:	c403      	stmia	r4!, {r0, r1}
 80013d2:	8022      	strh	r2, [r4, #0]
						      		            	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80013d4:	4867      	ldr	r0, [pc, #412]	; (8001574 <main+0x644>)
 80013d6:	f7fe ff03 	bl	80001e0 <strlen>
 80013da:	4603      	mov	r3, r0
 80013dc:	b29a      	uxth	r2, r3
 80013de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e2:	4964      	ldr	r1, [pc, #400]	; (8001574 <main+0x644>)
 80013e4:	4865      	ldr	r0, [pc, #404]	; (800157c <main+0x64c>)
 80013e6:	f005 ff0a 	bl	80071fe <HAL_UART_Transmit>
						      		             }


						      		           STATE_Display = StateDisplay_MenuSawtooth_Print ;
 80013ea:	4b66      	ldr	r3, [pc, #408]	; (8001584 <main+0x654>)
 80013ec:	2214      	movs	r2, #20
 80013ee:	701a      	strb	r2, [r3, #0]
						      		             break;
 80013f0:	f000 bc25 	b.w	8001c3e <main+0xd0e>
						      		           case 's': //  ลดความถี่
						      		        	   a=1;
 80013f4:	4b5e      	ldr	r3, [pc, #376]	; (8001570 <main+0x640>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	601a      	str	r2, [r3, #0]
						      		        	   if(F_sawtooth- 0.1 >0){
 80013fa:	4b63      	ldr	r3, [pc, #396]	; (8001588 <main+0x658>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f8aa 	bl	8000558 <__aeabi_f2d>
 8001404:	a358      	add	r3, pc, #352	; (adr r3, 8001568 <main+0x638>)
 8001406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140a:	f7fe ff45 	bl	8000298 <__aeabi_dsub>
 800140e:	4603      	mov	r3, r0
 8001410:	460c      	mov	r4, r1
 8001412:	4618      	mov	r0, r3
 8001414:	4621      	mov	r1, r4
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	f04f 0300 	mov.w	r3, #0
 800141e:	f7ff fb83 	bl	8000b28 <__aeabi_dcmpgt>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d046      	beq.n	80014b6 <main+0x586>
						      		        	 F_sawtooth=F_sawtooth-0.1;
 8001428:	4b57      	ldr	r3, [pc, #348]	; (8001588 <main+0x658>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff f893 	bl	8000558 <__aeabi_f2d>
 8001432:	a34d      	add	r3, pc, #308	; (adr r3, 8001568 <main+0x638>)
 8001434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001438:	f7fe ff2e 	bl	8000298 <__aeabi_dsub>
 800143c:	4603      	mov	r3, r0
 800143e:	460c      	mov	r4, r1
 8001440:	4618      	mov	r0, r3
 8001442:	4621      	mov	r1, r4
 8001444:	f7ff fba2 	bl	8000b8c <__aeabi_d2f>
 8001448:	4602      	mov	r2, r0
 800144a:	4b4f      	ldr	r3, [pc, #316]	; (8001588 <main+0x658>)
 800144c:	601a      	str	r2, [r3, #0]
						      		        	t=F_sawtooth*10;
 800144e:	4b4e      	ldr	r3, [pc, #312]	; (8001588 <main+0x658>)
 8001450:	edd3 7a00 	vldr	s15, [r3]
 8001454:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001458:	ee67 7a87 	vmul.f32	s15, s15, s14
 800145c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001460:	ee17 2a90 	vmov	r2, s15
 8001464:	4b49      	ldr	r3, [pc, #292]	; (800158c <main+0x65c>)
 8001466:	601a      	str	r2, [r3, #0]
						      		        	sprintf(TxDataBuffer,"  F_sawtooth [%d.%d] Hz \r\n" ,t/10,t%10);
 8001468:	4b48      	ldr	r3, [pc, #288]	; (800158c <main+0x65c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a48      	ldr	r2, [pc, #288]	; (8001590 <main+0x660>)
 800146e:	fb82 1203 	smull	r1, r2, r2, r3
 8001472:	1092      	asrs	r2, r2, #2
 8001474:	17db      	asrs	r3, r3, #31
 8001476:	1ad0      	subs	r0, r2, r3
 8001478:	4b44      	ldr	r3, [pc, #272]	; (800158c <main+0x65c>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b44      	ldr	r3, [pc, #272]	; (8001590 <main+0x660>)
 800147e:	fb83 1302 	smull	r1, r3, r3, r2
 8001482:	1099      	asrs	r1, r3, #2
 8001484:	17d3      	asrs	r3, r2, #31
 8001486:	1ac9      	subs	r1, r1, r3
 8001488:	460b      	mov	r3, r1
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	1ad1      	subs	r1, r2, r3
 8001492:	460b      	mov	r3, r1
 8001494:	4602      	mov	r2, r0
 8001496:	4941      	ldr	r1, [pc, #260]	; (800159c <main+0x66c>)
 8001498:	4836      	ldr	r0, [pc, #216]	; (8001574 <main+0x644>)
 800149a:	f006 fde3 	bl	8008064 <siprintf>
						      		        	 HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800149e:	4835      	ldr	r0, [pc, #212]	; (8001574 <main+0x644>)
 80014a0:	f7fe fe9e 	bl	80001e0 <strlen>
 80014a4:	4603      	mov	r3, r0
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ac:	4931      	ldr	r1, [pc, #196]	; (8001574 <main+0x644>)
 80014ae:	4833      	ldr	r0, [pc, #204]	; (800157c <main+0x64c>)
 80014b0:	f005 fea5 	bl	80071fe <HAL_UART_Transmit>
 80014b4:	e02f      	b.n	8001516 <main+0x5e6>
						      		        	   }
						      		        	 else if(F_sawtooth- 0.1 <=0)
 80014b6:	4b34      	ldr	r3, [pc, #208]	; (8001588 <main+0x658>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff f84c 	bl	8000558 <__aeabi_f2d>
 80014c0:	a329      	add	r3, pc, #164	; (adr r3, 8001568 <main+0x638>)
 80014c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c6:	f7fe fee7 	bl	8000298 <__aeabi_dsub>
 80014ca:	4603      	mov	r3, r0
 80014cc:	460c      	mov	r4, r1
 80014ce:	4618      	mov	r0, r3
 80014d0:	4621      	mov	r1, r4
 80014d2:	f04f 0200 	mov.w	r2, #0
 80014d6:	f04f 0300 	mov.w	r3, #0
 80014da:	f7ff fb11 	bl	8000b00 <__aeabi_dcmple>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d018      	beq.n	8001516 <main+0x5e6>
						      		            {
						      		        	F_sawtooth=0;
 80014e4:	4b28      	ldr	r3, [pc, #160]	; (8001588 <main+0x658>)
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
						      		        	sprintf(TxDataBuffer," the Lower frequency \r\n" );
 80014ec:	4a21      	ldr	r2, [pc, #132]	; (8001574 <main+0x644>)
 80014ee:	4b2c      	ldr	r3, [pc, #176]	; (80015a0 <main+0x670>)
 80014f0:	4614      	mov	r4, r2
 80014f2:	461d      	mov	r5, r3
 80014f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014f8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80014fc:	e884 0003 	stmia.w	r4, {r0, r1}
						      		        	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001500:	481c      	ldr	r0, [pc, #112]	; (8001574 <main+0x644>)
 8001502:	f7fe fe6d 	bl	80001e0 <strlen>
 8001506:	4603      	mov	r3, r0
 8001508:	b29a      	uxth	r2, r3
 800150a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150e:	4919      	ldr	r1, [pc, #100]	; (8001574 <main+0x644>)
 8001510:	481a      	ldr	r0, [pc, #104]	; (800157c <main+0x64c>)
 8001512:	f005 fe74 	bl	80071fe <HAL_UART_Transmit>

						      		            }

						      		           STATE_Display = StateDisplay_MenuSawtooth_Print;
 8001516:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <main+0x654>)
 8001518:	2214      	movs	r2, #20
 800151a:	701a      	strb	r2, [r3, #0]

						      		           break;
 800151c:	e38f      	b.n	8001c3e <main+0xd0e>

						      		           case 'x': // back to main manu
						      		        	   a=0;
 800151e:	4b14      	ldr	r3, [pc, #80]	; (8001570 <main+0x640>)
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
						      		           STATE_Display = StateDisplay_MenuRoot_Print;
 8001524:	4b17      	ldr	r3, [pc, #92]	; (8001584 <main+0x654>)
 8001526:	220a      	movs	r2, #10
 8001528:	701a      	strb	r2, [r3, #0]
						      		           break;
 800152a:	e388      	b.n	8001c3e <main+0xd0e>
						      		         case 'f': // reverse
						      		        	if(Status_sawtooth == 1)
 800152c:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <main+0x674>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d13b      	bne.n	80015ac <main+0x67c>
						      		        	{
						      		        		Status_sawtooth = 0;
 8001534:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <main+0x674>)
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
						      		        		 sprintf(TxDataBuffer, "Positive Ramp \r\n");
 800153a:	4a0e      	ldr	r2, [pc, #56]	; (8001574 <main+0x644>)
 800153c:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <main+0x678>)
 800153e:	4614      	mov	r4, r2
 8001540:	461d      	mov	r5, r3
 8001542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001546:	682b      	ldr	r3, [r5, #0]
 8001548:	7023      	strb	r3, [r4, #0]
						      		        		 HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800154a:	480a      	ldr	r0, [pc, #40]	; (8001574 <main+0x644>)
 800154c:	f7fe fe48 	bl	80001e0 <strlen>
 8001550:	4603      	mov	r3, r0
 8001552:	b29a      	uxth	r2, r3
 8001554:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001558:	4906      	ldr	r1, [pc, #24]	; (8001574 <main+0x644>)
 800155a:	4808      	ldr	r0, [pc, #32]	; (800157c <main+0x64c>)
 800155c:	f005 fe4f 	bl	80071fe <HAL_UART_Transmit>
 8001560:	e03e      	b.n	80015e0 <main+0x6b0>
 8001562:	bf00      	nop
 8001564:	f3af 8000 	nop.w
 8001568:	9999999a 	.word	0x9999999a
 800156c:	3fb99999 	.word	0x3fb99999
 8001570:	200001ac 	.word	0x200001ac
 8001574:	200000a4 	.word	0x200000a4
 8001578:	080099c4 	.word	0x080099c4
 800157c:	200003a0 	.word	0x200003a0
 8001580:	080099d4 	.word	0x080099d4
 8001584:	200001a4 	.word	0x200001a4
 8001588:	200001d8 	.word	0x200001d8
 800158c:	200001b4 	.word	0x200001b4
 8001590:	66666667 	.word	0x66666667
 8001594:	080099e4 	.word	0x080099e4
 8001598:	08009a04 	.word	0x08009a04
 800159c:	08009a20 	.word	0x08009a20
 80015a0:	08009a3c 	.word	0x08009a3c
 80015a4:	200001dc 	.word	0x200001dc
 80015a8:	08009a54 	.word	0x08009a54
						      		        	}
						      		        	else if(Status_sawtooth == 0)
 80015ac:	4b9c      	ldr	r3, [pc, #624]	; (8001820 <main+0x8f0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d115      	bne.n	80015e0 <main+0x6b0>
						      		        		{
						      		        		Status_sawtooth = 1;
 80015b4:	4b9a      	ldr	r3, [pc, #616]	; (8001820 <main+0x8f0>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	601a      	str	r2, [r3, #0]
						      		        		sprintf(TxDataBuffer, "Negative Ramp \r\n");
 80015ba:	4a9a      	ldr	r2, [pc, #616]	; (8001824 <main+0x8f4>)
 80015bc:	4b9a      	ldr	r3, [pc, #616]	; (8001828 <main+0x8f8>)
 80015be:	4614      	mov	r4, r2
 80015c0:	461d      	mov	r5, r3
 80015c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015c6:	682b      	ldr	r3, [r5, #0]
 80015c8:	7023      	strb	r3, [r4, #0]
						      		        	 HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80015ca:	4896      	ldr	r0, [pc, #600]	; (8001824 <main+0x8f4>)
 80015cc:	f7fe fe08 	bl	80001e0 <strlen>
 80015d0:	4603      	mov	r3, r0
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d8:	4992      	ldr	r1, [pc, #584]	; (8001824 <main+0x8f4>)
 80015da:	4894      	ldr	r0, [pc, #592]	; (800182c <main+0x8fc>)
 80015dc:	f005 fe0f 	bl	80071fe <HAL_UART_Transmit>
						      		        		}

						      		         	 STATE_Display =StateDisplay_MenuSawtooth_Print;
 80015e0:	4b93      	ldr	r3, [pc, #588]	; (8001830 <main+0x900>)
 80015e2:	2214      	movs	r2, #20
 80015e4:	701a      	strb	r2, [r3, #0]
						      		         	 break;
 80015e6:	e32a      	b.n	8001c3e <main+0xd0e>
						      		         case 'g':// +V High
						      		        	if(VoltHigh_sawtooth +0.1 <3.3){
 80015e8:	4b92      	ldr	r3, [pc, #584]	; (8001834 <main+0x904>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe ffb3 	bl	8000558 <__aeabi_f2d>
 80015f2:	a387      	add	r3, pc, #540	; (adr r3, 8001810 <main+0x8e0>)
 80015f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f8:	f7fe fe50 	bl	800029c <__adddf3>
 80015fc:	4603      	mov	r3, r0
 80015fe:	460c      	mov	r4, r1
 8001600:	4618      	mov	r0, r3
 8001602:	4621      	mov	r1, r4
 8001604:	a384      	add	r3, pc, #528	; (adr r3, 8001818 <main+0x8e8>)
 8001606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160a:	f7ff fa6f 	bl	8000aec <__aeabi_dcmplt>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d046      	beq.n	80016a2 <main+0x772>
						      		        	VoltHigh_sawtooth =VoltHigh_sawtooth +0.1;
 8001614:	4b87      	ldr	r3, [pc, #540]	; (8001834 <main+0x904>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f7fe ff9d 	bl	8000558 <__aeabi_f2d>
 800161e:	a37c      	add	r3, pc, #496	; (adr r3, 8001810 <main+0x8e0>)
 8001620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001624:	f7fe fe3a 	bl	800029c <__adddf3>
 8001628:	4603      	mov	r3, r0
 800162a:	460c      	mov	r4, r1
 800162c:	4618      	mov	r0, r3
 800162e:	4621      	mov	r1, r4
 8001630:	f7ff faac 	bl	8000b8c <__aeabi_d2f>
 8001634:	4602      	mov	r2, r0
 8001636:	4b7f      	ldr	r3, [pc, #508]	; (8001834 <main+0x904>)
 8001638:	601a      	str	r2, [r3, #0]
						      		        	t=VoltHigh_sawtooth*10;
 800163a:	4b7e      	ldr	r3, [pc, #504]	; (8001834 <main+0x904>)
 800163c:	edd3 7a00 	vldr	s15, [r3]
 8001640:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001644:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001648:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800164c:	ee17 2a90 	vmov	r2, s15
 8001650:	4b79      	ldr	r3, [pc, #484]	; (8001838 <main+0x908>)
 8001652:	601a      	str	r2, [r3, #0]
						      		        	sprintf(TxDataBuffer,"  VoltHigh_sawtooth is [%d.%d] V \r\n" ,t/10,t%10);
 8001654:	4b78      	ldr	r3, [pc, #480]	; (8001838 <main+0x908>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a78      	ldr	r2, [pc, #480]	; (800183c <main+0x90c>)
 800165a:	fb82 1203 	smull	r1, r2, r2, r3
 800165e:	1092      	asrs	r2, r2, #2
 8001660:	17db      	asrs	r3, r3, #31
 8001662:	1ad0      	subs	r0, r2, r3
 8001664:	4b74      	ldr	r3, [pc, #464]	; (8001838 <main+0x908>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b74      	ldr	r3, [pc, #464]	; (800183c <main+0x90c>)
 800166a:	fb83 1302 	smull	r1, r3, r3, r2
 800166e:	1099      	asrs	r1, r3, #2
 8001670:	17d3      	asrs	r3, r2, #31
 8001672:	1ac9      	subs	r1, r1, r3
 8001674:	460b      	mov	r3, r1
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	1ad1      	subs	r1, r2, r3
 800167e:	460b      	mov	r3, r1
 8001680:	4602      	mov	r2, r0
 8001682:	496f      	ldr	r1, [pc, #444]	; (8001840 <main+0x910>)
 8001684:	4867      	ldr	r0, [pc, #412]	; (8001824 <main+0x8f4>)
 8001686:	f006 fced 	bl	8008064 <siprintf>
						      		        	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800168a:	4866      	ldr	r0, [pc, #408]	; (8001824 <main+0x8f4>)
 800168c:	f7fe fda8 	bl	80001e0 <strlen>
 8001690:	4603      	mov	r3, r0
 8001692:	b29a      	uxth	r2, r3
 8001694:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001698:	4962      	ldr	r1, [pc, #392]	; (8001824 <main+0x8f4>)
 800169a:	4864      	ldr	r0, [pc, #400]	; (800182c <main+0x8fc>)
 800169c:	f005 fdaf 	bl	80071fe <HAL_UART_Transmit>

						      		        		sprintf(TxDataBuffer,"  VoltHigh_sawtoothis 3.3 V \r\n" ,t/10,t%10);
						      		        		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);

						      		        	}
						      		        	break;
 80016a0:	e2cd      	b.n	8001c3e <main+0xd0e>
						      		        		VoltHigh_sawtooth =3.3;
 80016a2:	4b64      	ldr	r3, [pc, #400]	; (8001834 <main+0x904>)
 80016a4:	4a67      	ldr	r2, [pc, #412]	; (8001844 <main+0x914>)
 80016a6:	601a      	str	r2, [r3, #0]
						      		        		 sprintf(TxDataBuffer,"highest VoltHigh_sawtooth\r\n");
 80016a8:	4a5e      	ldr	r2, [pc, #376]	; (8001824 <main+0x8f4>)
 80016aa:	4b67      	ldr	r3, [pc, #412]	; (8001848 <main+0x918>)
 80016ac:	4614      	mov	r4, r2
 80016ae:	461d      	mov	r5, r3
 80016b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
						      		        		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80016bc:	4859      	ldr	r0, [pc, #356]	; (8001824 <main+0x8f4>)
 80016be:	f7fe fd8f 	bl	80001e0 <strlen>
 80016c2:	4603      	mov	r3, r0
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ca:	4956      	ldr	r1, [pc, #344]	; (8001824 <main+0x8f4>)
 80016cc:	4857      	ldr	r0, [pc, #348]	; (800182c <main+0x8fc>)
 80016ce:	f005 fd96 	bl	80071fe <HAL_UART_Transmit>
						      		        		sprintf(TxDataBuffer,"  VoltHigh_sawtoothis 3.3 V \r\n" ,t/10,t%10);
 80016d2:	4b59      	ldr	r3, [pc, #356]	; (8001838 <main+0x908>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a59      	ldr	r2, [pc, #356]	; (800183c <main+0x90c>)
 80016d8:	fb82 1203 	smull	r1, r2, r2, r3
 80016dc:	1092      	asrs	r2, r2, #2
 80016de:	17db      	asrs	r3, r3, #31
 80016e0:	1ad0      	subs	r0, r2, r3
 80016e2:	4b55      	ldr	r3, [pc, #340]	; (8001838 <main+0x908>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	4b55      	ldr	r3, [pc, #340]	; (800183c <main+0x90c>)
 80016e8:	fb83 1302 	smull	r1, r3, r3, r2
 80016ec:	1099      	asrs	r1, r3, #2
 80016ee:	17d3      	asrs	r3, r2, #31
 80016f0:	1ac9      	subs	r1, r1, r3
 80016f2:	460b      	mov	r3, r1
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	440b      	add	r3, r1
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	1ad1      	subs	r1, r2, r3
 80016fc:	460b      	mov	r3, r1
 80016fe:	4602      	mov	r2, r0
 8001700:	4952      	ldr	r1, [pc, #328]	; (800184c <main+0x91c>)
 8001702:	4848      	ldr	r0, [pc, #288]	; (8001824 <main+0x8f4>)
 8001704:	f006 fcae 	bl	8008064 <siprintf>
						      		        		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001708:	4846      	ldr	r0, [pc, #280]	; (8001824 <main+0x8f4>)
 800170a:	f7fe fd69 	bl	80001e0 <strlen>
 800170e:	4603      	mov	r3, r0
 8001710:	b29a      	uxth	r2, r3
 8001712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001716:	4943      	ldr	r1, [pc, #268]	; (8001824 <main+0x8f4>)
 8001718:	4844      	ldr	r0, [pc, #272]	; (800182c <main+0x8fc>)
 800171a:	f005 fd70 	bl	80071fe <HAL_UART_Transmit>
						      		        	break;
 800171e:	e28e      	b.n	8001c3e <main+0xd0e>
						      		       case 'h':// -V High
						      		    	   if(VoltHigh_sawtooth-0.1>0){
 8001720:	4b44      	ldr	r3, [pc, #272]	; (8001834 <main+0x904>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f7fe ff17 	bl	8000558 <__aeabi_f2d>
 800172a:	a339      	add	r3, pc, #228	; (adr r3, 8001810 <main+0x8e0>)
 800172c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001730:	f7fe fdb2 	bl	8000298 <__aeabi_dsub>
 8001734:	4603      	mov	r3, r0
 8001736:	460c      	mov	r4, r1
 8001738:	4618      	mov	r0, r3
 800173a:	4621      	mov	r1, r4
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	f7ff f9f0 	bl	8000b28 <__aeabi_dcmpgt>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d046      	beq.n	80017dc <main+0x8ac>
						      		       	VoltHigh_sawtooth =VoltHigh_sawtooth -0.1;
 800174e:	4b39      	ldr	r3, [pc, #228]	; (8001834 <main+0x904>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe ff00 	bl	8000558 <__aeabi_f2d>
 8001758:	a32d      	add	r3, pc, #180	; (adr r3, 8001810 <main+0x8e0>)
 800175a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175e:	f7fe fd9b 	bl	8000298 <__aeabi_dsub>
 8001762:	4603      	mov	r3, r0
 8001764:	460c      	mov	r4, r1
 8001766:	4618      	mov	r0, r3
 8001768:	4621      	mov	r1, r4
 800176a:	f7ff fa0f 	bl	8000b8c <__aeabi_d2f>
 800176e:	4602      	mov	r2, r0
 8001770:	4b30      	ldr	r3, [pc, #192]	; (8001834 <main+0x904>)
 8001772:	601a      	str	r2, [r3, #0]
						      		      t=VoltHigh_sawtooth*10;
 8001774:	4b2f      	ldr	r3, [pc, #188]	; (8001834 <main+0x904>)
 8001776:	edd3 7a00 	vldr	s15, [r3]
 800177a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800177e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001782:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001786:	ee17 2a90 	vmov	r2, s15
 800178a:	4b2b      	ldr	r3, [pc, #172]	; (8001838 <main+0x908>)
 800178c:	601a      	str	r2, [r3, #0]
						      		      	sprintf(TxDataBuffer,"  VoltHigh_sawtoothis [%d.%d] V\r\n" ,t/10,t%10);
 800178e:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <main+0x908>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a2a      	ldr	r2, [pc, #168]	; (800183c <main+0x90c>)
 8001794:	fb82 1203 	smull	r1, r2, r2, r3
 8001798:	1092      	asrs	r2, r2, #2
 800179a:	17db      	asrs	r3, r3, #31
 800179c:	1ad0      	subs	r0, r2, r3
 800179e:	4b26      	ldr	r3, [pc, #152]	; (8001838 <main+0x908>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	4b26      	ldr	r3, [pc, #152]	; (800183c <main+0x90c>)
 80017a4:	fb83 1302 	smull	r1, r3, r3, r2
 80017a8:	1099      	asrs	r1, r3, #2
 80017aa:	17d3      	asrs	r3, r2, #31
 80017ac:	1ac9      	subs	r1, r1, r3
 80017ae:	460b      	mov	r3, r1
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	440b      	add	r3, r1
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	1ad1      	subs	r1, r2, r3
 80017b8:	460b      	mov	r3, r1
 80017ba:	4602      	mov	r2, r0
 80017bc:	4924      	ldr	r1, [pc, #144]	; (8001850 <main+0x920>)
 80017be:	4819      	ldr	r0, [pc, #100]	; (8001824 <main+0x8f4>)
 80017c0:	f006 fc50 	bl	8008064 <siprintf>
						      		      	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80017c4:	4817      	ldr	r0, [pc, #92]	; (8001824 <main+0x8f4>)
 80017c6:	f7fe fd0b 	bl	80001e0 <strlen>
 80017ca:	4603      	mov	r3, r0
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d2:	4914      	ldr	r1, [pc, #80]	; (8001824 <main+0x8f4>)
 80017d4:	4815      	ldr	r0, [pc, #84]	; (800182c <main+0x8fc>)
 80017d6:	f005 fd12 	bl	80071fe <HAL_UART_Transmit>
					      		        		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
					      		        		 t=VoltHigh_sawtooth*10;
					      		        		 sprintf(TxDataBuffer,"  VoltHigh_sawtoothis 0 V \r\n" ,t/10,t%10);
					      		        			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
						      		       	}
						      		      break;
 80017da:	e230      	b.n	8001c3e <main+0xd0e>
						      		    	   }else if (VoltHigh_sawtooth-0.1 <=0)
 80017dc:	4b15      	ldr	r3, [pc, #84]	; (8001834 <main+0x904>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7fe feb9 	bl	8000558 <__aeabi_f2d>
 80017e6:	a30a      	add	r3, pc, #40	; (adr r3, 8001810 <main+0x8e0>)
 80017e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ec:	f7fe fd54 	bl	8000298 <__aeabi_dsub>
 80017f0:	4603      	mov	r3, r0
 80017f2:	460c      	mov	r4, r1
 80017f4:	4618      	mov	r0, r3
 80017f6:	4621      	mov	r1, r4
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	f04f 0300 	mov.w	r3, #0
 8001800:	f7ff f97e 	bl	8000b00 <__aeabi_dcmple>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d124      	bne.n	8001854 <main+0x924>
						      		      break;
 800180a:	e218      	b.n	8001c3e <main+0xd0e>
 800180c:	f3af 8000 	nop.w
 8001810:	9999999a 	.word	0x9999999a
 8001814:	3fb99999 	.word	0x3fb99999
 8001818:	66666666 	.word	0x66666666
 800181c:	400a6666 	.word	0x400a6666
 8001820:	200001dc 	.word	0x200001dc
 8001824:	200000a4 	.word	0x200000a4
 8001828:	08009a68 	.word	0x08009a68
 800182c:	200003a0 	.word	0x200003a0
 8001830:	200001a4 	.word	0x200001a4
 8001834:	20000004 	.word	0x20000004
 8001838:	200001b4 	.word	0x200001b4
 800183c:	66666667 	.word	0x66666667
 8001840:	08009a7c 	.word	0x08009a7c
 8001844:	40533333 	.word	0x40533333
 8001848:	08009aa0 	.word	0x08009aa0
 800184c:	08009abc 	.word	0x08009abc
 8001850:	08009adc 	.word	0x08009adc
						      		       		VoltHigh_sawtooth =0;
 8001854:	4bbe      	ldr	r3, [pc, #760]	; (8001b50 <main+0xc20>)
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
					      		        		 sprintf(TxDataBuffer,"lower VoltHigh_sawtooth\r\n");
 800185c:	4abd      	ldr	r2, [pc, #756]	; (8001b54 <main+0xc24>)
 800185e:	4bbe      	ldr	r3, [pc, #760]	; (8001b58 <main+0xc28>)
 8001860:	4614      	mov	r4, r2
 8001862:	461d      	mov	r5, r3
 8001864:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001868:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800186c:	c403      	stmia	r4!, {r0, r1}
 800186e:	8022      	strh	r2, [r4, #0]
					      		        		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001870:	48b8      	ldr	r0, [pc, #736]	; (8001b54 <main+0xc24>)
 8001872:	f7fe fcb5 	bl	80001e0 <strlen>
 8001876:	4603      	mov	r3, r0
 8001878:	b29a      	uxth	r2, r3
 800187a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800187e:	49b5      	ldr	r1, [pc, #724]	; (8001b54 <main+0xc24>)
 8001880:	48b6      	ldr	r0, [pc, #728]	; (8001b5c <main+0xc2c>)
 8001882:	f005 fcbc 	bl	80071fe <HAL_UART_Transmit>
					      		        		 t=VoltHigh_sawtooth*10;
 8001886:	4bb2      	ldr	r3, [pc, #712]	; (8001b50 <main+0xc20>)
 8001888:	edd3 7a00 	vldr	s15, [r3]
 800188c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001890:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001894:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001898:	ee17 2a90 	vmov	r2, s15
 800189c:	4bb0      	ldr	r3, [pc, #704]	; (8001b60 <main+0xc30>)
 800189e:	601a      	str	r2, [r3, #0]
					      		        		 sprintf(TxDataBuffer,"  VoltHigh_sawtoothis 0 V \r\n" ,t/10,t%10);
 80018a0:	4baf      	ldr	r3, [pc, #700]	; (8001b60 <main+0xc30>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4aaf      	ldr	r2, [pc, #700]	; (8001b64 <main+0xc34>)
 80018a6:	fb82 1203 	smull	r1, r2, r2, r3
 80018aa:	1092      	asrs	r2, r2, #2
 80018ac:	17db      	asrs	r3, r3, #31
 80018ae:	1ad0      	subs	r0, r2, r3
 80018b0:	4bab      	ldr	r3, [pc, #684]	; (8001b60 <main+0xc30>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4bab      	ldr	r3, [pc, #684]	; (8001b64 <main+0xc34>)
 80018b6:	fb83 1302 	smull	r1, r3, r3, r2
 80018ba:	1099      	asrs	r1, r3, #2
 80018bc:	17d3      	asrs	r3, r2, #31
 80018be:	1ac9      	subs	r1, r1, r3
 80018c0:	460b      	mov	r3, r1
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	1ad1      	subs	r1, r2, r3
 80018ca:	460b      	mov	r3, r1
 80018cc:	4602      	mov	r2, r0
 80018ce:	49a6      	ldr	r1, [pc, #664]	; (8001b68 <main+0xc38>)
 80018d0:	48a0      	ldr	r0, [pc, #640]	; (8001b54 <main+0xc24>)
 80018d2:	f006 fbc7 	bl	8008064 <siprintf>
					      		        			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80018d6:	489f      	ldr	r0, [pc, #636]	; (8001b54 <main+0xc24>)
 80018d8:	f7fe fc82 	bl	80001e0 <strlen>
 80018dc:	4603      	mov	r3, r0
 80018de:	b29a      	uxth	r2, r3
 80018e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e4:	499b      	ldr	r1, [pc, #620]	; (8001b54 <main+0xc24>)
 80018e6:	489d      	ldr	r0, [pc, #628]	; (8001b5c <main+0xc2c>)
 80018e8:	f005 fc89 	bl	80071fe <HAL_UART_Transmit>
						      		      break;
 80018ec:	e1a7      	b.n	8001c3e <main+0xd0e>
						      		     case 'j':// +V Low
						      		    	 if(VoltLow_sawtooth +0.1 <3.3){
 80018ee:	4b9f      	ldr	r3, [pc, #636]	; (8001b6c <main+0xc3c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fe30 	bl	8000558 <__aeabi_f2d>
 80018f8:	a391      	add	r3, pc, #580	; (adr r3, 8001b40 <main+0xc10>)
 80018fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fe:	f7fe fccd 	bl	800029c <__adddf3>
 8001902:	4603      	mov	r3, r0
 8001904:	460c      	mov	r4, r1
 8001906:	4618      	mov	r0, r3
 8001908:	4621      	mov	r1, r4
 800190a:	a38f      	add	r3, pc, #572	; (adr r3, 8001b48 <main+0xc18>)
 800190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001910:	f7ff f8ec 	bl	8000aec <__aeabi_dcmplt>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d046      	beq.n	80019a8 <main+0xa78>
						      		     VoltLow_sawtooth =VoltLow_sawtooth +0.1;
 800191a:	4b94      	ldr	r3, [pc, #592]	; (8001b6c <main+0xc3c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fe1a 	bl	8000558 <__aeabi_f2d>
 8001924:	a386      	add	r3, pc, #536	; (adr r3, 8001b40 <main+0xc10>)
 8001926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192a:	f7fe fcb7 	bl	800029c <__adddf3>
 800192e:	4603      	mov	r3, r0
 8001930:	460c      	mov	r4, r1
 8001932:	4618      	mov	r0, r3
 8001934:	4621      	mov	r1, r4
 8001936:	f7ff f929 	bl	8000b8c <__aeabi_d2f>
 800193a:	4602      	mov	r2, r0
 800193c:	4b8b      	ldr	r3, [pc, #556]	; (8001b6c <main+0xc3c>)
 800193e:	601a      	str	r2, [r3, #0]
						      		   t=VoltLow_sawtooth*10;
 8001940:	4b8a      	ldr	r3, [pc, #552]	; (8001b6c <main+0xc3c>)
 8001942:	edd3 7a00 	vldr	s15, [r3]
 8001946:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800194a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800194e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001952:	ee17 2a90 	vmov	r2, s15
 8001956:	4b82      	ldr	r3, [pc, #520]	; (8001b60 <main+0xc30>)
 8001958:	601a      	str	r2, [r3, #0]
						      		  	sprintf(TxDataBuffer,"  VoltLow_sawtooth is [%d.%d] V \r\n" ,t/10,t%10);
 800195a:	4b81      	ldr	r3, [pc, #516]	; (8001b60 <main+0xc30>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a81      	ldr	r2, [pc, #516]	; (8001b64 <main+0xc34>)
 8001960:	fb82 1203 	smull	r1, r2, r2, r3
 8001964:	1092      	asrs	r2, r2, #2
 8001966:	17db      	asrs	r3, r3, #31
 8001968:	1ad0      	subs	r0, r2, r3
 800196a:	4b7d      	ldr	r3, [pc, #500]	; (8001b60 <main+0xc30>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	4b7d      	ldr	r3, [pc, #500]	; (8001b64 <main+0xc34>)
 8001970:	fb83 1302 	smull	r1, r3, r3, r2
 8001974:	1099      	asrs	r1, r3, #2
 8001976:	17d3      	asrs	r3, r2, #31
 8001978:	1ac9      	subs	r1, r1, r3
 800197a:	460b      	mov	r3, r1
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	440b      	add	r3, r1
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	1ad1      	subs	r1, r2, r3
 8001984:	460b      	mov	r3, r1
 8001986:	4602      	mov	r2, r0
 8001988:	4979      	ldr	r1, [pc, #484]	; (8001b70 <main+0xc40>)
 800198a:	4872      	ldr	r0, [pc, #456]	; (8001b54 <main+0xc24>)
 800198c:	f006 fb6a 	bl	8008064 <siprintf>
						      		   	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001990:	4870      	ldr	r0, [pc, #448]	; (8001b54 <main+0xc24>)
 8001992:	f7fe fc25 	bl	80001e0 <strlen>
 8001996:	4603      	mov	r3, r0
 8001998:	b29a      	uxth	r2, r3
 800199a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800199e:	496d      	ldr	r1, [pc, #436]	; (8001b54 <main+0xc24>)
 80019a0:	486e      	ldr	r0, [pc, #440]	; (8001b5c <main+0xc2c>)
 80019a2:	f005 fc2c 	bl	80071fe <HAL_UART_Transmit>
						      		    	sprintf(TxDataBuffer,"  VoltLow_sawtooth is 3.3 V \r\n" );
						      		    	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
						      		    	 sprintf(TxDataBuffer,"highest VoltLow_sawtooth");
						      		    	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
						      		     }
						      		   break;
 80019a6:	e14a      	b.n	8001c3e <main+0xd0e>
						      		   	else if (VoltLow_sawtooth +0.1 >=3.3)
 80019a8:	4b70      	ldr	r3, [pc, #448]	; (8001b6c <main+0xc3c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fdd3 	bl	8000558 <__aeabi_f2d>
 80019b2:	a363      	add	r3, pc, #396	; (adr r3, 8001b40 <main+0xc10>)
 80019b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b8:	f7fe fc70 	bl	800029c <__adddf3>
 80019bc:	4603      	mov	r3, r0
 80019be:	460c      	mov	r4, r1
 80019c0:	4618      	mov	r0, r3
 80019c2:	4621      	mov	r1, r4
 80019c4:	a360      	add	r3, pc, #384	; (adr r3, 8001b48 <main+0xc18>)
 80019c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ca:	f7ff f8a3 	bl	8000b14 <__aeabi_dcmpge>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d100      	bne.n	80019d6 <main+0xaa6>
						      		   break;
 80019d4:	e133      	b.n	8001c3e <main+0xd0e>
						      		    	VoltLow_sawtooth =3.3;
 80019d6:	4b65      	ldr	r3, [pc, #404]	; (8001b6c <main+0xc3c>)
 80019d8:	4a66      	ldr	r2, [pc, #408]	; (8001b74 <main+0xc44>)
 80019da:	601a      	str	r2, [r3, #0]
						      		    	t=VoltLow_sawtooth*10;
 80019dc:	4b63      	ldr	r3, [pc, #396]	; (8001b6c <main+0xc3c>)
 80019de:	edd3 7a00 	vldr	s15, [r3]
 80019e2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80019e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019ee:	ee17 2a90 	vmov	r2, s15
 80019f2:	4b5b      	ldr	r3, [pc, #364]	; (8001b60 <main+0xc30>)
 80019f4:	601a      	str	r2, [r3, #0]
						      		    	sprintf(TxDataBuffer,"  VoltLow_sawtooth is 3.3 V \r\n" );
 80019f6:	4a57      	ldr	r2, [pc, #348]	; (8001b54 <main+0xc24>)
 80019f8:	4b5f      	ldr	r3, [pc, #380]	; (8001b78 <main+0xc48>)
 80019fa:	4614      	mov	r4, r2
 80019fc:	461d      	mov	r5, r3
 80019fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a02:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001a06:	c407      	stmia	r4!, {r0, r1, r2}
 8001a08:	8023      	strh	r3, [r4, #0]
 8001a0a:	3402      	adds	r4, #2
 8001a0c:	0c1b      	lsrs	r3, r3, #16
 8001a0e:	7023      	strb	r3, [r4, #0]
						      		    	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001a10:	4850      	ldr	r0, [pc, #320]	; (8001b54 <main+0xc24>)
 8001a12:	f7fe fbe5 	bl	80001e0 <strlen>
 8001a16:	4603      	mov	r3, r0
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a1e:	494d      	ldr	r1, [pc, #308]	; (8001b54 <main+0xc24>)
 8001a20:	484e      	ldr	r0, [pc, #312]	; (8001b5c <main+0xc2c>)
 8001a22:	f005 fbec 	bl	80071fe <HAL_UART_Transmit>
						      		    	 sprintf(TxDataBuffer,"highest VoltLow_sawtooth");
 8001a26:	4a4b      	ldr	r2, [pc, #300]	; (8001b54 <main+0xc24>)
 8001a28:	4b54      	ldr	r3, [pc, #336]	; (8001b7c <main+0xc4c>)
 8001a2a:	4614      	mov	r4, r2
 8001a2c:	461d      	mov	r5, r3
 8001a2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a32:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a36:	c403      	stmia	r4!, {r0, r1}
 8001a38:	7022      	strb	r2, [r4, #0]
						      		    	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001a3a:	4846      	ldr	r0, [pc, #280]	; (8001b54 <main+0xc24>)
 8001a3c:	f7fe fbd0 	bl	80001e0 <strlen>
 8001a40:	4603      	mov	r3, r0
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a48:	4942      	ldr	r1, [pc, #264]	; (8001b54 <main+0xc24>)
 8001a4a:	4844      	ldr	r0, [pc, #272]	; (8001b5c <main+0xc2c>)
 8001a4c:	f005 fbd7 	bl	80071fe <HAL_UART_Transmit>
						      		   break;
 8001a50:	e0f5      	b.n	8001c3e <main+0xd0e>
						      		   case 'k':// -V Low
						      			   if(VoltLow_sawtooth -0.1 >0){
 8001a52:	4b46      	ldr	r3, [pc, #280]	; (8001b6c <main+0xc3c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fd7e 	bl	8000558 <__aeabi_f2d>
 8001a5c:	a338      	add	r3, pc, #224	; (adr r3, 8001b40 <main+0xc10>)
 8001a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a62:	f7fe fc19 	bl	8000298 <__aeabi_dsub>
 8001a66:	4603      	mov	r3, r0
 8001a68:	460c      	mov	r4, r1
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	4621      	mov	r1, r4
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	f7ff f857 	bl	8000b28 <__aeabi_dcmpgt>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d046      	beq.n	8001b0e <main+0xbde>
						      		  	 VoltLow_sawtooth =VoltLow_sawtooth -0.1;
 8001a80:	4b3a      	ldr	r3, [pc, #232]	; (8001b6c <main+0xc3c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7fe fd67 	bl	8000558 <__aeabi_f2d>
 8001a8a:	a32d      	add	r3, pc, #180	; (adr r3, 8001b40 <main+0xc10>)
 8001a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a90:	f7fe fc02 	bl	8000298 <__aeabi_dsub>
 8001a94:	4603      	mov	r3, r0
 8001a96:	460c      	mov	r4, r1
 8001a98:	4618      	mov	r0, r3
 8001a9a:	4621      	mov	r1, r4
 8001a9c:	f7ff f876 	bl	8000b8c <__aeabi_d2f>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	4b32      	ldr	r3, [pc, #200]	; (8001b6c <main+0xc3c>)
 8001aa4:	601a      	str	r2, [r3, #0]
						      		  	 t=VoltLow_sawtooth*10;
 8001aa6:	4b31      	ldr	r3, [pc, #196]	; (8001b6c <main+0xc3c>)
 8001aa8:	edd3 7a00 	vldr	s15, [r3]
 8001aac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ab0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ab4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ab8:	ee17 2a90 	vmov	r2, s15
 8001abc:	4b28      	ldr	r3, [pc, #160]	; (8001b60 <main+0xc30>)
 8001abe:	601a      	str	r2, [r3, #0]
						      		  	sprintf(TxDataBuffer,"  VoltLow_sawtooth is [%d.%d] V \r\n" ,t/10,t%10);
 8001ac0:	4b27      	ldr	r3, [pc, #156]	; (8001b60 <main+0xc30>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a27      	ldr	r2, [pc, #156]	; (8001b64 <main+0xc34>)
 8001ac6:	fb82 1203 	smull	r1, r2, r2, r3
 8001aca:	1092      	asrs	r2, r2, #2
 8001acc:	17db      	asrs	r3, r3, #31
 8001ace:	1ad0      	subs	r0, r2, r3
 8001ad0:	4b23      	ldr	r3, [pc, #140]	; (8001b60 <main+0xc30>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4b23      	ldr	r3, [pc, #140]	; (8001b64 <main+0xc34>)
 8001ad6:	fb83 1302 	smull	r1, r3, r3, r2
 8001ada:	1099      	asrs	r1, r3, #2
 8001adc:	17d3      	asrs	r3, r2, #31
 8001ade:	1ac9      	subs	r1, r1, r3
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	1ad1      	subs	r1, r2, r3
 8001aea:	460b      	mov	r3, r1
 8001aec:	4602      	mov	r2, r0
 8001aee:	4920      	ldr	r1, [pc, #128]	; (8001b70 <main+0xc40>)
 8001af0:	4818      	ldr	r0, [pc, #96]	; (8001b54 <main+0xc24>)
 8001af2:	f006 fab7 	bl	8008064 <siprintf>
						      		  		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001af6:	4817      	ldr	r0, [pc, #92]	; (8001b54 <main+0xc24>)
 8001af8:	f7fe fb72 	bl	80001e0 <strlen>
 8001afc:	4603      	mov	r3, r0
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b04:	4913      	ldr	r1, [pc, #76]	; (8001b54 <main+0xc24>)
 8001b06:	4815      	ldr	r0, [pc, #84]	; (8001b5c <main+0xc2c>)
 8001b08:	f005 fb79 	bl	80071fe <HAL_UART_Transmit>
						      		  	sprintf(TxDataBuffer,"  VoltLow_sawtooth is 0 V \r\n" ,t/10,t%10);
						      		  	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
						      		  	sprintf(TxDataBuffer,"lower VoltLow_sawtooth");
						      		  	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
						      		  		}
						      		  		break;
 8001b0c:	e097      	b.n	8001c3e <main+0xd0e>
						      		  		else if (VoltLow_sawtooth -0.1<=0)
 8001b0e:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <main+0xc3c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fd20 	bl	8000558 <__aeabi_f2d>
 8001b18:	a309      	add	r3, pc, #36	; (adr r3, 8001b40 <main+0xc10>)
 8001b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1e:	f7fe fbbb 	bl	8000298 <__aeabi_dsub>
 8001b22:	4603      	mov	r3, r0
 8001b24:	460c      	mov	r4, r1
 8001b26:	4618      	mov	r0, r3
 8001b28:	4621      	mov	r1, r4
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	f7fe ffe5 	bl	8000b00 <__aeabi_dcmple>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d121      	bne.n	8001b80 <main+0xc50>
						      		  		break;
 8001b3c:	e07f      	b.n	8001c3e <main+0xd0e>
 8001b3e:	bf00      	nop
 8001b40:	9999999a 	.word	0x9999999a
 8001b44:	3fb99999 	.word	0x3fb99999
 8001b48:	66666666 	.word	0x66666666
 8001b4c:	400a6666 	.word	0x400a6666
 8001b50:	20000004 	.word	0x20000004
 8001b54:	200000a4 	.word	0x200000a4
 8001b58:	08009b00 	.word	0x08009b00
 8001b5c:	200003a0 	.word	0x200003a0
 8001b60:	200001b4 	.word	0x200001b4
 8001b64:	66666667 	.word	0x66666667
 8001b68:	08009b1c 	.word	0x08009b1c
 8001b6c:	200001e4 	.word	0x200001e4
 8001b70:	08009b3c 	.word	0x08009b3c
 8001b74:	40533333 	.word	0x40533333
 8001b78:	08009b60 	.word	0x08009b60
 8001b7c:	08009b80 	.word	0x08009b80
						      		  		VoltLow_sawtooth =0;
 8001b80:	4ba7      	ldr	r3, [pc, #668]	; (8001e20 <main+0xef0>)
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
						      		  	sprintf(TxDataBuffer,"  VoltLow_sawtooth is 0 V \r\n" ,t/10,t%10);
 8001b88:	4ba6      	ldr	r3, [pc, #664]	; (8001e24 <main+0xef4>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4aa6      	ldr	r2, [pc, #664]	; (8001e28 <main+0xef8>)
 8001b8e:	fb82 1203 	smull	r1, r2, r2, r3
 8001b92:	1092      	asrs	r2, r2, #2
 8001b94:	17db      	asrs	r3, r3, #31
 8001b96:	1ad0      	subs	r0, r2, r3
 8001b98:	4ba2      	ldr	r3, [pc, #648]	; (8001e24 <main+0xef4>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4ba2      	ldr	r3, [pc, #648]	; (8001e28 <main+0xef8>)
 8001b9e:	fb83 1302 	smull	r1, r3, r3, r2
 8001ba2:	1099      	asrs	r1, r3, #2
 8001ba4:	17d3      	asrs	r3, r2, #31
 8001ba6:	1ac9      	subs	r1, r1, r3
 8001ba8:	460b      	mov	r3, r1
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	1ad1      	subs	r1, r2, r3
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	499d      	ldr	r1, [pc, #628]	; (8001e2c <main+0xefc>)
 8001bb8:	489d      	ldr	r0, [pc, #628]	; (8001e30 <main+0xf00>)
 8001bba:	f006 fa53 	bl	8008064 <siprintf>
						      		  	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001bbe:	489c      	ldr	r0, [pc, #624]	; (8001e30 <main+0xf00>)
 8001bc0:	f7fe fb0e 	bl	80001e0 <strlen>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bcc:	4998      	ldr	r1, [pc, #608]	; (8001e30 <main+0xf00>)
 8001bce:	4899      	ldr	r0, [pc, #612]	; (8001e34 <main+0xf04>)
 8001bd0:	f005 fb15 	bl	80071fe <HAL_UART_Transmit>
						      		  	sprintf(TxDataBuffer,"lower VoltLow_sawtooth");
 8001bd4:	4a96      	ldr	r2, [pc, #600]	; (8001e30 <main+0xf00>)
 8001bd6:	4b98      	ldr	r3, [pc, #608]	; (8001e38 <main+0xf08>)
 8001bd8:	4614      	mov	r4, r2
 8001bda:	461d      	mov	r5, r3
 8001bdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001be0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001be4:	6020      	str	r0, [r4, #0]
 8001be6:	3404      	adds	r4, #4
 8001be8:	8021      	strh	r1, [r4, #0]
 8001bea:	3402      	adds	r4, #2
 8001bec:	0c0b      	lsrs	r3, r1, #16
 8001bee:	7023      	strb	r3, [r4, #0]
						      		  	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001bf0:	488f      	ldr	r0, [pc, #572]	; (8001e30 <main+0xf00>)
 8001bf2:	f7fe faf5 	bl	80001e0 <strlen>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bfe:	498c      	ldr	r1, [pc, #560]	; (8001e30 <main+0xf00>)
 8001c00:	488c      	ldr	r0, [pc, #560]	; (8001e34 <main+0xf04>)
 8001c02:	f005 fafc 	bl	80071fe <HAL_UART_Transmit>
						      		  		break;
 8001c06:	e01a      	b.n	8001c3e <main+0xd0e>


						      		           default: //show error
						      		        	  sprintf(TxDataBuffer, "unidentified input \r\n");
 8001c08:	4a89      	ldr	r2, [pc, #548]	; (8001e30 <main+0xf00>)
 8001c0a:	4b8c      	ldr	r3, [pc, #560]	; (8001e3c <main+0xf0c>)
 8001c0c:	4614      	mov	r4, r2
 8001c0e:	461d      	mov	r5, r3
 8001c10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c14:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c18:	6020      	str	r0, [r4, #0]
 8001c1a:	3404      	adds	r4, #4
 8001c1c:	8021      	strh	r1, [r4, #0]
						      		        	   HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001c1e:	4884      	ldr	r0, [pc, #528]	; (8001e30 <main+0xf00>)
 8001c20:	f7fe fade 	bl	80001e0 <strlen>
 8001c24:	4603      	mov	r3, r0
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c2c:	4980      	ldr	r1, [pc, #512]	; (8001e30 <main+0xf00>)
 8001c2e:	4881      	ldr	r0, [pc, #516]	; (8001e34 <main+0xf04>)
 8001c30:	f005 fae5 	bl	80071fe <HAL_UART_Transmit>
						      		             STATE_Display = StateDisplay_MenuSawtooth_Print;
 8001c34:	4b82      	ldr	r3, [pc, #520]	; (8001e40 <main+0xf10>)
 8001c36:	2214      	movs	r2, #20
 8001c38:	701a      	strb	r2, [r3, #0]
						      		             break;
 8001c3a:	e000      	b.n	8001c3e <main+0xd0e>
						      		    	 break;
 8001c3c:	bf00      	nop
						      		           }
						      	break;
 8001c3e:	f001 b8ee 	b.w	8002e1e <main+0x1eee>
						      	//Menu 2 sine

						      	case StateDisplay_MenuSine_Print: //display state

						      	sprintf(TxDataBuffer, "Sine \r\n a. +0.1 Hz \r\n s. -0.1 Hz \r\n d. On/Off \r\n x. Back \r\n g. V High +0.1V \r\n h. High -0.1V \r\n j. V Low +0.1V \r\n k. Low -0.1V  \r\n");
 8001c42:	4a7b      	ldr	r2, [pc, #492]	; (8001e30 <main+0xf00>)
 8001c44:	4b7f      	ldr	r3, [pc, #508]	; (8001e44 <main+0xf14>)
 8001c46:	4610      	mov	r0, r2
 8001c48:	4619      	mov	r1, r3
 8001c4a:	2383      	movs	r3, #131	; 0x83
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	f006 f9f5 	bl	800803c <memcpy>
						      	 HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001c52:	4877      	ldr	r0, [pc, #476]	; (8001e30 <main+0xf00>)
 8001c54:	f7fe fac4 	bl	80001e0 <strlen>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c60:	4973      	ldr	r1, [pc, #460]	; (8001e30 <main+0xf00>)
 8001c62:	4874      	ldr	r0, [pc, #464]	; (8001e34 <main+0xf04>)
 8001c64:	f005 facb 	bl	80071fe <HAL_UART_Transmit>

						      		STATE_Display = StateDisplay_MenuSine_WaitInput;
 8001c68:	4b75      	ldr	r3, [pc, #468]	; (8001e40 <main+0xf10>)
 8001c6a:	221f      	movs	r2, #31
 8001c6c:	701a      	strb	r2, [r3, #0]
						      		 break;
 8001c6e:	f001 b8d6 	b.w	8002e1e <main+0x1eee>

						      		  case StateDisplay_MenuSine_WaitInput: //make decision state
						      		 switch (inputchar)
 8001c72:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001c76:	2b68      	cmp	r3, #104	; 0x68
 8001c78:	f000 824a 	beq.w	8002110 <main+0x11e0>
 8001c7c:	2b68      	cmp	r3, #104	; 0x68
 8001c7e:	dc0e      	bgt.n	8001c9e <main+0xd6e>
 8001c80:	2b61      	cmp	r3, #97	; 0x61
 8001c82:	d051      	beq.n	8001d28 <main+0xdf8>
 8001c84:	2b61      	cmp	r3, #97	; 0x61
 8001c86:	dc04      	bgt.n	8001c92 <main+0xd62>
 8001c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8c:	f000 840c 	beq.w	80024a8 <main+0x1578>
 8001c90:	e3f0      	b.n	8002474 <main+0x1544>
 8001c92:	2b64      	cmp	r3, #100	; 0x64
 8001c94:	d013      	beq.n	8001cbe <main+0xd8e>
 8001c96:	2b67      	cmp	r3, #103	; 0x67
 8001c98:	f000 8187 	beq.w	8001faa <main+0x107a>
 8001c9c:	e3ea      	b.n	8002474 <main+0x1544>
 8001c9e:	2b6b      	cmp	r3, #107	; 0x6b
 8001ca0:	f000 837a 	beq.w	8002398 <main+0x1468>
 8001ca4:	2b6b      	cmp	r3, #107	; 0x6b
 8001ca6:	dc03      	bgt.n	8001cb0 <main+0xd80>
 8001ca8:	2b6a      	cmp	r3, #106	; 0x6a
 8001caa:	f000 82c3 	beq.w	8002234 <main+0x1304>
 8001cae:	e3e1      	b.n	8002474 <main+0x1544>
 8001cb0:	2b73      	cmp	r3, #115	; 0x73
 8001cb2:	f000 80d7 	beq.w	8001e64 <main+0xf34>
 8001cb6:	2b78      	cmp	r3, #120	; 0x78
 8001cb8:	f000 8170 	beq.w	8001f9c <main+0x106c>
 8001cbc:	e3da      	b.n	8002474 <main+0x1544>
						      				{
						      			 case -1:
						      				 break;
						      			 case 'd': // on/off

						      				if (a==0)
 8001cbe:	4b62      	ldr	r3, [pc, #392]	; (8001e48 <main+0xf18>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d114      	bne.n	8001cf0 <main+0xdc0>
						      			 {

						      				 sprintf(TxDataBuffer, "Turned On \r\n");
 8001cc6:	4a5a      	ldr	r2, [pc, #360]	; (8001e30 <main+0xf00>)
 8001cc8:	4b60      	ldr	r3, [pc, #384]	; (8001e4c <main+0xf1c>)
 8001cca:	4614      	mov	r4, r2
 8001ccc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cce:	c407      	stmia	r4!, {r0, r1, r2}
 8001cd0:	7023      	strb	r3, [r4, #0]
						      				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001cd2:	4857      	ldr	r0, [pc, #348]	; (8001e30 <main+0xf00>)
 8001cd4:	f7fe fa84 	bl	80001e0 <strlen>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce0:	4953      	ldr	r1, [pc, #332]	; (8001e30 <main+0xf00>)
 8001ce2:	4854      	ldr	r0, [pc, #336]	; (8001e34 <main+0xf04>)
 8001ce4:	f005 fa8b 	bl	80071fe <HAL_UART_Transmit>
						      				a=1;
 8001ce8:	4b57      	ldr	r3, [pc, #348]	; (8001e48 <main+0xf18>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	e017      	b.n	8001d20 <main+0xdf0>

						      				 }
						      			else if (a==1)
 8001cf0:	4b55      	ldr	r3, [pc, #340]	; (8001e48 <main+0xf18>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d113      	bne.n	8001d20 <main+0xdf0>
						      				 {
						      					a=0;
 8001cf8:	4b53      	ldr	r3, [pc, #332]	; (8001e48 <main+0xf18>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
						      				sprintf(TxDataBuffer, "Turned Off \r\n");
 8001cfe:	4a4c      	ldr	r2, [pc, #304]	; (8001e30 <main+0xf00>)
 8001d00:	4b53      	ldr	r3, [pc, #332]	; (8001e50 <main+0xf20>)
 8001d02:	4614      	mov	r4, r2
 8001d04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d06:	c407      	stmia	r4!, {r0, r1, r2}
 8001d08:	8023      	strh	r3, [r4, #0]
						      				 HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001d0a:	4849      	ldr	r0, [pc, #292]	; (8001e30 <main+0xf00>)
 8001d0c:	f7fe fa68 	bl	80001e0 <strlen>
 8001d10:	4603      	mov	r3, r0
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d18:	4945      	ldr	r1, [pc, #276]	; (8001e30 <main+0xf00>)
 8001d1a:	4846      	ldr	r0, [pc, #280]	; (8001e34 <main+0xf04>)
 8001d1c:	f005 fa6f 	bl	80071fe <HAL_UART_Transmit>

						      				 }
						      				STATE_Display = StateDisplay_MenuSine_Print;
 8001d20:	4b47      	ldr	r3, [pc, #284]	; (8001e40 <main+0xf10>)
 8001d22:	221e      	movs	r2, #30
 8001d24:	701a      	strb	r2, [r3, #0]

						      				break;
 8001d26:	e3c0      	b.n	80024aa <main+0x157a>
						      				case 'a':  // เพิ่มความถี่
						      					timestampsin = micros();
 8001d28:	f001 ffc2 	bl	8003cb0 <micros>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	460c      	mov	r4, r1
 8001d30:	4a48      	ldr	r2, [pc, #288]	; (8001e54 <main+0xf24>)
 8001d32:	e9c2 3400 	strd	r3, r4, [r2]
						      				a=1;
 8001d36:	4b44      	ldr	r3, [pc, #272]	; (8001e48 <main+0xf18>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
						      				if(F_sin <10)
 8001d3c:	4b46      	ldr	r3, [pc, #280]	; (8001e58 <main+0xf28>)
 8001d3e:	edd3 7a00 	vldr	s15, [r3]
 8001d42:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4e:	d546      	bpl.n	8001dde <main+0xeae>
						      				 {
						      				F_sin+=0.1;
 8001d50:	4b41      	ldr	r3, [pc, #260]	; (8001e58 <main+0xf28>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fbff 	bl	8000558 <__aeabi_f2d>
 8001d5a:	a32f      	add	r3, pc, #188	; (adr r3, 8001e18 <main+0xee8>)
 8001d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d60:	f7fe fa9c 	bl	800029c <__adddf3>
 8001d64:	4603      	mov	r3, r0
 8001d66:	460c      	mov	r4, r1
 8001d68:	4618      	mov	r0, r3
 8001d6a:	4621      	mov	r1, r4
 8001d6c:	f7fe ff0e 	bl	8000b8c <__aeabi_d2f>
 8001d70:	4602      	mov	r2, r0
 8001d72:	4b39      	ldr	r3, [pc, #228]	; (8001e58 <main+0xf28>)
 8001d74:	601a      	str	r2, [r3, #0]
						      				t=F_sin*10;
 8001d76:	4b38      	ldr	r3, [pc, #224]	; (8001e58 <main+0xf28>)
 8001d78:	edd3 7a00 	vldr	s15, [r3]
 8001d7c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d88:	ee17 2a90 	vmov	r2, s15
 8001d8c:	4b25      	ldr	r3, [pc, #148]	; (8001e24 <main+0xef4>)
 8001d8e:	601a      	str	r2, [r3, #0]
						      				sprintf(TxDataBuffer," F_sin is [%d.%d] Hz \r\n" ,t/10,t%10);
 8001d90:	4b24      	ldr	r3, [pc, #144]	; (8001e24 <main+0xef4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a24      	ldr	r2, [pc, #144]	; (8001e28 <main+0xef8>)
 8001d96:	fb82 1203 	smull	r1, r2, r2, r3
 8001d9a:	1092      	asrs	r2, r2, #2
 8001d9c:	17db      	asrs	r3, r3, #31
 8001d9e:	1ad0      	subs	r0, r2, r3
 8001da0:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <main+0xef4>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <main+0xef8>)
 8001da6:	fb83 1302 	smull	r1, r3, r3, r2
 8001daa:	1099      	asrs	r1, r3, #2
 8001dac:	17d3      	asrs	r3, r2, #31
 8001dae:	1ac9      	subs	r1, r1, r3
 8001db0:	460b      	mov	r3, r1
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	1ad1      	subs	r1, r2, r3
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	4927      	ldr	r1, [pc, #156]	; (8001e5c <main+0xf2c>)
 8001dc0:	481b      	ldr	r0, [pc, #108]	; (8001e30 <main+0xf00>)
 8001dc2:	f006 f94f 	bl	8008064 <siprintf>
						      				 HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001dc6:	481a      	ldr	r0, [pc, #104]	; (8001e30 <main+0xf00>)
 8001dc8:	f7fe fa0a 	bl	80001e0 <strlen>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dd4:	4916      	ldr	r1, [pc, #88]	; (8001e30 <main+0xf00>)
 8001dd6:	4817      	ldr	r0, [pc, #92]	; (8001e34 <main+0xf04>)
 8001dd8:	f005 fa11 	bl	80071fe <HAL_UART_Transmit>
 8001ddc:	e017      	b.n	8001e0e <main+0xede>
						      				 }
						      				 else
						      				 {
						      				sprintf(TxDataBuffer," the highest frequency 10Hz \r\n" );
 8001dde:	4a14      	ldr	r2, [pc, #80]	; (8001e30 <main+0xf00>)
 8001de0:	4b1f      	ldr	r3, [pc, #124]	; (8001e60 <main+0xf30>)
 8001de2:	4614      	mov	r4, r2
 8001de4:	461d      	mov	r5, r3
 8001de6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001de8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001dee:	c407      	stmia	r4!, {r0, r1, r2}
 8001df0:	8023      	strh	r3, [r4, #0]
 8001df2:	3402      	adds	r4, #2
 8001df4:	0c1b      	lsrs	r3, r3, #16
 8001df6:	7023      	strb	r3, [r4, #0]
						      					HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001df8:	480d      	ldr	r0, [pc, #52]	; (8001e30 <main+0xf00>)
 8001dfa:	f7fe f9f1 	bl	80001e0 <strlen>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e06:	490a      	ldr	r1, [pc, #40]	; (8001e30 <main+0xf00>)
 8001e08:	480a      	ldr	r0, [pc, #40]	; (8001e34 <main+0xf04>)
 8001e0a:	f005 f9f8 	bl	80071fe <HAL_UART_Transmit>
						      				}


						      					  STATE_Display = StateDisplay_MenuSine_Print ;
 8001e0e:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <main+0xf10>)
 8001e10:	221e      	movs	r2, #30
 8001e12:	701a      	strb	r2, [r3, #0]
						      					   break;
 8001e14:	e349      	b.n	80024aa <main+0x157a>
 8001e16:	bf00      	nop
 8001e18:	9999999a 	.word	0x9999999a
 8001e1c:	3fb99999 	.word	0x3fb99999
 8001e20:	200001e4 	.word	0x200001e4
 8001e24:	200001b4 	.word	0x200001b4
 8001e28:	66666667 	.word	0x66666667
 8001e2c:	08009b9c 	.word	0x08009b9c
 8001e30:	200000a4 	.word	0x200000a4
 8001e34:	200003a0 	.word	0x200003a0
 8001e38:	08009bbc 	.word	0x08009bbc
 8001e3c:	08009918 	.word	0x08009918
 8001e40:	200001a4 	.word	0x200001a4
 8001e44:	08009bd4 	.word	0x08009bd4
 8001e48:	200001ac 	.word	0x200001ac
 8001e4c:	080099c4 	.word	0x080099c4
 8001e50:	080099d4 	.word	0x080099d4
 8001e54:	20000200 	.word	0x20000200
 8001e58:	200001e8 	.word	0x200001e8
 8001e5c:	08009c58 	.word	0x08009c58
 8001e60:	08009c70 	.word	0x08009c70
						      			  case 's': //  ลดความถี่
						      				timestampsin = micros();
 8001e64:	f001 ff24 	bl	8003cb0 <micros>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	460c      	mov	r4, r1
 8001e6c:	4a9a      	ldr	r2, [pc, #616]	; (80020d8 <main+0x11a8>)
 8001e6e:	e9c2 3400 	strd	r3, r4, [r2]
						      						 a=1;
 8001e72:	4b9a      	ldr	r3, [pc, #616]	; (80020dc <main+0x11ac>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	601a      	str	r2, [r3, #0]
						      						 if(F_sin-0.1>0){
 8001e78:	4b99      	ldr	r3, [pc, #612]	; (80020e0 <main+0x11b0>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe fb6b 	bl	8000558 <__aeabi_f2d>
 8001e82:	a391      	add	r3, pc, #580	; (adr r3, 80020c8 <main+0x1198>)
 8001e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e88:	f7fe fa06 	bl	8000298 <__aeabi_dsub>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	460c      	mov	r4, r1
 8001e90:	4618      	mov	r0, r3
 8001e92:	4621      	mov	r1, r4
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	f04f 0300 	mov.w	r3, #0
 8001e9c:	f7fe fe44 	bl	8000b28 <__aeabi_dcmpgt>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d046      	beq.n	8001f34 <main+0x1004>
						      			 F_sin=F_sin-0.1;
 8001ea6:	4b8e      	ldr	r3, [pc, #568]	; (80020e0 <main+0x11b0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe fb54 	bl	8000558 <__aeabi_f2d>
 8001eb0:	a385      	add	r3, pc, #532	; (adr r3, 80020c8 <main+0x1198>)
 8001eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb6:	f7fe f9ef 	bl	8000298 <__aeabi_dsub>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	460c      	mov	r4, r1
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	4621      	mov	r1, r4
 8001ec2:	f7fe fe63 	bl	8000b8c <__aeabi_d2f>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	4b85      	ldr	r3, [pc, #532]	; (80020e0 <main+0x11b0>)
 8001eca:	601a      	str	r2, [r3, #0]
						      			t=F_sin*10;
 8001ecc:	4b84      	ldr	r3, [pc, #528]	; (80020e0 <main+0x11b0>)
 8001ece:	edd3 7a00 	vldr	s15, [r3]
 8001ed2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ed6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ede:	ee17 2a90 	vmov	r2, s15
 8001ee2:	4b80      	ldr	r3, [pc, #512]	; (80020e4 <main+0x11b4>)
 8001ee4:	601a      	str	r2, [r3, #0]
						      			sprintf(TxDataBuffer," F_sin is [%d.%d] Hz \r\n" ,t/10,t%10);
 8001ee6:	4b7f      	ldr	r3, [pc, #508]	; (80020e4 <main+0x11b4>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a7f      	ldr	r2, [pc, #508]	; (80020e8 <main+0x11b8>)
 8001eec:	fb82 1203 	smull	r1, r2, r2, r3
 8001ef0:	1092      	asrs	r2, r2, #2
 8001ef2:	17db      	asrs	r3, r3, #31
 8001ef4:	1ad0      	subs	r0, r2, r3
 8001ef6:	4b7b      	ldr	r3, [pc, #492]	; (80020e4 <main+0x11b4>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	4b7b      	ldr	r3, [pc, #492]	; (80020e8 <main+0x11b8>)
 8001efc:	fb83 1302 	smull	r1, r3, r3, r2
 8001f00:	1099      	asrs	r1, r3, #2
 8001f02:	17d3      	asrs	r3, r2, #31
 8001f04:	1ac9      	subs	r1, r1, r3
 8001f06:	460b      	mov	r3, r1
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	1ad1      	subs	r1, r2, r3
 8001f10:	460b      	mov	r3, r1
 8001f12:	4602      	mov	r2, r0
 8001f14:	4975      	ldr	r1, [pc, #468]	; (80020ec <main+0x11bc>)
 8001f16:	4876      	ldr	r0, [pc, #472]	; (80020f0 <main+0x11c0>)
 8001f18:	f006 f8a4 	bl	8008064 <siprintf>
						      				 HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001f1c:	4874      	ldr	r0, [pc, #464]	; (80020f0 <main+0x11c0>)
 8001f1e:	f7fe f95f 	bl	80001e0 <strlen>
 8001f22:	4603      	mov	r3, r0
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f2a:	4971      	ldr	r1, [pc, #452]	; (80020f0 <main+0x11c0>)
 8001f2c:	4871      	ldr	r0, [pc, #452]	; (80020f4 <main+0x11c4>)
 8001f2e:	f005 f966 	bl	80071fe <HAL_UART_Transmit>
 8001f32:	e02f      	b.n	8001f94 <main+0x1064>
						      						 }else if(F_sin-0.1<=0)
 8001f34:	4b6a      	ldr	r3, [pc, #424]	; (80020e0 <main+0x11b0>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe fb0d 	bl	8000558 <__aeabi_f2d>
 8001f3e:	a362      	add	r3, pc, #392	; (adr r3, 80020c8 <main+0x1198>)
 8001f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f44:	f7fe f9a8 	bl	8000298 <__aeabi_dsub>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	460c      	mov	r4, r1
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	4621      	mov	r1, r4
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	f04f 0300 	mov.w	r3, #0
 8001f58:	f7fe fdd2 	bl	8000b00 <__aeabi_dcmple>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d018      	beq.n	8001f94 <main+0x1064>
						      					  {
						      					F_sin=0;
 8001f62:	4b5f      	ldr	r3, [pc, #380]	; (80020e0 <main+0x11b0>)
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
						      					sprintf(TxDataBuffer," the lower frequency 0 V \r\n" );
 8001f6a:	4a61      	ldr	r2, [pc, #388]	; (80020f0 <main+0x11c0>)
 8001f6c:	4b62      	ldr	r3, [pc, #392]	; (80020f8 <main+0x11c8>)
 8001f6e:	4614      	mov	r4, r2
 8001f70:	461d      	mov	r5, r3
 8001f72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
						      					HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001f7e:	485c      	ldr	r0, [pc, #368]	; (80020f0 <main+0x11c0>)
 8001f80:	f7fe f92e 	bl	80001e0 <strlen>
 8001f84:	4603      	mov	r3, r0
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f8c:	4958      	ldr	r1, [pc, #352]	; (80020f0 <main+0x11c0>)
 8001f8e:	4859      	ldr	r0, [pc, #356]	; (80020f4 <main+0x11c4>)
 8001f90:	f005 f935 	bl	80071fe <HAL_UART_Transmit>

						      					}

						      				STATE_Display = StateDisplay_MenuSine_Print;
 8001f94:	4b59      	ldr	r3, [pc, #356]	; (80020fc <main+0x11cc>)
 8001f96:	221e      	movs	r2, #30
 8001f98:	701a      	strb	r2, [r3, #0]

						      				  break;
 8001f9a:	e286      	b.n	80024aa <main+0x157a>

						      				 case 'x': // back to main manu

						      					 a=0;
 8001f9c:	4b4f      	ldr	r3, [pc, #316]	; (80020dc <main+0x11ac>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
						      					 STATE_Display = StateDisplay_MenuRoot_Print;
 8001fa2:	4b56      	ldr	r3, [pc, #344]	; (80020fc <main+0x11cc>)
 8001fa4:	220a      	movs	r2, #10
 8001fa6:	701a      	strb	r2, [r3, #0]
						      				 break;
 8001fa8:	e27f      	b.n	80024aa <main+0x157a>
						      				 case 'g':// +V High
						      					if (VoltHigh_sin +0.1 <3.3){
 8001faa:	4b55      	ldr	r3, [pc, #340]	; (8002100 <main+0x11d0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe fad2 	bl	8000558 <__aeabi_f2d>
 8001fb4:	a344      	add	r3, pc, #272	; (adr r3, 80020c8 <main+0x1198>)
 8001fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fba:	f7fe f96f 	bl	800029c <__adddf3>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	460c      	mov	r4, r1
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	4621      	mov	r1, r4
 8001fc6:	a342      	add	r3, pc, #264	; (adr r3, 80020d0 <main+0x11a0>)
 8001fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fcc:	f7fe fd8e 	bl	8000aec <__aeabi_dcmplt>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d046      	beq.n	8002064 <main+0x1134>
						      			VoltHigh_sin =VoltHigh_sin +0.1;
 8001fd6:	4b4a      	ldr	r3, [pc, #296]	; (8002100 <main+0x11d0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe fabc 	bl	8000558 <__aeabi_f2d>
 8001fe0:	a339      	add	r3, pc, #228	; (adr r3, 80020c8 <main+0x1198>)
 8001fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe6:	f7fe f959 	bl	800029c <__adddf3>
 8001fea:	4603      	mov	r3, r0
 8001fec:	460c      	mov	r4, r1
 8001fee:	4618      	mov	r0, r3
 8001ff0:	4621      	mov	r1, r4
 8001ff2:	f7fe fdcb 	bl	8000b8c <__aeabi_d2f>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	4b41      	ldr	r3, [pc, #260]	; (8002100 <main+0x11d0>)
 8001ffa:	601a      	str	r2, [r3, #0]
						      			t=VoltHigh_sin*10;
 8001ffc:	4b40      	ldr	r3, [pc, #256]	; (8002100 <main+0x11d0>)
 8001ffe:	edd3 7a00 	vldr	s15, [r3]
 8002002:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002006:	ee67 7a87 	vmul.f32	s15, s15, s14
 800200a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800200e:	ee17 2a90 	vmov	r2, s15
 8002012:	4b34      	ldr	r3, [pc, #208]	; (80020e4 <main+0x11b4>)
 8002014:	601a      	str	r2, [r3, #0]
						      			sprintf(TxDataBuffer," VoltHigh_sin is [%d.%d] V \r\n" ,t/10,t%10);
 8002016:	4b33      	ldr	r3, [pc, #204]	; (80020e4 <main+0x11b4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a33      	ldr	r2, [pc, #204]	; (80020e8 <main+0x11b8>)
 800201c:	fb82 1203 	smull	r1, r2, r2, r3
 8002020:	1092      	asrs	r2, r2, #2
 8002022:	17db      	asrs	r3, r3, #31
 8002024:	1ad0      	subs	r0, r2, r3
 8002026:	4b2f      	ldr	r3, [pc, #188]	; (80020e4 <main+0x11b4>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	4b2f      	ldr	r3, [pc, #188]	; (80020e8 <main+0x11b8>)
 800202c:	fb83 1302 	smull	r1, r3, r3, r2
 8002030:	1099      	asrs	r1, r3, #2
 8002032:	17d3      	asrs	r3, r2, #31
 8002034:	1ac9      	subs	r1, r1, r3
 8002036:	460b      	mov	r3, r1
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	440b      	add	r3, r1
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	1ad1      	subs	r1, r2, r3
 8002040:	460b      	mov	r3, r1
 8002042:	4602      	mov	r2, r0
 8002044:	492f      	ldr	r1, [pc, #188]	; (8002104 <main+0x11d4>)
 8002046:	482a      	ldr	r0, [pc, #168]	; (80020f0 <main+0x11c0>)
 8002048:	f006 f80c 	bl	8008064 <siprintf>
						      			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800204c:	4828      	ldr	r0, [pc, #160]	; (80020f0 <main+0x11c0>)
 800204e:	f7fe f8c7 	bl	80001e0 <strlen>
 8002052:	4603      	mov	r3, r0
 8002054:	b29a      	uxth	r2, r3
 8002056:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800205a:	4925      	ldr	r1, [pc, #148]	; (80020f0 <main+0x11c0>)
 800205c:	4825      	ldr	r0, [pc, #148]	; (80020f4 <main+0x11c4>)
 800205e:	f005 f8ce 	bl	80071fe <HAL_UART_Transmit>
 8002062:	e02d      	b.n	80020c0 <main+0x1190>

						      					}
						      					else if (VoltHigh_sin +0.1 >=3.3)
 8002064:	4b26      	ldr	r3, [pc, #152]	; (8002100 <main+0x11d0>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe fa75 	bl	8000558 <__aeabi_f2d>
 800206e:	a316      	add	r3, pc, #88	; (adr r3, 80020c8 <main+0x1198>)
 8002070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002074:	f7fe f912 	bl	800029c <__adddf3>
 8002078:	4603      	mov	r3, r0
 800207a:	460c      	mov	r4, r1
 800207c:	4618      	mov	r0, r3
 800207e:	4621      	mov	r1, r4
 8002080:	a313      	add	r3, pc, #76	; (adr r3, 80020d0 <main+0x11a0>)
 8002082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002086:	f7fe fd45 	bl	8000b14 <__aeabi_dcmpge>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d017      	beq.n	80020c0 <main+0x1190>
						      			{
						      			VoltHigh_sin =3.3;
 8002090:	4b1b      	ldr	r3, [pc, #108]	; (8002100 <main+0x11d0>)
 8002092:	4a1d      	ldr	r2, [pc, #116]	; (8002108 <main+0x11d8>)
 8002094:	601a      	str	r2, [r3, #0]
						      			sprintf(TxDataBuffer," Maximum VoltHigh_sin  3.3 V \r\n");
 8002096:	4a16      	ldr	r2, [pc, #88]	; (80020f0 <main+0x11c0>)
 8002098:	4b1c      	ldr	r3, [pc, #112]	; (800210c <main+0x11dc>)
 800209a:	4614      	mov	r4, r2
 800209c:	461d      	mov	r5, r3
 800209e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020a2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80020a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
						      			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80020aa:	4811      	ldr	r0, [pc, #68]	; (80020f0 <main+0x11c0>)
 80020ac:	f7fe f898 	bl	80001e0 <strlen>
 80020b0:	4603      	mov	r3, r0
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020b8:	490d      	ldr	r1, [pc, #52]	; (80020f0 <main+0x11c0>)
 80020ba:	480e      	ldr	r0, [pc, #56]	; (80020f4 <main+0x11c4>)
 80020bc:	f005 f89f 	bl	80071fe <HAL_UART_Transmit>
						      			}
						      			STATE_Display = StateDisplay_MenuSine_Print;
 80020c0:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <main+0x11cc>)
 80020c2:	221e      	movs	r2, #30
 80020c4:	701a      	strb	r2, [r3, #0]
						      			break;
 80020c6:	e1f0      	b.n	80024aa <main+0x157a>
 80020c8:	9999999a 	.word	0x9999999a
 80020cc:	3fb99999 	.word	0x3fb99999
 80020d0:	66666666 	.word	0x66666666
 80020d4:	400a6666 	.word	0x400a6666
 80020d8:	20000200 	.word	0x20000200
 80020dc:	200001ac 	.word	0x200001ac
 80020e0:	200001e8 	.word	0x200001e8
 80020e4:	200001b4 	.word	0x200001b4
 80020e8:	66666667 	.word	0x66666667
 80020ec:	08009c58 	.word	0x08009c58
 80020f0:	200000a4 	.word	0x200000a4
 80020f4:	200003a0 	.word	0x200003a0
 80020f8:	08009c90 	.word	0x08009c90
 80020fc:	200001a4 	.word	0x200001a4
 8002100:	20000008 	.word	0x20000008
 8002104:	08009cac 	.word	0x08009cac
 8002108:	40533333 	.word	0x40533333
 800210c:	08009ccc 	.word	0x08009ccc
						      		 case 'h':// -V High
						      			 if(VoltHigh_sin -0.1>0){
 8002110:	4b95      	ldr	r3, [pc, #596]	; (8002368 <main+0x1438>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f7fe fa1f 	bl	8000558 <__aeabi_f2d>
 800211a:	a38f      	add	r3, pc, #572	; (adr r3, 8002358 <main+0x1428>)
 800211c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002120:	f7fe f8ba 	bl	8000298 <__aeabi_dsub>
 8002124:	4603      	mov	r3, r0
 8002126:	460c      	mov	r4, r1
 8002128:	4618      	mov	r0, r3
 800212a:	4621      	mov	r1, r4
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	f04f 0300 	mov.w	r3, #0
 8002134:	f7fe fcf8 	bl	8000b28 <__aeabi_dcmpgt>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d046      	beq.n	80021cc <main+0x129c>
						      			VoltHigh_sin =VoltHigh_sin -0.1;
 800213e:	4b8a      	ldr	r3, [pc, #552]	; (8002368 <main+0x1438>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe fa08 	bl	8000558 <__aeabi_f2d>
 8002148:	a383      	add	r3, pc, #524	; (adr r3, 8002358 <main+0x1428>)
 800214a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214e:	f7fe f8a3 	bl	8000298 <__aeabi_dsub>
 8002152:	4603      	mov	r3, r0
 8002154:	460c      	mov	r4, r1
 8002156:	4618      	mov	r0, r3
 8002158:	4621      	mov	r1, r4
 800215a:	f7fe fd17 	bl	8000b8c <__aeabi_d2f>
 800215e:	4602      	mov	r2, r0
 8002160:	4b81      	ldr	r3, [pc, #516]	; (8002368 <main+0x1438>)
 8002162:	601a      	str	r2, [r3, #0]
						      			t=VoltHigh_sin*10;
 8002164:	4b80      	ldr	r3, [pc, #512]	; (8002368 <main+0x1438>)
 8002166:	edd3 7a00 	vldr	s15, [r3]
 800216a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800216e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002172:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002176:	ee17 2a90 	vmov	r2, s15
 800217a:	4b7c      	ldr	r3, [pc, #496]	; (800236c <main+0x143c>)
 800217c:	601a      	str	r2, [r3, #0]
						      			sprintf(TxDataBuffer," VoltHigh_sin is [%d.%d] V \r\n" ,t/10,t%10);
 800217e:	4b7b      	ldr	r3, [pc, #492]	; (800236c <main+0x143c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a7b      	ldr	r2, [pc, #492]	; (8002370 <main+0x1440>)
 8002184:	fb82 1203 	smull	r1, r2, r2, r3
 8002188:	1092      	asrs	r2, r2, #2
 800218a:	17db      	asrs	r3, r3, #31
 800218c:	1ad0      	subs	r0, r2, r3
 800218e:	4b77      	ldr	r3, [pc, #476]	; (800236c <main+0x143c>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	4b77      	ldr	r3, [pc, #476]	; (8002370 <main+0x1440>)
 8002194:	fb83 1302 	smull	r1, r3, r3, r2
 8002198:	1099      	asrs	r1, r3, #2
 800219a:	17d3      	asrs	r3, r2, #31
 800219c:	1ac9      	subs	r1, r1, r3
 800219e:	460b      	mov	r3, r1
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	440b      	add	r3, r1
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	1ad1      	subs	r1, r2, r3
 80021a8:	460b      	mov	r3, r1
 80021aa:	4602      	mov	r2, r0
 80021ac:	4971      	ldr	r1, [pc, #452]	; (8002374 <main+0x1444>)
 80021ae:	4872      	ldr	r0, [pc, #456]	; (8002378 <main+0x1448>)
 80021b0:	f005 ff58 	bl	8008064 <siprintf>
						      				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80021b4:	4870      	ldr	r0, [pc, #448]	; (8002378 <main+0x1448>)
 80021b6:	f7fe f813 	bl	80001e0 <strlen>
 80021ba:	4603      	mov	r3, r0
 80021bc:	b29a      	uxth	r2, r3
 80021be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021c2:	496d      	ldr	r1, [pc, #436]	; (8002378 <main+0x1448>)
 80021c4:	486d      	ldr	r0, [pc, #436]	; (800237c <main+0x144c>)
 80021c6:	f005 f81a 	bl	80071fe <HAL_UART_Transmit>
 80021ca:	e02f      	b.n	800222c <main+0x12fc>
						      			 }
						      				else if (VoltHigh_sin -0.1<=0)
 80021cc:	4b66      	ldr	r3, [pc, #408]	; (8002368 <main+0x1438>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe f9c1 	bl	8000558 <__aeabi_f2d>
 80021d6:	a360      	add	r3, pc, #384	; (adr r3, 8002358 <main+0x1428>)
 80021d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021dc:	f7fe f85c 	bl	8000298 <__aeabi_dsub>
 80021e0:	4603      	mov	r3, r0
 80021e2:	460c      	mov	r4, r1
 80021e4:	4618      	mov	r0, r3
 80021e6:	4621      	mov	r1, r4
 80021e8:	f04f 0200 	mov.w	r2, #0
 80021ec:	f04f 0300 	mov.w	r3, #0
 80021f0:	f7fe fc86 	bl	8000b00 <__aeabi_dcmple>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d018      	beq.n	800222c <main+0x12fc>
						      				{
						      			VoltHigh_sin =0;
 80021fa:	4b5b      	ldr	r3, [pc, #364]	; (8002368 <main+0x1438>)
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
						      			sprintf(TxDataBuffer," Lower  VoltHigh_sin  0 V \r\n");
 8002202:	4a5d      	ldr	r2, [pc, #372]	; (8002378 <main+0x1448>)
 8002204:	4b5e      	ldr	r3, [pc, #376]	; (8002380 <main+0x1450>)
 8002206:	4614      	mov	r4, r2
 8002208:	461d      	mov	r5, r3
 800220a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800220c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800220e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002212:	c407      	stmia	r4!, {r0, r1, r2}
 8002214:	7023      	strb	r3, [r4, #0]
						      			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002216:	4858      	ldr	r0, [pc, #352]	; (8002378 <main+0x1448>)
 8002218:	f7fd ffe2 	bl	80001e0 <strlen>
 800221c:	4603      	mov	r3, r0
 800221e:	b29a      	uxth	r2, r3
 8002220:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002224:	4954      	ldr	r1, [pc, #336]	; (8002378 <main+0x1448>)
 8002226:	4855      	ldr	r0, [pc, #340]	; (800237c <main+0x144c>)
 8002228:	f004 ffe9 	bl	80071fe <HAL_UART_Transmit>
						      			 	}
						      				STATE_Display = StateDisplay_MenuSine_Print;
 800222c:	4b55      	ldr	r3, [pc, #340]	; (8002384 <main+0x1454>)
 800222e:	221e      	movs	r2, #30
 8002230:	701a      	strb	r2, [r3, #0]
						      				 break;
 8002232:	e13a      	b.n	80024aa <main+0x157a>
						      				 case 'j':// +V Low
						      				if (VoltLow_sin+0.1 <3.3){
 8002234:	4b54      	ldr	r3, [pc, #336]	; (8002388 <main+0x1458>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f7fe f98d 	bl	8000558 <__aeabi_f2d>
 800223e:	a346      	add	r3, pc, #280	; (adr r3, 8002358 <main+0x1428>)
 8002240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002244:	f7fe f82a 	bl	800029c <__adddf3>
 8002248:	4603      	mov	r3, r0
 800224a:	460c      	mov	r4, r1
 800224c:	4618      	mov	r0, r3
 800224e:	4621      	mov	r1, r4
 8002250:	a343      	add	r3, pc, #268	; (adr r3, 8002360 <main+0x1430>)
 8002252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002256:	f7fe fc49 	bl	8000aec <__aeabi_dcmplt>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d046      	beq.n	80022ee <main+0x13be>
						      				 VoltLow_sin =VoltLow_sin +0.1;
 8002260:	4b49      	ldr	r3, [pc, #292]	; (8002388 <main+0x1458>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f7fe f977 	bl	8000558 <__aeabi_f2d>
 800226a:	a33b      	add	r3, pc, #236	; (adr r3, 8002358 <main+0x1428>)
 800226c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002270:	f7fe f814 	bl	800029c <__adddf3>
 8002274:	4603      	mov	r3, r0
 8002276:	460c      	mov	r4, r1
 8002278:	4618      	mov	r0, r3
 800227a:	4621      	mov	r1, r4
 800227c:	f7fe fc86 	bl	8000b8c <__aeabi_d2f>
 8002280:	4602      	mov	r2, r0
 8002282:	4b41      	ldr	r3, [pc, #260]	; (8002388 <main+0x1458>)
 8002284:	601a      	str	r2, [r3, #0]
						      				t=VoltLow_sin*10;
 8002286:	4b40      	ldr	r3, [pc, #256]	; (8002388 <main+0x1458>)
 8002288:	edd3 7a00 	vldr	s15, [r3]
 800228c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002290:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002294:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002298:	ee17 2a90 	vmov	r2, s15
 800229c:	4b33      	ldr	r3, [pc, #204]	; (800236c <main+0x143c>)
 800229e:	601a      	str	r2, [r3, #0]
						      				sprintf(TxDataBuffer," VoltLow_sinis [%d.%d] V \r\n" ,t/10,t%10);
 80022a0:	4b32      	ldr	r3, [pc, #200]	; (800236c <main+0x143c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a32      	ldr	r2, [pc, #200]	; (8002370 <main+0x1440>)
 80022a6:	fb82 1203 	smull	r1, r2, r2, r3
 80022aa:	1092      	asrs	r2, r2, #2
 80022ac:	17db      	asrs	r3, r3, #31
 80022ae:	1ad0      	subs	r0, r2, r3
 80022b0:	4b2e      	ldr	r3, [pc, #184]	; (800236c <main+0x143c>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4b2e      	ldr	r3, [pc, #184]	; (8002370 <main+0x1440>)
 80022b6:	fb83 1302 	smull	r1, r3, r3, r2
 80022ba:	1099      	asrs	r1, r3, #2
 80022bc:	17d3      	asrs	r3, r2, #31
 80022be:	1ac9      	subs	r1, r1, r3
 80022c0:	460b      	mov	r3, r1
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	1ad1      	subs	r1, r2, r3
 80022ca:	460b      	mov	r3, r1
 80022cc:	4602      	mov	r2, r0
 80022ce:	492f      	ldr	r1, [pc, #188]	; (800238c <main+0x145c>)
 80022d0:	4829      	ldr	r0, [pc, #164]	; (8002378 <main+0x1448>)
 80022d2:	f005 fec7 	bl	8008064 <siprintf>
						      				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80022d6:	4828      	ldr	r0, [pc, #160]	; (8002378 <main+0x1448>)
 80022d8:	f7fd ff82 	bl	80001e0 <strlen>
 80022dc:	4603      	mov	r3, r0
 80022de:	b29a      	uxth	r2, r3
 80022e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022e4:	4924      	ldr	r1, [pc, #144]	; (8002378 <main+0x1448>)
 80022e6:	4825      	ldr	r0, [pc, #148]	; (800237c <main+0x144c>)
 80022e8:	f004 ff89 	bl	80071fe <HAL_UART_Transmit>
 80022ec:	e02d      	b.n	800234a <main+0x141a>
						      				}
						      				else if (VoltLow_sin+0.1>=3.3)
 80022ee:	4b26      	ldr	r3, [pc, #152]	; (8002388 <main+0x1458>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7fe f930 	bl	8000558 <__aeabi_f2d>
 80022f8:	a317      	add	r3, pc, #92	; (adr r3, 8002358 <main+0x1428>)
 80022fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fe:	f7fd ffcd 	bl	800029c <__adddf3>
 8002302:	4603      	mov	r3, r0
 8002304:	460c      	mov	r4, r1
 8002306:	4618      	mov	r0, r3
 8002308:	4621      	mov	r1, r4
 800230a:	a315      	add	r3, pc, #84	; (adr r3, 8002360 <main+0x1430>)
 800230c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002310:	f7fe fc00 	bl	8000b14 <__aeabi_dcmpge>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d017      	beq.n	800234a <main+0x141a>
						      				 {
						      				VoltLow_sin =3.3;
 800231a:	4b1b      	ldr	r3, [pc, #108]	; (8002388 <main+0x1458>)
 800231c:	4a1c      	ldr	r2, [pc, #112]	; (8002390 <main+0x1460>)
 800231e:	601a      	str	r2, [r3, #0]
						      				sprintf(TxDataBuffer," Maximum  VoltLow_sin  3.3 V \r\n");
 8002320:	4a15      	ldr	r2, [pc, #84]	; (8002378 <main+0x1448>)
 8002322:	4b1c      	ldr	r3, [pc, #112]	; (8002394 <main+0x1464>)
 8002324:	4614      	mov	r4, r2
 8002326:	461d      	mov	r5, r3
 8002328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800232a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800232c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002330:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
						      				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002334:	4810      	ldr	r0, [pc, #64]	; (8002378 <main+0x1448>)
 8002336:	f7fd ff53 	bl	80001e0 <strlen>
 800233a:	4603      	mov	r3, r0
 800233c:	b29a      	uxth	r2, r3
 800233e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002342:	490d      	ldr	r1, [pc, #52]	; (8002378 <main+0x1448>)
 8002344:	480d      	ldr	r0, [pc, #52]	; (800237c <main+0x144c>)
 8002346:	f004 ff5a 	bl	80071fe <HAL_UART_Transmit>
						      				 }
						      				STATE_Display = StateDisplay_MenuSine_Print;
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <main+0x1454>)
 800234c:	221e      	movs	r2, #30
 800234e:	701a      	strb	r2, [r3, #0]
						      				 break;
 8002350:	e0ab      	b.n	80024aa <main+0x157a>
 8002352:	bf00      	nop
 8002354:	f3af 8000 	nop.w
 8002358:	9999999a 	.word	0x9999999a
 800235c:	3fb99999 	.word	0x3fb99999
 8002360:	66666666 	.word	0x66666666
 8002364:	400a6666 	.word	0x400a6666
 8002368:	20000008 	.word	0x20000008
 800236c:	200001b4 	.word	0x200001b4
 8002370:	66666667 	.word	0x66666667
 8002374:	08009cac 	.word	0x08009cac
 8002378:	200000a4 	.word	0x200000a4
 800237c:	200003a0 	.word	0x200003a0
 8002380:	08009cec 	.word	0x08009cec
 8002384:	200001a4 	.word	0x200001a4
 8002388:	200001f0 	.word	0x200001f0
 800238c:	08009d0c 	.word	0x08009d0c
 8002390:	40533333 	.word	0x40533333
 8002394:	08009d28 	.word	0x08009d28
						      				 case 'k':// -V Low

						      				 VoltLow_sin =VoltLow_sin -0.1;
 8002398:	4bb1      	ldr	r3, [pc, #708]	; (8002660 <main+0x1730>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe f8db 	bl	8000558 <__aeabi_f2d>
 80023a2:	a3ad      	add	r3, pc, #692	; (adr r3, 8002658 <main+0x1728>)
 80023a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a8:	f7fd ff76 	bl	8000298 <__aeabi_dsub>
 80023ac:	4603      	mov	r3, r0
 80023ae:	460c      	mov	r4, r1
 80023b0:	4618      	mov	r0, r3
 80023b2:	4621      	mov	r1, r4
 80023b4:	f7fe fbea 	bl	8000b8c <__aeabi_d2f>
 80023b8:	4602      	mov	r2, r0
 80023ba:	4ba9      	ldr	r3, [pc, #676]	; (8002660 <main+0x1730>)
 80023bc:	601a      	str	r2, [r3, #0]
						      				 t= VoltLow_sin*10;
 80023be:	4ba8      	ldr	r3, [pc, #672]	; (8002660 <main+0x1730>)
 80023c0:	edd3 7a00 	vldr	s15, [r3]
 80023c4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80023c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023d0:	ee17 2a90 	vmov	r2, s15
 80023d4:	4ba3      	ldr	r3, [pc, #652]	; (8002664 <main+0x1734>)
 80023d6:	601a      	str	r2, [r3, #0]
						      				sprintf(TxDataBuffer," VoltLow_sinis [%d.%d] V \r\n" ,t/10,t%10);
 80023d8:	4ba2      	ldr	r3, [pc, #648]	; (8002664 <main+0x1734>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4aa2      	ldr	r2, [pc, #648]	; (8002668 <main+0x1738>)
 80023de:	fb82 1203 	smull	r1, r2, r2, r3
 80023e2:	1092      	asrs	r2, r2, #2
 80023e4:	17db      	asrs	r3, r3, #31
 80023e6:	1ad0      	subs	r0, r2, r3
 80023e8:	4b9e      	ldr	r3, [pc, #632]	; (8002664 <main+0x1734>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4b9e      	ldr	r3, [pc, #632]	; (8002668 <main+0x1738>)
 80023ee:	fb83 1302 	smull	r1, r3, r3, r2
 80023f2:	1099      	asrs	r1, r3, #2
 80023f4:	17d3      	asrs	r3, r2, #31
 80023f6:	1ac9      	subs	r1, r1, r3
 80023f8:	460b      	mov	r3, r1
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	1ad1      	subs	r1, r2, r3
 8002402:	460b      	mov	r3, r1
 8002404:	4602      	mov	r2, r0
 8002406:	4999      	ldr	r1, [pc, #612]	; (800266c <main+0x173c>)
 8002408:	4899      	ldr	r0, [pc, #612]	; (8002670 <main+0x1740>)
 800240a:	f005 fe2b 	bl	8008064 <siprintf>
						      				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800240e:	4898      	ldr	r0, [pc, #608]	; (8002670 <main+0x1740>)
 8002410:	f7fd fee6 	bl	80001e0 <strlen>
 8002414:	4603      	mov	r3, r0
 8002416:	b29a      	uxth	r2, r3
 8002418:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800241c:	4994      	ldr	r1, [pc, #592]	; (8002670 <main+0x1740>)
 800241e:	4895      	ldr	r0, [pc, #596]	; (8002674 <main+0x1744>)
 8002420:	f004 feed 	bl	80071fe <HAL_UART_Transmit>
						      				if (VoltLow_sin <=0)
 8002424:	4b8e      	ldr	r3, [pc, #568]	; (8002660 <main+0x1730>)
 8002426:	edd3 7a00 	vldr	s15, [r3]
 800242a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800242e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002432:	d81b      	bhi.n	800246c <main+0x153c>
						      				{
						      				VoltLow_sin=0;
 8002434:	4b8a      	ldr	r3, [pc, #552]	; (8002660 <main+0x1730>)
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
						      				sprintf(TxDataBuffer," Lower VoltLow_sin  0 V \r\n");
 800243c:	4a8c      	ldr	r2, [pc, #560]	; (8002670 <main+0x1740>)
 800243e:	4b8e      	ldr	r3, [pc, #568]	; (8002678 <main+0x1748>)
 8002440:	4614      	mov	r4, r2
 8002442:	461d      	mov	r5, r3
 8002444:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002446:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002448:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800244c:	c403      	stmia	r4!, {r0, r1}
 800244e:	8022      	strh	r2, [r4, #0]
 8002450:	3402      	adds	r4, #2
 8002452:	0c13      	lsrs	r3, r2, #16
 8002454:	7023      	strb	r3, [r4, #0]
						      				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002456:	4886      	ldr	r0, [pc, #536]	; (8002670 <main+0x1740>)
 8002458:	f7fd fec2 	bl	80001e0 <strlen>
 800245c:	4603      	mov	r3, r0
 800245e:	b29a      	uxth	r2, r3
 8002460:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002464:	4982      	ldr	r1, [pc, #520]	; (8002670 <main+0x1740>)
 8002466:	4883      	ldr	r0, [pc, #524]	; (8002674 <main+0x1744>)
 8002468:	f004 fec9 	bl	80071fe <HAL_UART_Transmit>
						      				}
						      				STATE_Display = StateDisplay_MenuSine_Print;
 800246c:	4b83      	ldr	r3, [pc, #524]	; (800267c <main+0x174c>)
 800246e:	221e      	movs	r2, #30
 8002470:	701a      	strb	r2, [r3, #0]
						      				break;
 8002472:	e01a      	b.n	80024aa <main+0x157a>


						      			default: //show error

						      			 sprintf(TxDataBuffer, "unidentified input \r\n");
 8002474:	4a7e      	ldr	r2, [pc, #504]	; (8002670 <main+0x1740>)
 8002476:	4b82      	ldr	r3, [pc, #520]	; (8002680 <main+0x1750>)
 8002478:	4614      	mov	r4, r2
 800247a:	461d      	mov	r5, r3
 800247c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800247e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002480:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002484:	6020      	str	r0, [r4, #0]
 8002486:	3404      	adds	r4, #4
 8002488:	8021      	strh	r1, [r4, #0]
						      			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800248a:	4879      	ldr	r0, [pc, #484]	; (8002670 <main+0x1740>)
 800248c:	f7fd fea8 	bl	80001e0 <strlen>
 8002490:	4603      	mov	r3, r0
 8002492:	b29a      	uxth	r2, r3
 8002494:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002498:	4975      	ldr	r1, [pc, #468]	; (8002670 <main+0x1740>)
 800249a:	4876      	ldr	r0, [pc, #472]	; (8002674 <main+0x1744>)
 800249c:	f004 feaf 	bl	80071fe <HAL_UART_Transmit>
						      			  STATE_Display = StateDisplay_MenuSine_Print;
 80024a0:	4b76      	ldr	r3, [pc, #472]	; (800267c <main+0x174c>)
 80024a2:	221e      	movs	r2, #30
 80024a4:	701a      	strb	r2, [r3, #0]
						      			 break;
 80024a6:	e000      	b.n	80024aa <main+0x157a>
						      				 break;
 80024a8:	bf00      	nop


						      				}

						      	 break;
 80024aa:	f000 bcb8 	b.w	8002e1e <main+0x1eee>

						      	//Menu 3
						      		case StateDisplay_MenuSquare_Print: //display state

						      sprintf(TxDataBuffer, "Square \r\n a. +0.1 Hz \r\n s. -0.1 Hz \r\n d. On/Off \r\n x. Back \r\n g. V High +0.1V \r\n h. High -0.1V \r\n j. V Low +0.1V \r\n k. Low -0.1V  \r\n \r\n l. duty +10  \r\n \r\n p. duty -10  \r\n");
 80024ae:	4a70      	ldr	r2, [pc, #448]	; (8002670 <main+0x1740>)
 80024b0:	4b74      	ldr	r3, [pc, #464]	; (8002684 <main+0x1754>)
 80024b2:	4610      	mov	r0, r2
 80024b4:	4619      	mov	r1, r3
 80024b6:	23ab      	movs	r3, #171	; 0xab
 80024b8:	461a      	mov	r2, r3
 80024ba:	f005 fdbf 	bl	800803c <memcpy>
						       HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80024be:	486c      	ldr	r0, [pc, #432]	; (8002670 <main+0x1740>)
 80024c0:	f7fd fe8e 	bl	80001e0 <strlen>
 80024c4:	4603      	mov	r3, r0
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024cc:	4968      	ldr	r1, [pc, #416]	; (8002670 <main+0x1740>)
 80024ce:	4869      	ldr	r0, [pc, #420]	; (8002674 <main+0x1744>)
 80024d0:	f004 fe95 	bl	80071fe <HAL_UART_Transmit>

						      	STATE_Display = StateDisplay_MenuSquare_WaitInput;
 80024d4:	4b69      	ldr	r3, [pc, #420]	; (800267c <main+0x174c>)
 80024d6:	2229      	movs	r2, #41	; 0x29
 80024d8:	701a      	strb	r2, [r3, #0]
						      	break;
 80024da:	f000 bca0 	b.w	8002e1e <main+0x1eee>

						      	 case StateDisplay_MenuSquare_WaitInput: //make decision state
						      	 switch (inputchar)
 80024de:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80024e2:	2b6a      	cmp	r3, #106	; 0x6a
 80024e4:	f000 8301 	beq.w	8002aea <main+0x1bba>
 80024e8:	2b6a      	cmp	r3, #106	; 0x6a
 80024ea:	dc13      	bgt.n	8002514 <main+0x15e4>
 80024ec:	2b64      	cmp	r3, #100	; 0x64
 80024ee:	d026      	beq.n	800253e <main+0x160e>
 80024f0:	2b64      	cmp	r3, #100	; 0x64
 80024f2:	dc07      	bgt.n	8002504 <main+0x15d4>
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f8:	f000 848f 	beq.w	8002e1a <main+0x1eea>
 80024fc:	2b61      	cmp	r3, #97	; 0x61
 80024fe:	d054      	beq.n	80025aa <main+0x167a>
 8002500:	f000 bc71 	b.w	8002de6 <main+0x1eb6>
 8002504:	2b67      	cmp	r3, #103	; 0x67
 8002506:	f000 8186 	beq.w	8002816 <main+0x18e6>
 800250a:	2b68      	cmp	r3, #104	; 0x68
 800250c:	f000 824a 	beq.w	80029a4 <main+0x1a74>
 8002510:	f000 bc69 	b.w	8002de6 <main+0x1eb6>
 8002514:	2b70      	cmp	r3, #112	; 0x70
 8002516:	f000 845a 	beq.w	8002dce <main+0x1e9e>
 800251a:	2b70      	cmp	r3, #112	; 0x70
 800251c:	dc07      	bgt.n	800252e <main+0x15fe>
 800251e:	2b6b      	cmp	r3, #107	; 0x6b
 8002520:	f000 83a6 	beq.w	8002c70 <main+0x1d40>
 8002524:	2b6c      	cmp	r3, #108	; 0x6c
 8002526:	f000 8446 	beq.w	8002db6 <main+0x1e86>
 800252a:	f000 bc5c 	b.w	8002de6 <main+0x1eb6>
 800252e:	2b73      	cmp	r3, #115	; 0x73
 8002530:	f000 80d2 	beq.w	80026d8 <main+0x17a8>
 8002534:	2b78      	cmp	r3, #120	; 0x78
 8002536:	f000 8167 	beq.w	8002808 <main+0x18d8>
 800253a:	f000 bc54 	b.w	8002de6 <main+0x1eb6>
						      		{
						      			case -1:
						      			 break;
						      			 case 'd': // on/off

						      	if (a==0)
 800253e:	4b52      	ldr	r3, [pc, #328]	; (8002688 <main+0x1758>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d114      	bne.n	8002570 <main+0x1640>
						      	 {

						      	 sprintf(TxDataBuffer, "Turned On \r\n");
 8002546:	4a4a      	ldr	r2, [pc, #296]	; (8002670 <main+0x1740>)
 8002548:	4b50      	ldr	r3, [pc, #320]	; (800268c <main+0x175c>)
 800254a:	4614      	mov	r4, r2
 800254c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800254e:	c407      	stmia	r4!, {r0, r1, r2}
 8002550:	7023      	strb	r3, [r4, #0]
						      		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002552:	4847      	ldr	r0, [pc, #284]	; (8002670 <main+0x1740>)
 8002554:	f7fd fe44 	bl	80001e0 <strlen>
 8002558:	4603      	mov	r3, r0
 800255a:	b29a      	uxth	r2, r3
 800255c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002560:	4943      	ldr	r1, [pc, #268]	; (8002670 <main+0x1740>)
 8002562:	4844      	ldr	r0, [pc, #272]	; (8002674 <main+0x1744>)
 8002564:	f004 fe4b 	bl	80071fe <HAL_UART_Transmit>
						      		a=1;
 8002568:	4b47      	ldr	r3, [pc, #284]	; (8002688 <main+0x1758>)
 800256a:	2201      	movs	r2, #1
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	e017      	b.n	80025a0 <main+0x1670>

						      		 }
						      		else if (a==1)
 8002570:	4b45      	ldr	r3, [pc, #276]	; (8002688 <main+0x1758>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d113      	bne.n	80025a0 <main+0x1670>
						      			 {
						      		a=0;
 8002578:	4b43      	ldr	r3, [pc, #268]	; (8002688 <main+0x1758>)
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
						      		sprintf(TxDataBuffer, "Turned Off \r\n");
 800257e:	4a3c      	ldr	r2, [pc, #240]	; (8002670 <main+0x1740>)
 8002580:	4b43      	ldr	r3, [pc, #268]	; (8002690 <main+0x1760>)
 8002582:	4614      	mov	r4, r2
 8002584:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002586:	c407      	stmia	r4!, {r0, r1, r2}
 8002588:	8023      	strh	r3, [r4, #0]
						      		 HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800258a:	4839      	ldr	r0, [pc, #228]	; (8002670 <main+0x1740>)
 800258c:	f7fd fe28 	bl	80001e0 <strlen>
 8002590:	4603      	mov	r3, r0
 8002592:	b29a      	uxth	r2, r3
 8002594:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002598:	4935      	ldr	r1, [pc, #212]	; (8002670 <main+0x1740>)
 800259a:	4836      	ldr	r0, [pc, #216]	; (8002674 <main+0x1744>)
 800259c:	f004 fe2f 	bl	80071fe <HAL_UART_Transmit>

						      		 }
						      		STATE_Display = StateDisplay_MenuSquare_Print;
 80025a0:	4b36      	ldr	r3, [pc, #216]	; (800267c <main+0x174c>)
 80025a2:	2228      	movs	r2, #40	; 0x28
 80025a4:	701a      	strb	r2, [r3, #0]

						      		break;
 80025a6:	f000 bc39 	b.w	8002e1c <main+0x1eec>
						      			case 'a':  // เพิ่มความถี่

						      			a=1;
 80025aa:	4b37      	ldr	r3, [pc, #220]	; (8002688 <main+0x1758>)
 80025ac:	2201      	movs	r2, #1
 80025ae:	601a      	str	r2, [r3, #0]
						      			 c=0;
 80025b0:	4b38      	ldr	r3, [pc, #224]	; (8002694 <main+0x1764>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
						      			if(F_Square <10)
 80025b6:	4b38      	ldr	r3, [pc, #224]	; (8002698 <main+0x1768>)
 80025b8:	edd3 7a00 	vldr	s15, [r3]
 80025bc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80025c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c8:	d56a      	bpl.n	80026a0 <main+0x1770>
						      			{
						      			F_Square+=0.1;
 80025ca:	4b33      	ldr	r3, [pc, #204]	; (8002698 <main+0x1768>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fd ffc2 	bl	8000558 <__aeabi_f2d>
 80025d4:	a320      	add	r3, pc, #128	; (adr r3, 8002658 <main+0x1728>)
 80025d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025da:	f7fd fe5f 	bl	800029c <__adddf3>
 80025de:	4603      	mov	r3, r0
 80025e0:	460c      	mov	r4, r1
 80025e2:	4618      	mov	r0, r3
 80025e4:	4621      	mov	r1, r4
 80025e6:	f7fe fad1 	bl	8000b8c <__aeabi_d2f>
 80025ea:	4602      	mov	r2, r0
 80025ec:	4b2a      	ldr	r3, [pc, #168]	; (8002698 <main+0x1768>)
 80025ee:	601a      	str	r2, [r3, #0]
						      			t=F_Square*10;
 80025f0:	4b29      	ldr	r3, [pc, #164]	; (8002698 <main+0x1768>)
 80025f2:	edd3 7a00 	vldr	s15, [r3]
 80025f6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80025fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002602:	ee17 2a90 	vmov	r2, s15
 8002606:	4b17      	ldr	r3, [pc, #92]	; (8002664 <main+0x1734>)
 8002608:	601a      	str	r2, [r3, #0]
						      			sprintf(TxDataBuffer," F_Square is [%d.%d] Hz \r\n" ,t/10,t%10);
 800260a:	4b16      	ldr	r3, [pc, #88]	; (8002664 <main+0x1734>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a16      	ldr	r2, [pc, #88]	; (8002668 <main+0x1738>)
 8002610:	fb82 1203 	smull	r1, r2, r2, r3
 8002614:	1092      	asrs	r2, r2, #2
 8002616:	17db      	asrs	r3, r3, #31
 8002618:	1ad0      	subs	r0, r2, r3
 800261a:	4b12      	ldr	r3, [pc, #72]	; (8002664 <main+0x1734>)
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	4b12      	ldr	r3, [pc, #72]	; (8002668 <main+0x1738>)
 8002620:	fb83 1302 	smull	r1, r3, r3, r2
 8002624:	1099      	asrs	r1, r3, #2
 8002626:	17d3      	asrs	r3, r2, #31
 8002628:	1ac9      	subs	r1, r1, r3
 800262a:	460b      	mov	r3, r1
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	440b      	add	r3, r1
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	1ad1      	subs	r1, r2, r3
 8002634:	460b      	mov	r3, r1
 8002636:	4602      	mov	r2, r0
 8002638:	4918      	ldr	r1, [pc, #96]	; (800269c <main+0x176c>)
 800263a:	480d      	ldr	r0, [pc, #52]	; (8002670 <main+0x1740>)
 800263c:	f005 fd12 	bl	8008064 <siprintf>
						      			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002640:	480b      	ldr	r0, [pc, #44]	; (8002670 <main+0x1740>)
 8002642:	f7fd fdcd 	bl	80001e0 <strlen>
 8002646:	4603      	mov	r3, r0
 8002648:	b29a      	uxth	r2, r3
 800264a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800264e:	4908      	ldr	r1, [pc, #32]	; (8002670 <main+0x1740>)
 8002650:	4808      	ldr	r0, [pc, #32]	; (8002674 <main+0x1744>)
 8002652:	f004 fdd4 	bl	80071fe <HAL_UART_Transmit>
 8002656:	e03b      	b.n	80026d0 <main+0x17a0>
 8002658:	9999999a 	.word	0x9999999a
 800265c:	3fb99999 	.word	0x3fb99999
 8002660:	200001f0 	.word	0x200001f0
 8002664:	200001b4 	.word	0x200001b4
 8002668:	66666667 	.word	0x66666667
 800266c:	08009d0c 	.word	0x08009d0c
 8002670:	200000a4 	.word	0x200000a4
 8002674:	200003a0 	.word	0x200003a0
 8002678:	08009d48 	.word	0x08009d48
 800267c:	200001a4 	.word	0x200001a4
 8002680:	08009918 	.word	0x08009918
 8002684:	08009d64 	.word	0x08009d64
 8002688:	200001ac 	.word	0x200001ac
 800268c:	080099c4 	.word	0x080099c4
 8002690:	080099d4 	.word	0x080099d4
 8002694:	200001b0 	.word	0x200001b0
 8002698:	200001f4 	.word	0x200001f4
 800269c:	08009e10 	.word	0x08009e10
						      			 }
						      			 else
						      			 {
						      			sprintf(TxDataBuffer," the highest frequency 10Hz \r\n" );
 80026a0:	4ab1      	ldr	r2, [pc, #708]	; (8002968 <main+0x1a38>)
 80026a2:	4bb2      	ldr	r3, [pc, #712]	; (800296c <main+0x1a3c>)
 80026a4:	4614      	mov	r4, r2
 80026a6:	461d      	mov	r5, r3
 80026a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80026b0:	c407      	stmia	r4!, {r0, r1, r2}
 80026b2:	8023      	strh	r3, [r4, #0]
 80026b4:	3402      	adds	r4, #2
 80026b6:	0c1b      	lsrs	r3, r3, #16
 80026b8:	7023      	strb	r3, [r4, #0]
						      			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80026ba:	48ab      	ldr	r0, [pc, #684]	; (8002968 <main+0x1a38>)
 80026bc:	f7fd fd90 	bl	80001e0 <strlen>
 80026c0:	4603      	mov	r3, r0
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026c8:	49a7      	ldr	r1, [pc, #668]	; (8002968 <main+0x1a38>)
 80026ca:	48a9      	ldr	r0, [pc, #676]	; (8002970 <main+0x1a40>)
 80026cc:	f004 fd97 	bl	80071fe <HAL_UART_Transmit>
						      			}


						      			 STATE_Display = StateDisplay_MenuSquare_Print ;
 80026d0:	4ba8      	ldr	r3, [pc, #672]	; (8002974 <main+0x1a44>)
 80026d2:	2228      	movs	r2, #40	; 0x28
 80026d4:	701a      	strb	r2, [r3, #0]
						      			 break;
 80026d6:	e3a1      	b.n	8002e1c <main+0x1eec>
						      			case 's': //  ลดความถี่
						      				 c=0;
 80026d8:	4ba7      	ldr	r3, [pc, #668]	; (8002978 <main+0x1a48>)
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]

						      			 a=1;
 80026de:	4ba7      	ldr	r3, [pc, #668]	; (800297c <main+0x1a4c>)
 80026e0:	2201      	movs	r2, #1
 80026e2:	601a      	str	r2, [r3, #0]
						      			if(F_Square-0.1>0){
 80026e4:	4ba6      	ldr	r3, [pc, #664]	; (8002980 <main+0x1a50>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fd ff35 	bl	8000558 <__aeabi_f2d>
 80026ee:	a39a      	add	r3, pc, #616	; (adr r3, 8002958 <main+0x1a28>)
 80026f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f4:	f7fd fdd0 	bl	8000298 <__aeabi_dsub>
 80026f8:	4603      	mov	r3, r0
 80026fa:	460c      	mov	r4, r1
 80026fc:	4618      	mov	r0, r3
 80026fe:	4621      	mov	r1, r4
 8002700:	f04f 0200 	mov.w	r2, #0
 8002704:	f04f 0300 	mov.w	r3, #0
 8002708:	f7fe fa0e 	bl	8000b28 <__aeabi_dcmpgt>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d046      	beq.n	80027a0 <main+0x1870>
						      			 F_Square=F_Square-0.1;
 8002712:	4b9b      	ldr	r3, [pc, #620]	; (8002980 <main+0x1a50>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7fd ff1e 	bl	8000558 <__aeabi_f2d>
 800271c:	a38e      	add	r3, pc, #568	; (adr r3, 8002958 <main+0x1a28>)
 800271e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002722:	f7fd fdb9 	bl	8000298 <__aeabi_dsub>
 8002726:	4603      	mov	r3, r0
 8002728:	460c      	mov	r4, r1
 800272a:	4618      	mov	r0, r3
 800272c:	4621      	mov	r1, r4
 800272e:	f7fe fa2d 	bl	8000b8c <__aeabi_d2f>
 8002732:	4602      	mov	r2, r0
 8002734:	4b92      	ldr	r3, [pc, #584]	; (8002980 <main+0x1a50>)
 8002736:	601a      	str	r2, [r3, #0]
						      			t=F_Square*10;
 8002738:	4b91      	ldr	r3, [pc, #580]	; (8002980 <main+0x1a50>)
 800273a:	edd3 7a00 	vldr	s15, [r3]
 800273e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002742:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002746:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800274a:	ee17 2a90 	vmov	r2, s15
 800274e:	4b8d      	ldr	r3, [pc, #564]	; (8002984 <main+0x1a54>)
 8002750:	601a      	str	r2, [r3, #0]
						      			sprintf(TxDataBuffer," F_Square is [%d.%d] Hz \r\n" ,t/10,t%10);
 8002752:	4b8c      	ldr	r3, [pc, #560]	; (8002984 <main+0x1a54>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a8c      	ldr	r2, [pc, #560]	; (8002988 <main+0x1a58>)
 8002758:	fb82 1203 	smull	r1, r2, r2, r3
 800275c:	1092      	asrs	r2, r2, #2
 800275e:	17db      	asrs	r3, r3, #31
 8002760:	1ad0      	subs	r0, r2, r3
 8002762:	4b88      	ldr	r3, [pc, #544]	; (8002984 <main+0x1a54>)
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	4b88      	ldr	r3, [pc, #544]	; (8002988 <main+0x1a58>)
 8002768:	fb83 1302 	smull	r1, r3, r3, r2
 800276c:	1099      	asrs	r1, r3, #2
 800276e:	17d3      	asrs	r3, r2, #31
 8002770:	1ac9      	subs	r1, r1, r3
 8002772:	460b      	mov	r3, r1
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	440b      	add	r3, r1
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	1ad1      	subs	r1, r2, r3
 800277c:	460b      	mov	r3, r1
 800277e:	4602      	mov	r2, r0
 8002780:	4982      	ldr	r1, [pc, #520]	; (800298c <main+0x1a5c>)
 8002782:	4879      	ldr	r0, [pc, #484]	; (8002968 <main+0x1a38>)
 8002784:	f005 fc6e 	bl	8008064 <siprintf>
						      			 HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002788:	4877      	ldr	r0, [pc, #476]	; (8002968 <main+0x1a38>)
 800278a:	f7fd fd29 	bl	80001e0 <strlen>
 800278e:	4603      	mov	r3, r0
 8002790:	b29a      	uxth	r2, r3
 8002792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002796:	4974      	ldr	r1, [pc, #464]	; (8002968 <main+0x1a38>)
 8002798:	4875      	ldr	r0, [pc, #468]	; (8002970 <main+0x1a40>)
 800279a:	f004 fd30 	bl	80071fe <HAL_UART_Transmit>
 800279e:	e02f      	b.n	8002800 <main+0x18d0>
						      			}
						      			 else if(F_Square-0.1<=0)
 80027a0:	4b77      	ldr	r3, [pc, #476]	; (8002980 <main+0x1a50>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fd fed7 	bl	8000558 <__aeabi_f2d>
 80027aa:	a36b      	add	r3, pc, #428	; (adr r3, 8002958 <main+0x1a28>)
 80027ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b0:	f7fd fd72 	bl	8000298 <__aeabi_dsub>
 80027b4:	4603      	mov	r3, r0
 80027b6:	460c      	mov	r4, r1
 80027b8:	4618      	mov	r0, r3
 80027ba:	4621      	mov	r1, r4
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	f7fe f99c 	bl	8000b00 <__aeabi_dcmple>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d018      	beq.n	8002800 <main+0x18d0>
						      			{
						      			F_Square=0;
 80027ce:	4b6c      	ldr	r3, [pc, #432]	; (8002980 <main+0x1a50>)
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
						      			sprintf(TxDataBuffer," the Lower frequency 0Hz \r\n" );
 80027d6:	4a64      	ldr	r2, [pc, #400]	; (8002968 <main+0x1a38>)
 80027d8:	4b6d      	ldr	r3, [pc, #436]	; (8002990 <main+0x1a60>)
 80027da:	4614      	mov	r4, r2
 80027dc:	461d      	mov	r5, r3
 80027de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
						      			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80027ea:	485f      	ldr	r0, [pc, #380]	; (8002968 <main+0x1a38>)
 80027ec:	f7fd fcf8 	bl	80001e0 <strlen>
 80027f0:	4603      	mov	r3, r0
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027f8:	495b      	ldr	r1, [pc, #364]	; (8002968 <main+0x1a38>)
 80027fa:	485d      	ldr	r0, [pc, #372]	; (8002970 <main+0x1a40>)
 80027fc:	f004 fcff 	bl	80071fe <HAL_UART_Transmit>

						      			}

						      			STATE_Display = StateDisplay_MenuSquare_Print;
 8002800:	4b5c      	ldr	r3, [pc, #368]	; (8002974 <main+0x1a44>)
 8002802:	2228      	movs	r2, #40	; 0x28
 8002804:	701a      	strb	r2, [r3, #0]

						      			 break;
 8002806:	e309      	b.n	8002e1c <main+0x1eec>

						      			 case 'x': // back to main manu

						      			 a=0;
 8002808:	4b5c      	ldr	r3, [pc, #368]	; (800297c <main+0x1a4c>)
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
						      			STATE_Display = StateDisplay_MenuRoot_Print;
 800280e:	4b59      	ldr	r3, [pc, #356]	; (8002974 <main+0x1a44>)
 8002810:	220a      	movs	r2, #10
 8002812:	701a      	strb	r2, [r3, #0]
						      			 break;
 8002814:	e302      	b.n	8002e1c <main+0x1eec>
						      			 case 'g':// +V High
						      				if (VoltHigh_Square+0.1< 3.3){
 8002816:	4b5f      	ldr	r3, [pc, #380]	; (8002994 <main+0x1a64>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f7fd fe9c 	bl	8000558 <__aeabi_f2d>
 8002820:	a34d      	add	r3, pc, #308	; (adr r3, 8002958 <main+0x1a28>)
 8002822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002826:	f7fd fd39 	bl	800029c <__adddf3>
 800282a:	4603      	mov	r3, r0
 800282c:	460c      	mov	r4, r1
 800282e:	4618      	mov	r0, r3
 8002830:	4621      	mov	r1, r4
 8002832:	a34b      	add	r3, pc, #300	; (adr r3, 8002960 <main+0x1a30>)
 8002834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002838:	f7fe f958 	bl	8000aec <__aeabi_dcmplt>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d046      	beq.n	80028d0 <main+0x19a0>
						      			VoltHigh_Square =VoltHigh_Square +0.1;
 8002842:	4b54      	ldr	r3, [pc, #336]	; (8002994 <main+0x1a64>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f7fd fe86 	bl	8000558 <__aeabi_f2d>
 800284c:	a342      	add	r3, pc, #264	; (adr r3, 8002958 <main+0x1a28>)
 800284e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002852:	f7fd fd23 	bl	800029c <__adddf3>
 8002856:	4603      	mov	r3, r0
 8002858:	460c      	mov	r4, r1
 800285a:	4618      	mov	r0, r3
 800285c:	4621      	mov	r1, r4
 800285e:	f7fe f995 	bl	8000b8c <__aeabi_d2f>
 8002862:	4602      	mov	r2, r0
 8002864:	4b4b      	ldr	r3, [pc, #300]	; (8002994 <main+0x1a64>)
 8002866:	601a      	str	r2, [r3, #0]
						      			t=VoltHigh_Square*10;
 8002868:	4b4a      	ldr	r3, [pc, #296]	; (8002994 <main+0x1a64>)
 800286a:	edd3 7a00 	vldr	s15, [r3]
 800286e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002872:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002876:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800287a:	ee17 2a90 	vmov	r2, s15
 800287e:	4b41      	ldr	r3, [pc, #260]	; (8002984 <main+0x1a54>)
 8002880:	601a      	str	r2, [r3, #0]
						      			sprintf(TxDataBuffer,"VoltHigh_Square is [%d.%d] V \r\n" ,t/10,t%10);
 8002882:	4b40      	ldr	r3, [pc, #256]	; (8002984 <main+0x1a54>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a40      	ldr	r2, [pc, #256]	; (8002988 <main+0x1a58>)
 8002888:	fb82 1203 	smull	r1, r2, r2, r3
 800288c:	1092      	asrs	r2, r2, #2
 800288e:	17db      	asrs	r3, r3, #31
 8002890:	1ad0      	subs	r0, r2, r3
 8002892:	4b3c      	ldr	r3, [pc, #240]	; (8002984 <main+0x1a54>)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	4b3c      	ldr	r3, [pc, #240]	; (8002988 <main+0x1a58>)
 8002898:	fb83 1302 	smull	r1, r3, r3, r2
 800289c:	1099      	asrs	r1, r3, #2
 800289e:	17d3      	asrs	r3, r2, #31
 80028a0:	1ac9      	subs	r1, r1, r3
 80028a2:	460b      	mov	r3, r1
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	1ad1      	subs	r1, r2, r3
 80028ac:	460b      	mov	r3, r1
 80028ae:	4602      	mov	r2, r0
 80028b0:	4939      	ldr	r1, [pc, #228]	; (8002998 <main+0x1a68>)
 80028b2:	482d      	ldr	r0, [pc, #180]	; (8002968 <main+0x1a38>)
 80028b4:	f005 fbd6 	bl	8008064 <siprintf>
						      			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80028b8:	482b      	ldr	r0, [pc, #172]	; (8002968 <main+0x1a38>)
 80028ba:	f7fd fc91 	bl	80001e0 <strlen>
 80028be:	4603      	mov	r3, r0
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028c6:	4928      	ldr	r1, [pc, #160]	; (8002968 <main+0x1a38>)
 80028c8:	4829      	ldr	r0, [pc, #164]	; (8002970 <main+0x1a40>)
 80028ca:	f004 fc98 	bl	80071fe <HAL_UART_Transmit>
 80028ce:	e03e      	b.n	800294e <main+0x1a1e>
						      				}
						      			else if (VoltHigh_Square+0.1>=3.3)
 80028d0:	4b30      	ldr	r3, [pc, #192]	; (8002994 <main+0x1a64>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fd fe3f 	bl	8000558 <__aeabi_f2d>
 80028da:	a31f      	add	r3, pc, #124	; (adr r3, 8002958 <main+0x1a28>)
 80028dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e0:	f7fd fcdc 	bl	800029c <__adddf3>
 80028e4:	4603      	mov	r3, r0
 80028e6:	460c      	mov	r4, r1
 80028e8:	4618      	mov	r0, r3
 80028ea:	4621      	mov	r1, r4
 80028ec:	a31c      	add	r3, pc, #112	; (adr r3, 8002960 <main+0x1a30>)
 80028ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f2:	f7fe f90f 	bl	8000b14 <__aeabi_dcmpge>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d028      	beq.n	800294e <main+0x1a1e>
						      			{
						      			VoltHigh_Square=3.3;
 80028fc:	4b25      	ldr	r3, [pc, #148]	; (8002994 <main+0x1a64>)
 80028fe:	4a27      	ldr	r2, [pc, #156]	; (800299c <main+0x1a6c>)
 8002900:	601a      	str	r2, [r3, #0]
						      			sprintf(TxDataBuffer,"Maximum VoltHigh_Square is 3.3 V \r\n" ,t/10,t%10);
 8002902:	4b20      	ldr	r3, [pc, #128]	; (8002984 <main+0x1a54>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a20      	ldr	r2, [pc, #128]	; (8002988 <main+0x1a58>)
 8002908:	fb82 1203 	smull	r1, r2, r2, r3
 800290c:	1092      	asrs	r2, r2, #2
 800290e:	17db      	asrs	r3, r3, #31
 8002910:	1ad0      	subs	r0, r2, r3
 8002912:	4b1c      	ldr	r3, [pc, #112]	; (8002984 <main+0x1a54>)
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	4b1c      	ldr	r3, [pc, #112]	; (8002988 <main+0x1a58>)
 8002918:	fb83 1302 	smull	r1, r3, r3, r2
 800291c:	1099      	asrs	r1, r3, #2
 800291e:	17d3      	asrs	r3, r2, #31
 8002920:	1ac9      	subs	r1, r1, r3
 8002922:	460b      	mov	r3, r1
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	440b      	add	r3, r1
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	1ad1      	subs	r1, r2, r3
 800292c:	460b      	mov	r3, r1
 800292e:	4602      	mov	r2, r0
 8002930:	491b      	ldr	r1, [pc, #108]	; (80029a0 <main+0x1a70>)
 8002932:	480d      	ldr	r0, [pc, #52]	; (8002968 <main+0x1a38>)
 8002934:	f005 fb96 	bl	8008064 <siprintf>
						      			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002938:	480b      	ldr	r0, [pc, #44]	; (8002968 <main+0x1a38>)
 800293a:	f7fd fc51 	bl	80001e0 <strlen>
 800293e:	4603      	mov	r3, r0
 8002940:	b29a      	uxth	r2, r3
 8002942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002946:	4908      	ldr	r1, [pc, #32]	; (8002968 <main+0x1a38>)
 8002948:	4809      	ldr	r0, [pc, #36]	; (8002970 <main+0x1a40>)
 800294a:	f004 fc58 	bl	80071fe <HAL_UART_Transmit>
						      			}
						      			STATE_Display = StateDisplay_MenuSquare_Print;
 800294e:	4b09      	ldr	r3, [pc, #36]	; (8002974 <main+0x1a44>)
 8002950:	2228      	movs	r2, #40	; 0x28
 8002952:	701a      	strb	r2, [r3, #0]
						      		break;
 8002954:	e262      	b.n	8002e1c <main+0x1eec>
 8002956:	bf00      	nop
 8002958:	9999999a 	.word	0x9999999a
 800295c:	3fb99999 	.word	0x3fb99999
 8002960:	66666666 	.word	0x66666666
 8002964:	400a6666 	.word	0x400a6666
 8002968:	200000a4 	.word	0x200000a4
 800296c:	08009c70 	.word	0x08009c70
 8002970:	200003a0 	.word	0x200003a0
 8002974:	200001a4 	.word	0x200001a4
 8002978:	200001b0 	.word	0x200001b0
 800297c:	200001ac 	.word	0x200001ac
 8002980:	200001f4 	.word	0x200001f4
 8002984:	200001b4 	.word	0x200001b4
 8002988:	66666667 	.word	0x66666667
 800298c:	08009e10 	.word	0x08009e10
 8002990:	08009e2c 	.word	0x08009e2c
 8002994:	2000000c 	.word	0x2000000c
 8002998:	08009e48 	.word	0x08009e48
 800299c:	40533333 	.word	0x40533333
 80029a0:	08009e68 	.word	0x08009e68
						      			 case 'h':// -V High
						      				if (VoltHigh_Square-0.1>0){
 80029a4:	4ba6      	ldr	r3, [pc, #664]	; (8002c40 <main+0x1d10>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fd fdd5 	bl	8000558 <__aeabi_f2d>
 80029ae:	a3a0      	add	r3, pc, #640	; (adr r3, 8002c30 <main+0x1d00>)
 80029b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b4:	f7fd fc70 	bl	8000298 <__aeabi_dsub>
 80029b8:	4603      	mov	r3, r0
 80029ba:	460c      	mov	r4, r1
 80029bc:	4618      	mov	r0, r3
 80029be:	4621      	mov	r1, r4
 80029c0:	f04f 0200 	mov.w	r2, #0
 80029c4:	f04f 0300 	mov.w	r3, #0
 80029c8:	f7fe f8ae 	bl	8000b28 <__aeabi_dcmpgt>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d046      	beq.n	8002a60 <main+0x1b30>
						      			VoltHigh_Square =VoltHigh_Square -0.1;
 80029d2:	4b9b      	ldr	r3, [pc, #620]	; (8002c40 <main+0x1d10>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fd fdbe 	bl	8000558 <__aeabi_f2d>
 80029dc:	a394      	add	r3, pc, #592	; (adr r3, 8002c30 <main+0x1d00>)
 80029de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e2:	f7fd fc59 	bl	8000298 <__aeabi_dsub>
 80029e6:	4603      	mov	r3, r0
 80029e8:	460c      	mov	r4, r1
 80029ea:	4618      	mov	r0, r3
 80029ec:	4621      	mov	r1, r4
 80029ee:	f7fe f8cd 	bl	8000b8c <__aeabi_d2f>
 80029f2:	4602      	mov	r2, r0
 80029f4:	4b92      	ldr	r3, [pc, #584]	; (8002c40 <main+0x1d10>)
 80029f6:	601a      	str	r2, [r3, #0]
						      			t=VoltHigh_Square*10;
 80029f8:	4b91      	ldr	r3, [pc, #580]	; (8002c40 <main+0x1d10>)
 80029fa:	edd3 7a00 	vldr	s15, [r3]
 80029fe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002a02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a0a:	ee17 2a90 	vmov	r2, s15
 8002a0e:	4b8d      	ldr	r3, [pc, #564]	; (8002c44 <main+0x1d14>)
 8002a10:	601a      	str	r2, [r3, #0]
						      				sprintf(TxDataBuffer,"VoltHigh_Square is [%d.%d] V \r\n" ,t/10,t%10);
 8002a12:	4b8c      	ldr	r3, [pc, #560]	; (8002c44 <main+0x1d14>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a8c      	ldr	r2, [pc, #560]	; (8002c48 <main+0x1d18>)
 8002a18:	fb82 1203 	smull	r1, r2, r2, r3
 8002a1c:	1092      	asrs	r2, r2, #2
 8002a1e:	17db      	asrs	r3, r3, #31
 8002a20:	1ad0      	subs	r0, r2, r3
 8002a22:	4b88      	ldr	r3, [pc, #544]	; (8002c44 <main+0x1d14>)
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	4b88      	ldr	r3, [pc, #544]	; (8002c48 <main+0x1d18>)
 8002a28:	fb83 1302 	smull	r1, r3, r3, r2
 8002a2c:	1099      	asrs	r1, r3, #2
 8002a2e:	17d3      	asrs	r3, r2, #31
 8002a30:	1ac9      	subs	r1, r1, r3
 8002a32:	460b      	mov	r3, r1
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	440b      	add	r3, r1
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	1ad1      	subs	r1, r2, r3
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	4602      	mov	r2, r0
 8002a40:	4982      	ldr	r1, [pc, #520]	; (8002c4c <main+0x1d1c>)
 8002a42:	4883      	ldr	r0, [pc, #524]	; (8002c50 <main+0x1d20>)
 8002a44:	f005 fb0e 	bl	8008064 <siprintf>
						      				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002a48:	4881      	ldr	r0, [pc, #516]	; (8002c50 <main+0x1d20>)
 8002a4a:	f7fd fbc9 	bl	80001e0 <strlen>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a56:	497e      	ldr	r1, [pc, #504]	; (8002c50 <main+0x1d20>)
 8002a58:	487e      	ldr	r0, [pc, #504]	; (8002c54 <main+0x1d24>)
 8002a5a:	f004 fbd0 	bl	80071fe <HAL_UART_Transmit>
 8002a5e:	e040      	b.n	8002ae2 <main+0x1bb2>
						      				}
						      			else if (VoltHigh_Square-0.1<=0)
 8002a60:	4b77      	ldr	r3, [pc, #476]	; (8002c40 <main+0x1d10>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fd fd77 	bl	8000558 <__aeabi_f2d>
 8002a6a:	a371      	add	r3, pc, #452	; (adr r3, 8002c30 <main+0x1d00>)
 8002a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a70:	f7fd fc12 	bl	8000298 <__aeabi_dsub>
 8002a74:	4603      	mov	r3, r0
 8002a76:	460c      	mov	r4, r1
 8002a78:	4618      	mov	r0, r3
 8002a7a:	4621      	mov	r1, r4
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	f04f 0300 	mov.w	r3, #0
 8002a84:	f7fe f83c 	bl	8000b00 <__aeabi_dcmple>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d029      	beq.n	8002ae2 <main+0x1bb2>
						      			{
						      			VoltHigh_Square=0;
 8002a8e:	4b6c      	ldr	r3, [pc, #432]	; (8002c40 <main+0x1d10>)
 8002a90:	f04f 0200 	mov.w	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
						      			sprintf(TxDataBuffer,"Lower VoltHigh_Square is 0 V \r\n" ,t/10,t%10);
 8002a96:	4b6b      	ldr	r3, [pc, #428]	; (8002c44 <main+0x1d14>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a6b      	ldr	r2, [pc, #428]	; (8002c48 <main+0x1d18>)
 8002a9c:	fb82 1203 	smull	r1, r2, r2, r3
 8002aa0:	1092      	asrs	r2, r2, #2
 8002aa2:	17db      	asrs	r3, r3, #31
 8002aa4:	1ad0      	subs	r0, r2, r3
 8002aa6:	4b67      	ldr	r3, [pc, #412]	; (8002c44 <main+0x1d14>)
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	4b67      	ldr	r3, [pc, #412]	; (8002c48 <main+0x1d18>)
 8002aac:	fb83 1302 	smull	r1, r3, r3, r2
 8002ab0:	1099      	asrs	r1, r3, #2
 8002ab2:	17d3      	asrs	r3, r2, #31
 8002ab4:	1ac9      	subs	r1, r1, r3
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	440b      	add	r3, r1
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	1ad1      	subs	r1, r2, r3
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	4964      	ldr	r1, [pc, #400]	; (8002c58 <main+0x1d28>)
 8002ac6:	4862      	ldr	r0, [pc, #392]	; (8002c50 <main+0x1d20>)
 8002ac8:	f005 facc 	bl	8008064 <siprintf>
						      			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002acc:	4860      	ldr	r0, [pc, #384]	; (8002c50 <main+0x1d20>)
 8002ace:	f7fd fb87 	bl	80001e0 <strlen>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ada:	495d      	ldr	r1, [pc, #372]	; (8002c50 <main+0x1d20>)
 8002adc:	485d      	ldr	r0, [pc, #372]	; (8002c54 <main+0x1d24>)
 8002ade:	f004 fb8e 	bl	80071fe <HAL_UART_Transmit>
						      			}
						      			STATE_Display = StateDisplay_MenuSquare_Print;
 8002ae2:	4b5e      	ldr	r3, [pc, #376]	; (8002c5c <main+0x1d2c>)
 8002ae4:	2228      	movs	r2, #40	; 0x28
 8002ae6:	701a      	strb	r2, [r3, #0]
						      			 break;
 8002ae8:	e198      	b.n	8002e1c <main+0x1eec>
						      			 case 'j':// +V Low
						      				if (VoltLow_Square+0.1 <3.3){
 8002aea:	4b5d      	ldr	r3, [pc, #372]	; (8002c60 <main+0x1d30>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fd fd32 	bl	8000558 <__aeabi_f2d>
 8002af4:	a34e      	add	r3, pc, #312	; (adr r3, 8002c30 <main+0x1d00>)
 8002af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afa:	f7fd fbcf 	bl	800029c <__adddf3>
 8002afe:	4603      	mov	r3, r0
 8002b00:	460c      	mov	r4, r1
 8002b02:	4618      	mov	r0, r3
 8002b04:	4621      	mov	r1, r4
 8002b06:	a34c      	add	r3, pc, #304	; (adr r3, 8002c38 <main+0x1d08>)
 8002b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0c:	f7fd ffee 	bl	8000aec <__aeabi_dcmplt>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d046      	beq.n	8002ba4 <main+0x1c74>
						      			 VoltLow_Square =VoltLow_Square +0.1;
 8002b16:	4b52      	ldr	r3, [pc, #328]	; (8002c60 <main+0x1d30>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7fd fd1c 	bl	8000558 <__aeabi_f2d>
 8002b20:	a343      	add	r3, pc, #268	; (adr r3, 8002c30 <main+0x1d00>)
 8002b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b26:	f7fd fbb9 	bl	800029c <__adddf3>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	460c      	mov	r4, r1
 8002b2e:	4618      	mov	r0, r3
 8002b30:	4621      	mov	r1, r4
 8002b32:	f7fe f82b 	bl	8000b8c <__aeabi_d2f>
 8002b36:	4602      	mov	r2, r0
 8002b38:	4b49      	ldr	r3, [pc, #292]	; (8002c60 <main+0x1d30>)
 8002b3a:	601a      	str	r2, [r3, #0]
						      			t=VoltLow_Square*10;
 8002b3c:	4b48      	ldr	r3, [pc, #288]	; (8002c60 <main+0x1d30>)
 8002b3e:	edd3 7a00 	vldr	s15, [r3]
 8002b42:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002b46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b4e:	ee17 2a90 	vmov	r2, s15
 8002b52:	4b3c      	ldr	r3, [pc, #240]	; (8002c44 <main+0x1d14>)
 8002b54:	601a      	str	r2, [r3, #0]
						      			sprintf(TxDataBuffer,"VoltLow_Square is [%d.%d] V \r\n" ,t/10,t%10);
 8002b56:	4b3b      	ldr	r3, [pc, #236]	; (8002c44 <main+0x1d14>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a3b      	ldr	r2, [pc, #236]	; (8002c48 <main+0x1d18>)
 8002b5c:	fb82 1203 	smull	r1, r2, r2, r3
 8002b60:	1092      	asrs	r2, r2, #2
 8002b62:	17db      	asrs	r3, r3, #31
 8002b64:	1ad0      	subs	r0, r2, r3
 8002b66:	4b37      	ldr	r3, [pc, #220]	; (8002c44 <main+0x1d14>)
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	4b37      	ldr	r3, [pc, #220]	; (8002c48 <main+0x1d18>)
 8002b6c:	fb83 1302 	smull	r1, r3, r3, r2
 8002b70:	1099      	asrs	r1, r3, #2
 8002b72:	17d3      	asrs	r3, r2, #31
 8002b74:	1ac9      	subs	r1, r1, r3
 8002b76:	460b      	mov	r3, r1
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	1ad1      	subs	r1, r2, r3
 8002b80:	460b      	mov	r3, r1
 8002b82:	4602      	mov	r2, r0
 8002b84:	4937      	ldr	r1, [pc, #220]	; (8002c64 <main+0x1d34>)
 8002b86:	4832      	ldr	r0, [pc, #200]	; (8002c50 <main+0x1d20>)
 8002b88:	f005 fa6c 	bl	8008064 <siprintf>
						      			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002b8c:	4830      	ldr	r0, [pc, #192]	; (8002c50 <main+0x1d20>)
 8002b8e:	f7fd fb27 	bl	80001e0 <strlen>
 8002b92:	4603      	mov	r3, r0
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b9a:	492d      	ldr	r1, [pc, #180]	; (8002c50 <main+0x1d20>)
 8002b9c:	482d      	ldr	r0, [pc, #180]	; (8002c54 <main+0x1d24>)
 8002b9e:	f004 fb2e 	bl	80071fe <HAL_UART_Transmit>
 8002ba2:	e03e      	b.n	8002c22 <main+0x1cf2>
						      				}
						      			else if (VoltLow_Square+0.1>=3.3)
 8002ba4:	4b2e      	ldr	r3, [pc, #184]	; (8002c60 <main+0x1d30>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7fd fcd5 	bl	8000558 <__aeabi_f2d>
 8002bae:	a320      	add	r3, pc, #128	; (adr r3, 8002c30 <main+0x1d00>)
 8002bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb4:	f7fd fb72 	bl	800029c <__adddf3>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	460c      	mov	r4, r1
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	4621      	mov	r1, r4
 8002bc0:	a31d      	add	r3, pc, #116	; (adr r3, 8002c38 <main+0x1d08>)
 8002bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc6:	f7fd ffa5 	bl	8000b14 <__aeabi_dcmpge>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d028      	beq.n	8002c22 <main+0x1cf2>
						      			{
						      			VoltLow_Square =3.3;
 8002bd0:	4b23      	ldr	r3, [pc, #140]	; (8002c60 <main+0x1d30>)
 8002bd2:	4a25      	ldr	r2, [pc, #148]	; (8002c68 <main+0x1d38>)
 8002bd4:	601a      	str	r2, [r3, #0]
						      			sprintf(TxDataBuffer,"Maximum VoltLow_Squareis 3.3 V \r\n" ,t/10,t%10);
 8002bd6:	4b1b      	ldr	r3, [pc, #108]	; (8002c44 <main+0x1d14>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a1b      	ldr	r2, [pc, #108]	; (8002c48 <main+0x1d18>)
 8002bdc:	fb82 1203 	smull	r1, r2, r2, r3
 8002be0:	1092      	asrs	r2, r2, #2
 8002be2:	17db      	asrs	r3, r3, #31
 8002be4:	1ad0      	subs	r0, r2, r3
 8002be6:	4b17      	ldr	r3, [pc, #92]	; (8002c44 <main+0x1d14>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	4b17      	ldr	r3, [pc, #92]	; (8002c48 <main+0x1d18>)
 8002bec:	fb83 1302 	smull	r1, r3, r3, r2
 8002bf0:	1099      	asrs	r1, r3, #2
 8002bf2:	17d3      	asrs	r3, r2, #31
 8002bf4:	1ac9      	subs	r1, r1, r3
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	1ad1      	subs	r1, r2, r3
 8002c00:	460b      	mov	r3, r1
 8002c02:	4602      	mov	r2, r0
 8002c04:	4919      	ldr	r1, [pc, #100]	; (8002c6c <main+0x1d3c>)
 8002c06:	4812      	ldr	r0, [pc, #72]	; (8002c50 <main+0x1d20>)
 8002c08:	f005 fa2c 	bl	8008064 <siprintf>
						      			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002c0c:	4810      	ldr	r0, [pc, #64]	; (8002c50 <main+0x1d20>)
 8002c0e:	f7fd fae7 	bl	80001e0 <strlen>
 8002c12:	4603      	mov	r3, r0
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c1a:	490d      	ldr	r1, [pc, #52]	; (8002c50 <main+0x1d20>)
 8002c1c:	480d      	ldr	r0, [pc, #52]	; (8002c54 <main+0x1d24>)
 8002c1e:	f004 faee 	bl	80071fe <HAL_UART_Transmit>
						      			 }
						      			STATE_Display = StateDisplay_MenuSquare_Print;
 8002c22:	4b0e      	ldr	r3, [pc, #56]	; (8002c5c <main+0x1d2c>)
 8002c24:	2228      	movs	r2, #40	; 0x28
 8002c26:	701a      	strb	r2, [r3, #0]
						      			break;
 8002c28:	e0f8      	b.n	8002e1c <main+0x1eec>
 8002c2a:	bf00      	nop
 8002c2c:	f3af 8000 	nop.w
 8002c30:	9999999a 	.word	0x9999999a
 8002c34:	3fb99999 	.word	0x3fb99999
 8002c38:	66666666 	.word	0x66666666
 8002c3c:	400a6666 	.word	0x400a6666
 8002c40:	2000000c 	.word	0x2000000c
 8002c44:	200001b4 	.word	0x200001b4
 8002c48:	66666667 	.word	0x66666667
 8002c4c:	08009e48 	.word	0x08009e48
 8002c50:	200000a4 	.word	0x200000a4
 8002c54:	200003a0 	.word	0x200003a0
 8002c58:	08009e8c 	.word	0x08009e8c
 8002c5c:	200001a4 	.word	0x200001a4
 8002c60:	200001f8 	.word	0x200001f8
 8002c64:	08009eac 	.word	0x08009eac
 8002c68:	40533333 	.word	0x40533333
 8002c6c:	08009ecc 	.word	0x08009ecc
						      			 case 'k':// -V Low
						      				if (VoltLow_Square -0.1 >0){
 8002c70:	4b9d      	ldr	r3, [pc, #628]	; (8002ee8 <main+0x1fb8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7fd fc6f 	bl	8000558 <__aeabi_f2d>
 8002c7a:	a395      	add	r3, pc, #596	; (adr r3, 8002ed0 <main+0x1fa0>)
 8002c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c80:	f7fd fb0a 	bl	8000298 <__aeabi_dsub>
 8002c84:	4603      	mov	r3, r0
 8002c86:	460c      	mov	r4, r1
 8002c88:	4618      	mov	r0, r3
 8002c8a:	4621      	mov	r1, r4
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	f7fd ff48 	bl	8000b28 <__aeabi_dcmpgt>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d046      	beq.n	8002d2c <main+0x1dfc>
						      			 VoltLow_Square =VoltLow_Square -0.1;
 8002c9e:	4b92      	ldr	r3, [pc, #584]	; (8002ee8 <main+0x1fb8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fd fc58 	bl	8000558 <__aeabi_f2d>
 8002ca8:	a389      	add	r3, pc, #548	; (adr r3, 8002ed0 <main+0x1fa0>)
 8002caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cae:	f7fd faf3 	bl	8000298 <__aeabi_dsub>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	460c      	mov	r4, r1
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	4621      	mov	r1, r4
 8002cba:	f7fd ff67 	bl	8000b8c <__aeabi_d2f>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	4b89      	ldr	r3, [pc, #548]	; (8002ee8 <main+0x1fb8>)
 8002cc2:	601a      	str	r2, [r3, #0]
						      			t=VoltLow_Square*10;
 8002cc4:	4b88      	ldr	r3, [pc, #544]	; (8002ee8 <main+0x1fb8>)
 8002cc6:	edd3 7a00 	vldr	s15, [r3]
 8002cca:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002cce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cd6:	ee17 2a90 	vmov	r2, s15
 8002cda:	4b84      	ldr	r3, [pc, #528]	; (8002eec <main+0x1fbc>)
 8002cdc:	601a      	str	r2, [r3, #0]
						      			sprintf(TxDataBuffer,"VoltLow_Square is [%d.%d] V \r\n" ,t/10,t%10);
 8002cde:	4b83      	ldr	r3, [pc, #524]	; (8002eec <main+0x1fbc>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a83      	ldr	r2, [pc, #524]	; (8002ef0 <main+0x1fc0>)
 8002ce4:	fb82 1203 	smull	r1, r2, r2, r3
 8002ce8:	1092      	asrs	r2, r2, #2
 8002cea:	17db      	asrs	r3, r3, #31
 8002cec:	1ad0      	subs	r0, r2, r3
 8002cee:	4b7f      	ldr	r3, [pc, #508]	; (8002eec <main+0x1fbc>)
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	4b7f      	ldr	r3, [pc, #508]	; (8002ef0 <main+0x1fc0>)
 8002cf4:	fb83 1302 	smull	r1, r3, r3, r2
 8002cf8:	1099      	asrs	r1, r3, #2
 8002cfa:	17d3      	asrs	r3, r2, #31
 8002cfc:	1ac9      	subs	r1, r1, r3
 8002cfe:	460b      	mov	r3, r1
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	1ad1      	subs	r1, r2, r3
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	4979      	ldr	r1, [pc, #484]	; (8002ef4 <main+0x1fc4>)
 8002d0e:	487a      	ldr	r0, [pc, #488]	; (8002ef8 <main+0x1fc8>)
 8002d10:	f005 f9a8 	bl	8008064 <siprintf>
						      			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002d14:	4878      	ldr	r0, [pc, #480]	; (8002ef8 <main+0x1fc8>)
 8002d16:	f7fd fa63 	bl	80001e0 <strlen>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d22:	4975      	ldr	r1, [pc, #468]	; (8002ef8 <main+0x1fc8>)
 8002d24:	4875      	ldr	r0, [pc, #468]	; (8002efc <main+0x1fcc>)
 8002d26:	f004 fa6a 	bl	80071fe <HAL_UART_Transmit>
 8002d2a:	e040      	b.n	8002dae <main+0x1e7e>
						      				}
						      			 else if (VoltLow_Square -0.1 <=0)
 8002d2c:	4b6e      	ldr	r3, [pc, #440]	; (8002ee8 <main+0x1fb8>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fd fc11 	bl	8000558 <__aeabi_f2d>
 8002d36:	a366      	add	r3, pc, #408	; (adr r3, 8002ed0 <main+0x1fa0>)
 8002d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3c:	f7fd faac 	bl	8000298 <__aeabi_dsub>
 8002d40:	4603      	mov	r3, r0
 8002d42:	460c      	mov	r4, r1
 8002d44:	4618      	mov	r0, r3
 8002d46:	4621      	mov	r1, r4
 8002d48:	f04f 0200 	mov.w	r2, #0
 8002d4c:	f04f 0300 	mov.w	r3, #0
 8002d50:	f7fd fed6 	bl	8000b00 <__aeabi_dcmple>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d029      	beq.n	8002dae <main+0x1e7e>
						      			{
						      			VoltLow_Square=0;
 8002d5a:	4b63      	ldr	r3, [pc, #396]	; (8002ee8 <main+0x1fb8>)
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]
						      			sprintf(TxDataBuffer,"Lower VoltLow_Square is 0 V \r\n" ,t/10,t%10);
 8002d62:	4b62      	ldr	r3, [pc, #392]	; (8002eec <main+0x1fbc>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a62      	ldr	r2, [pc, #392]	; (8002ef0 <main+0x1fc0>)
 8002d68:	fb82 1203 	smull	r1, r2, r2, r3
 8002d6c:	1092      	asrs	r2, r2, #2
 8002d6e:	17db      	asrs	r3, r3, #31
 8002d70:	1ad0      	subs	r0, r2, r3
 8002d72:	4b5e      	ldr	r3, [pc, #376]	; (8002eec <main+0x1fbc>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	4b5e      	ldr	r3, [pc, #376]	; (8002ef0 <main+0x1fc0>)
 8002d78:	fb83 1302 	smull	r1, r3, r3, r2
 8002d7c:	1099      	asrs	r1, r3, #2
 8002d7e:	17d3      	asrs	r3, r2, #31
 8002d80:	1ac9      	subs	r1, r1, r3
 8002d82:	460b      	mov	r3, r1
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	440b      	add	r3, r1
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	1ad1      	subs	r1, r2, r3
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	4602      	mov	r2, r0
 8002d90:	495b      	ldr	r1, [pc, #364]	; (8002f00 <main+0x1fd0>)
 8002d92:	4859      	ldr	r0, [pc, #356]	; (8002ef8 <main+0x1fc8>)
 8002d94:	f005 f966 	bl	8008064 <siprintf>
						      			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002d98:	4857      	ldr	r0, [pc, #348]	; (8002ef8 <main+0x1fc8>)
 8002d9a:	f7fd fa21 	bl	80001e0 <strlen>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002da6:	4954      	ldr	r1, [pc, #336]	; (8002ef8 <main+0x1fc8>)
 8002da8:	4854      	ldr	r0, [pc, #336]	; (8002efc <main+0x1fcc>)
 8002daa:	f004 fa28 	bl	80071fe <HAL_UART_Transmit>
						      			}
						      			STATE_Display = StateDisplay_MenuSquare_Print;
 8002dae:	4b55      	ldr	r3, [pc, #340]	; (8002f04 <main+0x1fd4>)
 8002db0:	2228      	movs	r2, #40	; 0x28
 8002db2:	701a      	strb	r2, [r3, #0]
						      			break;
 8002db4:	e032      	b.n	8002e1c <main+0x1eec>
						      			 case'l':


						      				 duty+=10;
 8002db6:	4b54      	ldr	r3, [pc, #336]	; (8002f08 <main+0x1fd8>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	330a      	adds	r3, #10
 8002dbc:	4a52      	ldr	r2, [pc, #328]	; (8002f08 <main+0x1fd8>)
 8002dbe:	6013      	str	r3, [r2, #0]
						      				 if(duty >= 100);
						      				duty=100;
 8002dc0:	4b51      	ldr	r3, [pc, #324]	; (8002f08 <main+0x1fd8>)
 8002dc2:	2264      	movs	r2, #100	; 0x64
 8002dc4:	601a      	str	r2, [r3, #0]
						      				STATE_Display = StateDisplay_MenuSquare_Print;
 8002dc6:	4b4f      	ldr	r3, [pc, #316]	; (8002f04 <main+0x1fd4>)
 8002dc8:	2228      	movs	r2, #40	; 0x28
 8002dca:	701a      	strb	r2, [r3, #0]
						      				break;
 8002dcc:	e026      	b.n	8002e1c <main+0x1eec>
						      			case'p':

						      			 duty-=10;
 8002dce:	4b4e      	ldr	r3, [pc, #312]	; (8002f08 <main+0x1fd8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	3b0a      	subs	r3, #10
 8002dd4:	4a4c      	ldr	r2, [pc, #304]	; (8002f08 <main+0x1fd8>)
 8002dd6:	6013      	str	r3, [r2, #0]

						      			if(duty <= 0);
						      			duty=0;
 8002dd8:	4b4b      	ldr	r3, [pc, #300]	; (8002f08 <main+0x1fd8>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]
						      				STATE_Display = StateDisplay_MenuSquare_Print;
 8002dde:	4b49      	ldr	r3, [pc, #292]	; (8002f04 <main+0x1fd4>)
 8002de0:	2228      	movs	r2, #40	; 0x28
 8002de2:	701a      	strb	r2, [r3, #0]
						      				break;
 8002de4:	e01a      	b.n	8002e1c <main+0x1eec>


						      			default: //show error

						      			 sprintf(TxDataBuffer, "unidentified input \r\n");
 8002de6:	4a44      	ldr	r2, [pc, #272]	; (8002ef8 <main+0x1fc8>)
 8002de8:	4b48      	ldr	r3, [pc, #288]	; (8002f0c <main+0x1fdc>)
 8002dea:	4614      	mov	r4, r2
 8002dec:	461d      	mov	r5, r3
 8002dee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002df0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002df2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002df6:	6020      	str	r0, [r4, #0]
 8002df8:	3404      	adds	r4, #4
 8002dfa:	8021      	strh	r1, [r4, #0]
						      			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002dfc:	483e      	ldr	r0, [pc, #248]	; (8002ef8 <main+0x1fc8>)
 8002dfe:	f7fd f9ef 	bl	80001e0 <strlen>
 8002e02:	4603      	mov	r3, r0
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e0a:	493b      	ldr	r1, [pc, #236]	; (8002ef8 <main+0x1fc8>)
 8002e0c:	483b      	ldr	r0, [pc, #236]	; (8002efc <main+0x1fcc>)
 8002e0e:	f004 f9f6 	bl	80071fe <HAL_UART_Transmit>
						      			 STATE_Display = StateDisplay_MenuSquare_Print;
 8002e12:	4b3c      	ldr	r3, [pc, #240]	; (8002f04 <main+0x1fd4>)
 8002e14:	2228      	movs	r2, #40	; 0x28
 8002e16:	701a      	strb	r2, [r3, #0]
						      			break;
 8002e18:	e000      	b.n	8002e1c <main+0x1eec>
						      			 break;
 8002e1a:	bf00      	nop

						      		}
						      	 break;
 8002e1c:	bf00      	nop


						    }

			// เเสดงกราฟ
			  if (micros() - timestamp >= 100)
 8002e1e:	f000 ff47 	bl	8003cb0 <micros>
 8002e22:	460a      	mov	r2, r1
 8002e24:	4601      	mov	r1, r0
 8002e26:	4b3a      	ldr	r3, [pc, #232]	; (8002f10 <main+0x1fe0>)
 8002e28:	e9d3 5600 	ldrd	r5, r6, [r3]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4614      	mov	r4, r2
 8002e30:	1b5b      	subs	r3, r3, r5
 8002e32:	eb64 0406 	sbc.w	r4, r4, r6
 8002e36:	2c00      	cmp	r4, #0
 8002e38:	bf08      	it	eq
 8002e3a:	2b64      	cmpeq	r3, #100	; 0x64
 8002e3c:	f0c0 844f 	bcc.w	80036de <main+0x27ae>
					{
				  timestamp = micros();
 8002e40:	f000 ff36 	bl	8003cb0 <micros>
 8002e44:	4603      	mov	r3, r0
 8002e46:	460c      	mov	r4, r1
 8002e48:	4a31      	ldr	r2, [pc, #196]	; (8002f10 <main+0x1fe0>)
 8002e4a:	e9c2 3400 	strd	r3, r4, [r2]
				  			if(a == 1)
 8002e4e:	4b31      	ldr	r3, [pc, #196]	; (8002f14 <main+0x1fe4>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	f040 841f 	bne.w	8003696 <main+0x2766>
				  			{

				   if(mode == 1)
 8002e58:	4b2f      	ldr	r3, [pc, #188]	; (8002f18 <main+0x1fe8>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	f040 8205 	bne.w	800326c <main+0x233c>
				  				{

					   Amplitude_sawtooth = ((VoltHigh_sawtooth-VoltLow_sawtooth)/3.3)*4095;
 8002e62:	4b2e      	ldr	r3, [pc, #184]	; (8002f1c <main+0x1fec>)
 8002e64:	ed93 7a00 	vldr	s14, [r3]
 8002e68:	4b2d      	ldr	r3, [pc, #180]	; (8002f20 <main+0x1ff0>)
 8002e6a:	edd3 7a00 	vldr	s15, [r3]
 8002e6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e72:	ee17 0a90 	vmov	r0, s15
 8002e76:	f7fd fb6f 	bl	8000558 <__aeabi_f2d>
 8002e7a:	a317      	add	r3, pc, #92	; (adr r3, 8002ed8 <main+0x1fa8>)
 8002e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e80:	f7fd fcec 	bl	800085c <__aeabi_ddiv>
 8002e84:	4603      	mov	r3, r0
 8002e86:	460c      	mov	r4, r1
 8002e88:	4618      	mov	r0, r3
 8002e8a:	4621      	mov	r1, r4
 8002e8c:	a314      	add	r3, pc, #80	; (adr r3, 8002ee0 <main+0x1fb0>)
 8002e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e92:	f7fd fbb9 	bl	8000608 <__aeabi_dmul>
 8002e96:	4603      	mov	r3, r0
 8002e98:	460c      	mov	r4, r1
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	4621      	mov	r1, r4
 8002e9e:	f7fd fe75 	bl	8000b8c <__aeabi_d2f>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	4b1f      	ldr	r3, [pc, #124]	; (8002f24 <main+0x1ff4>)
 8002ea6:	601a      	str	r2, [r3, #0]

				  					if(F_sawtooth == 0 )
 8002ea8:	4b1f      	ldr	r3, [pc, #124]	; (8002f28 <main+0x1ff8>)
 8002eaa:	edd3 7a00 	vldr	s15, [r3]
 8002eae:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb6:	d13d      	bne.n	8002f34 <main+0x2004>
				  					{

				  						NormalizedataOut = dataOut;
 8002eb8:	4b1c      	ldr	r3, [pc, #112]	; (8002f2c <main+0x1ffc>)
 8002eba:	edd3 7a00 	vldr	s15, [r3]
 8002ebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ec2:	ee17 3a90 	vmov	r3, s15
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	4b19      	ldr	r3, [pc, #100]	; (8002f30 <main+0x2000>)
 8002eca:	801a      	strh	r2, [r3, #0]
 8002ecc:	e3f1      	b.n	80036b2 <main+0x2782>
 8002ece:	bf00      	nop
 8002ed0:	9999999a 	.word	0x9999999a
 8002ed4:	3fb99999 	.word	0x3fb99999
 8002ed8:	66666666 	.word	0x66666666
 8002edc:	400a6666 	.word	0x400a6666
 8002ee0:	00000000 	.word	0x00000000
 8002ee4:	40affe00 	.word	0x40affe00
 8002ee8:	200001f8 	.word	0x200001f8
 8002eec:	200001b4 	.word	0x200001b4
 8002ef0:	66666667 	.word	0x66666667
 8002ef4:	08009eac 	.word	0x08009eac
 8002ef8:	200000a4 	.word	0x200000a4
 8002efc:	200003a0 	.word	0x200003a0
 8002f00:	08009ef0 	.word	0x08009ef0
 8002f04:	200001a4 	.word	0x200001a4
 8002f08:	20000010 	.word	0x20000010
 8002f0c:	08009918 	.word	0x08009918
 8002f10:	20000208 	.word	0x20000208
 8002f14:	200001ac 	.word	0x200001ac
 8002f18:	200001b8 	.word	0x200001b8
 8002f1c:	20000004 	.word	0x20000004
 8002f20:	200001e4 	.word	0x200001e4
 8002f24:	200001e0 	.word	0x200001e0
 8002f28:	200001d8 	.word	0x200001d8
 8002f2c:	200001d0 	.word	0x200001d0
 8002f30:	200001d4 	.word	0x200001d4

				  					}
				  					else
				  					{
				  						if(Status_sawtooth == 0)
 8002f34:	4bc6      	ldr	r3, [pc, #792]	; (8003250 <main+0x2320>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f040 80bb 	bne.w	80030b4 <main+0x2184>
				  						{
				  							dataOut += (Amplitude_sawtooth / (1/F_sawtooth))*0.0001 ;
 8002f3e:	4bc5      	ldr	r3, [pc, #788]	; (8003254 <main+0x2324>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fd fb08 	bl	8000558 <__aeabi_f2d>
 8002f48:	4604      	mov	r4, r0
 8002f4a:	460d      	mov	r5, r1
 8002f4c:	4bc2      	ldr	r3, [pc, #776]	; (8003258 <main+0x2328>)
 8002f4e:	ed93 7a00 	vldr	s14, [r3]
 8002f52:	4bc2      	ldr	r3, [pc, #776]	; (800325c <main+0x232c>)
 8002f54:	edd3 6a00 	vldr	s13, [r3]
 8002f58:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002f5c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002f60:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f64:	ee16 0a90 	vmov	r0, s13
 8002f68:	f7fd faf6 	bl	8000558 <__aeabi_f2d>
 8002f6c:	a3b2      	add	r3, pc, #712	; (adr r3, 8003238 <main+0x2308>)
 8002f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f72:	f7fd fb49 	bl	8000608 <__aeabi_dmul>
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4620      	mov	r0, r4
 8002f7c:	4629      	mov	r1, r5
 8002f7e:	f7fd f98d 	bl	800029c <__adddf3>
 8002f82:	4603      	mov	r3, r0
 8002f84:	460c      	mov	r4, r1
 8002f86:	4618      	mov	r0, r3
 8002f88:	4621      	mov	r1, r4
 8002f8a:	f7fd fdff 	bl	8000b8c <__aeabi_d2f>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	4bb0      	ldr	r3, [pc, #704]	; (8003254 <main+0x2324>)
 8002f92:	601a      	str	r2, [r3, #0]
				  							if(dataOut >= ((VoltHigh_sawtooth/3.3)*4095.0))
 8002f94:	4baf      	ldr	r3, [pc, #700]	; (8003254 <main+0x2324>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7fd fadd 	bl	8000558 <__aeabi_f2d>
 8002f9e:	4604      	mov	r4, r0
 8002fa0:	460d      	mov	r5, r1
 8002fa2:	4baf      	ldr	r3, [pc, #700]	; (8003260 <main+0x2330>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fd fad6 	bl	8000558 <__aeabi_f2d>
 8002fac:	a3a4      	add	r3, pc, #656	; (adr r3, 8003240 <main+0x2310>)
 8002fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb2:	f7fd fc53 	bl	800085c <__aeabi_ddiv>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	4610      	mov	r0, r2
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	a3a2      	add	r3, pc, #648	; (adr r3, 8003248 <main+0x2318>)
 8002fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc4:	f7fd fb20 	bl	8000608 <__aeabi_dmul>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4620      	mov	r0, r4
 8002fce:	4629      	mov	r1, r5
 8002fd0:	f7fd fda0 	bl	8000b14 <__aeabi_dcmpge>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d061      	beq.n	800309e <main+0x216e>
				  							{
				  								dataOut = ((VoltHigh_sawtooth/3.3)*4095.0);
 8002fda:	4ba1      	ldr	r3, [pc, #644]	; (8003260 <main+0x2330>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fd faba 	bl	8000558 <__aeabi_f2d>
 8002fe4:	a396      	add	r3, pc, #600	; (adr r3, 8003240 <main+0x2310>)
 8002fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fea:	f7fd fc37 	bl	800085c <__aeabi_ddiv>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	460c      	mov	r4, r1
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	4621      	mov	r1, r4
 8002ff6:	a394      	add	r3, pc, #592	; (adr r3, 8003248 <main+0x2318>)
 8002ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ffc:	f7fd fb04 	bl	8000608 <__aeabi_dmul>
 8003000:	4603      	mov	r3, r0
 8003002:	460c      	mov	r4, r1
 8003004:	4618      	mov	r0, r3
 8003006:	4621      	mov	r1, r4
 8003008:	f7fd fdc0 	bl	8000b8c <__aeabi_d2f>
 800300c:	4602      	mov	r2, r0
 800300e:	4b91      	ldr	r3, [pc, #580]	; (8003254 <main+0x2324>)
 8003010:	601a      	str	r2, [r3, #0]
				  								NormalizedataOut = dataOut;
 8003012:	4b90      	ldr	r3, [pc, #576]	; (8003254 <main+0x2324>)
 8003014:	edd3 7a00 	vldr	s15, [r3]
 8003018:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800301c:	ee17 3a90 	vmov	r3, s15
 8003020:	b29a      	uxth	r2, r3
 8003022:	4b90      	ldr	r3, [pc, #576]	; (8003264 <main+0x2334>)
 8003024:	801a      	strh	r2, [r3, #0]
				  								dataOut = ((VoltLow_sawtooth/3.3)*4095.0) - ((Amplitude_sawtooth / (1/F_sawtooth))*0.0001 );
 8003026:	4b90      	ldr	r3, [pc, #576]	; (8003268 <main+0x2338>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f7fd fa94 	bl	8000558 <__aeabi_f2d>
 8003030:	a383      	add	r3, pc, #524	; (adr r3, 8003240 <main+0x2310>)
 8003032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003036:	f7fd fc11 	bl	800085c <__aeabi_ddiv>
 800303a:	4603      	mov	r3, r0
 800303c:	460c      	mov	r4, r1
 800303e:	4618      	mov	r0, r3
 8003040:	4621      	mov	r1, r4
 8003042:	a381      	add	r3, pc, #516	; (adr r3, 8003248 <main+0x2318>)
 8003044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003048:	f7fd fade 	bl	8000608 <__aeabi_dmul>
 800304c:	4603      	mov	r3, r0
 800304e:	460c      	mov	r4, r1
 8003050:	4625      	mov	r5, r4
 8003052:	461c      	mov	r4, r3
 8003054:	4b80      	ldr	r3, [pc, #512]	; (8003258 <main+0x2328>)
 8003056:	ed93 7a00 	vldr	s14, [r3]
 800305a:	4b80      	ldr	r3, [pc, #512]	; (800325c <main+0x232c>)
 800305c:	edd3 6a00 	vldr	s13, [r3]
 8003060:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003064:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003068:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800306c:	ee16 0a90 	vmov	r0, s13
 8003070:	f7fd fa72 	bl	8000558 <__aeabi_f2d>
 8003074:	a370      	add	r3, pc, #448	; (adr r3, 8003238 <main+0x2308>)
 8003076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307a:	f7fd fac5 	bl	8000608 <__aeabi_dmul>
 800307e:	4602      	mov	r2, r0
 8003080:	460b      	mov	r3, r1
 8003082:	4620      	mov	r0, r4
 8003084:	4629      	mov	r1, r5
 8003086:	f7fd f907 	bl	8000298 <__aeabi_dsub>
 800308a:	4603      	mov	r3, r0
 800308c:	460c      	mov	r4, r1
 800308e:	4618      	mov	r0, r3
 8003090:	4621      	mov	r1, r4
 8003092:	f7fd fd7b 	bl	8000b8c <__aeabi_d2f>
 8003096:	4602      	mov	r2, r0
 8003098:	4b6e      	ldr	r3, [pc, #440]	; (8003254 <main+0x2324>)
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	e309      	b.n	80036b2 <main+0x2782>
				  							}
				  							else
				  							{
				  								NormalizedataOut = dataOut;
 800309e:	4b6d      	ldr	r3, [pc, #436]	; (8003254 <main+0x2324>)
 80030a0:	edd3 7a00 	vldr	s15, [r3]
 80030a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030a8:	ee17 3a90 	vmov	r3, s15
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	4b6d      	ldr	r3, [pc, #436]	; (8003264 <main+0x2334>)
 80030b0:	801a      	strh	r2, [r3, #0]
 80030b2:	e2fe      	b.n	80036b2 <main+0x2782>
				  							}
				  						}
				  						else if(Status_sawtooth == 1)
 80030b4:	4b66      	ldr	r3, [pc, #408]	; (8003250 <main+0x2320>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	f040 82fa 	bne.w	80036b2 <main+0x2782>
				  						{
				  							dataOut -= (Amplitude_sawtooth / (1/F_sawtooth))*0.0001;
 80030be:	4b65      	ldr	r3, [pc, #404]	; (8003254 <main+0x2324>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fd fa48 	bl	8000558 <__aeabi_f2d>
 80030c8:	4604      	mov	r4, r0
 80030ca:	460d      	mov	r5, r1
 80030cc:	4b62      	ldr	r3, [pc, #392]	; (8003258 <main+0x2328>)
 80030ce:	ed93 7a00 	vldr	s14, [r3]
 80030d2:	4b62      	ldr	r3, [pc, #392]	; (800325c <main+0x232c>)
 80030d4:	edd3 6a00 	vldr	s13, [r3]
 80030d8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80030dc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80030e0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80030e4:	ee16 0a90 	vmov	r0, s13
 80030e8:	f7fd fa36 	bl	8000558 <__aeabi_f2d>
 80030ec:	a352      	add	r3, pc, #328	; (adr r3, 8003238 <main+0x2308>)
 80030ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f2:	f7fd fa89 	bl	8000608 <__aeabi_dmul>
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	4620      	mov	r0, r4
 80030fc:	4629      	mov	r1, r5
 80030fe:	f7fd f8cb 	bl	8000298 <__aeabi_dsub>
 8003102:	4603      	mov	r3, r0
 8003104:	460c      	mov	r4, r1
 8003106:	4618      	mov	r0, r3
 8003108:	4621      	mov	r1, r4
 800310a:	f7fd fd3f 	bl	8000b8c <__aeabi_d2f>
 800310e:	4602      	mov	r2, r0
 8003110:	4b50      	ldr	r3, [pc, #320]	; (8003254 <main+0x2324>)
 8003112:	601a      	str	r2, [r3, #0]
				  							if(dataOut <= ((VoltLow_sawtooth/3.3)*4095.0))
 8003114:	4b4f      	ldr	r3, [pc, #316]	; (8003254 <main+0x2324>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4618      	mov	r0, r3
 800311a:	f7fd fa1d 	bl	8000558 <__aeabi_f2d>
 800311e:	4604      	mov	r4, r0
 8003120:	460d      	mov	r5, r1
 8003122:	4b51      	ldr	r3, [pc, #324]	; (8003268 <main+0x2338>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f7fd fa16 	bl	8000558 <__aeabi_f2d>
 800312c:	a344      	add	r3, pc, #272	; (adr r3, 8003240 <main+0x2310>)
 800312e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003132:	f7fd fb93 	bl	800085c <__aeabi_ddiv>
 8003136:	4602      	mov	r2, r0
 8003138:	460b      	mov	r3, r1
 800313a:	4610      	mov	r0, r2
 800313c:	4619      	mov	r1, r3
 800313e:	a342      	add	r3, pc, #264	; (adr r3, 8003248 <main+0x2318>)
 8003140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003144:	f7fd fa60 	bl	8000608 <__aeabi_dmul>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	4620      	mov	r0, r4
 800314e:	4629      	mov	r1, r5
 8003150:	f7fd fcd6 	bl	8000b00 <__aeabi_dcmple>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d061      	beq.n	800321e <main+0x22ee>
				  							{
				  								dataOut = ((VoltLow_sawtooth/3.3)*4095.0);
 800315a:	4b43      	ldr	r3, [pc, #268]	; (8003268 <main+0x2338>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f7fd f9fa 	bl	8000558 <__aeabi_f2d>
 8003164:	a336      	add	r3, pc, #216	; (adr r3, 8003240 <main+0x2310>)
 8003166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316a:	f7fd fb77 	bl	800085c <__aeabi_ddiv>
 800316e:	4603      	mov	r3, r0
 8003170:	460c      	mov	r4, r1
 8003172:	4618      	mov	r0, r3
 8003174:	4621      	mov	r1, r4
 8003176:	a334      	add	r3, pc, #208	; (adr r3, 8003248 <main+0x2318>)
 8003178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317c:	f7fd fa44 	bl	8000608 <__aeabi_dmul>
 8003180:	4603      	mov	r3, r0
 8003182:	460c      	mov	r4, r1
 8003184:	4618      	mov	r0, r3
 8003186:	4621      	mov	r1, r4
 8003188:	f7fd fd00 	bl	8000b8c <__aeabi_d2f>
 800318c:	4602      	mov	r2, r0
 800318e:	4b31      	ldr	r3, [pc, #196]	; (8003254 <main+0x2324>)
 8003190:	601a      	str	r2, [r3, #0]
				  								NormalizedataOut = dataOut;
 8003192:	4b30      	ldr	r3, [pc, #192]	; (8003254 <main+0x2324>)
 8003194:	edd3 7a00 	vldr	s15, [r3]
 8003198:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800319c:	ee17 3a90 	vmov	r3, s15
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	4b30      	ldr	r3, [pc, #192]	; (8003264 <main+0x2334>)
 80031a4:	801a      	strh	r2, [r3, #0]
				  								dataOut = ((VoltHigh_sawtooth/3.3)*4095.0) + ((Amplitude_sawtooth/ (1/F_sawtooth))*0.0001 );
 80031a6:	4b2e      	ldr	r3, [pc, #184]	; (8003260 <main+0x2330>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fd f9d4 	bl	8000558 <__aeabi_f2d>
 80031b0:	a323      	add	r3, pc, #140	; (adr r3, 8003240 <main+0x2310>)
 80031b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b6:	f7fd fb51 	bl	800085c <__aeabi_ddiv>
 80031ba:	4603      	mov	r3, r0
 80031bc:	460c      	mov	r4, r1
 80031be:	4618      	mov	r0, r3
 80031c0:	4621      	mov	r1, r4
 80031c2:	a321      	add	r3, pc, #132	; (adr r3, 8003248 <main+0x2318>)
 80031c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c8:	f7fd fa1e 	bl	8000608 <__aeabi_dmul>
 80031cc:	4603      	mov	r3, r0
 80031ce:	460c      	mov	r4, r1
 80031d0:	4625      	mov	r5, r4
 80031d2:	461c      	mov	r4, r3
 80031d4:	4b20      	ldr	r3, [pc, #128]	; (8003258 <main+0x2328>)
 80031d6:	ed93 7a00 	vldr	s14, [r3]
 80031da:	4b20      	ldr	r3, [pc, #128]	; (800325c <main+0x232c>)
 80031dc:	edd3 6a00 	vldr	s13, [r3]
 80031e0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80031e4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80031e8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80031ec:	ee16 0a90 	vmov	r0, s13
 80031f0:	f7fd f9b2 	bl	8000558 <__aeabi_f2d>
 80031f4:	a310      	add	r3, pc, #64	; (adr r3, 8003238 <main+0x2308>)
 80031f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fa:	f7fd fa05 	bl	8000608 <__aeabi_dmul>
 80031fe:	4602      	mov	r2, r0
 8003200:	460b      	mov	r3, r1
 8003202:	4620      	mov	r0, r4
 8003204:	4629      	mov	r1, r5
 8003206:	f7fd f849 	bl	800029c <__adddf3>
 800320a:	4603      	mov	r3, r0
 800320c:	460c      	mov	r4, r1
 800320e:	4618      	mov	r0, r3
 8003210:	4621      	mov	r1, r4
 8003212:	f7fd fcbb 	bl	8000b8c <__aeabi_d2f>
 8003216:	4602      	mov	r2, r0
 8003218:	4b0e      	ldr	r3, [pc, #56]	; (8003254 <main+0x2324>)
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	e249      	b.n	80036b2 <main+0x2782>
				  							}
				  							else
				  							{
				  								NormalizedataOut = dataOut;
 800321e:	4b0d      	ldr	r3, [pc, #52]	; (8003254 <main+0x2324>)
 8003220:	edd3 7a00 	vldr	s15, [r3]
 8003224:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003228:	ee17 3a90 	vmov	r3, s15
 800322c:	b29a      	uxth	r2, r3
 800322e:	4b0d      	ldr	r3, [pc, #52]	; (8003264 <main+0x2334>)
 8003230:	801a      	strh	r2, [r3, #0]
 8003232:	e23e      	b.n	80036b2 <main+0x2782>
 8003234:	f3af 8000 	nop.w
 8003238:	eb1c432d 	.word	0xeb1c432d
 800323c:	3f1a36e2 	.word	0x3f1a36e2
 8003240:	66666666 	.word	0x66666666
 8003244:	400a6666 	.word	0x400a6666
 8003248:	00000000 	.word	0x00000000
 800324c:	40affe00 	.word	0x40affe00
 8003250:	200001dc 	.word	0x200001dc
 8003254:	200001d0 	.word	0x200001d0
 8003258:	200001e0 	.word	0x200001e0
 800325c:	200001d8 	.word	0x200001d8
 8003260:	20000004 	.word	0x20000004
 8003264:	200001d4 	.word	0x200001d4
 8003268:	200001e4 	.word	0x200001e4
				  						}
				  					}
				  				}


				   else if(mode == 2)
 800326c:	4bb6      	ldr	r3, [pc, #728]	; (8003548 <main+0x2618>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b02      	cmp	r3, #2
 8003272:	f040 80cf 	bne.w	8003414 <main+0x24e4>
				  				{

					   Amplitude_sin = (((VoltHigh_sin - VoltLow_sin)/3.3)*4095.0)/2.0;
 8003276:	4bb5      	ldr	r3, [pc, #724]	; (800354c <main+0x261c>)
 8003278:	ed93 7a00 	vldr	s14, [r3]
 800327c:	4bb4      	ldr	r3, [pc, #720]	; (8003550 <main+0x2620>)
 800327e:	edd3 7a00 	vldr	s15, [r3]
 8003282:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003286:	ee17 0a90 	vmov	r0, s15
 800328a:	f7fd f965 	bl	8000558 <__aeabi_f2d>
 800328e:	a3a4      	add	r3, pc, #656	; (adr r3, 8003520 <main+0x25f0>)
 8003290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003294:	f7fd fae2 	bl	800085c <__aeabi_ddiv>
 8003298:	4603      	mov	r3, r0
 800329a:	460c      	mov	r4, r1
 800329c:	4618      	mov	r0, r3
 800329e:	4621      	mov	r1, r4
 80032a0:	a3a1      	add	r3, pc, #644	; (adr r3, 8003528 <main+0x25f8>)
 80032a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a6:	f7fd f9af 	bl	8000608 <__aeabi_dmul>
 80032aa:	4603      	mov	r3, r0
 80032ac:	460c      	mov	r4, r1
 80032ae:	4618      	mov	r0, r3
 80032b0:	4621      	mov	r1, r4
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032ba:	f7fd facf 	bl	800085c <__aeabi_ddiv>
 80032be:	4603      	mov	r3, r0
 80032c0:	460c      	mov	r4, r1
 80032c2:	4618      	mov	r0, r3
 80032c4:	4621      	mov	r1, r4
 80032c6:	f7fd fc61 	bl	8000b8c <__aeabi_d2f>
 80032ca:	4602      	mov	r2, r0
 80032cc:	4ba1      	ldr	r3, [pc, #644]	; (8003554 <main+0x2624>)
 80032ce:	601a      	str	r2, [r3, #0]

					   					if(F_sin == 0)
 80032d0:	4ba1      	ldr	r3, [pc, #644]	; (8003558 <main+0x2628>)
 80032d2:	edd3 7a00 	vldr	s15, [r3]
 80032d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80032da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032de:	d10a      	bne.n	80032f6 <main+0x23c6>
					   					{

					   						NormalizedataOut = dataOut;
 80032e0:	4b9e      	ldr	r3, [pc, #632]	; (800355c <main+0x262c>)
 80032e2:	edd3 7a00 	vldr	s15, [r3]
 80032e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032ea:	ee17 3a90 	vmov	r3, s15
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	4b9b      	ldr	r3, [pc, #620]	; (8003560 <main+0x2630>)
 80032f2:	801a      	strh	r2, [r3, #0]
 80032f4:	e1dd      	b.n	80036b2 <main+0x2782>
					   					}
					   					else
					   					{
					   						dataOut = Amplitude_sin*sin(2*M_PI*F_sin*((micros() - timestampsin)/1000000.0));
 80032f6:	4b97      	ldr	r3, [pc, #604]	; (8003554 <main+0x2624>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fd f92c 	bl	8000558 <__aeabi_f2d>
 8003300:	4605      	mov	r5, r0
 8003302:	460e      	mov	r6, r1
 8003304:	4b94      	ldr	r3, [pc, #592]	; (8003558 <main+0x2628>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f7fd f925 	bl	8000558 <__aeabi_f2d>
 800330e:	a388      	add	r3, pc, #544	; (adr r3, 8003530 <main+0x2600>)
 8003310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003314:	f7fd f978 	bl	8000608 <__aeabi_dmul>
 8003318:	4603      	mov	r3, r0
 800331a:	460c      	mov	r4, r1
 800331c:	4698      	mov	r8, r3
 800331e:	46a1      	mov	r9, r4
 8003320:	f000 fcc6 	bl	8003cb0 <micros>
 8003324:	460a      	mov	r2, r1
 8003326:	4601      	mov	r1, r0
 8003328:	4b8e      	ldr	r3, [pc, #568]	; (8003564 <main+0x2634>)
 800332a:	e9d3 bc00 	ldrd	fp, ip, [r3]
 800332e:	460b      	mov	r3, r1
 8003330:	4614      	mov	r4, r2
 8003332:	ebb3 030b 	subs.w	r3, r3, fp
 8003336:	eb64 040c 	sbc.w	r4, r4, ip
 800333a:	4618      	mov	r0, r3
 800333c:	4621      	mov	r1, r4
 800333e:	f7fd f92d 	bl	800059c <__aeabi_ul2d>
 8003342:	a37d      	add	r3, pc, #500	; (adr r3, 8003538 <main+0x2608>)
 8003344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003348:	f7fd fa88 	bl	800085c <__aeabi_ddiv>
 800334c:	4603      	mov	r3, r0
 800334e:	460c      	mov	r4, r1
 8003350:	461a      	mov	r2, r3
 8003352:	4623      	mov	r3, r4
 8003354:	4640      	mov	r0, r8
 8003356:	4649      	mov	r1, r9
 8003358:	f7fd f956 	bl	8000608 <__aeabi_dmul>
 800335c:	4603      	mov	r3, r0
 800335e:	460c      	mov	r4, r1
 8003360:	ec44 3b17 	vmov	d7, r3, r4
 8003364:	eeb0 0a47 	vmov.f32	s0, s14
 8003368:	eef0 0a67 	vmov.f32	s1, s15
 800336c:	f005 fa78 	bl	8008860 <sin>
 8003370:	ec54 3b10 	vmov	r3, r4, d0
 8003374:	461a      	mov	r2, r3
 8003376:	4623      	mov	r3, r4
 8003378:	4628      	mov	r0, r5
 800337a:	4631      	mov	r1, r6
 800337c:	f7fd f944 	bl	8000608 <__aeabi_dmul>
 8003380:	4603      	mov	r3, r0
 8003382:	460c      	mov	r4, r1
 8003384:	4618      	mov	r0, r3
 8003386:	4621      	mov	r1, r4
 8003388:	f7fd fc00 	bl	8000b8c <__aeabi_d2f>
 800338c:	4602      	mov	r2, r0
 800338e:	4b73      	ldr	r3, [pc, #460]	; (800355c <main+0x262c>)
 8003390:	601a      	str	r2, [r3, #0]
					   						dataOut += (Amplitude_sin+((VoltLow_sin)/3.3)*4095.0); // shilf graft
 8003392:	4b72      	ldr	r3, [pc, #456]	; (800355c <main+0x262c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f7fd f8de 	bl	8000558 <__aeabi_f2d>
 800339c:	4604      	mov	r4, r0
 800339e:	460d      	mov	r5, r1
 80033a0:	4b6c      	ldr	r3, [pc, #432]	; (8003554 <main+0x2624>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7fd f8d7 	bl	8000558 <__aeabi_f2d>
 80033aa:	4680      	mov	r8, r0
 80033ac:	4689      	mov	r9, r1
 80033ae:	4b68      	ldr	r3, [pc, #416]	; (8003550 <main+0x2620>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fd f8d0 	bl	8000558 <__aeabi_f2d>
 80033b8:	a359      	add	r3, pc, #356	; (adr r3, 8003520 <main+0x25f0>)
 80033ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033be:	f7fd fa4d 	bl	800085c <__aeabi_ddiv>
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	4610      	mov	r0, r2
 80033c8:	4619      	mov	r1, r3
 80033ca:	a357      	add	r3, pc, #348	; (adr r3, 8003528 <main+0x25f8>)
 80033cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d0:	f7fd f91a 	bl	8000608 <__aeabi_dmul>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4640      	mov	r0, r8
 80033da:	4649      	mov	r1, r9
 80033dc:	f7fc ff5e 	bl	800029c <__adddf3>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4620      	mov	r0, r4
 80033e6:	4629      	mov	r1, r5
 80033e8:	f7fc ff58 	bl	800029c <__adddf3>
 80033ec:	4603      	mov	r3, r0
 80033ee:	460c      	mov	r4, r1
 80033f0:	4618      	mov	r0, r3
 80033f2:	4621      	mov	r1, r4
 80033f4:	f7fd fbca 	bl	8000b8c <__aeabi_d2f>
 80033f8:	4602      	mov	r2, r0
 80033fa:	4b58      	ldr	r3, [pc, #352]	; (800355c <main+0x262c>)
 80033fc:	601a      	str	r2, [r3, #0]
					   						NormalizedataOut = dataOut;
 80033fe:	4b57      	ldr	r3, [pc, #348]	; (800355c <main+0x262c>)
 8003400:	edd3 7a00 	vldr	s15, [r3]
 8003404:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003408:	ee17 3a90 	vmov	r3, s15
 800340c:	b29a      	uxth	r2, r3
 800340e:	4b54      	ldr	r3, [pc, #336]	; (8003560 <main+0x2630>)
 8003410:	801a      	strh	r2, [r3, #0]
 8003412:	e14e      	b.n	80036b2 <main+0x2782>
					   					}

				  				}
				   else if(mode == 3)
 8003414:	4b4c      	ldr	r3, [pc, #304]	; (8003548 <main+0x2618>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b03      	cmp	r3, #3
 800341a:	f040 814a 	bne.w	80036b2 <main+0x2782>
				  				  				{
					   time = time+1;
 800341e:	4b52      	ldr	r3, [pc, #328]	; (8003568 <main+0x2638>)
 8003420:	edd3 7a00 	vldr	s15, [r3]
 8003424:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003428:	ee77 7a87 	vadd.f32	s15, s15, s14
 800342c:	4b4e      	ldr	r3, [pc, #312]	; (8003568 <main+0x2638>)
 800342e:	edc3 7a00 	vstr	s15, [r3]

					   if(F_Square ==0)
 8003432:	4b4e      	ldr	r3, [pc, #312]	; (800356c <main+0x263c>)
 8003434:	edd3 7a00 	vldr	s15, [r3]
 8003438:	eef5 7a40 	vcmp.f32	s15, #0.0
 800343c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003440:	d10a      	bne.n	8003458 <main+0x2528>
					   {
						   NormalizedataOut = dataOut;
 8003442:	4b46      	ldr	r3, [pc, #280]	; (800355c <main+0x262c>)
 8003444:	edd3 7a00 	vldr	s15, [r3]
 8003448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800344c:	ee17 3a90 	vmov	r3, s15
 8003450:	b29a      	uxth	r2, r3
 8003452:	4b43      	ldr	r3, [pc, #268]	; (8003560 <main+0x2630>)
 8003454:	801a      	strh	r2, [r3, #0]
 8003456:	e12c      	b.n	80036b2 <main+0x2782>
					   }
					   else
					   {
					   if(time*0.0001<=(duty/100.0*(1/F_Square))&&c==0)
 8003458:	4b43      	ldr	r3, [pc, #268]	; (8003568 <main+0x2638>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f7fd f87b 	bl	8000558 <__aeabi_f2d>
 8003462:	a337      	add	r3, pc, #220	; (adr r3, 8003540 <main+0x2610>)
 8003464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003468:	f7fd f8ce 	bl	8000608 <__aeabi_dmul>
 800346c:	4603      	mov	r3, r0
 800346e:	460c      	mov	r4, r1
 8003470:	4625      	mov	r5, r4
 8003472:	461c      	mov	r4, r3
 8003474:	4b3e      	ldr	r3, [pc, #248]	; (8003570 <main+0x2640>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f7fd f85b 	bl	8000534 <__aeabi_i2d>
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	4b3c      	ldr	r3, [pc, #240]	; (8003574 <main+0x2644>)
 8003484:	f7fd f9ea 	bl	800085c <__aeabi_ddiv>
 8003488:	4602      	mov	r2, r0
 800348a:	460b      	mov	r3, r1
 800348c:	4690      	mov	r8, r2
 800348e:	4699      	mov	r9, r3
 8003490:	4b36      	ldr	r3, [pc, #216]	; (800356c <main+0x263c>)
 8003492:	edd3 7a00 	vldr	s15, [r3]
 8003496:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800349a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800349e:	ee16 0a90 	vmov	r0, s13
 80034a2:	f7fd f859 	bl	8000558 <__aeabi_f2d>
 80034a6:	4602      	mov	r2, r0
 80034a8:	460b      	mov	r3, r1
 80034aa:	4640      	mov	r0, r8
 80034ac:	4649      	mov	r1, r9
 80034ae:	f7fd f8ab 	bl	8000608 <__aeabi_dmul>
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	4620      	mov	r0, r4
 80034b8:	4629      	mov	r1, r5
 80034ba:	f7fd fb21 	bl	8000b00 <__aeabi_dcmple>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d05d      	beq.n	8003580 <main+0x2650>
 80034c4:	4b2c      	ldr	r3, [pc, #176]	; (8003578 <main+0x2648>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d159      	bne.n	8003580 <main+0x2650>
					   {
						   c=1;
 80034cc:	4b2a      	ldr	r3, [pc, #168]	; (8003578 <main+0x2648>)
 80034ce:	2201      	movs	r2, #1
 80034d0:	601a      	str	r2, [r3, #0]
						   dataOut=(VoltHigh_Square)/3.3*4095.0;
 80034d2:	4b2a      	ldr	r3, [pc, #168]	; (800357c <main+0x264c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fd f83e 	bl	8000558 <__aeabi_f2d>
 80034dc:	a310      	add	r3, pc, #64	; (adr r3, 8003520 <main+0x25f0>)
 80034de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e2:	f7fd f9bb 	bl	800085c <__aeabi_ddiv>
 80034e6:	4603      	mov	r3, r0
 80034e8:	460c      	mov	r4, r1
 80034ea:	4618      	mov	r0, r3
 80034ec:	4621      	mov	r1, r4
 80034ee:	a30e      	add	r3, pc, #56	; (adr r3, 8003528 <main+0x25f8>)
 80034f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f4:	f7fd f888 	bl	8000608 <__aeabi_dmul>
 80034f8:	4603      	mov	r3, r0
 80034fa:	460c      	mov	r4, r1
 80034fc:	4618      	mov	r0, r3
 80034fe:	4621      	mov	r1, r4
 8003500:	f7fd fb44 	bl	8000b8c <__aeabi_d2f>
 8003504:	4602      	mov	r2, r0
 8003506:	4b15      	ldr	r3, [pc, #84]	; (800355c <main+0x262c>)
 8003508:	601a      	str	r2, [r3, #0]
						   NormalizedataOut =dataOut;
 800350a:	4b14      	ldr	r3, [pc, #80]	; (800355c <main+0x262c>)
 800350c:	edd3 7a00 	vldr	s15, [r3]
 8003510:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003514:	ee17 3a90 	vmov	r3, s15
 8003518:	b29a      	uxth	r2, r3
 800351a:	4b11      	ldr	r3, [pc, #68]	; (8003560 <main+0x2630>)
 800351c:	801a      	strh	r2, [r3, #0]
 800351e:	e0c8      	b.n	80036b2 <main+0x2782>
 8003520:	66666666 	.word	0x66666666
 8003524:	400a6666 	.word	0x400a6666
 8003528:	00000000 	.word	0x00000000
 800352c:	40affe00 	.word	0x40affe00
 8003530:	54442d18 	.word	0x54442d18
 8003534:	401921fb 	.word	0x401921fb
 8003538:	00000000 	.word	0x00000000
 800353c:	412e8480 	.word	0x412e8480
 8003540:	eb1c432d 	.word	0xeb1c432d
 8003544:	3f1a36e2 	.word	0x3f1a36e2
 8003548:	200001b8 	.word	0x200001b8
 800354c:	20000008 	.word	0x20000008
 8003550:	200001f0 	.word	0x200001f0
 8003554:	200001ec 	.word	0x200001ec
 8003558:	200001e8 	.word	0x200001e8
 800355c:	200001d0 	.word	0x200001d0
 8003560:	200001d4 	.word	0x200001d4
 8003564:	20000200 	.word	0x20000200
 8003568:	200001a8 	.word	0x200001a8
 800356c:	200001f4 	.word	0x200001f4
 8003570:	20000010 	.word	0x20000010
 8003574:	40590000 	.word	0x40590000
 8003578:	200001b0 	.word	0x200001b0
 800357c:	2000000c 	.word	0x2000000c
					   }
					   else if(time*0.0001>=(duty/100.0*(1/F_Square)) && time*0.0001<= 1/F_Square &&c==1 )
 8003580:	4b69      	ldr	r3, [pc, #420]	; (8003728 <main+0x27f8>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	f7fc ffe7 	bl	8000558 <__aeabi_f2d>
 800358a:	a35f      	add	r3, pc, #380	; (adr r3, 8003708 <main+0x27d8>)
 800358c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003590:	f7fd f83a 	bl	8000608 <__aeabi_dmul>
 8003594:	4603      	mov	r3, r0
 8003596:	460c      	mov	r4, r1
 8003598:	4625      	mov	r5, r4
 800359a:	461c      	mov	r4, r3
 800359c:	4b63      	ldr	r3, [pc, #396]	; (800372c <main+0x27fc>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fc ffc7 	bl	8000534 <__aeabi_i2d>
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	4b61      	ldr	r3, [pc, #388]	; (8003730 <main+0x2800>)
 80035ac:	f7fd f956 	bl	800085c <__aeabi_ddiv>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	4690      	mov	r8, r2
 80035b6:	4699      	mov	r9, r3
 80035b8:	4b5e      	ldr	r3, [pc, #376]	; (8003734 <main+0x2804>)
 80035ba:	edd3 7a00 	vldr	s15, [r3]
 80035be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035c2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80035c6:	ee16 0a90 	vmov	r0, s13
 80035ca:	f7fc ffc5 	bl	8000558 <__aeabi_f2d>
 80035ce:	4602      	mov	r2, r0
 80035d0:	460b      	mov	r3, r1
 80035d2:	4640      	mov	r0, r8
 80035d4:	4649      	mov	r1, r9
 80035d6:	f7fd f817 	bl	8000608 <__aeabi_dmul>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4620      	mov	r0, r4
 80035e0:	4629      	mov	r1, r5
 80035e2:	f7fd fa97 	bl	8000b14 <__aeabi_dcmpge>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d04f      	beq.n	800368c <main+0x275c>
 80035ec:	4b4e      	ldr	r3, [pc, #312]	; (8003728 <main+0x27f8>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7fc ffb1 	bl	8000558 <__aeabi_f2d>
 80035f6:	a344      	add	r3, pc, #272	; (adr r3, 8003708 <main+0x27d8>)
 80035f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fc:	f7fd f804 	bl	8000608 <__aeabi_dmul>
 8003600:	4603      	mov	r3, r0
 8003602:	460c      	mov	r4, r1
 8003604:	4625      	mov	r5, r4
 8003606:	461c      	mov	r4, r3
 8003608:	4b4a      	ldr	r3, [pc, #296]	; (8003734 <main+0x2804>)
 800360a:	edd3 7a00 	vldr	s15, [r3]
 800360e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003612:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003616:	ee16 0a90 	vmov	r0, s13
 800361a:	f7fc ff9d 	bl	8000558 <__aeabi_f2d>
 800361e:	4602      	mov	r2, r0
 8003620:	460b      	mov	r3, r1
 8003622:	4620      	mov	r0, r4
 8003624:	4629      	mov	r1, r5
 8003626:	f7fd fa6b 	bl	8000b00 <__aeabi_dcmple>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d02d      	beq.n	800368c <main+0x275c>
 8003630:	4b41      	ldr	r3, [pc, #260]	; (8003738 <main+0x2808>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d129      	bne.n	800368c <main+0x275c>
					   {
						   c=0;
 8003638:	4b3f      	ldr	r3, [pc, #252]	; (8003738 <main+0x2808>)
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]
						   dataOut=(VoltLow_Square)/3.3*4095.0;
 800363e:	4b3f      	ldr	r3, [pc, #252]	; (800373c <main+0x280c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f7fc ff88 	bl	8000558 <__aeabi_f2d>
 8003648:	a331      	add	r3, pc, #196	; (adr r3, 8003710 <main+0x27e0>)
 800364a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364e:	f7fd f905 	bl	800085c <__aeabi_ddiv>
 8003652:	4603      	mov	r3, r0
 8003654:	460c      	mov	r4, r1
 8003656:	4618      	mov	r0, r3
 8003658:	4621      	mov	r1, r4
 800365a:	a32f      	add	r3, pc, #188	; (adr r3, 8003718 <main+0x27e8>)
 800365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003660:	f7fc ffd2 	bl	8000608 <__aeabi_dmul>
 8003664:	4603      	mov	r3, r0
 8003666:	460c      	mov	r4, r1
 8003668:	4618      	mov	r0, r3
 800366a:	4621      	mov	r1, r4
 800366c:	f7fd fa8e 	bl	8000b8c <__aeabi_d2f>
 8003670:	4602      	mov	r2, r0
 8003672:	4b33      	ldr	r3, [pc, #204]	; (8003740 <main+0x2810>)
 8003674:	601a      	str	r2, [r3, #0]
						   NormalizedataOut =dataOut;
 8003676:	4b32      	ldr	r3, [pc, #200]	; (8003740 <main+0x2810>)
 8003678:	edd3 7a00 	vldr	s15, [r3]
 800367c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003680:	ee17 3a90 	vmov	r3, s15
 8003684:	b29a      	uxth	r2, r3
 8003686:	4b2f      	ldr	r3, [pc, #188]	; (8003744 <main+0x2814>)
 8003688:	801a      	strh	r2, [r3, #0]
 800368a:	e012      	b.n	80036b2 <main+0x2782>
					   }
					   else
					   {
						   time=0;
 800368c:	4b26      	ldr	r3, [pc, #152]	; (8003728 <main+0x27f8>)
 800368e:	f04f 0200 	mov.w	r2, #0
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	e00d      	b.n	80036b2 <main+0x2782>

				  				  				}
				  			}
				   else
				   			{
				   				dataOut = 0;
 8003696:	4b2a      	ldr	r3, [pc, #168]	; (8003740 <main+0x2810>)
 8003698:	f04f 0200 	mov.w	r2, #0
 800369c:	601a      	str	r2, [r3, #0]
				   				NormalizedataOut = dataOut;
 800369e:	4b28      	ldr	r3, [pc, #160]	; (8003740 <main+0x2810>)
 80036a0:	edd3 7a00 	vldr	s15, [r3]
 80036a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036a8:	ee17 3a90 	vmov	r3, s15
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	4b25      	ldr	r3, [pc, #148]	; (8003744 <main+0x2814>)
 80036b0:	801a      	strh	r2, [r3, #0]
				   			}




				  			if (hspi3.State == HAL_SPI_STATE_READY
 80036b2:	4b25      	ldr	r3, [pc, #148]	; (8003748 <main+0x2818>)
 80036b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d10f      	bne.n	80036de <main+0x27ae>
				  								&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)
 80036be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036c2:	4822      	ldr	r0, [pc, #136]	; (800374c <main+0x281c>)
 80036c4:	f002 f96c 	bl	80059a0 <HAL_GPIO_ReadPin>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d107      	bne.n	80036de <main+0x27ae>
				  										== GPIO_PIN_SET)
				  						{
				  							MCP4922SetOutput(DACConfig,NormalizedataOut );
 80036ce:	4b20      	ldr	r3, [pc, #128]	; (8003750 <main+0x2820>)
 80036d0:	781a      	ldrb	r2, [r3, #0]
 80036d2:	4b1c      	ldr	r3, [pc, #112]	; (8003744 <main+0x2814>)
 80036d4:	881b      	ldrh	r3, [r3, #0]
 80036d6:	4619      	mov	r1, r3
 80036d8:	4610      	mov	r0, r2
 80036da:	f000 fa8b 	bl	8003bf4 <MCP4922SetOutput>
				  						}


					}
			  VADCin = (ADCin)*(3.3/4095.0);
 80036de:	4b1d      	ldr	r3, [pc, #116]	; (8003754 <main+0x2824>)
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7fc ff26 	bl	8000534 <__aeabi_i2d>
 80036e8:	a30d      	add	r3, pc, #52	; (adr r3, 8003720 <main+0x27f0>)
 80036ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ee:	f7fc ff8b 	bl	8000608 <__aeabi_dmul>
 80036f2:	4603      	mov	r3, r0
 80036f4:	460c      	mov	r4, r1
 80036f6:	4618      	mov	r0, r3
 80036f8:	4621      	mov	r1, r4
 80036fa:	f7fd fa47 	bl	8000b8c <__aeabi_d2f>
 80036fe:	4602      	mov	r2, r0
 8003700:	4b15      	ldr	r3, [pc, #84]	; (8003758 <main+0x2828>)
 8003702:	601a      	str	r2, [r3, #0]
	{
 8003704:	f7fd bc55 	b.w	8000fb2 <main+0x82>
 8003708:	eb1c432d 	.word	0xeb1c432d
 800370c:	3f1a36e2 	.word	0x3f1a36e2
 8003710:	66666666 	.word	0x66666666
 8003714:	400a6666 	.word	0x400a6666
 8003718:	00000000 	.word	0x00000000
 800371c:	40affe00 	.word	0x40affe00
 8003720:	e734d9b4 	.word	0xe734d9b4
 8003724:	3f4a680c 	.word	0x3f4a680c
 8003728:	200001a8 	.word	0x200001a8
 800372c:	20000010 	.word	0x20000010
 8003730:	40590000 	.word	0x40590000
 8003734:	200001f4 	.word	0x200001f4
 8003738:	200001b0 	.word	0x200001b0
 800373c:	200001f8 	.word	0x200001f8
 8003740:	200001d0 	.word	0x200001d0
 8003744:	200001d4 	.word	0x200001d4
 8003748:	20000260 	.word	0x20000260
 800374c:	40020400 	.word	0x40020400
 8003750:	20000000 	.word	0x20000000
 8003754:	200001bc 	.word	0x200001bc
 8003758:	200001c0 	.word	0x200001c0

0800375c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b094      	sub	sp, #80	; 0x50
 8003760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003762:	f107 0320 	add.w	r3, r7, #32
 8003766:	2230      	movs	r2, #48	; 0x30
 8003768:	2100      	movs	r1, #0
 800376a:	4618      	mov	r0, r3
 800376c:	f004 fc71 	bl	8008052 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003770:	f107 030c 	add.w	r3, r7, #12
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	605a      	str	r2, [r3, #4]
 800377a:	609a      	str	r2, [r3, #8]
 800377c:	60da      	str	r2, [r3, #12]
 800377e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003780:	2300      	movs	r3, #0
 8003782:	60bb      	str	r3, [r7, #8]
 8003784:	4b27      	ldr	r3, [pc, #156]	; (8003824 <SystemClock_Config+0xc8>)
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	4a26      	ldr	r2, [pc, #152]	; (8003824 <SystemClock_Config+0xc8>)
 800378a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800378e:	6413      	str	r3, [r2, #64]	; 0x40
 8003790:	4b24      	ldr	r3, [pc, #144]	; (8003824 <SystemClock_Config+0xc8>)
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003798:	60bb      	str	r3, [r7, #8]
 800379a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800379c:	2300      	movs	r3, #0
 800379e:	607b      	str	r3, [r7, #4]
 80037a0:	4b21      	ldr	r3, [pc, #132]	; (8003828 <SystemClock_Config+0xcc>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a20      	ldr	r2, [pc, #128]	; (8003828 <SystemClock_Config+0xcc>)
 80037a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037aa:	6013      	str	r3, [r2, #0]
 80037ac:	4b1e      	ldr	r3, [pc, #120]	; (8003828 <SystemClock_Config+0xcc>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80037b4:	607b      	str	r3, [r7, #4]
 80037b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80037b8:	2302      	movs	r3, #2
 80037ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037bc:	2301      	movs	r3, #1
 80037be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80037c0:	2310      	movs	r3, #16
 80037c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037c4:	2302      	movs	r3, #2
 80037c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80037c8:	2300      	movs	r3, #0
 80037ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80037cc:	2308      	movs	r3, #8
 80037ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80037d0:	2364      	movs	r3, #100	; 0x64
 80037d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80037d4:	2302      	movs	r3, #2
 80037d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80037d8:	2304      	movs	r3, #4
 80037da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037dc:	f107 0320 	add.w	r3, r7, #32
 80037e0:	4618      	mov	r0, r3
 80037e2:	f002 f90f 	bl	8005a04 <HAL_RCC_OscConfig>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80037ec:	f000 faac 	bl	8003d48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037f0:	230f      	movs	r3, #15
 80037f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037f4:	2302      	movs	r3, #2
 80037f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037f8:	2300      	movs	r3, #0
 80037fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80037fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003800:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003802:	2300      	movs	r3, #0
 8003804:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003806:	f107 030c 	add.w	r3, r7, #12
 800380a:	2103      	movs	r1, #3
 800380c:	4618      	mov	r0, r3
 800380e:	f002 fb69 	bl	8005ee4 <HAL_RCC_ClockConfig>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003818:	f000 fa96 	bl	8003d48 <Error_Handler>
  }
}
 800381c:	bf00      	nop
 800381e:	3750      	adds	r7, #80	; 0x50
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40023800 	.word	0x40023800
 8003828:	40007000 	.word	0x40007000

0800382c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003832:	463b      	mov	r3, r7
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	605a      	str	r2, [r3, #4]
 800383a:	609a      	str	r2, [r3, #8]
 800383c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800383e:	4b22      	ldr	r3, [pc, #136]	; (80038c8 <MX_ADC1_Init+0x9c>)
 8003840:	4a22      	ldr	r2, [pc, #136]	; (80038cc <MX_ADC1_Init+0xa0>)
 8003842:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003844:	4b20      	ldr	r3, [pc, #128]	; (80038c8 <MX_ADC1_Init+0x9c>)
 8003846:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800384a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800384c:	4b1e      	ldr	r3, [pc, #120]	; (80038c8 <MX_ADC1_Init+0x9c>)
 800384e:	2200      	movs	r2, #0
 8003850:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003852:	4b1d      	ldr	r3, [pc, #116]	; (80038c8 <MX_ADC1_Init+0x9c>)
 8003854:	2201      	movs	r2, #1
 8003856:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003858:	4b1b      	ldr	r3, [pc, #108]	; (80038c8 <MX_ADC1_Init+0x9c>)
 800385a:	2200      	movs	r2, #0
 800385c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800385e:	4b1a      	ldr	r3, [pc, #104]	; (80038c8 <MX_ADC1_Init+0x9c>)
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003866:	4b18      	ldr	r3, [pc, #96]	; (80038c8 <MX_ADC1_Init+0x9c>)
 8003868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800386c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800386e:	4b16      	ldr	r3, [pc, #88]	; (80038c8 <MX_ADC1_Init+0x9c>)
 8003870:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003874:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003876:	4b14      	ldr	r3, [pc, #80]	; (80038c8 <MX_ADC1_Init+0x9c>)
 8003878:	2200      	movs	r2, #0
 800387a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800387c:	4b12      	ldr	r3, [pc, #72]	; (80038c8 <MX_ADC1_Init+0x9c>)
 800387e:	2201      	movs	r2, #1
 8003880:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003882:	4b11      	ldr	r3, [pc, #68]	; (80038c8 <MX_ADC1_Init+0x9c>)
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800388a:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <MX_ADC1_Init+0x9c>)
 800388c:	2201      	movs	r2, #1
 800388e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003890:	480d      	ldr	r0, [pc, #52]	; (80038c8 <MX_ADC1_Init+0x9c>)
 8003892:	f000 fd27 	bl	80042e4 <HAL_ADC_Init>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800389c:	f000 fa54 	bl	8003d48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80038a0:	2300      	movs	r3, #0
 80038a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80038a4:	2301      	movs	r3, #1
 80038a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80038a8:	2300      	movs	r3, #0
 80038aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038ac:	463b      	mov	r3, r7
 80038ae:	4619      	mov	r1, r3
 80038b0:	4805      	ldr	r0, [pc, #20]	; (80038c8 <MX_ADC1_Init+0x9c>)
 80038b2:	f000 ff97 	bl	80047e4 <HAL_ADC_ConfigChannel>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80038bc:	f000 fa44 	bl	8003d48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80038c0:	bf00      	nop
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	200002b8 	.word	0x200002b8
 80038cc:	40012000 	.word	0x40012000

080038d0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80038d4:	4b18      	ldr	r3, [pc, #96]	; (8003938 <MX_SPI3_Init+0x68>)
 80038d6:	4a19      	ldr	r2, [pc, #100]	; (800393c <MX_SPI3_Init+0x6c>)
 80038d8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80038da:	4b17      	ldr	r3, [pc, #92]	; (8003938 <MX_SPI3_Init+0x68>)
 80038dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038e0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80038e2:	4b15      	ldr	r3, [pc, #84]	; (8003938 <MX_SPI3_Init+0x68>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80038e8:	4b13      	ldr	r3, [pc, #76]	; (8003938 <MX_SPI3_Init+0x68>)
 80038ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038ee:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038f0:	4b11      	ldr	r3, [pc, #68]	; (8003938 <MX_SPI3_Init+0x68>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038f6:	4b10      	ldr	r3, [pc, #64]	; (8003938 <MX_SPI3_Init+0x68>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80038fc:	4b0e      	ldr	r3, [pc, #56]	; (8003938 <MX_SPI3_Init+0x68>)
 80038fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003902:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003904:	4b0c      	ldr	r3, [pc, #48]	; (8003938 <MX_SPI3_Init+0x68>)
 8003906:	2208      	movs	r2, #8
 8003908:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800390a:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <MX_SPI3_Init+0x68>)
 800390c:	2200      	movs	r2, #0
 800390e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003910:	4b09      	ldr	r3, [pc, #36]	; (8003938 <MX_SPI3_Init+0x68>)
 8003912:	2200      	movs	r2, #0
 8003914:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003916:	4b08      	ldr	r3, [pc, #32]	; (8003938 <MX_SPI3_Init+0x68>)
 8003918:	2200      	movs	r2, #0
 800391a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800391c:	4b06      	ldr	r3, [pc, #24]	; (8003938 <MX_SPI3_Init+0x68>)
 800391e:	220a      	movs	r2, #10
 8003920:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003922:	4805      	ldr	r0, [pc, #20]	; (8003938 <MX_SPI3_Init+0x68>)
 8003924:	f002 fcd0 	bl	80062c8 <HAL_SPI_Init>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 800392e:	f000 fa0b 	bl	8003d48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003932:	bf00      	nop
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	20000260 	.word	0x20000260
 800393c:	40003c00 	.word	0x40003c00

08003940 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003946:	f107 0308 	add.w	r3, r7, #8
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	605a      	str	r2, [r3, #4]
 8003950:	609a      	str	r2, [r3, #8]
 8003952:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003954:	463b      	mov	r3, r7
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800395c:	4b1c      	ldr	r3, [pc, #112]	; (80039d0 <MX_TIM3_Init+0x90>)
 800395e:	4a1d      	ldr	r2, [pc, #116]	; (80039d4 <MX_TIM3_Init+0x94>)
 8003960:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8003962:	4b1b      	ldr	r3, [pc, #108]	; (80039d0 <MX_TIM3_Init+0x90>)
 8003964:	2263      	movs	r2, #99	; 0x63
 8003966:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003968:	4b19      	ldr	r3, [pc, #100]	; (80039d0 <MX_TIM3_Init+0x90>)
 800396a:	2200      	movs	r2, #0
 800396c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800396e:	4b18      	ldr	r3, [pc, #96]	; (80039d0 <MX_TIM3_Init+0x90>)
 8003970:	2264      	movs	r2, #100	; 0x64
 8003972:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003974:	4b16      	ldr	r3, [pc, #88]	; (80039d0 <MX_TIM3_Init+0x90>)
 8003976:	2200      	movs	r2, #0
 8003978:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800397a:	4b15      	ldr	r3, [pc, #84]	; (80039d0 <MX_TIM3_Init+0x90>)
 800397c:	2200      	movs	r2, #0
 800397e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003980:	4813      	ldr	r0, [pc, #76]	; (80039d0 <MX_TIM3_Init+0x90>)
 8003982:	f002 fff9 	bl	8006978 <HAL_TIM_Base_Init>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 800398c:	f000 f9dc 	bl	8003d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003994:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003996:	f107 0308 	add.w	r3, r7, #8
 800399a:	4619      	mov	r1, r3
 800399c:	480c      	ldr	r0, [pc, #48]	; (80039d0 <MX_TIM3_Init+0x90>)
 800399e:	f003 f966 	bl	8006c6e <HAL_TIM_ConfigClockSource>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80039a8:	f000 f9ce 	bl	8003d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80039ac:	2320      	movs	r3, #32
 80039ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039b0:	2300      	movs	r3, #0
 80039b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80039b4:	463b      	mov	r3, r7
 80039b6:	4619      	mov	r1, r3
 80039b8:	4805      	ldr	r0, [pc, #20]	; (80039d0 <MX_TIM3_Init+0x90>)
 80039ba:	f003 fb51 	bl	8007060 <HAL_TIMEx_MasterConfigSynchronization>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80039c4:	f000 f9c0 	bl	8003d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80039c8:	bf00      	nop
 80039ca:	3718      	adds	r7, #24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	20000220 	.word	0x20000220
 80039d4:	40000400 	.word	0x40000400

080039d8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80039dc:	4b0e      	ldr	r3, [pc, #56]	; (8003a18 <MX_TIM11_Init+0x40>)
 80039de:	4a0f      	ldr	r2, [pc, #60]	; (8003a1c <MX_TIM11_Init+0x44>)
 80039e0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80039e2:	4b0d      	ldr	r3, [pc, #52]	; (8003a18 <MX_TIM11_Init+0x40>)
 80039e4:	2263      	movs	r2, #99	; 0x63
 80039e6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039e8:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <MX_TIM11_Init+0x40>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80039ee:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <MX_TIM11_Init+0x40>)
 80039f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039f4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039f6:	4b08      	ldr	r3, [pc, #32]	; (8003a18 <MX_TIM11_Init+0x40>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039fc:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <MX_TIM11_Init+0x40>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003a02:	4805      	ldr	r0, [pc, #20]	; (8003a18 <MX_TIM11_Init+0x40>)
 8003a04:	f002 ffb8 	bl	8006978 <HAL_TIM_Base_Init>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8003a0e:	f000 f99b 	bl	8003d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003a12:	bf00      	nop
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	20000300 	.word	0x20000300
 8003a1c:	40014800 	.word	0x40014800

08003a20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003a24:	4b11      	ldr	r3, [pc, #68]	; (8003a6c <MX_USART2_UART_Init+0x4c>)
 8003a26:	4a12      	ldr	r2, [pc, #72]	; (8003a70 <MX_USART2_UART_Init+0x50>)
 8003a28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003a2a:	4b10      	ldr	r3, [pc, #64]	; (8003a6c <MX_USART2_UART_Init+0x4c>)
 8003a2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003a32:	4b0e      	ldr	r3, [pc, #56]	; (8003a6c <MX_USART2_UART_Init+0x4c>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003a38:	4b0c      	ldr	r3, [pc, #48]	; (8003a6c <MX_USART2_UART_Init+0x4c>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003a3e:	4b0b      	ldr	r3, [pc, #44]	; (8003a6c <MX_USART2_UART_Init+0x4c>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003a44:	4b09      	ldr	r3, [pc, #36]	; (8003a6c <MX_USART2_UART_Init+0x4c>)
 8003a46:	220c      	movs	r2, #12
 8003a48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a4a:	4b08      	ldr	r3, [pc, #32]	; (8003a6c <MX_USART2_UART_Init+0x4c>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a50:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <MX_USART2_UART_Init+0x4c>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003a56:	4805      	ldr	r0, [pc, #20]	; (8003a6c <MX_USART2_UART_Init+0x4c>)
 8003a58:	f003 fb84 	bl	8007164 <HAL_UART_Init>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003a62:	f000 f971 	bl	8003d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003a66:	bf00      	nop
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	200003a0 	.word	0x200003a0
 8003a70:	40004400 	.word	0x40004400

08003a74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	607b      	str	r3, [r7, #4]
 8003a7e:	4b0c      	ldr	r3, [pc, #48]	; (8003ab0 <MX_DMA_Init+0x3c>)
 8003a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a82:	4a0b      	ldr	r2, [pc, #44]	; (8003ab0 <MX_DMA_Init+0x3c>)
 8003a84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a88:	6313      	str	r3, [r2, #48]	; 0x30
 8003a8a:	4b09      	ldr	r3, [pc, #36]	; (8003ab0 <MX_DMA_Init+0x3c>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a92:	607b      	str	r3, [r7, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003a96:	2200      	movs	r2, #0
 8003a98:	2100      	movs	r1, #0
 8003a9a:	2038      	movs	r0, #56	; 0x38
 8003a9c:	f001 fa37 	bl	8004f0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003aa0:	2038      	movs	r0, #56	; 0x38
 8003aa2:	f001 fa50 	bl	8004f46 <HAL_NVIC_EnableIRQ>

}
 8003aa6:	bf00      	nop
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	40023800 	.word	0x40023800

08003ab4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08a      	sub	sp, #40	; 0x28
 8003ab8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aba:	f107 0314 	add.w	r3, r7, #20
 8003abe:	2200      	movs	r2, #0
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	605a      	str	r2, [r3, #4]
 8003ac4:	609a      	str	r2, [r3, #8]
 8003ac6:	60da      	str	r2, [r3, #12]
 8003ac8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003aca:	2300      	movs	r3, #0
 8003acc:	613b      	str	r3, [r7, #16]
 8003ace:	4b44      	ldr	r3, [pc, #272]	; (8003be0 <MX_GPIO_Init+0x12c>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad2:	4a43      	ldr	r2, [pc, #268]	; (8003be0 <MX_GPIO_Init+0x12c>)
 8003ad4:	f043 0304 	orr.w	r3, r3, #4
 8003ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8003ada:	4b41      	ldr	r3, [pc, #260]	; (8003be0 <MX_GPIO_Init+0x12c>)
 8003adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	613b      	str	r3, [r7, #16]
 8003ae4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	4b3d      	ldr	r3, [pc, #244]	; (8003be0 <MX_GPIO_Init+0x12c>)
 8003aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aee:	4a3c      	ldr	r2, [pc, #240]	; (8003be0 <MX_GPIO_Init+0x12c>)
 8003af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003af4:	6313      	str	r3, [r2, #48]	; 0x30
 8003af6:	4b3a      	ldr	r3, [pc, #232]	; (8003be0 <MX_GPIO_Init+0x12c>)
 8003af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b02:	2300      	movs	r3, #0
 8003b04:	60bb      	str	r3, [r7, #8]
 8003b06:	4b36      	ldr	r3, [pc, #216]	; (8003be0 <MX_GPIO_Init+0x12c>)
 8003b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0a:	4a35      	ldr	r2, [pc, #212]	; (8003be0 <MX_GPIO_Init+0x12c>)
 8003b0c:	f043 0301 	orr.w	r3, r3, #1
 8003b10:	6313      	str	r3, [r2, #48]	; 0x30
 8003b12:	4b33      	ldr	r3, [pc, #204]	; (8003be0 <MX_GPIO_Init+0x12c>)
 8003b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	60bb      	str	r3, [r7, #8]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b1e:	2300      	movs	r3, #0
 8003b20:	607b      	str	r3, [r7, #4]
 8003b22:	4b2f      	ldr	r3, [pc, #188]	; (8003be0 <MX_GPIO_Init+0x12c>)
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	4a2e      	ldr	r2, [pc, #184]	; (8003be0 <MX_GPIO_Init+0x12c>)
 8003b28:	f043 0302 	orr.w	r3, r3, #2
 8003b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b2e:	4b2c      	ldr	r3, [pc, #176]	; (8003be0 <MX_GPIO_Init+0x12c>)
 8003b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	607b      	str	r3, [r7, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	2120      	movs	r1, #32
 8003b3e:	4829      	ldr	r0, [pc, #164]	; (8003be4 <MX_GPIO_Init+0x130>)
 8003b40:	f001 ff46 	bl	80059d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8003b44:	2201      	movs	r2, #1
 8003b46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b4a:	4827      	ldr	r0, [pc, #156]	; (8003be8 <MX_GPIO_Init+0x134>)
 8003b4c:	f001 ff40 	bl	80059d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_SET);
 8003b50:	2201      	movs	r2, #1
 8003b52:	2180      	movs	r1, #128	; 0x80
 8003b54:	4825      	ldr	r0, [pc, #148]	; (8003bec <MX_GPIO_Init+0x138>)
 8003b56:	f001 ff3b 	bl	80059d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_SET);
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b60:	4820      	ldr	r0, [pc, #128]	; (8003be4 <MX_GPIO_Init+0x130>)
 8003b62:	f001 ff35 	bl	80059d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003b66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003b6c:	4b20      	ldr	r3, [pc, #128]	; (8003bf0 <MX_GPIO_Init+0x13c>)
 8003b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b70:	2300      	movs	r3, #0
 8003b72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003b74:	f107 0314 	add.w	r3, r7, #20
 8003b78:	4619      	mov	r1, r3
 8003b7a:	481c      	ldr	r0, [pc, #112]	; (8003bec <MX_GPIO_Init+0x138>)
 8003b7c:	f001 fd8e 	bl	800569c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LOAD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LOAD_Pin;
 8003b80:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b86:	2301      	movs	r3, #1
 8003b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b92:	f107 0314 	add.w	r3, r7, #20
 8003b96:	4619      	mov	r1, r3
 8003b98:	4812      	ldr	r0, [pc, #72]	; (8003be4 <MX_GPIO_Init+0x130>)
 8003b9a:	f001 fd7f 	bl	800569c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 8003b9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bac:	2300      	movs	r3, #0
 8003bae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 8003bb0:	f107 0314 	add.w	r3, r7, #20
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	480c      	ldr	r0, [pc, #48]	; (8003be8 <MX_GPIO_Init+0x134>)
 8003bb8:	f001 fd70 	bl	800569c <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 8003bbc:	2380      	movs	r3, #128	; 0x80
 8003bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 8003bcc:	f107 0314 	add.w	r3, r7, #20
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4806      	ldr	r0, [pc, #24]	; (8003bec <MX_GPIO_Init+0x138>)
 8003bd4:	f001 fd62 	bl	800569c <HAL_GPIO_Init>

}
 8003bd8:	bf00      	nop
 8003bda:	3728      	adds	r7, #40	; 0x28
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40023800 	.word	0x40023800
 8003be4:	40020000 	.word	0x40020000
 8003be8:	40020400 	.word	0x40020400
 8003bec:	40020800 	.word	0x40020800
 8003bf0:	10210000 	.word	0x10210000

08003bf4 <MCP4922SetOutput>:

/* USER CODE BEGIN 4 */
void MCP4922SetOutput(uint8_t Config, uint16_t DACOutput)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	460a      	mov	r2, r1
 8003bfe:	71fb      	strb	r3, [r7, #7]
 8003c00:	4613      	mov	r3, r2
 8003c02:	80bb      	strh	r3, [r7, #4]
	uint32_t OutputPacket = (DACOutput & 0x0fff) | ((Config & 0xf) << 12);
 8003c04:	88bb      	ldrh	r3, [r7, #4]
 8003c06:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8003c0a:	79fb      	ldrb	r3, [r7, #7]
 8003c0c:	031b      	lsls	r3, r3, #12
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	4313      	orrs	r3, r2
 8003c12:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 8003c14:	2200      	movs	r2, #0
 8003c16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003c1a:	4807      	ldr	r0, [pc, #28]	; (8003c38 <MCP4922SetOutput+0x44>)
 8003c1c:	f001 fed8 	bl	80059d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, &OutputPacket, 1);
 8003c20:	f107 030c 	add.w	r3, r7, #12
 8003c24:	2201      	movs	r2, #1
 8003c26:	4619      	mov	r1, r3
 8003c28:	4804      	ldr	r0, [pc, #16]	; (8003c3c <MCP4922SetOutput+0x48>)
 8003c2a:	f002 fbb1 	bl	8006390 <HAL_SPI_Transmit_IT>
}
 8003c2e:	bf00      	nop
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	40020400 	.word	0x40020400
 8003c3c:	20000260 	.word	0x20000260

08003c40 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a06      	ldr	r2, [pc, #24]	; (8003c64 <HAL_SPI_TxCpltCallback+0x24>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d105      	bne.n	8003c5c <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8003c50:	2201      	movs	r2, #1
 8003c52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003c56:	4804      	ldr	r0, [pc, #16]	; (8003c68 <HAL_SPI_TxCpltCallback+0x28>)
 8003c58:	f001 feba 	bl	80059d0 <HAL_GPIO_WritePin>
	}
}
 8003c5c:	bf00      	nop
 8003c5e:	3708      	adds	r7, #8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	20000260 	.word	0x20000260
 8003c68:	40020400 	.word	0x40020400

08003c6c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c6c:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
	if (htim == &htim11)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a0b      	ldr	r2, [pc, #44]	; (8003ca8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d10d      	bne.n	8003c9a <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		_micro += 65535;
 8003c7e:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003c80:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8003c84:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	eb1b 0301 	adds.w	r3, fp, r1
 8003c90:	eb4c 0402 	adc.w	r4, ip, r2
 8003c94:	4a05      	ldr	r2, [pc, #20]	; (8003cac <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003c96:	e9c2 3400 	strd	r3, r4, [r2]
	}
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	20000300 	.word	0x20000300
 8003cac:	200001c8 	.word	0x200001c8

08003cb0 <micros>:

inline uint64_t micros()
{
 8003cb0:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8003cb4:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 8003cb6:	4b09      	ldr	r3, [pc, #36]	; (8003cdc <micros+0x2c>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	f04f 0200 	mov.w	r2, #0
 8003cc2:	4b07      	ldr	r3, [pc, #28]	; (8003ce0 <micros+0x30>)
 8003cc4:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8003cc8:	eb1b 0301 	adds.w	r3, fp, r1
 8003ccc:	eb4c 0402 	adc.w	r4, ip, r2
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	4621      	mov	r1, r4
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8003cda:	4770      	bx	lr
 8003cdc:	20000300 	.word	0x20000300
 8003ce0:	200001c8 	.word	0x200001c8

08003ce4 <UARTRecieveIT>:

int16_t UARTRecieveIT()
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 8003cea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003cee:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 8003cf0:	4b12      	ldr	r3, [pc, #72]	; (8003d3c <UARTRecieveIT+0x58>)
 8003cf2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	4b11      	ldr	r3, [pc, #68]	; (8003d3c <UARTRecieveIT+0x58>)
 8003cf8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	461a      	mov	r2, r3
 8003d00:	4b0f      	ldr	r3, [pc, #60]	; (8003d40 <UARTRecieveIT+0x5c>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d010      	beq.n	8003d2a <UARTRecieveIT+0x46>
	{
		data=RxDataBuffer[dataPos];
 8003d08:	4b0d      	ldr	r3, [pc, #52]	; (8003d40 <UARTRecieveIT+0x5c>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a0d      	ldr	r2, [pc, #52]	; (8003d44 <UARTRecieveIT+0x60>)
 8003d0e:	5cd3      	ldrb	r3, [r2, r3]
 8003d10:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 8003d12:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <UARTRecieveIT+0x5c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	3301      	adds	r3, #1
 8003d18:	4a08      	ldr	r2, [pc, #32]	; (8003d3c <UARTRecieveIT+0x58>)
 8003d1a:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8003d1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d20:	fb02 f201 	mul.w	r2, r2, r1
 8003d24:	1a9b      	subs	r3, r3, r2
 8003d26:	4a06      	ldr	r2, [pc, #24]	; (8003d40 <UARTRecieveIT+0x5c>)
 8003d28:	6013      	str	r3, [r2, #0]
	}
	return data;
 8003d2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	200003a0 	.word	0x200003a0
 8003d40:	20000210 	.word	0x20000210
 8003d44:	20000124 	.word	0x20000124

08003d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d4c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003d4e:	e7fe      	b.n	8003d4e <Error_Handler+0x6>

08003d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d56:	2300      	movs	r3, #0
 8003d58:	607b      	str	r3, [r7, #4]
 8003d5a:	4b10      	ldr	r3, [pc, #64]	; (8003d9c <HAL_MspInit+0x4c>)
 8003d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5e:	4a0f      	ldr	r2, [pc, #60]	; (8003d9c <HAL_MspInit+0x4c>)
 8003d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d64:	6453      	str	r3, [r2, #68]	; 0x44
 8003d66:	4b0d      	ldr	r3, [pc, #52]	; (8003d9c <HAL_MspInit+0x4c>)
 8003d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d6e:	607b      	str	r3, [r7, #4]
 8003d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d72:	2300      	movs	r3, #0
 8003d74:	603b      	str	r3, [r7, #0]
 8003d76:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <HAL_MspInit+0x4c>)
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	4a08      	ldr	r2, [pc, #32]	; (8003d9c <HAL_MspInit+0x4c>)
 8003d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d80:	6413      	str	r3, [r2, #64]	; 0x40
 8003d82:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <HAL_MspInit+0x4c>)
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8a:	603b      	str	r3, [r7, #0]
 8003d8c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003d8e:	2007      	movs	r0, #7
 8003d90:	f001 f8b2 	bl	8004ef8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d94:	bf00      	nop
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40023800 	.word	0x40023800

08003da0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b08a      	sub	sp, #40	; 0x28
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003da8:	f107 0314 	add.w	r3, r7, #20
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	605a      	str	r2, [r3, #4]
 8003db2:	609a      	str	r2, [r3, #8]
 8003db4:	60da      	str	r2, [r3, #12]
 8003db6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a33      	ldr	r2, [pc, #204]	; (8003e8c <HAL_ADC_MspInit+0xec>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d15f      	bne.n	8003e82 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	613b      	str	r3, [r7, #16]
 8003dc6:	4b32      	ldr	r3, [pc, #200]	; (8003e90 <HAL_ADC_MspInit+0xf0>)
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dca:	4a31      	ldr	r2, [pc, #196]	; (8003e90 <HAL_ADC_MspInit+0xf0>)
 8003dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8003dd2:	4b2f      	ldr	r3, [pc, #188]	; (8003e90 <HAL_ADC_MspInit+0xf0>)
 8003dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dda:	613b      	str	r3, [r7, #16]
 8003ddc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dde:	2300      	movs	r3, #0
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	4b2b      	ldr	r3, [pc, #172]	; (8003e90 <HAL_ADC_MspInit+0xf0>)
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	4a2a      	ldr	r2, [pc, #168]	; (8003e90 <HAL_ADC_MspInit+0xf0>)
 8003de8:	f043 0301 	orr.w	r3, r3, #1
 8003dec:	6313      	str	r3, [r2, #48]	; 0x30
 8003dee:	4b28      	ldr	r3, [pc, #160]	; (8003e90 <HAL_ADC_MspInit+0xf0>)
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e02:	2300      	movs	r3, #0
 8003e04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e06:	f107 0314 	add.w	r3, r7, #20
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	4821      	ldr	r0, [pc, #132]	; (8003e94 <HAL_ADC_MspInit+0xf4>)
 8003e0e:	f001 fc45 	bl	800569c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003e12:	4b21      	ldr	r3, [pc, #132]	; (8003e98 <HAL_ADC_MspInit+0xf8>)
 8003e14:	4a21      	ldr	r2, [pc, #132]	; (8003e9c <HAL_ADC_MspInit+0xfc>)
 8003e16:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003e18:	4b1f      	ldr	r3, [pc, #124]	; (8003e98 <HAL_ADC_MspInit+0xf8>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e1e:	4b1e      	ldr	r3, [pc, #120]	; (8003e98 <HAL_ADC_MspInit+0xf8>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e24:	4b1c      	ldr	r3, [pc, #112]	; (8003e98 <HAL_ADC_MspInit+0xf8>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003e2a:	4b1b      	ldr	r3, [pc, #108]	; (8003e98 <HAL_ADC_MspInit+0xf8>)
 8003e2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e30:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003e32:	4b19      	ldr	r3, [pc, #100]	; (8003e98 <HAL_ADC_MspInit+0xf8>)
 8003e34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e38:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003e3a:	4b17      	ldr	r3, [pc, #92]	; (8003e98 <HAL_ADC_MspInit+0xf8>)
 8003e3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e40:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003e42:	4b15      	ldr	r3, [pc, #84]	; (8003e98 <HAL_ADC_MspInit+0xf8>)
 8003e44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e48:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003e4a:	4b13      	ldr	r3, [pc, #76]	; (8003e98 <HAL_ADC_MspInit+0xf8>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e50:	4b11      	ldr	r3, [pc, #68]	; (8003e98 <HAL_ADC_MspInit+0xf8>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003e56:	4810      	ldr	r0, [pc, #64]	; (8003e98 <HAL_ADC_MspInit+0xf8>)
 8003e58:	f001 f890 	bl	8004f7c <HAL_DMA_Init>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003e62:	f7ff ff71 	bl	8003d48 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a0b      	ldr	r2, [pc, #44]	; (8003e98 <HAL_ADC_MspInit+0xf8>)
 8003e6a:	639a      	str	r2, [r3, #56]	; 0x38
 8003e6c:	4a0a      	ldr	r2, [pc, #40]	; (8003e98 <HAL_ADC_MspInit+0xf8>)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003e72:	2200      	movs	r2, #0
 8003e74:	2100      	movs	r1, #0
 8003e76:	2012      	movs	r0, #18
 8003e78:	f001 f849 	bl	8004f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003e7c:	2012      	movs	r0, #18
 8003e7e:	f001 f862 	bl	8004f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003e82:	bf00      	nop
 8003e84:	3728      	adds	r7, #40	; 0x28
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40012000 	.word	0x40012000
 8003e90:	40023800 	.word	0x40023800
 8003e94:	40020000 	.word	0x40020000
 8003e98:	20000340 	.word	0x20000340
 8003e9c:	40026410 	.word	0x40026410

08003ea0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b08a      	sub	sp, #40	; 0x28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ea8:	f107 0314 	add.w	r3, r7, #20
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	605a      	str	r2, [r3, #4]
 8003eb2:	609a      	str	r2, [r3, #8]
 8003eb4:	60da      	str	r2, [r3, #12]
 8003eb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a1d      	ldr	r2, [pc, #116]	; (8003f34 <HAL_SPI_MspInit+0x94>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d133      	bne.n	8003f2a <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	613b      	str	r3, [r7, #16]
 8003ec6:	4b1c      	ldr	r3, [pc, #112]	; (8003f38 <HAL_SPI_MspInit+0x98>)
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	4a1b      	ldr	r2, [pc, #108]	; (8003f38 <HAL_SPI_MspInit+0x98>)
 8003ecc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ed2:	4b19      	ldr	r3, [pc, #100]	; (8003f38 <HAL_SPI_MspInit+0x98>)
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eda:	613b      	str	r3, [r7, #16]
 8003edc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60fb      	str	r3, [r7, #12]
 8003ee2:	4b15      	ldr	r3, [pc, #84]	; (8003f38 <HAL_SPI_MspInit+0x98>)
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee6:	4a14      	ldr	r2, [pc, #80]	; (8003f38 <HAL_SPI_MspInit+0x98>)
 8003ee8:	f043 0302 	orr.w	r3, r3, #2
 8003eec:	6313      	str	r3, [r2, #48]	; 0x30
 8003eee:	4b12      	ldr	r3, [pc, #72]	; (8003f38 <HAL_SPI_MspInit+0x98>)
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003efa:	2338      	movs	r3, #56	; 0x38
 8003efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003efe:	2302      	movs	r3, #2
 8003f00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f02:	2300      	movs	r3, #0
 8003f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f06:	2303      	movs	r3, #3
 8003f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003f0a:	2306      	movs	r3, #6
 8003f0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f0e:	f107 0314 	add.w	r3, r7, #20
 8003f12:	4619      	mov	r1, r3
 8003f14:	4809      	ldr	r0, [pc, #36]	; (8003f3c <HAL_SPI_MspInit+0x9c>)
 8003f16:	f001 fbc1 	bl	800569c <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	2033      	movs	r0, #51	; 0x33
 8003f20:	f000 fff5 	bl	8004f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8003f24:	2033      	movs	r0, #51	; 0x33
 8003f26:	f001 f80e 	bl	8004f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003f2a:	bf00      	nop
 8003f2c:	3728      	adds	r7, #40	; 0x28
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	40003c00 	.word	0x40003c00
 8003f38:	40023800 	.word	0x40023800
 8003f3c:	40020400 	.word	0x40020400

08003f40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a18      	ldr	r2, [pc, #96]	; (8003fb0 <HAL_TIM_Base_MspInit+0x70>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d10e      	bne.n	8003f70 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f52:	2300      	movs	r3, #0
 8003f54:	60fb      	str	r3, [r7, #12]
 8003f56:	4b17      	ldr	r3, [pc, #92]	; (8003fb4 <HAL_TIM_Base_MspInit+0x74>)
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	4a16      	ldr	r2, [pc, #88]	; (8003fb4 <HAL_TIM_Base_MspInit+0x74>)
 8003f5c:	f043 0302 	orr.w	r3, r3, #2
 8003f60:	6413      	str	r3, [r2, #64]	; 0x40
 8003f62:	4b14      	ldr	r3, [pc, #80]	; (8003fb4 <HAL_TIM_Base_MspInit+0x74>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8003f6e:	e01a      	b.n	8003fa6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM11)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a10      	ldr	r2, [pc, #64]	; (8003fb8 <HAL_TIM_Base_MspInit+0x78>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d115      	bne.n	8003fa6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60bb      	str	r3, [r7, #8]
 8003f7e:	4b0d      	ldr	r3, [pc, #52]	; (8003fb4 <HAL_TIM_Base_MspInit+0x74>)
 8003f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f82:	4a0c      	ldr	r2, [pc, #48]	; (8003fb4 <HAL_TIM_Base_MspInit+0x74>)
 8003f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f88:	6453      	str	r3, [r2, #68]	; 0x44
 8003f8a:	4b0a      	ldr	r3, [pc, #40]	; (8003fb4 <HAL_TIM_Base_MspInit+0x74>)
 8003f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f92:	60bb      	str	r3, [r7, #8]
 8003f94:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003f96:	2200      	movs	r2, #0
 8003f98:	2100      	movs	r1, #0
 8003f9a:	201a      	movs	r0, #26
 8003f9c:	f000 ffb7 	bl	8004f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003fa0:	201a      	movs	r0, #26
 8003fa2:	f000 ffd0 	bl	8004f46 <HAL_NVIC_EnableIRQ>
}
 8003fa6:	bf00      	nop
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	40000400 	.word	0x40000400
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	40014800 	.word	0x40014800

08003fbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b08a      	sub	sp, #40	; 0x28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fc4:	f107 0314 	add.w	r3, r7, #20
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	605a      	str	r2, [r3, #4]
 8003fce:	609a      	str	r2, [r3, #8]
 8003fd0:	60da      	str	r2, [r3, #12]
 8003fd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a1d      	ldr	r2, [pc, #116]	; (8004050 <HAL_UART_MspInit+0x94>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d133      	bne.n	8004046 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003fde:	2300      	movs	r3, #0
 8003fe0:	613b      	str	r3, [r7, #16]
 8003fe2:	4b1c      	ldr	r3, [pc, #112]	; (8004054 <HAL_UART_MspInit+0x98>)
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	4a1b      	ldr	r2, [pc, #108]	; (8004054 <HAL_UART_MspInit+0x98>)
 8003fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fec:	6413      	str	r3, [r2, #64]	; 0x40
 8003fee:	4b19      	ldr	r3, [pc, #100]	; (8004054 <HAL_UART_MspInit+0x98>)
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff6:	613b      	str	r3, [r7, #16]
 8003ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	4b15      	ldr	r3, [pc, #84]	; (8004054 <HAL_UART_MspInit+0x98>)
 8004000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004002:	4a14      	ldr	r2, [pc, #80]	; (8004054 <HAL_UART_MspInit+0x98>)
 8004004:	f043 0301 	orr.w	r3, r3, #1
 8004008:	6313      	str	r3, [r2, #48]	; 0x30
 800400a:	4b12      	ldr	r3, [pc, #72]	; (8004054 <HAL_UART_MspInit+0x98>)
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004016:	230c      	movs	r3, #12
 8004018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800401a:	2302      	movs	r3, #2
 800401c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800401e:	2300      	movs	r3, #0
 8004020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004022:	2303      	movs	r3, #3
 8004024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004026:	2307      	movs	r3, #7
 8004028:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800402a:	f107 0314 	add.w	r3, r7, #20
 800402e:	4619      	mov	r1, r3
 8004030:	4809      	ldr	r0, [pc, #36]	; (8004058 <HAL_UART_MspInit+0x9c>)
 8004032:	f001 fb33 	bl	800569c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004036:	2200      	movs	r2, #0
 8004038:	2100      	movs	r1, #0
 800403a:	2026      	movs	r0, #38	; 0x26
 800403c:	f000 ff67 	bl	8004f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004040:	2026      	movs	r0, #38	; 0x26
 8004042:	f000 ff80 	bl	8004f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004046:	bf00      	nop
 8004048:	3728      	adds	r7, #40	; 0x28
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40004400 	.word	0x40004400
 8004054:	40023800 	.word	0x40023800
 8004058:	40020000 	.word	0x40020000

0800405c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004060:	e7fe      	b.n	8004060 <NMI_Handler+0x4>

08004062 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004062:	b480      	push	{r7}
 8004064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004066:	e7fe      	b.n	8004066 <HardFault_Handler+0x4>

08004068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800406c:	e7fe      	b.n	800406c <MemManage_Handler+0x4>

0800406e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800406e:	b480      	push	{r7}
 8004070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004072:	e7fe      	b.n	8004072 <BusFault_Handler+0x4>

08004074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004078:	e7fe      	b.n	8004078 <UsageFault_Handler+0x4>

0800407a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800407a:	b480      	push	{r7}
 800407c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800407e:	bf00      	nop
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800408c:	bf00      	nop
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004096:	b480      	push	{r7}
 8004098:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800409a:	bf00      	nop
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040a8:	f000 f8fc 	bl	80042a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040ac:	bf00      	nop
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80040b4:	4802      	ldr	r0, [pc, #8]	; (80040c0 <ADC_IRQHandler+0x10>)
 80040b6:	f000 f958 	bl	800436a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80040ba:	bf00      	nop
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	200002b8 	.word	0x200002b8

080040c4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80040c8:	4802      	ldr	r0, [pc, #8]	; (80040d4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80040ca:	f002 fcc8 	bl	8006a5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80040ce:	bf00      	nop
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	20000300 	.word	0x20000300

080040d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80040dc:	4802      	ldr	r0, [pc, #8]	; (80040e8 <USART2_IRQHandler+0x10>)
 80040de:	f003 f97d 	bl	80073dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80040e2:	bf00      	nop
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	200003a0 	.word	0x200003a0

080040ec <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80040f0:	4802      	ldr	r0, [pc, #8]	; (80040fc <SPI3_IRQHandler+0x10>)
 80040f2:	f002 f9cf 	bl	8006494 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80040f6:	bf00      	nop
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	20000260 	.word	0x20000260

08004100 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004104:	4802      	ldr	r0, [pc, #8]	; (8004110 <DMA2_Stream0_IRQHandler+0x10>)
 8004106:	f001 f861 	bl	80051cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800410a:	bf00      	nop
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	20000340 	.word	0x20000340

08004114 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800411c:	4a14      	ldr	r2, [pc, #80]	; (8004170 <_sbrk+0x5c>)
 800411e:	4b15      	ldr	r3, [pc, #84]	; (8004174 <_sbrk+0x60>)
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004128:	4b13      	ldr	r3, [pc, #76]	; (8004178 <_sbrk+0x64>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d102      	bne.n	8004136 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004130:	4b11      	ldr	r3, [pc, #68]	; (8004178 <_sbrk+0x64>)
 8004132:	4a12      	ldr	r2, [pc, #72]	; (800417c <_sbrk+0x68>)
 8004134:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004136:	4b10      	ldr	r3, [pc, #64]	; (8004178 <_sbrk+0x64>)
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4413      	add	r3, r2
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	429a      	cmp	r2, r3
 8004142:	d207      	bcs.n	8004154 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004144:	f003 ff50 	bl	8007fe8 <__errno>
 8004148:	4602      	mov	r2, r0
 800414a:	230c      	movs	r3, #12
 800414c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800414e:	f04f 33ff 	mov.w	r3, #4294967295
 8004152:	e009      	b.n	8004168 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004154:	4b08      	ldr	r3, [pc, #32]	; (8004178 <_sbrk+0x64>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800415a:	4b07      	ldr	r3, [pc, #28]	; (8004178 <_sbrk+0x64>)
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4413      	add	r3, r2
 8004162:	4a05      	ldr	r2, [pc, #20]	; (8004178 <_sbrk+0x64>)
 8004164:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004166:	68fb      	ldr	r3, [r7, #12]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3718      	adds	r7, #24
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	20020000 	.word	0x20020000
 8004174:	00000400 	.word	0x00000400
 8004178:	20000214 	.word	0x20000214
 800417c:	200003e8 	.word	0x200003e8

08004180 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004184:	4b08      	ldr	r3, [pc, #32]	; (80041a8 <SystemInit+0x28>)
 8004186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418a:	4a07      	ldr	r2, [pc, #28]	; (80041a8 <SystemInit+0x28>)
 800418c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004190:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004194:	4b04      	ldr	r3, [pc, #16]	; (80041a8 <SystemInit+0x28>)
 8004196:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800419a:	609a      	str	r2, [r3, #8]
#endif
}
 800419c:	bf00      	nop
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	e000ed00 	.word	0xe000ed00

080041ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80041ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80041b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80041b2:	e003      	b.n	80041bc <LoopCopyDataInit>

080041b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80041b4:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80041b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80041b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80041ba:	3104      	adds	r1, #4

080041bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80041bc:	480b      	ldr	r0, [pc, #44]	; (80041ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80041be:	4b0c      	ldr	r3, [pc, #48]	; (80041f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80041c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80041c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80041c4:	d3f6      	bcc.n	80041b4 <CopyDataInit>
  ldr  r2, =_sbss
 80041c6:	4a0b      	ldr	r2, [pc, #44]	; (80041f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80041c8:	e002      	b.n	80041d0 <LoopFillZerobss>

080041ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80041ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80041cc:	f842 3b04 	str.w	r3, [r2], #4

080041d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80041d0:	4b09      	ldr	r3, [pc, #36]	; (80041f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80041d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80041d4:	d3f9      	bcc.n	80041ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80041d6:	f7ff ffd3 	bl	8004180 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041da:	f003 ff0b 	bl	8007ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041de:	f7fc fea7 	bl	8000f30 <main>
  bx  lr    
 80041e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80041e4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80041e8:	0800a180 	.word	0x0800a180
  ldr  r0, =_sdata
 80041ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80041f0:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 80041f4:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 80041f8:	200003e8 	.word	0x200003e8

080041fc <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041fc:	e7fe      	b.n	80041fc <DMA1_Stream0_IRQHandler>
	...

08004200 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004204:	4b0e      	ldr	r3, [pc, #56]	; (8004240 <HAL_Init+0x40>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a0d      	ldr	r2, [pc, #52]	; (8004240 <HAL_Init+0x40>)
 800420a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800420e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004210:	4b0b      	ldr	r3, [pc, #44]	; (8004240 <HAL_Init+0x40>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a0a      	ldr	r2, [pc, #40]	; (8004240 <HAL_Init+0x40>)
 8004216:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800421a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800421c:	4b08      	ldr	r3, [pc, #32]	; (8004240 <HAL_Init+0x40>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a07      	ldr	r2, [pc, #28]	; (8004240 <HAL_Init+0x40>)
 8004222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004226:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004228:	2003      	movs	r0, #3
 800422a:	f000 fe65 	bl	8004ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800422e:	2000      	movs	r0, #0
 8004230:	f000 f808 	bl	8004244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004234:	f7ff fd8c 	bl	8003d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	40023c00 	.word	0x40023c00

08004244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800424c:	4b12      	ldr	r3, [pc, #72]	; (8004298 <HAL_InitTick+0x54>)
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	4b12      	ldr	r3, [pc, #72]	; (800429c <HAL_InitTick+0x58>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	4619      	mov	r1, r3
 8004256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800425a:	fbb3 f3f1 	udiv	r3, r3, r1
 800425e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004262:	4618      	mov	r0, r3
 8004264:	f000 fe7d 	bl	8004f62 <HAL_SYSTICK_Config>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e00e      	b.n	8004290 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2b0f      	cmp	r3, #15
 8004276:	d80a      	bhi.n	800428e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004278:	2200      	movs	r2, #0
 800427a:	6879      	ldr	r1, [r7, #4]
 800427c:	f04f 30ff 	mov.w	r0, #4294967295
 8004280:	f000 fe45 	bl	8004f0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004284:	4a06      	ldr	r2, [pc, #24]	; (80042a0 <HAL_InitTick+0x5c>)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800428a:	2300      	movs	r3, #0
 800428c:	e000      	b.n	8004290 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
}
 8004290:	4618      	mov	r0, r3
 8004292:	3708      	adds	r7, #8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	20000014 	.word	0x20000014
 800429c:	2000001c 	.word	0x2000001c
 80042a0:	20000018 	.word	0x20000018

080042a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042a8:	4b06      	ldr	r3, [pc, #24]	; (80042c4 <HAL_IncTick+0x20>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	461a      	mov	r2, r3
 80042ae:	4b06      	ldr	r3, [pc, #24]	; (80042c8 <HAL_IncTick+0x24>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4413      	add	r3, r2
 80042b4:	4a04      	ldr	r2, [pc, #16]	; (80042c8 <HAL_IncTick+0x24>)
 80042b6:	6013      	str	r3, [r2, #0]
}
 80042b8:	bf00      	nop
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	2000001c 	.word	0x2000001c
 80042c8:	200003e0 	.word	0x200003e0

080042cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
  return uwTick;
 80042d0:	4b03      	ldr	r3, [pc, #12]	; (80042e0 <HAL_GetTick+0x14>)
 80042d2:	681b      	ldr	r3, [r3, #0]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	200003e0 	.word	0x200003e0

080042e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042ec:	2300      	movs	r3, #0
 80042ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e033      	b.n	8004362 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d109      	bne.n	8004316 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff fd4c 	bl	8003da0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	f003 0310 	and.w	r3, r3, #16
 800431e:	2b00      	cmp	r3, #0
 8004320:	d118      	bne.n	8004354 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800432a:	f023 0302 	bic.w	r3, r3, #2
 800432e:	f043 0202 	orr.w	r2, r3, #2
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 fb86 	bl	8004a48 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	f023 0303 	bic.w	r3, r3, #3
 800434a:	f043 0201 	orr.w	r2, r3, #1
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	641a      	str	r2, [r3, #64]	; 0x40
 8004352:	e001      	b.n	8004358 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004360:	7bfb      	ldrb	r3, [r7, #15]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b084      	sub	sp, #16
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004372:	2300      	movs	r3, #0
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	2300      	movs	r3, #0
 8004378:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b02      	cmp	r3, #2
 8004386:	bf0c      	ite	eq
 8004388:	2301      	moveq	r3, #1
 800438a:	2300      	movne	r3, #0
 800438c:	b2db      	uxtb	r3, r3
 800438e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f003 0320 	and.w	r3, r3, #32
 800439a:	2b20      	cmp	r3, #32
 800439c:	bf0c      	ite	eq
 800439e:	2301      	moveq	r3, #1
 80043a0:	2300      	movne	r3, #0
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d049      	beq.n	8004440 <HAL_ADC_IRQHandler+0xd6>
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d046      	beq.n	8004440 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	f003 0310 	and.w	r3, r3, #16
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d105      	bne.n	80043ca <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d12b      	bne.n	8004430 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d127      	bne.n	8004430 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d006      	beq.n	80043fc <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d119      	bne.n	8004430 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0220 	bic.w	r2, r2, #32
 800440a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004410:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d105      	bne.n	8004430 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004428:	f043 0201 	orr.w	r2, r3, #1
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f9af 	bl	8004794 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f06f 0212 	mvn.w	r2, #18
 800443e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0304 	and.w	r3, r3, #4
 800444a:	2b04      	cmp	r3, #4
 800444c:	bf0c      	ite	eq
 800444e:	2301      	moveq	r3, #1
 8004450:	2300      	movne	r3, #0
 8004452:	b2db      	uxtb	r3, r3
 8004454:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004460:	2b80      	cmp	r3, #128	; 0x80
 8004462:	bf0c      	ite	eq
 8004464:	2301      	moveq	r3, #1
 8004466:	2300      	movne	r3, #0
 8004468:	b2db      	uxtb	r3, r3
 800446a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d057      	beq.n	8004522 <HAL_ADC_IRQHandler+0x1b8>
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d054      	beq.n	8004522 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447c:	f003 0310 	and.w	r3, r3, #16
 8004480:	2b00      	cmp	r3, #0
 8004482:	d105      	bne.n	8004490 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004488:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d139      	bne.n	8004512 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d006      	beq.n	80044ba <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d12b      	bne.n	8004512 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d124      	bne.n	8004512 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d11d      	bne.n	8004512 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d119      	bne.n	8004512 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044ec:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004502:	2b00      	cmp	r3, #0
 8004504:	d105      	bne.n	8004512 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	f043 0201 	orr.w	r2, r3, #1
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 fc16 	bl	8004d44 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f06f 020c 	mvn.w	r2, #12
 8004520:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b01      	cmp	r3, #1
 800452e:	bf0c      	ite	eq
 8004530:	2301      	moveq	r3, #1
 8004532:	2300      	movne	r3, #0
 8004534:	b2db      	uxtb	r3, r3
 8004536:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004542:	2b40      	cmp	r3, #64	; 0x40
 8004544:	bf0c      	ite	eq
 8004546:	2301      	moveq	r3, #1
 8004548:	2300      	movne	r3, #0
 800454a:	b2db      	uxtb	r3, r3
 800454c:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d017      	beq.n	8004584 <HAL_ADC_IRQHandler+0x21a>
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d014      	beq.n	8004584 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b01      	cmp	r3, #1
 8004566:	d10d      	bne.n	8004584 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f921 	bl	80047bc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f06f 0201 	mvn.w	r2, #1
 8004582:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0320 	and.w	r3, r3, #32
 800458e:	2b20      	cmp	r3, #32
 8004590:	bf0c      	ite	eq
 8004592:	2301      	moveq	r3, #1
 8004594:	2300      	movne	r3, #0
 8004596:	b2db      	uxtb	r3, r3
 8004598:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045a8:	bf0c      	ite	eq
 80045aa:	2301      	moveq	r3, #1
 80045ac:	2300      	movne	r3, #0
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d015      	beq.n	80045e4 <HAL_ADC_IRQHandler+0x27a>
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d012      	beq.n	80045e4 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c2:	f043 0202 	orr.w	r2, r3, #2
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f06f 0220 	mvn.w	r2, #32
 80045d2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 f8fb 	bl	80047d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f06f 0220 	mvn.w	r2, #32
 80045e2:	601a      	str	r2, [r3, #0]
  }
}
 80045e4:	bf00      	nop
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004602:	2b01      	cmp	r3, #1
 8004604:	d101      	bne.n	800460a <HAL_ADC_Start_DMA+0x1e>
 8004606:	2302      	movs	r3, #2
 8004608:	e0b1      	b.n	800476e <HAL_ADC_Start_DMA+0x182>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b01      	cmp	r3, #1
 800461e:	d018      	beq.n	8004652 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689a      	ldr	r2, [r3, #8]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0201 	orr.w	r2, r2, #1
 800462e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004630:	4b51      	ldr	r3, [pc, #324]	; (8004778 <HAL_ADC_Start_DMA+0x18c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a51      	ldr	r2, [pc, #324]	; (800477c <HAL_ADC_Start_DMA+0x190>)
 8004636:	fba2 2303 	umull	r2, r3, r2, r3
 800463a:	0c9a      	lsrs	r2, r3, #18
 800463c:	4613      	mov	r3, r2
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	4413      	add	r3, r2
 8004642:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004644:	e002      	b.n	800464c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	3b01      	subs	r3, #1
 800464a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1f9      	bne.n	8004646 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	2b01      	cmp	r3, #1
 800465e:	f040 8085 	bne.w	800476c <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800466a:	f023 0301 	bic.w	r3, r3, #1
 800466e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004680:	2b00      	cmp	r3, #0
 8004682:	d007      	beq.n	8004694 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004688:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800468c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004698:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800469c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a0:	d106      	bne.n	80046b0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a6:	f023 0206 	bic.w	r2, r3, #6
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	645a      	str	r2, [r3, #68]	; 0x44
 80046ae:	e002      	b.n	80046b6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80046be:	4b30      	ldr	r3, [pc, #192]	; (8004780 <HAL_ADC_Start_DMA+0x194>)
 80046c0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c6:	4a2f      	ldr	r2, [pc, #188]	; (8004784 <HAL_ADC_Start_DMA+0x198>)
 80046c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ce:	4a2e      	ldr	r2, [pc, #184]	; (8004788 <HAL_ADC_Start_DMA+0x19c>)
 80046d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d6:	4a2d      	ldr	r2, [pc, #180]	; (800478c <HAL_ADC_Start_DMA+0x1a0>)
 80046d8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80046e2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80046f2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689a      	ldr	r2, [r3, #8]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004702:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	334c      	adds	r3, #76	; 0x4c
 800470e:	4619      	mov	r1, r3
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f000 fce0 	bl	80050d8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f003 031f 	and.w	r3, r3, #31
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10f      	bne.n	8004744 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d11c      	bne.n	800476c <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689a      	ldr	r2, [r3, #8]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004740:	609a      	str	r2, [r3, #8]
 8004742:	e013      	b.n	800476c <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a11      	ldr	r2, [pc, #68]	; (8004790 <HAL_ADC_Start_DMA+0x1a4>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d10e      	bne.n	800476c <HAL_ADC_Start_DMA+0x180>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d107      	bne.n	800476c <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689a      	ldr	r2, [r3, #8]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800476a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	20000014 	.word	0x20000014
 800477c:	431bde83 	.word	0x431bde83
 8004780:	40012300 	.word	0x40012300
 8004784:	08004c41 	.word	0x08004c41
 8004788:	08004cfb 	.word	0x08004cfb
 800478c:	08004d17 	.word	0x08004d17
 8004790:	40012000 	.word	0x40012000

08004794 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d101      	bne.n	8004800 <HAL_ADC_ConfigChannel+0x1c>
 80047fc:	2302      	movs	r3, #2
 80047fe:	e113      	b.n	8004a28 <HAL_ADC_ConfigChannel+0x244>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b09      	cmp	r3, #9
 800480e:	d925      	bls.n	800485c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68d9      	ldr	r1, [r3, #12]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	b29b      	uxth	r3, r3
 800481c:	461a      	mov	r2, r3
 800481e:	4613      	mov	r3, r2
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	4413      	add	r3, r2
 8004824:	3b1e      	subs	r3, #30
 8004826:	2207      	movs	r2, #7
 8004828:	fa02 f303 	lsl.w	r3, r2, r3
 800482c:	43da      	mvns	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	400a      	ands	r2, r1
 8004834:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68d9      	ldr	r1, [r3, #12]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	b29b      	uxth	r3, r3
 8004846:	4618      	mov	r0, r3
 8004848:	4603      	mov	r3, r0
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	4403      	add	r3, r0
 800484e:	3b1e      	subs	r3, #30
 8004850:	409a      	lsls	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	60da      	str	r2, [r3, #12]
 800485a:	e022      	b.n	80048a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6919      	ldr	r1, [r3, #16]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	b29b      	uxth	r3, r3
 8004868:	461a      	mov	r2, r3
 800486a:	4613      	mov	r3, r2
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	4413      	add	r3, r2
 8004870:	2207      	movs	r2, #7
 8004872:	fa02 f303 	lsl.w	r3, r2, r3
 8004876:	43da      	mvns	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	400a      	ands	r2, r1
 800487e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6919      	ldr	r1, [r3, #16]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	689a      	ldr	r2, [r3, #8]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	b29b      	uxth	r3, r3
 8004890:	4618      	mov	r0, r3
 8004892:	4603      	mov	r3, r0
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	4403      	add	r3, r0
 8004898:	409a      	lsls	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	2b06      	cmp	r3, #6
 80048a8:	d824      	bhi.n	80048f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	4613      	mov	r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	3b05      	subs	r3, #5
 80048bc:	221f      	movs	r2, #31
 80048be:	fa02 f303 	lsl.w	r3, r2, r3
 80048c2:	43da      	mvns	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	400a      	ands	r2, r1
 80048ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	4618      	mov	r0, r3
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685a      	ldr	r2, [r3, #4]
 80048de:	4613      	mov	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	3b05      	subs	r3, #5
 80048e6:	fa00 f203 	lsl.w	r2, r0, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	635a      	str	r2, [r3, #52]	; 0x34
 80048f2:	e04c      	b.n	800498e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	2b0c      	cmp	r3, #12
 80048fa:	d824      	bhi.n	8004946 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	4613      	mov	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4413      	add	r3, r2
 800490c:	3b23      	subs	r3, #35	; 0x23
 800490e:	221f      	movs	r2, #31
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	43da      	mvns	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	400a      	ands	r2, r1
 800491c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	b29b      	uxth	r3, r3
 800492a:	4618      	mov	r0, r3
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	4613      	mov	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	3b23      	subs	r3, #35	; 0x23
 8004938:	fa00 f203 	lsl.w	r2, r0, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	631a      	str	r2, [r3, #48]	; 0x30
 8004944:	e023      	b.n	800498e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	4613      	mov	r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	3b41      	subs	r3, #65	; 0x41
 8004958:	221f      	movs	r2, #31
 800495a:	fa02 f303 	lsl.w	r3, r2, r3
 800495e:	43da      	mvns	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	400a      	ands	r2, r1
 8004966:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	b29b      	uxth	r3, r3
 8004974:	4618      	mov	r0, r3
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	4613      	mov	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	3b41      	subs	r3, #65	; 0x41
 8004982:	fa00 f203 	lsl.w	r2, r0, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800498e:	4b29      	ldr	r3, [pc, #164]	; (8004a34 <HAL_ADC_ConfigChannel+0x250>)
 8004990:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a28      	ldr	r2, [pc, #160]	; (8004a38 <HAL_ADC_ConfigChannel+0x254>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d10f      	bne.n	80049bc <HAL_ADC_ConfigChannel+0x1d8>
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b12      	cmp	r3, #18
 80049a2:	d10b      	bne.n	80049bc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a1d      	ldr	r2, [pc, #116]	; (8004a38 <HAL_ADC_ConfigChannel+0x254>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d12b      	bne.n	8004a1e <HAL_ADC_ConfigChannel+0x23a>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a1c      	ldr	r2, [pc, #112]	; (8004a3c <HAL_ADC_ConfigChannel+0x258>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d003      	beq.n	80049d8 <HAL_ADC_ConfigChannel+0x1f4>
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b11      	cmp	r3, #17
 80049d6:	d122      	bne.n	8004a1e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a11      	ldr	r2, [pc, #68]	; (8004a3c <HAL_ADC_ConfigChannel+0x258>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d111      	bne.n	8004a1e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80049fa:	4b11      	ldr	r3, [pc, #68]	; (8004a40 <HAL_ADC_ConfigChannel+0x25c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a11      	ldr	r2, [pc, #68]	; (8004a44 <HAL_ADC_ConfigChannel+0x260>)
 8004a00:	fba2 2303 	umull	r2, r3, r2, r3
 8004a04:	0c9a      	lsrs	r2, r3, #18
 8004a06:	4613      	mov	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004a10:	e002      	b.n	8004a18 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	3b01      	subs	r3, #1
 8004a16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1f9      	bne.n	8004a12 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr
 8004a34:	40012300 	.word	0x40012300
 8004a38:	40012000 	.word	0x40012000
 8004a3c:	10000012 	.word	0x10000012
 8004a40:	20000014 	.word	0x20000014
 8004a44:	431bde83 	.word	0x431bde83

08004a48 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a50:	4b79      	ldr	r3, [pc, #484]	; (8004c38 <ADC_Init+0x1f0>)
 8004a52:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6859      	ldr	r1, [r3, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	021a      	lsls	r2, r3, #8
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004aa0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6859      	ldr	r1, [r3, #4]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	689a      	ldr	r2, [r3, #8]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ac2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6899      	ldr	r1, [r3, #8]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68da      	ldr	r2, [r3, #12]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ada:	4a58      	ldr	r2, [pc, #352]	; (8004c3c <ADC_Init+0x1f4>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d022      	beq.n	8004b26 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689a      	ldr	r2, [r3, #8]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004aee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6899      	ldr	r1, [r3, #8]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004b10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6899      	ldr	r1, [r3, #8]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	609a      	str	r2, [r3, #8]
 8004b24:	e00f      	b.n	8004b46 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004b44:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689a      	ldr	r2, [r3, #8]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 0202 	bic.w	r2, r2, #2
 8004b54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6899      	ldr	r1, [r3, #8]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	7e1b      	ldrb	r3, [r3, #24]
 8004b60:	005a      	lsls	r2, r3, #1
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d01b      	beq.n	8004bac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b82:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004b92:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6859      	ldr	r1, [r3, #4]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	035a      	lsls	r2, r3, #13
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	605a      	str	r2, [r3, #4]
 8004baa:	e007      	b.n	8004bbc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004bca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	051a      	lsls	r2, r3, #20
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	689a      	ldr	r2, [r3, #8]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004bf0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6899      	ldr	r1, [r3, #8]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004bfe:	025a      	lsls	r2, r3, #9
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689a      	ldr	r2, [r3, #8]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6899      	ldr	r1, [r3, #8]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	029a      	lsls	r2, r3, #10
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	609a      	str	r2, [r3, #8]
}
 8004c2c:	bf00      	nop
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr
 8004c38:	40012300 	.word	0x40012300
 8004c3c:	0f000001 	.word	0x0f000001

08004c40 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d13c      	bne.n	8004cd4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d12b      	bne.n	8004ccc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d127      	bne.n	8004ccc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c82:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d006      	beq.n	8004c98 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d119      	bne.n	8004ccc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0220 	bic.w	r2, r2, #32
 8004ca6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d105      	bne.n	8004ccc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc4:	f043 0201 	orr.w	r2, r3, #1
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f7ff fd61 	bl	8004794 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004cd2:	e00e      	b.n	8004cf2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd8:	f003 0310 	and.w	r3, r3, #16
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d003      	beq.n	8004ce8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f7ff fd75 	bl	80047d0 <HAL_ADC_ErrorCallback>
}
 8004ce6:	e004      	b.n	8004cf2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	4798      	blx	r3
}
 8004cf2:	bf00      	nop
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b084      	sub	sp, #16
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d06:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f7ff fd4d 	bl	80047a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d0e:	bf00      	nop
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b084      	sub	sp, #16
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d22:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2240      	movs	r2, #64	; 0x40
 8004d28:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2e:	f043 0204 	orr.w	r2, r3, #4
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f7ff fd4a 	bl	80047d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d3c:	bf00      	nop
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f003 0307 	and.w	r3, r3, #7
 8004d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d68:	4b0c      	ldr	r3, [pc, #48]	; (8004d9c <__NVIC_SetPriorityGrouping+0x44>)
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d74:	4013      	ands	r3, r2
 8004d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d8a:	4a04      	ldr	r2, [pc, #16]	; (8004d9c <__NVIC_SetPriorityGrouping+0x44>)
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	60d3      	str	r3, [r2, #12]
}
 8004d90:	bf00      	nop
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	e000ed00 	.word	0xe000ed00

08004da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004da0:	b480      	push	{r7}
 8004da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004da4:	4b04      	ldr	r3, [pc, #16]	; (8004db8 <__NVIC_GetPriorityGrouping+0x18>)
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	0a1b      	lsrs	r3, r3, #8
 8004daa:	f003 0307 	and.w	r3, r3, #7
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	e000ed00 	.word	0xe000ed00

08004dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	db0b      	blt.n	8004de6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dce:	79fb      	ldrb	r3, [r7, #7]
 8004dd0:	f003 021f 	and.w	r2, r3, #31
 8004dd4:	4907      	ldr	r1, [pc, #28]	; (8004df4 <__NVIC_EnableIRQ+0x38>)
 8004dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dda:	095b      	lsrs	r3, r3, #5
 8004ddc:	2001      	movs	r0, #1
 8004dde:	fa00 f202 	lsl.w	r2, r0, r2
 8004de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004de6:	bf00      	nop
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	e000e100 	.word	0xe000e100

08004df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	4603      	mov	r3, r0
 8004e00:	6039      	str	r1, [r7, #0]
 8004e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	db0a      	blt.n	8004e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	490c      	ldr	r1, [pc, #48]	; (8004e44 <__NVIC_SetPriority+0x4c>)
 8004e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e16:	0112      	lsls	r2, r2, #4
 8004e18:	b2d2      	uxtb	r2, r2
 8004e1a:	440b      	add	r3, r1
 8004e1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e20:	e00a      	b.n	8004e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	b2da      	uxtb	r2, r3
 8004e26:	4908      	ldr	r1, [pc, #32]	; (8004e48 <__NVIC_SetPriority+0x50>)
 8004e28:	79fb      	ldrb	r3, [r7, #7]
 8004e2a:	f003 030f 	and.w	r3, r3, #15
 8004e2e:	3b04      	subs	r3, #4
 8004e30:	0112      	lsls	r2, r2, #4
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	440b      	add	r3, r1
 8004e36:	761a      	strb	r2, [r3, #24]
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	e000e100 	.word	0xe000e100
 8004e48:	e000ed00 	.word	0xe000ed00

08004e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b089      	sub	sp, #36	; 0x24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f003 0307 	and.w	r3, r3, #7
 8004e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	f1c3 0307 	rsb	r3, r3, #7
 8004e66:	2b04      	cmp	r3, #4
 8004e68:	bf28      	it	cs
 8004e6a:	2304      	movcs	r3, #4
 8004e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	3304      	adds	r3, #4
 8004e72:	2b06      	cmp	r3, #6
 8004e74:	d902      	bls.n	8004e7c <NVIC_EncodePriority+0x30>
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	3b03      	subs	r3, #3
 8004e7a:	e000      	b.n	8004e7e <NVIC_EncodePriority+0x32>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e80:	f04f 32ff 	mov.w	r2, #4294967295
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8a:	43da      	mvns	r2, r3
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	401a      	ands	r2, r3
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e94:	f04f 31ff 	mov.w	r1, #4294967295
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e9e:	43d9      	mvns	r1, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ea4:	4313      	orrs	r3, r2
         );
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3724      	adds	r7, #36	; 0x24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
	...

08004eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ec4:	d301      	bcc.n	8004eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e00f      	b.n	8004eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004eca:	4a0a      	ldr	r2, [pc, #40]	; (8004ef4 <SysTick_Config+0x40>)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ed2:	210f      	movs	r1, #15
 8004ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed8:	f7ff ff8e 	bl	8004df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004edc:	4b05      	ldr	r3, [pc, #20]	; (8004ef4 <SysTick_Config+0x40>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ee2:	4b04      	ldr	r3, [pc, #16]	; (8004ef4 <SysTick_Config+0x40>)
 8004ee4:	2207      	movs	r2, #7
 8004ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3708      	adds	r7, #8
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	e000e010 	.word	0xe000e010

08004ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7ff ff29 	bl	8004d58 <__NVIC_SetPriorityGrouping>
}
 8004f06:	bf00      	nop
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b086      	sub	sp, #24
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	4603      	mov	r3, r0
 8004f16:	60b9      	str	r1, [r7, #8]
 8004f18:	607a      	str	r2, [r7, #4]
 8004f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f20:	f7ff ff3e 	bl	8004da0 <__NVIC_GetPriorityGrouping>
 8004f24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	68b9      	ldr	r1, [r7, #8]
 8004f2a:	6978      	ldr	r0, [r7, #20]
 8004f2c:	f7ff ff8e 	bl	8004e4c <NVIC_EncodePriority>
 8004f30:	4602      	mov	r2, r0
 8004f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f36:	4611      	mov	r1, r2
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7ff ff5d 	bl	8004df8 <__NVIC_SetPriority>
}
 8004f3e:	bf00      	nop
 8004f40:	3718      	adds	r7, #24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b082      	sub	sp, #8
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7ff ff31 	bl	8004dbc <__NVIC_EnableIRQ>
}
 8004f5a:	bf00      	nop
 8004f5c:	3708      	adds	r7, #8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b082      	sub	sp, #8
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7ff ffa2 	bl	8004eb4 <SysTick_Config>
 8004f70:	4603      	mov	r3, r0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
	...

08004f7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004f88:	f7ff f9a0 	bl	80042cc <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d101      	bne.n	8004f98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e099      	b.n	80050cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 0201 	bic.w	r2, r2, #1
 8004fb6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fb8:	e00f      	b.n	8004fda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004fba:	f7ff f987 	bl	80042cc <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b05      	cmp	r3, #5
 8004fc6:	d908      	bls.n	8004fda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2203      	movs	r2, #3
 8004fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e078      	b.n	80050cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1e8      	bne.n	8004fba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	4b38      	ldr	r3, [pc, #224]	; (80050d4 <HAL_DMA_Init+0x158>)
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005006:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005012:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800501e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a1b      	ldr	r3, [r3, #32]
 8005024:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	4313      	orrs	r3, r2
 800502a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	2b04      	cmp	r3, #4
 8005032:	d107      	bne.n	8005044 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503c:	4313      	orrs	r3, r2
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	4313      	orrs	r3, r2
 8005042:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f023 0307 	bic.w	r3, r3, #7
 800505a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	4313      	orrs	r3, r2
 8005064:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506a:	2b04      	cmp	r3, #4
 800506c:	d117      	bne.n	800509e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	4313      	orrs	r3, r2
 8005076:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00e      	beq.n	800509e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 fa91 	bl	80055a8 <DMA_CheckFifoParam>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d008      	beq.n	800509e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2240      	movs	r2, #64	; 0x40
 8005090:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800509a:	2301      	movs	r3, #1
 800509c:	e016      	b.n	80050cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 fa48 	bl	800553c <DMA_CalcBaseAndBitshift>
 80050ac:	4603      	mov	r3, r0
 80050ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050b4:	223f      	movs	r2, #63	; 0x3f
 80050b6:	409a      	lsls	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3718      	adds	r7, #24
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	f010803f 	.word	0xf010803f

080050d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
 80050e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050e6:	2300      	movs	r3, #0
 80050e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d101      	bne.n	80050fe <HAL_DMA_Start_IT+0x26>
 80050fa:	2302      	movs	r3, #2
 80050fc:	e040      	b.n	8005180 <HAL_DMA_Start_IT+0xa8>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b01      	cmp	r3, #1
 8005110:	d12f      	bne.n	8005172 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2202      	movs	r2, #2
 8005116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	68b9      	ldr	r1, [r7, #8]
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f000 f9da 	bl	80054e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005130:	223f      	movs	r2, #63	; 0x3f
 8005132:	409a      	lsls	r2, r3
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f042 0216 	orr.w	r2, r2, #22
 8005146:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514c:	2b00      	cmp	r3, #0
 800514e:	d007      	beq.n	8005160 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0208 	orr.w	r2, r2, #8
 800515e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f042 0201 	orr.w	r2, r2, #1
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	e005      	b.n	800517e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800517a:	2302      	movs	r3, #2
 800517c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800517e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005180:	4618      	mov	r0, r3
 8005182:	3718      	adds	r7, #24
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d004      	beq.n	80051a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2280      	movs	r2, #128	; 0x80
 80051a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e00c      	b.n	80051c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2205      	movs	r2, #5
 80051aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f022 0201 	bic.w	r2, r2, #1
 80051bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80051d4:	2300      	movs	r3, #0
 80051d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80051d8:	4b92      	ldr	r3, [pc, #584]	; (8005424 <HAL_DMA_IRQHandler+0x258>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a92      	ldr	r2, [pc, #584]	; (8005428 <HAL_DMA_IRQHandler+0x25c>)
 80051de:	fba2 2303 	umull	r2, r3, r2, r3
 80051e2:	0a9b      	lsrs	r3, r3, #10
 80051e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f6:	2208      	movs	r2, #8
 80051f8:	409a      	lsls	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	4013      	ands	r3, r2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d01a      	beq.n	8005238 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0304 	and.w	r3, r3, #4
 800520c:	2b00      	cmp	r3, #0
 800520e:	d013      	beq.n	8005238 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f022 0204 	bic.w	r2, r2, #4
 800521e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005224:	2208      	movs	r2, #8
 8005226:	409a      	lsls	r2, r3
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005230:	f043 0201 	orr.w	r2, r3, #1
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800523c:	2201      	movs	r2, #1
 800523e:	409a      	lsls	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4013      	ands	r3, r2
 8005244:	2b00      	cmp	r3, #0
 8005246:	d012      	beq.n	800526e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00b      	beq.n	800526e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800525a:	2201      	movs	r2, #1
 800525c:	409a      	lsls	r2, r3
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005266:	f043 0202 	orr.w	r2, r3, #2
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005272:	2204      	movs	r2, #4
 8005274:	409a      	lsls	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4013      	ands	r3, r2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d012      	beq.n	80052a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00b      	beq.n	80052a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005290:	2204      	movs	r2, #4
 8005292:	409a      	lsls	r2, r3
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800529c:	f043 0204 	orr.w	r2, r3, #4
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052a8:	2210      	movs	r2, #16
 80052aa:	409a      	lsls	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4013      	ands	r3, r2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d043      	beq.n	800533c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0308 	and.w	r3, r3, #8
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d03c      	beq.n	800533c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052c6:	2210      	movs	r2, #16
 80052c8:	409a      	lsls	r2, r3
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d018      	beq.n	800530e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d108      	bne.n	80052fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d024      	beq.n	800533c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	4798      	blx	r3
 80052fa:	e01f      	b.n	800533c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005300:	2b00      	cmp	r3, #0
 8005302:	d01b      	beq.n	800533c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	4798      	blx	r3
 800530c:	e016      	b.n	800533c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005318:	2b00      	cmp	r3, #0
 800531a:	d107      	bne.n	800532c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 0208 	bic.w	r2, r2, #8
 800532a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005330:	2b00      	cmp	r3, #0
 8005332:	d003      	beq.n	800533c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005340:	2220      	movs	r2, #32
 8005342:	409a      	lsls	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	4013      	ands	r3, r2
 8005348:	2b00      	cmp	r3, #0
 800534a:	f000 808e 	beq.w	800546a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0310 	and.w	r3, r3, #16
 8005358:	2b00      	cmp	r3, #0
 800535a:	f000 8086 	beq.w	800546a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005362:	2220      	movs	r2, #32
 8005364:	409a      	lsls	r2, r3
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b05      	cmp	r3, #5
 8005374:	d136      	bne.n	80053e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 0216 	bic.w	r2, r2, #22
 8005384:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	695a      	ldr	r2, [r3, #20]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005394:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	2b00      	cmp	r3, #0
 800539c:	d103      	bne.n	80053a6 <HAL_DMA_IRQHandler+0x1da>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d007      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f022 0208 	bic.w	r2, r2, #8
 80053b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ba:	223f      	movs	r2, #63	; 0x3f
 80053bc:	409a      	lsls	r2, r3
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d07d      	beq.n	80054d6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	4798      	blx	r3
        }
        return;
 80053e2:	e078      	b.n	80054d6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d01c      	beq.n	800542c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d108      	bne.n	8005412 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005404:	2b00      	cmp	r3, #0
 8005406:	d030      	beq.n	800546a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	4798      	blx	r3
 8005410:	e02b      	b.n	800546a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005416:	2b00      	cmp	r3, #0
 8005418:	d027      	beq.n	800546a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	4798      	blx	r3
 8005422:	e022      	b.n	800546a <HAL_DMA_IRQHandler+0x29e>
 8005424:	20000014 	.word	0x20000014
 8005428:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10f      	bne.n	800545a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 0210 	bic.w	r2, r2, #16
 8005448:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800545e:	2b00      	cmp	r3, #0
 8005460:	d003      	beq.n	800546a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546e:	2b00      	cmp	r3, #0
 8005470:	d032      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d022      	beq.n	80054c4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2205      	movs	r2, #5
 8005482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f022 0201 	bic.w	r2, r2, #1
 8005494:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	3301      	adds	r3, #1
 800549a:	60bb      	str	r3, [r7, #8]
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d307      	bcc.n	80054b2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0301 	and.w	r3, r3, #1
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1f2      	bne.n	8005496 <HAL_DMA_IRQHandler+0x2ca>
 80054b0:	e000      	b.n	80054b4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80054b2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d005      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	4798      	blx	r3
 80054d4:	e000      	b.n	80054d8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80054d6:	bf00      	nop
    }
  }
}
 80054d8:	3718      	adds	r7, #24
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop

080054e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
 80054ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80054fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	2b40      	cmp	r3, #64	; 0x40
 800550c:	d108      	bne.n	8005520 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800551e:	e007      	b.n	8005530 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	60da      	str	r2, [r3, #12]
}
 8005530:	bf00      	nop
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	b2db      	uxtb	r3, r3
 800554a:	3b10      	subs	r3, #16
 800554c:	4a14      	ldr	r2, [pc, #80]	; (80055a0 <DMA_CalcBaseAndBitshift+0x64>)
 800554e:	fba2 2303 	umull	r2, r3, r2, r3
 8005552:	091b      	lsrs	r3, r3, #4
 8005554:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005556:	4a13      	ldr	r2, [pc, #76]	; (80055a4 <DMA_CalcBaseAndBitshift+0x68>)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4413      	add	r3, r2
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	461a      	mov	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2b03      	cmp	r3, #3
 8005568:	d909      	bls.n	800557e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005572:	f023 0303 	bic.w	r3, r3, #3
 8005576:	1d1a      	adds	r2, r3, #4
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	659a      	str	r2, [r3, #88]	; 0x58
 800557c:	e007      	b.n	800558e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005586:	f023 0303 	bic.w	r3, r3, #3
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005592:	4618      	mov	r0, r3
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	aaaaaaab 	.word	0xaaaaaaab
 80055a4:	08009f5c 	.word	0x08009f5c

080055a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055b0:	2300      	movs	r3, #0
 80055b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d11f      	bne.n	8005602 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	2b03      	cmp	r3, #3
 80055c6:	d855      	bhi.n	8005674 <DMA_CheckFifoParam+0xcc>
 80055c8:	a201      	add	r2, pc, #4	; (adr r2, 80055d0 <DMA_CheckFifoParam+0x28>)
 80055ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ce:	bf00      	nop
 80055d0:	080055e1 	.word	0x080055e1
 80055d4:	080055f3 	.word	0x080055f3
 80055d8:	080055e1 	.word	0x080055e1
 80055dc:	08005675 	.word	0x08005675
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d045      	beq.n	8005678 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055f0:	e042      	b.n	8005678 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80055fa:	d13f      	bne.n	800567c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005600:	e03c      	b.n	800567c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800560a:	d121      	bne.n	8005650 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	2b03      	cmp	r3, #3
 8005610:	d836      	bhi.n	8005680 <DMA_CheckFifoParam+0xd8>
 8005612:	a201      	add	r2, pc, #4	; (adr r2, 8005618 <DMA_CheckFifoParam+0x70>)
 8005614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005618:	08005629 	.word	0x08005629
 800561c:	0800562f 	.word	0x0800562f
 8005620:	08005629 	.word	0x08005629
 8005624:	08005641 	.word	0x08005641
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	73fb      	strb	r3, [r7, #15]
      break;
 800562c:	e02f      	b.n	800568e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005632:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d024      	beq.n	8005684 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800563e:	e021      	b.n	8005684 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005644:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005648:	d11e      	bne.n	8005688 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800564e:	e01b      	b.n	8005688 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2b02      	cmp	r3, #2
 8005654:	d902      	bls.n	800565c <DMA_CheckFifoParam+0xb4>
 8005656:	2b03      	cmp	r3, #3
 8005658:	d003      	beq.n	8005662 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800565a:	e018      	b.n	800568e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	73fb      	strb	r3, [r7, #15]
      break;
 8005660:	e015      	b.n	800568e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005666:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00e      	beq.n	800568c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	73fb      	strb	r3, [r7, #15]
      break;
 8005672:	e00b      	b.n	800568c <DMA_CheckFifoParam+0xe4>
      break;
 8005674:	bf00      	nop
 8005676:	e00a      	b.n	800568e <DMA_CheckFifoParam+0xe6>
      break;
 8005678:	bf00      	nop
 800567a:	e008      	b.n	800568e <DMA_CheckFifoParam+0xe6>
      break;
 800567c:	bf00      	nop
 800567e:	e006      	b.n	800568e <DMA_CheckFifoParam+0xe6>
      break;
 8005680:	bf00      	nop
 8005682:	e004      	b.n	800568e <DMA_CheckFifoParam+0xe6>
      break;
 8005684:	bf00      	nop
 8005686:	e002      	b.n	800568e <DMA_CheckFifoParam+0xe6>
      break;   
 8005688:	bf00      	nop
 800568a:	e000      	b.n	800568e <DMA_CheckFifoParam+0xe6>
      break;
 800568c:	bf00      	nop
    }
  } 
  
  return status; 
 800568e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005690:	4618      	mov	r0, r3
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800569c:	b480      	push	{r7}
 800569e:	b089      	sub	sp, #36	; 0x24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80056a6:	2300      	movs	r3, #0
 80056a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80056aa:	2300      	movs	r3, #0
 80056ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80056ae:	2300      	movs	r3, #0
 80056b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056b2:	2300      	movs	r3, #0
 80056b4:	61fb      	str	r3, [r7, #28]
 80056b6:	e159      	b.n	800596c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80056b8:	2201      	movs	r2, #1
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	fa02 f303 	lsl.w	r3, r2, r3
 80056c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	4013      	ands	r3, r2
 80056ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	f040 8148 	bne.w	8005966 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d00b      	beq.n	80056f6 <HAL_GPIO_Init+0x5a>
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d007      	beq.n	80056f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80056ea:	2b11      	cmp	r3, #17
 80056ec:	d003      	beq.n	80056f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	2b12      	cmp	r3, #18
 80056f4:	d130      	bne.n	8005758 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	005b      	lsls	r3, r3, #1
 8005700:	2203      	movs	r2, #3
 8005702:	fa02 f303 	lsl.w	r3, r2, r3
 8005706:	43db      	mvns	r3, r3
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	4013      	ands	r3, r2
 800570c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	68da      	ldr	r2, [r3, #12]
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	fa02 f303 	lsl.w	r3, r2, r3
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	4313      	orrs	r3, r2
 800571e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800572c:	2201      	movs	r2, #1
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	fa02 f303 	lsl.w	r3, r2, r3
 8005734:	43db      	mvns	r3, r3
 8005736:	69ba      	ldr	r2, [r7, #24]
 8005738:	4013      	ands	r3, r2
 800573a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	091b      	lsrs	r3, r3, #4
 8005742:	f003 0201 	and.w	r2, r3, #1
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	fa02 f303 	lsl.w	r3, r2, r3
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	4313      	orrs	r3, r2
 8005750:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	005b      	lsls	r3, r3, #1
 8005762:	2203      	movs	r2, #3
 8005764:	fa02 f303 	lsl.w	r3, r2, r3
 8005768:	43db      	mvns	r3, r3
 800576a:	69ba      	ldr	r2, [r7, #24]
 800576c:	4013      	ands	r3, r2
 800576e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	689a      	ldr	r2, [r3, #8]
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	005b      	lsls	r3, r3, #1
 8005778:	fa02 f303 	lsl.w	r3, r2, r3
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	4313      	orrs	r3, r2
 8005780:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	2b02      	cmp	r3, #2
 800578e:	d003      	beq.n	8005798 <HAL_GPIO_Init+0xfc>
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	2b12      	cmp	r3, #18
 8005796:	d123      	bne.n	80057e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	08da      	lsrs	r2, r3, #3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	3208      	adds	r2, #8
 80057a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	f003 0307 	and.w	r3, r3, #7
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	220f      	movs	r2, #15
 80057b0:	fa02 f303 	lsl.w	r3, r2, r3
 80057b4:	43db      	mvns	r3, r3
 80057b6:	69ba      	ldr	r2, [r7, #24]
 80057b8:	4013      	ands	r3, r2
 80057ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	691a      	ldr	r2, [r3, #16]
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	f003 0307 	and.w	r3, r3, #7
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	08da      	lsrs	r2, r3, #3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	3208      	adds	r2, #8
 80057da:	69b9      	ldr	r1, [r7, #24]
 80057dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	005b      	lsls	r3, r3, #1
 80057ea:	2203      	movs	r2, #3
 80057ec:	fa02 f303 	lsl.w	r3, r2, r3
 80057f0:	43db      	mvns	r3, r3
 80057f2:	69ba      	ldr	r2, [r7, #24]
 80057f4:	4013      	ands	r3, r2
 80057f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f003 0203 	and.w	r2, r3, #3
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	fa02 f303 	lsl.w	r3, r2, r3
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	4313      	orrs	r3, r2
 800580c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 80a2 	beq.w	8005966 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005822:	2300      	movs	r3, #0
 8005824:	60fb      	str	r3, [r7, #12]
 8005826:	4b56      	ldr	r3, [pc, #344]	; (8005980 <HAL_GPIO_Init+0x2e4>)
 8005828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800582a:	4a55      	ldr	r2, [pc, #340]	; (8005980 <HAL_GPIO_Init+0x2e4>)
 800582c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005830:	6453      	str	r3, [r2, #68]	; 0x44
 8005832:	4b53      	ldr	r3, [pc, #332]	; (8005980 <HAL_GPIO_Init+0x2e4>)
 8005834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800583a:	60fb      	str	r3, [r7, #12]
 800583c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800583e:	4a51      	ldr	r2, [pc, #324]	; (8005984 <HAL_GPIO_Init+0x2e8>)
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	089b      	lsrs	r3, r3, #2
 8005844:	3302      	adds	r3, #2
 8005846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800584a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	f003 0303 	and.w	r3, r3, #3
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	220f      	movs	r2, #15
 8005856:	fa02 f303 	lsl.w	r3, r2, r3
 800585a:	43db      	mvns	r3, r3
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	4013      	ands	r3, r2
 8005860:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a48      	ldr	r2, [pc, #288]	; (8005988 <HAL_GPIO_Init+0x2ec>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d019      	beq.n	800589e <HAL_GPIO_Init+0x202>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a47      	ldr	r2, [pc, #284]	; (800598c <HAL_GPIO_Init+0x2f0>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d013      	beq.n	800589a <HAL_GPIO_Init+0x1fe>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a46      	ldr	r2, [pc, #280]	; (8005990 <HAL_GPIO_Init+0x2f4>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d00d      	beq.n	8005896 <HAL_GPIO_Init+0x1fa>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a45      	ldr	r2, [pc, #276]	; (8005994 <HAL_GPIO_Init+0x2f8>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d007      	beq.n	8005892 <HAL_GPIO_Init+0x1f6>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a44      	ldr	r2, [pc, #272]	; (8005998 <HAL_GPIO_Init+0x2fc>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d101      	bne.n	800588e <HAL_GPIO_Init+0x1f2>
 800588a:	2304      	movs	r3, #4
 800588c:	e008      	b.n	80058a0 <HAL_GPIO_Init+0x204>
 800588e:	2307      	movs	r3, #7
 8005890:	e006      	b.n	80058a0 <HAL_GPIO_Init+0x204>
 8005892:	2303      	movs	r3, #3
 8005894:	e004      	b.n	80058a0 <HAL_GPIO_Init+0x204>
 8005896:	2302      	movs	r3, #2
 8005898:	e002      	b.n	80058a0 <HAL_GPIO_Init+0x204>
 800589a:	2301      	movs	r3, #1
 800589c:	e000      	b.n	80058a0 <HAL_GPIO_Init+0x204>
 800589e:	2300      	movs	r3, #0
 80058a0:	69fa      	ldr	r2, [r7, #28]
 80058a2:	f002 0203 	and.w	r2, r2, #3
 80058a6:	0092      	lsls	r2, r2, #2
 80058a8:	4093      	lsls	r3, r2
 80058aa:	69ba      	ldr	r2, [r7, #24]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058b0:	4934      	ldr	r1, [pc, #208]	; (8005984 <HAL_GPIO_Init+0x2e8>)
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	089b      	lsrs	r3, r3, #2
 80058b6:	3302      	adds	r3, #2
 80058b8:	69ba      	ldr	r2, [r7, #24]
 80058ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80058be:	4b37      	ldr	r3, [pc, #220]	; (800599c <HAL_GPIO_Init+0x300>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	43db      	mvns	r3, r3
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	4013      	ands	r3, r2
 80058cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80058da:	69ba      	ldr	r2, [r7, #24]
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	4313      	orrs	r3, r2
 80058e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80058e2:	4a2e      	ldr	r2, [pc, #184]	; (800599c <HAL_GPIO_Init+0x300>)
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80058e8:	4b2c      	ldr	r3, [pc, #176]	; (800599c <HAL_GPIO_Init+0x300>)
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	43db      	mvns	r3, r3
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	4013      	ands	r3, r2
 80058f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d003      	beq.n	800590c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	4313      	orrs	r3, r2
 800590a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800590c:	4a23      	ldr	r2, [pc, #140]	; (800599c <HAL_GPIO_Init+0x300>)
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005912:	4b22      	ldr	r3, [pc, #136]	; (800599c <HAL_GPIO_Init+0x300>)
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	43db      	mvns	r3, r3
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	4013      	ands	r3, r2
 8005920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	4313      	orrs	r3, r2
 8005934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005936:	4a19      	ldr	r2, [pc, #100]	; (800599c <HAL_GPIO_Init+0x300>)
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800593c:	4b17      	ldr	r3, [pc, #92]	; (800599c <HAL_GPIO_Init+0x300>)
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	43db      	mvns	r3, r3
 8005946:	69ba      	ldr	r2, [r7, #24]
 8005948:	4013      	ands	r3, r2
 800594a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d003      	beq.n	8005960 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	4313      	orrs	r3, r2
 800595e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005960:	4a0e      	ldr	r2, [pc, #56]	; (800599c <HAL_GPIO_Init+0x300>)
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	3301      	adds	r3, #1
 800596a:	61fb      	str	r3, [r7, #28]
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	2b0f      	cmp	r3, #15
 8005970:	f67f aea2 	bls.w	80056b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005974:	bf00      	nop
 8005976:	3724      	adds	r7, #36	; 0x24
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	40023800 	.word	0x40023800
 8005984:	40013800 	.word	0x40013800
 8005988:	40020000 	.word	0x40020000
 800598c:	40020400 	.word	0x40020400
 8005990:	40020800 	.word	0x40020800
 8005994:	40020c00 	.word	0x40020c00
 8005998:	40021000 	.word	0x40021000
 800599c:	40013c00 	.word	0x40013c00

080059a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	460b      	mov	r3, r1
 80059aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	691a      	ldr	r2, [r3, #16]
 80059b0:	887b      	ldrh	r3, [r7, #2]
 80059b2:	4013      	ands	r3, r2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80059b8:	2301      	movs	r3, #1
 80059ba:	73fb      	strb	r3, [r7, #15]
 80059bc:	e001      	b.n	80059c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80059be:	2300      	movs	r3, #0
 80059c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80059c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	460b      	mov	r3, r1
 80059da:	807b      	strh	r3, [r7, #2]
 80059dc:	4613      	mov	r3, r2
 80059de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80059e0:	787b      	ldrb	r3, [r7, #1]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80059e6:	887a      	ldrh	r2, [r7, #2]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80059ec:	e003      	b.n	80059f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80059ee:	887b      	ldrh	r3, [r7, #2]
 80059f0:	041a      	lsls	r2, r3, #16
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	619a      	str	r2, [r3, #24]
}
 80059f6:	bf00      	nop
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
	...

08005a04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e25b      	b.n	8005ece <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d075      	beq.n	8005b0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a22:	4ba3      	ldr	r3, [pc, #652]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f003 030c 	and.w	r3, r3, #12
 8005a2a:	2b04      	cmp	r3, #4
 8005a2c:	d00c      	beq.n	8005a48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a2e:	4ba0      	ldr	r3, [pc, #640]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a36:	2b08      	cmp	r3, #8
 8005a38:	d112      	bne.n	8005a60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a3a:	4b9d      	ldr	r3, [pc, #628]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a46:	d10b      	bne.n	8005a60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a48:	4b99      	ldr	r3, [pc, #612]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d05b      	beq.n	8005b0c <HAL_RCC_OscConfig+0x108>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d157      	bne.n	8005b0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e236      	b.n	8005ece <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a68:	d106      	bne.n	8005a78 <HAL_RCC_OscConfig+0x74>
 8005a6a:	4b91      	ldr	r3, [pc, #580]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a90      	ldr	r2, [pc, #576]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a74:	6013      	str	r3, [r2, #0]
 8005a76:	e01d      	b.n	8005ab4 <HAL_RCC_OscConfig+0xb0>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a80:	d10c      	bne.n	8005a9c <HAL_RCC_OscConfig+0x98>
 8005a82:	4b8b      	ldr	r3, [pc, #556]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a8a      	ldr	r2, [pc, #552]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a8c:	6013      	str	r3, [r2, #0]
 8005a8e:	4b88      	ldr	r3, [pc, #544]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a87      	ldr	r2, [pc, #540]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a98:	6013      	str	r3, [r2, #0]
 8005a9a:	e00b      	b.n	8005ab4 <HAL_RCC_OscConfig+0xb0>
 8005a9c:	4b84      	ldr	r3, [pc, #528]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a83      	ldr	r2, [pc, #524]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aa6:	6013      	str	r3, [r2, #0]
 8005aa8:	4b81      	ldr	r3, [pc, #516]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a80      	ldr	r2, [pc, #512]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d013      	beq.n	8005ae4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005abc:	f7fe fc06 	bl	80042cc <HAL_GetTick>
 8005ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ac2:	e008      	b.n	8005ad6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ac4:	f7fe fc02 	bl	80042cc <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b64      	cmp	r3, #100	; 0x64
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e1fb      	b.n	8005ece <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ad6:	4b76      	ldr	r3, [pc, #472]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d0f0      	beq.n	8005ac4 <HAL_RCC_OscConfig+0xc0>
 8005ae2:	e014      	b.n	8005b0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae4:	f7fe fbf2 	bl	80042cc <HAL_GetTick>
 8005ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005aea:	e008      	b.n	8005afe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005aec:	f7fe fbee 	bl	80042cc <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	2b64      	cmp	r3, #100	; 0x64
 8005af8:	d901      	bls.n	8005afe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e1e7      	b.n	8005ece <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005afe:	4b6c      	ldr	r3, [pc, #432]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1f0      	bne.n	8005aec <HAL_RCC_OscConfig+0xe8>
 8005b0a:	e000      	b.n	8005b0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0302 	and.w	r3, r3, #2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d063      	beq.n	8005be2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b1a:	4b65      	ldr	r3, [pc, #404]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f003 030c 	and.w	r3, r3, #12
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00b      	beq.n	8005b3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b26:	4b62      	ldr	r3, [pc, #392]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b2e:	2b08      	cmp	r3, #8
 8005b30:	d11c      	bne.n	8005b6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b32:	4b5f      	ldr	r3, [pc, #380]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d116      	bne.n	8005b6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b3e:	4b5c      	ldr	r3, [pc, #368]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d005      	beq.n	8005b56 <HAL_RCC_OscConfig+0x152>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d001      	beq.n	8005b56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e1bb      	b.n	8005ece <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b56:	4b56      	ldr	r3, [pc, #344]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	00db      	lsls	r3, r3, #3
 8005b64:	4952      	ldr	r1, [pc, #328]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b6a:	e03a      	b.n	8005be2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d020      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b74:	4b4f      	ldr	r3, [pc, #316]	; (8005cb4 <HAL_RCC_OscConfig+0x2b0>)
 8005b76:	2201      	movs	r2, #1
 8005b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b7a:	f7fe fba7 	bl	80042cc <HAL_GetTick>
 8005b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b80:	e008      	b.n	8005b94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b82:	f7fe fba3 	bl	80042cc <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d901      	bls.n	8005b94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e19c      	b.n	8005ece <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b94:	4b46      	ldr	r3, [pc, #280]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d0f0      	beq.n	8005b82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ba0:	4b43      	ldr	r3, [pc, #268]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	00db      	lsls	r3, r3, #3
 8005bae:	4940      	ldr	r1, [pc, #256]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	600b      	str	r3, [r1, #0]
 8005bb4:	e015      	b.n	8005be2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bb6:	4b3f      	ldr	r3, [pc, #252]	; (8005cb4 <HAL_RCC_OscConfig+0x2b0>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bbc:	f7fe fb86 	bl	80042cc <HAL_GetTick>
 8005bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bc2:	e008      	b.n	8005bd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bc4:	f7fe fb82 	bl	80042cc <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d901      	bls.n	8005bd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e17b      	b.n	8005ece <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bd6:	4b36      	ldr	r3, [pc, #216]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1f0      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0308 	and.w	r3, r3, #8
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d030      	beq.n	8005c50 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d016      	beq.n	8005c24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bf6:	4b30      	ldr	r3, [pc, #192]	; (8005cb8 <HAL_RCC_OscConfig+0x2b4>)
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bfc:	f7fe fb66 	bl	80042cc <HAL_GetTick>
 8005c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c02:	e008      	b.n	8005c16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c04:	f7fe fb62 	bl	80042cc <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e15b      	b.n	8005ece <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c16:	4b26      	ldr	r3, [pc, #152]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d0f0      	beq.n	8005c04 <HAL_RCC_OscConfig+0x200>
 8005c22:	e015      	b.n	8005c50 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c24:	4b24      	ldr	r3, [pc, #144]	; (8005cb8 <HAL_RCC_OscConfig+0x2b4>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c2a:	f7fe fb4f 	bl	80042cc <HAL_GetTick>
 8005c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c30:	e008      	b.n	8005c44 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c32:	f7fe fb4b 	bl	80042cc <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d901      	bls.n	8005c44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e144      	b.n	8005ece <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c44:	4b1a      	ldr	r3, [pc, #104]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c48:	f003 0302 	and.w	r3, r3, #2
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1f0      	bne.n	8005c32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0304 	and.w	r3, r3, #4
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f000 80a0 	beq.w	8005d9e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c62:	4b13      	ldr	r3, [pc, #76]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10f      	bne.n	8005c8e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c6e:	2300      	movs	r3, #0
 8005c70:	60bb      	str	r3, [r7, #8]
 8005c72:	4b0f      	ldr	r3, [pc, #60]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c76:	4a0e      	ldr	r2, [pc, #56]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8005c7e:	4b0c      	ldr	r3, [pc, #48]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c86:	60bb      	str	r3, [r7, #8]
 8005c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c8e:	4b0b      	ldr	r3, [pc, #44]	; (8005cbc <HAL_RCC_OscConfig+0x2b8>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d121      	bne.n	8005cde <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c9a:	4b08      	ldr	r3, [pc, #32]	; (8005cbc <HAL_RCC_OscConfig+0x2b8>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a07      	ldr	r2, [pc, #28]	; (8005cbc <HAL_RCC_OscConfig+0x2b8>)
 8005ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ca4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ca6:	f7fe fb11 	bl	80042cc <HAL_GetTick>
 8005caa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cac:	e011      	b.n	8005cd2 <HAL_RCC_OscConfig+0x2ce>
 8005cae:	bf00      	nop
 8005cb0:	40023800 	.word	0x40023800
 8005cb4:	42470000 	.word	0x42470000
 8005cb8:	42470e80 	.word	0x42470e80
 8005cbc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cc0:	f7fe fb04 	bl	80042cc <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d901      	bls.n	8005cd2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e0fd      	b.n	8005ece <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cd2:	4b81      	ldr	r3, [pc, #516]	; (8005ed8 <HAL_RCC_OscConfig+0x4d4>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d0f0      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d106      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x2f0>
 8005ce6:	4b7d      	ldr	r3, [pc, #500]	; (8005edc <HAL_RCC_OscConfig+0x4d8>)
 8005ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cea:	4a7c      	ldr	r2, [pc, #496]	; (8005edc <HAL_RCC_OscConfig+0x4d8>)
 8005cec:	f043 0301 	orr.w	r3, r3, #1
 8005cf0:	6713      	str	r3, [r2, #112]	; 0x70
 8005cf2:	e01c      	b.n	8005d2e <HAL_RCC_OscConfig+0x32a>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	2b05      	cmp	r3, #5
 8005cfa:	d10c      	bne.n	8005d16 <HAL_RCC_OscConfig+0x312>
 8005cfc:	4b77      	ldr	r3, [pc, #476]	; (8005edc <HAL_RCC_OscConfig+0x4d8>)
 8005cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d00:	4a76      	ldr	r2, [pc, #472]	; (8005edc <HAL_RCC_OscConfig+0x4d8>)
 8005d02:	f043 0304 	orr.w	r3, r3, #4
 8005d06:	6713      	str	r3, [r2, #112]	; 0x70
 8005d08:	4b74      	ldr	r3, [pc, #464]	; (8005edc <HAL_RCC_OscConfig+0x4d8>)
 8005d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d0c:	4a73      	ldr	r2, [pc, #460]	; (8005edc <HAL_RCC_OscConfig+0x4d8>)
 8005d0e:	f043 0301 	orr.w	r3, r3, #1
 8005d12:	6713      	str	r3, [r2, #112]	; 0x70
 8005d14:	e00b      	b.n	8005d2e <HAL_RCC_OscConfig+0x32a>
 8005d16:	4b71      	ldr	r3, [pc, #452]	; (8005edc <HAL_RCC_OscConfig+0x4d8>)
 8005d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d1a:	4a70      	ldr	r2, [pc, #448]	; (8005edc <HAL_RCC_OscConfig+0x4d8>)
 8005d1c:	f023 0301 	bic.w	r3, r3, #1
 8005d20:	6713      	str	r3, [r2, #112]	; 0x70
 8005d22:	4b6e      	ldr	r3, [pc, #440]	; (8005edc <HAL_RCC_OscConfig+0x4d8>)
 8005d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d26:	4a6d      	ldr	r2, [pc, #436]	; (8005edc <HAL_RCC_OscConfig+0x4d8>)
 8005d28:	f023 0304 	bic.w	r3, r3, #4
 8005d2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d015      	beq.n	8005d62 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d36:	f7fe fac9 	bl	80042cc <HAL_GetTick>
 8005d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d3c:	e00a      	b.n	8005d54 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d3e:	f7fe fac5 	bl	80042cc <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d901      	bls.n	8005d54 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e0bc      	b.n	8005ece <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d54:	4b61      	ldr	r3, [pc, #388]	; (8005edc <HAL_RCC_OscConfig+0x4d8>)
 8005d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d58:	f003 0302 	and.w	r3, r3, #2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d0ee      	beq.n	8005d3e <HAL_RCC_OscConfig+0x33a>
 8005d60:	e014      	b.n	8005d8c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d62:	f7fe fab3 	bl	80042cc <HAL_GetTick>
 8005d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d68:	e00a      	b.n	8005d80 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d6a:	f7fe faaf 	bl	80042cc <HAL_GetTick>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d901      	bls.n	8005d80 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e0a6      	b.n	8005ece <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d80:	4b56      	ldr	r3, [pc, #344]	; (8005edc <HAL_RCC_OscConfig+0x4d8>)
 8005d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d84:	f003 0302 	and.w	r3, r3, #2
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1ee      	bne.n	8005d6a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d8c:	7dfb      	ldrb	r3, [r7, #23]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d105      	bne.n	8005d9e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d92:	4b52      	ldr	r3, [pc, #328]	; (8005edc <HAL_RCC_OscConfig+0x4d8>)
 8005d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d96:	4a51      	ldr	r2, [pc, #324]	; (8005edc <HAL_RCC_OscConfig+0x4d8>)
 8005d98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 8092 	beq.w	8005ecc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005da8:	4b4c      	ldr	r3, [pc, #304]	; (8005edc <HAL_RCC_OscConfig+0x4d8>)
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f003 030c 	and.w	r3, r3, #12
 8005db0:	2b08      	cmp	r3, #8
 8005db2:	d05c      	beq.n	8005e6e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d141      	bne.n	8005e40 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dbc:	4b48      	ldr	r3, [pc, #288]	; (8005ee0 <HAL_RCC_OscConfig+0x4dc>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dc2:	f7fe fa83 	bl	80042cc <HAL_GetTick>
 8005dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dc8:	e008      	b.n	8005ddc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dca:	f7fe fa7f 	bl	80042cc <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d901      	bls.n	8005ddc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e078      	b.n	8005ece <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ddc:	4b3f      	ldr	r3, [pc, #252]	; (8005edc <HAL_RCC_OscConfig+0x4d8>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1f0      	bne.n	8005dca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	69da      	ldr	r2, [r3, #28]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a1b      	ldr	r3, [r3, #32]
 8005df0:	431a      	orrs	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df6:	019b      	lsls	r3, r3, #6
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfe:	085b      	lsrs	r3, r3, #1
 8005e00:	3b01      	subs	r3, #1
 8005e02:	041b      	lsls	r3, r3, #16
 8005e04:	431a      	orrs	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0a:	061b      	lsls	r3, r3, #24
 8005e0c:	4933      	ldr	r1, [pc, #204]	; (8005edc <HAL_RCC_OscConfig+0x4d8>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e12:	4b33      	ldr	r3, [pc, #204]	; (8005ee0 <HAL_RCC_OscConfig+0x4dc>)
 8005e14:	2201      	movs	r2, #1
 8005e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e18:	f7fe fa58 	bl	80042cc <HAL_GetTick>
 8005e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e1e:	e008      	b.n	8005e32 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e20:	f7fe fa54 	bl	80042cc <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d901      	bls.n	8005e32 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e04d      	b.n	8005ece <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e32:	4b2a      	ldr	r3, [pc, #168]	; (8005edc <HAL_RCC_OscConfig+0x4d8>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d0f0      	beq.n	8005e20 <HAL_RCC_OscConfig+0x41c>
 8005e3e:	e045      	b.n	8005ecc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e40:	4b27      	ldr	r3, [pc, #156]	; (8005ee0 <HAL_RCC_OscConfig+0x4dc>)
 8005e42:	2200      	movs	r2, #0
 8005e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e46:	f7fe fa41 	bl	80042cc <HAL_GetTick>
 8005e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e4c:	e008      	b.n	8005e60 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e4e:	f7fe fa3d 	bl	80042cc <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d901      	bls.n	8005e60 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e036      	b.n	8005ece <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e60:	4b1e      	ldr	r3, [pc, #120]	; (8005edc <HAL_RCC_OscConfig+0x4d8>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1f0      	bne.n	8005e4e <HAL_RCC_OscConfig+0x44a>
 8005e6c:	e02e      	b.n	8005ecc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d101      	bne.n	8005e7a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e029      	b.n	8005ece <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e7a:	4b18      	ldr	r3, [pc, #96]	; (8005edc <HAL_RCC_OscConfig+0x4d8>)
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	69db      	ldr	r3, [r3, #28]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d11c      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d115      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d10d      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d106      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d001      	beq.n	8005ecc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e000      	b.n	8005ece <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	40007000 	.word	0x40007000
 8005edc:	40023800 	.word	0x40023800
 8005ee0:	42470060 	.word	0x42470060

08005ee4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e0cc      	b.n	8006092 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ef8:	4b68      	ldr	r3, [pc, #416]	; (800609c <HAL_RCC_ClockConfig+0x1b8>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 030f 	and.w	r3, r3, #15
 8005f00:	683a      	ldr	r2, [r7, #0]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d90c      	bls.n	8005f20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f06:	4b65      	ldr	r3, [pc, #404]	; (800609c <HAL_RCC_ClockConfig+0x1b8>)
 8005f08:	683a      	ldr	r2, [r7, #0]
 8005f0a:	b2d2      	uxtb	r2, r2
 8005f0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f0e:	4b63      	ldr	r3, [pc, #396]	; (800609c <HAL_RCC_ClockConfig+0x1b8>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 030f 	and.w	r3, r3, #15
 8005f16:	683a      	ldr	r2, [r7, #0]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d001      	beq.n	8005f20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e0b8      	b.n	8006092 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d020      	beq.n	8005f6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0304 	and.w	r3, r3, #4
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d005      	beq.n	8005f44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f38:	4b59      	ldr	r3, [pc, #356]	; (80060a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	4a58      	ldr	r2, [pc, #352]	; (80060a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0308 	and.w	r3, r3, #8
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d005      	beq.n	8005f5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f50:	4b53      	ldr	r3, [pc, #332]	; (80060a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	4a52      	ldr	r2, [pc, #328]	; (80060a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f5c:	4b50      	ldr	r3, [pc, #320]	; (80060a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	494d      	ldr	r1, [pc, #308]	; (80060a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d044      	beq.n	8006004 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d107      	bne.n	8005f92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f82:	4b47      	ldr	r3, [pc, #284]	; (80060a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d119      	bne.n	8005fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e07f      	b.n	8006092 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d003      	beq.n	8005fa2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f9e:	2b03      	cmp	r3, #3
 8005fa0:	d107      	bne.n	8005fb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fa2:	4b3f      	ldr	r3, [pc, #252]	; (80060a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d109      	bne.n	8005fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e06f      	b.n	8006092 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fb2:	4b3b      	ldr	r3, [pc, #236]	; (80060a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0302 	and.w	r3, r3, #2
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d101      	bne.n	8005fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e067      	b.n	8006092 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fc2:	4b37      	ldr	r3, [pc, #220]	; (80060a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f023 0203 	bic.w	r2, r3, #3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	4934      	ldr	r1, [pc, #208]	; (80060a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fd4:	f7fe f97a 	bl	80042cc <HAL_GetTick>
 8005fd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fda:	e00a      	b.n	8005ff2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fdc:	f7fe f976 	bl	80042cc <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d901      	bls.n	8005ff2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e04f      	b.n	8006092 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ff2:	4b2b      	ldr	r3, [pc, #172]	; (80060a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f003 020c 	and.w	r2, r3, #12
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	429a      	cmp	r2, r3
 8006002:	d1eb      	bne.n	8005fdc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006004:	4b25      	ldr	r3, [pc, #148]	; (800609c <HAL_RCC_ClockConfig+0x1b8>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 030f 	and.w	r3, r3, #15
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	429a      	cmp	r2, r3
 8006010:	d20c      	bcs.n	800602c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006012:	4b22      	ldr	r3, [pc, #136]	; (800609c <HAL_RCC_ClockConfig+0x1b8>)
 8006014:	683a      	ldr	r2, [r7, #0]
 8006016:	b2d2      	uxtb	r2, r2
 8006018:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800601a:	4b20      	ldr	r3, [pc, #128]	; (800609c <HAL_RCC_ClockConfig+0x1b8>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 030f 	and.w	r3, r3, #15
 8006022:	683a      	ldr	r2, [r7, #0]
 8006024:	429a      	cmp	r2, r3
 8006026:	d001      	beq.n	800602c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e032      	b.n	8006092 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0304 	and.w	r3, r3, #4
 8006034:	2b00      	cmp	r3, #0
 8006036:	d008      	beq.n	800604a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006038:	4b19      	ldr	r3, [pc, #100]	; (80060a0 <HAL_RCC_ClockConfig+0x1bc>)
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	4916      	ldr	r1, [pc, #88]	; (80060a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006046:	4313      	orrs	r3, r2
 8006048:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0308 	and.w	r3, r3, #8
 8006052:	2b00      	cmp	r3, #0
 8006054:	d009      	beq.n	800606a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006056:	4b12      	ldr	r3, [pc, #72]	; (80060a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	00db      	lsls	r3, r3, #3
 8006064:	490e      	ldr	r1, [pc, #56]	; (80060a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006066:	4313      	orrs	r3, r2
 8006068:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800606a:	f000 f821 	bl	80060b0 <HAL_RCC_GetSysClockFreq>
 800606e:	4601      	mov	r1, r0
 8006070:	4b0b      	ldr	r3, [pc, #44]	; (80060a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	091b      	lsrs	r3, r3, #4
 8006076:	f003 030f 	and.w	r3, r3, #15
 800607a:	4a0a      	ldr	r2, [pc, #40]	; (80060a4 <HAL_RCC_ClockConfig+0x1c0>)
 800607c:	5cd3      	ldrb	r3, [r2, r3]
 800607e:	fa21 f303 	lsr.w	r3, r1, r3
 8006082:	4a09      	ldr	r2, [pc, #36]	; (80060a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006084:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006086:	4b09      	ldr	r3, [pc, #36]	; (80060ac <HAL_RCC_ClockConfig+0x1c8>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4618      	mov	r0, r3
 800608c:	f7fe f8da 	bl	8004244 <HAL_InitTick>

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	40023c00 	.word	0x40023c00
 80060a0:	40023800 	.word	0x40023800
 80060a4:	08009f44 	.word	0x08009f44
 80060a8:	20000014 	.word	0x20000014
 80060ac:	20000018 	.word	0x20000018

080060b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	607b      	str	r3, [r7, #4]
 80060ba:	2300      	movs	r3, #0
 80060bc:	60fb      	str	r3, [r7, #12]
 80060be:	2300      	movs	r3, #0
 80060c0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80060c2:	2300      	movs	r3, #0
 80060c4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060c6:	4b63      	ldr	r3, [pc, #396]	; (8006254 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f003 030c 	and.w	r3, r3, #12
 80060ce:	2b04      	cmp	r3, #4
 80060d0:	d007      	beq.n	80060e2 <HAL_RCC_GetSysClockFreq+0x32>
 80060d2:	2b08      	cmp	r3, #8
 80060d4:	d008      	beq.n	80060e8 <HAL_RCC_GetSysClockFreq+0x38>
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f040 80b4 	bne.w	8006244 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80060dc:	4b5e      	ldr	r3, [pc, #376]	; (8006258 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80060de:	60bb      	str	r3, [r7, #8]
       break;
 80060e0:	e0b3      	b.n	800624a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80060e2:	4b5e      	ldr	r3, [pc, #376]	; (800625c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80060e4:	60bb      	str	r3, [r7, #8]
      break;
 80060e6:	e0b0      	b.n	800624a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060e8:	4b5a      	ldr	r3, [pc, #360]	; (8006254 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060f0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060f2:	4b58      	ldr	r3, [pc, #352]	; (8006254 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d04a      	beq.n	8006194 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060fe:	4b55      	ldr	r3, [pc, #340]	; (8006254 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	099b      	lsrs	r3, r3, #6
 8006104:	f04f 0400 	mov.w	r4, #0
 8006108:	f240 11ff 	movw	r1, #511	; 0x1ff
 800610c:	f04f 0200 	mov.w	r2, #0
 8006110:	ea03 0501 	and.w	r5, r3, r1
 8006114:	ea04 0602 	and.w	r6, r4, r2
 8006118:	4629      	mov	r1, r5
 800611a:	4632      	mov	r2, r6
 800611c:	f04f 0300 	mov.w	r3, #0
 8006120:	f04f 0400 	mov.w	r4, #0
 8006124:	0154      	lsls	r4, r2, #5
 8006126:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800612a:	014b      	lsls	r3, r1, #5
 800612c:	4619      	mov	r1, r3
 800612e:	4622      	mov	r2, r4
 8006130:	1b49      	subs	r1, r1, r5
 8006132:	eb62 0206 	sbc.w	r2, r2, r6
 8006136:	f04f 0300 	mov.w	r3, #0
 800613a:	f04f 0400 	mov.w	r4, #0
 800613e:	0194      	lsls	r4, r2, #6
 8006140:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006144:	018b      	lsls	r3, r1, #6
 8006146:	1a5b      	subs	r3, r3, r1
 8006148:	eb64 0402 	sbc.w	r4, r4, r2
 800614c:	f04f 0100 	mov.w	r1, #0
 8006150:	f04f 0200 	mov.w	r2, #0
 8006154:	00e2      	lsls	r2, r4, #3
 8006156:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800615a:	00d9      	lsls	r1, r3, #3
 800615c:	460b      	mov	r3, r1
 800615e:	4614      	mov	r4, r2
 8006160:	195b      	adds	r3, r3, r5
 8006162:	eb44 0406 	adc.w	r4, r4, r6
 8006166:	f04f 0100 	mov.w	r1, #0
 800616a:	f04f 0200 	mov.w	r2, #0
 800616e:	0262      	lsls	r2, r4, #9
 8006170:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006174:	0259      	lsls	r1, r3, #9
 8006176:	460b      	mov	r3, r1
 8006178:	4614      	mov	r4, r2
 800617a:	4618      	mov	r0, r3
 800617c:	4621      	mov	r1, r4
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f04f 0400 	mov.w	r4, #0
 8006184:	461a      	mov	r2, r3
 8006186:	4623      	mov	r3, r4
 8006188:	f7fa fd50 	bl	8000c2c <__aeabi_uldivmod>
 800618c:	4603      	mov	r3, r0
 800618e:	460c      	mov	r4, r1
 8006190:	60fb      	str	r3, [r7, #12]
 8006192:	e049      	b.n	8006228 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006194:	4b2f      	ldr	r3, [pc, #188]	; (8006254 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	099b      	lsrs	r3, r3, #6
 800619a:	f04f 0400 	mov.w	r4, #0
 800619e:	f240 11ff 	movw	r1, #511	; 0x1ff
 80061a2:	f04f 0200 	mov.w	r2, #0
 80061a6:	ea03 0501 	and.w	r5, r3, r1
 80061aa:	ea04 0602 	and.w	r6, r4, r2
 80061ae:	4629      	mov	r1, r5
 80061b0:	4632      	mov	r2, r6
 80061b2:	f04f 0300 	mov.w	r3, #0
 80061b6:	f04f 0400 	mov.w	r4, #0
 80061ba:	0154      	lsls	r4, r2, #5
 80061bc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80061c0:	014b      	lsls	r3, r1, #5
 80061c2:	4619      	mov	r1, r3
 80061c4:	4622      	mov	r2, r4
 80061c6:	1b49      	subs	r1, r1, r5
 80061c8:	eb62 0206 	sbc.w	r2, r2, r6
 80061cc:	f04f 0300 	mov.w	r3, #0
 80061d0:	f04f 0400 	mov.w	r4, #0
 80061d4:	0194      	lsls	r4, r2, #6
 80061d6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80061da:	018b      	lsls	r3, r1, #6
 80061dc:	1a5b      	subs	r3, r3, r1
 80061de:	eb64 0402 	sbc.w	r4, r4, r2
 80061e2:	f04f 0100 	mov.w	r1, #0
 80061e6:	f04f 0200 	mov.w	r2, #0
 80061ea:	00e2      	lsls	r2, r4, #3
 80061ec:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80061f0:	00d9      	lsls	r1, r3, #3
 80061f2:	460b      	mov	r3, r1
 80061f4:	4614      	mov	r4, r2
 80061f6:	195b      	adds	r3, r3, r5
 80061f8:	eb44 0406 	adc.w	r4, r4, r6
 80061fc:	f04f 0100 	mov.w	r1, #0
 8006200:	f04f 0200 	mov.w	r2, #0
 8006204:	02a2      	lsls	r2, r4, #10
 8006206:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800620a:	0299      	lsls	r1, r3, #10
 800620c:	460b      	mov	r3, r1
 800620e:	4614      	mov	r4, r2
 8006210:	4618      	mov	r0, r3
 8006212:	4621      	mov	r1, r4
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f04f 0400 	mov.w	r4, #0
 800621a:	461a      	mov	r2, r3
 800621c:	4623      	mov	r3, r4
 800621e:	f7fa fd05 	bl	8000c2c <__aeabi_uldivmod>
 8006222:	4603      	mov	r3, r0
 8006224:	460c      	mov	r4, r1
 8006226:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006228:	4b0a      	ldr	r3, [pc, #40]	; (8006254 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	0c1b      	lsrs	r3, r3, #16
 800622e:	f003 0303 	and.w	r3, r3, #3
 8006232:	3301      	adds	r3, #1
 8006234:	005b      	lsls	r3, r3, #1
 8006236:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006240:	60bb      	str	r3, [r7, #8]
      break;
 8006242:	e002      	b.n	800624a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006244:	4b04      	ldr	r3, [pc, #16]	; (8006258 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006246:	60bb      	str	r3, [r7, #8]
      break;
 8006248:	bf00      	nop
    }
  }
  return sysclockfreq;
 800624a:	68bb      	ldr	r3, [r7, #8]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006254:	40023800 	.word	0x40023800
 8006258:	00f42400 	.word	0x00f42400
 800625c:	007a1200 	.word	0x007a1200

08006260 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006260:	b480      	push	{r7}
 8006262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006264:	4b03      	ldr	r3, [pc, #12]	; (8006274 <HAL_RCC_GetHCLKFreq+0x14>)
 8006266:	681b      	ldr	r3, [r3, #0]
}
 8006268:	4618      	mov	r0, r3
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	20000014 	.word	0x20000014

08006278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800627c:	f7ff fff0 	bl	8006260 <HAL_RCC_GetHCLKFreq>
 8006280:	4601      	mov	r1, r0
 8006282:	4b05      	ldr	r3, [pc, #20]	; (8006298 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	0a9b      	lsrs	r3, r3, #10
 8006288:	f003 0307 	and.w	r3, r3, #7
 800628c:	4a03      	ldr	r2, [pc, #12]	; (800629c <HAL_RCC_GetPCLK1Freq+0x24>)
 800628e:	5cd3      	ldrb	r3, [r2, r3]
 8006290:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006294:	4618      	mov	r0, r3
 8006296:	bd80      	pop	{r7, pc}
 8006298:	40023800 	.word	0x40023800
 800629c:	08009f54 	.word	0x08009f54

080062a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80062a4:	f7ff ffdc 	bl	8006260 <HAL_RCC_GetHCLKFreq>
 80062a8:	4601      	mov	r1, r0
 80062aa:	4b05      	ldr	r3, [pc, #20]	; (80062c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	0b5b      	lsrs	r3, r3, #13
 80062b0:	f003 0307 	and.w	r3, r3, #7
 80062b4:	4a03      	ldr	r2, [pc, #12]	; (80062c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062b6:	5cd3      	ldrb	r3, [r2, r3]
 80062b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80062bc:	4618      	mov	r0, r3
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	40023800 	.word	0x40023800
 80062c4:	08009f54 	.word	0x08009f54

080062c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d101      	bne.n	80062da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e056      	b.n	8006388 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d106      	bne.n	80062fa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f7fd fdd3 	bl	8003ea0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2202      	movs	r2, #2
 80062fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006310:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685a      	ldr	r2, [r3, #4]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	431a      	orrs	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	431a      	orrs	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	431a      	orrs	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	431a      	orrs	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006336:	431a      	orrs	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	69db      	ldr	r3, [r3, #28]
 800633c:	431a      	orrs	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	ea42 0103 	orr.w	r1, r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	430a      	orrs	r2, r1
 8006350:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	0c1b      	lsrs	r3, r3, #16
 8006358:	f003 0104 	and.w	r1, r3, #4
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	430a      	orrs	r2, r1
 8006366:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	69da      	ldr	r2, [r3, #28]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006376:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3708      	adds	r7, #8
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006390:	b480      	push	{r7}
 8006392:	b087      	sub	sp, #28
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	4613      	mov	r3, r2
 800639c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800639e:	2300      	movs	r3, #0
 80063a0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d101      	bne.n	80063b0 <HAL_SPI_Transmit_IT+0x20>
 80063ac:	2302      	movs	r3, #2
 80063ae:	e067      	b.n	8006480 <HAL_SPI_Transmit_IT+0xf0>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d002      	beq.n	80063c4 <HAL_SPI_Transmit_IT+0x34>
 80063be:	88fb      	ldrh	r3, [r7, #6]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d102      	bne.n	80063ca <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80063c8:	e055      	b.n	8006476 <HAL_SPI_Transmit_IT+0xe6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d002      	beq.n	80063dc <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80063d6:	2302      	movs	r3, #2
 80063d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80063da:	e04c      	b.n	8006476 <HAL_SPI_Transmit_IT+0xe6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2203      	movs	r2, #3
 80063e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	88fa      	ldrh	r2, [r7, #6]
 80063f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	88fa      	ldrh	r2, [r7, #6]
 80063fa:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d003      	beq.n	8006424 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	4a1b      	ldr	r2, [pc, #108]	; (800648c <HAL_SPI_Transmit_IT+0xfc>)
 8006420:	645a      	str	r2, [r3, #68]	; 0x44
 8006422:	e002      	b.n	800642a <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	4a1a      	ldr	r2, [pc, #104]	; (8006490 <HAL_SPI_Transmit_IT+0x100>)
 8006428:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006432:	d107      	bne.n	8006444 <HAL_SPI_Transmit_IT+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006442:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	685a      	ldr	r2, [r3, #4]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8006452:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800645e:	2b40      	cmp	r3, #64	; 0x40
 8006460:	d008      	beq.n	8006474 <HAL_SPI_Transmit_IT+0xe4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006470:	601a      	str	r2, [r3, #0]
 8006472:	e000      	b.n	8006476 <HAL_SPI_Transmit_IT+0xe6>
  }

error :
 8006474:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800647e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006480:	4618      	mov	r0, r3
 8006482:	371c      	adds	r7, #28
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr
 800648c:	08006717 	.word	0x08006717
 8006490:	080066d1 	.word	0x080066d1

08006494 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b088      	sub	sp, #32
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	099b      	lsrs	r3, r3, #6
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10f      	bne.n	80064d8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00a      	beq.n	80064d8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	099b      	lsrs	r3, r3, #6
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d004      	beq.n	80064d8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	4798      	blx	r3
    return;
 80064d6:	e0d8      	b.n	800668a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	085b      	lsrs	r3, r3, #1
 80064dc:	f003 0301 	and.w	r3, r3, #1
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00a      	beq.n	80064fa <HAL_SPI_IRQHandler+0x66>
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	09db      	lsrs	r3, r3, #7
 80064e8:	f003 0301 	and.w	r3, r3, #1
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d004      	beq.n	80064fa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	4798      	blx	r3
    return;
 80064f8:	e0c7      	b.n	800668a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	095b      	lsrs	r3, r3, #5
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10c      	bne.n	8006520 <HAL_SPI_IRQHandler+0x8c>
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	099b      	lsrs	r3, r3, #6
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	2b00      	cmp	r3, #0
 8006510:	d106      	bne.n	8006520 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	0a1b      	lsrs	r3, r3, #8
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 80b5 	beq.w	800668a <HAL_SPI_IRQHandler+0x1f6>
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	095b      	lsrs	r3, r3, #5
 8006524:	f003 0301 	and.w	r3, r3, #1
 8006528:	2b00      	cmp	r3, #0
 800652a:	f000 80ae 	beq.w	800668a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	099b      	lsrs	r3, r3, #6
 8006532:	f003 0301 	and.w	r3, r3, #1
 8006536:	2b00      	cmp	r3, #0
 8006538:	d023      	beq.n	8006582 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b03      	cmp	r3, #3
 8006544:	d011      	beq.n	800656a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800654a:	f043 0204 	orr.w	r2, r3, #4
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006552:	2300      	movs	r3, #0
 8006554:	617b      	str	r3, [r7, #20]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	617b      	str	r3, [r7, #20]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	617b      	str	r3, [r7, #20]
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	e00b      	b.n	8006582 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800656a:	2300      	movs	r3, #0
 800656c:	613b      	str	r3, [r7, #16]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	613b      	str	r3, [r7, #16]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	613b      	str	r3, [r7, #16]
 800657e:	693b      	ldr	r3, [r7, #16]
        return;
 8006580:	e083      	b.n	800668a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	095b      	lsrs	r3, r3, #5
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	2b00      	cmp	r3, #0
 800658c:	d014      	beq.n	80065b8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006592:	f043 0201 	orr.w	r2, r3, #1
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800659a:	2300      	movs	r3, #0
 800659c:	60fb      	str	r3, [r7, #12]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	60fb      	str	r3, [r7, #12]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	0a1b      	lsrs	r3, r3, #8
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00c      	beq.n	80065de <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c8:	f043 0208 	orr.w	r2, r3, #8
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80065d0:	2300      	movs	r3, #0
 80065d2:	60bb      	str	r3, [r7, #8]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	60bb      	str	r3, [r7, #8]
 80065dc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d050      	beq.n	8006688 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685a      	ldr	r2, [r3, #4]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065f4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	f003 0302 	and.w	r3, r3, #2
 8006604:	2b00      	cmp	r3, #0
 8006606:	d104      	bne.n	8006612 <HAL_SPI_IRQHandler+0x17e>
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	2b00      	cmp	r3, #0
 8006610:	d034      	beq.n	800667c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	685a      	ldr	r2, [r3, #4]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 0203 	bic.w	r2, r2, #3
 8006620:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006626:	2b00      	cmp	r3, #0
 8006628:	d011      	beq.n	800664e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800662e:	4a18      	ldr	r2, [pc, #96]	; (8006690 <HAL_SPI_IRQHandler+0x1fc>)
 8006630:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006636:	4618      	mov	r0, r3
 8006638:	f7fe fda6 	bl	8005188 <HAL_DMA_Abort_IT>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d005      	beq.n	800664e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006646:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006652:	2b00      	cmp	r3, #0
 8006654:	d016      	beq.n	8006684 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800665a:	4a0d      	ldr	r2, [pc, #52]	; (8006690 <HAL_SPI_IRQHandler+0x1fc>)
 800665c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006662:	4618      	mov	r0, r3
 8006664:	f7fe fd90 	bl	8005188 <HAL_DMA_Abort_IT>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00a      	beq.n	8006684 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006672:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800667a:	e003      	b.n	8006684 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 f809 	bl	8006694 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006682:	e000      	b.n	8006686 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006684:	bf00      	nop
    return;
 8006686:	bf00      	nop
 8006688:	bf00      	nop
  }
}
 800668a:	3720      	adds	r7, #32
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	080066a9 	.word	0x080066a9

08006694 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f7ff ffe6 	bl	8006694 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80066c8:	bf00      	nop
 80066ca:	3710      	adds	r7, #16
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	330c      	adds	r3, #12
 80066e2:	7812      	ldrb	r2, [r2, #0]
 80066e4:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ea:	1c5a      	adds	r2, r3, #1
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	3b01      	subs	r3, #1
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006702:	b29b      	uxth	r3, r3
 8006704:	2b00      	cmp	r3, #0
 8006706:	d102      	bne.n	800670e <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 f8d3 	bl	80068b4 <SPI_CloseTx_ISR>
  }
}
 800670e:	bf00      	nop
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b082      	sub	sp, #8
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006722:	881a      	ldrh	r2, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672e:	1c9a      	adds	r2, r3, #2
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006738:	b29b      	uxth	r3, r3
 800673a:	3b01      	subs	r3, #1
 800673c:	b29a      	uxth	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006746:	b29b      	uxth	r3, r3
 8006748:	2b00      	cmp	r3, #0
 800674a:	d102      	bne.n	8006752 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 f8b1 	bl	80068b4 <SPI_CloseTx_ISR>
  }
}
 8006752:	bf00      	nop
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b084      	sub	sp, #16
 800675e:	af00      	add	r7, sp, #0
 8006760:	60f8      	str	r0, [r7, #12]
 8006762:	60b9      	str	r1, [r7, #8]
 8006764:	603b      	str	r3, [r7, #0]
 8006766:	4613      	mov	r3, r2
 8006768:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800676a:	e04c      	b.n	8006806 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006772:	d048      	beq.n	8006806 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006774:	f7fd fdaa 	bl	80042cc <HAL_GetTick>
 8006778:	4602      	mov	r2, r0
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	683a      	ldr	r2, [r7, #0]
 8006780:	429a      	cmp	r2, r3
 8006782:	d902      	bls.n	800678a <SPI_WaitFlagStateUntilTimeout+0x30>
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d13d      	bne.n	8006806 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	685a      	ldr	r2, [r3, #4]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006798:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067a2:	d111      	bne.n	80067c8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067ac:	d004      	beq.n	80067b8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067b6:	d107      	bne.n	80067c8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067d0:	d10f      	bne.n	80067f2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067e0:	601a      	str	r2, [r3, #0]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e00f      	b.n	8006826 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	689a      	ldr	r2, [r3, #8]
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	4013      	ands	r3, r2
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	429a      	cmp	r2, r3
 8006814:	bf0c      	ite	eq
 8006816:	2301      	moveq	r3, #1
 8006818:	2300      	movne	r3, #0
 800681a:	b2db      	uxtb	r3, r3
 800681c:	461a      	mov	r2, r3
 800681e:	79fb      	ldrb	r3, [r7, #7]
 8006820:	429a      	cmp	r2, r3
 8006822:	d1a3      	bne.n	800676c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
	...

08006830 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b088      	sub	sp, #32
 8006834:	af02      	add	r7, sp, #8
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800683c:	4b1b      	ldr	r3, [pc, #108]	; (80068ac <SPI_EndRxTxTransaction+0x7c>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a1b      	ldr	r2, [pc, #108]	; (80068b0 <SPI_EndRxTxTransaction+0x80>)
 8006842:	fba2 2303 	umull	r2, r3, r2, r3
 8006846:	0d5b      	lsrs	r3, r3, #21
 8006848:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800684c:	fb02 f303 	mul.w	r3, r2, r3
 8006850:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800685a:	d112      	bne.n	8006882 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	9300      	str	r3, [sp, #0]
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	2200      	movs	r2, #0
 8006864:	2180      	movs	r1, #128	; 0x80
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f7ff ff77 	bl	800675a <SPI_WaitFlagStateUntilTimeout>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d016      	beq.n	80068a0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006876:	f043 0220 	orr.w	r2, r3, #32
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e00f      	b.n	80068a2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00a      	beq.n	800689e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	3b01      	subs	r3, #1
 800688c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006898:	2b80      	cmp	r3, #128	; 0x80
 800689a:	d0f2      	beq.n	8006882 <SPI_EndRxTxTransaction+0x52>
 800689c:	e000      	b.n	80068a0 <SPI_EndRxTxTransaction+0x70>
        break;
 800689e:	bf00      	nop
  }

  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3718      	adds	r7, #24
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	20000014 	.word	0x20000014
 80068b0:	165e9f81 	.word	0x165e9f81

080068b4 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80068bc:	4b2c      	ldr	r3, [pc, #176]	; (8006970 <SPI_CloseTx_ISR+0xbc>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a2c      	ldr	r2, [pc, #176]	; (8006974 <SPI_CloseTx_ISR+0xc0>)
 80068c2:	fba2 2303 	umull	r2, r3, r2, r3
 80068c6:	0a5b      	lsrs	r3, r3, #9
 80068c8:	2264      	movs	r2, #100	; 0x64
 80068ca:	fb02 f303 	mul.w	r3, r2, r3
 80068ce:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068d0:	f7fd fcfc 	bl	80042cc <HAL_GetTick>
 80068d4:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d106      	bne.n	80068ea <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e0:	f043 0220 	orr.w	r2, r3, #32
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80068e8:	e009      	b.n	80068fe <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	3b01      	subs	r3, #1
 80068ee:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d0eb      	beq.n	80068d6 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800690c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	2164      	movs	r1, #100	; 0x64
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f7ff ff8c 	bl	8006830 <SPI_EndRxTxTransaction>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d005      	beq.n	800692a <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006922:	f043 0220 	orr.w	r2, r3, #32
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d10a      	bne.n	8006948 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006932:	2300      	movs	r3, #0
 8006934:	60fb      	str	r3, [r7, #12]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	60fb      	str	r3, [r7, #12]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	60fb      	str	r3, [r7, #12]
 8006946:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006954:	2b00      	cmp	r3, #0
 8006956:	d003      	beq.n	8006960 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f7ff fe9b 	bl	8006694 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800695e:	e002      	b.n	8006966 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7fd f96d 	bl	8003c40 <HAL_SPI_TxCpltCallback>
}
 8006966:	bf00      	nop
 8006968:	3718      	adds	r7, #24
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	20000014 	.word	0x20000014
 8006974:	057619f1 	.word	0x057619f1

08006978 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d101      	bne.n	800698a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e01d      	b.n	80069c6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006990:	b2db      	uxtb	r3, r3
 8006992:	2b00      	cmp	r3, #0
 8006994:	d106      	bne.n	80069a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f7fd face 	bl	8003f40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2202      	movs	r2, #2
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	3304      	adds	r3, #4
 80069b4:	4619      	mov	r1, r3
 80069b6:	4610      	mov	r0, r2
 80069b8:	f000 fa38 	bl	8006e2c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3708      	adds	r7, #8
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b085      	sub	sp, #20
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2202      	movs	r2, #2
 80069da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	f003 0307 	and.w	r3, r3, #7
 80069e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2b06      	cmp	r3, #6
 80069ee:	d007      	beq.n	8006a00 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f042 0201 	orr.w	r2, r2, #1
 80069fe:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3714      	adds	r7, #20
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a16:	b480      	push	{r7}
 8006a18:	b085      	sub	sp, #20
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68da      	ldr	r2, [r3, #12]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f042 0201 	orr.w	r2, r2, #1
 8006a2c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f003 0307 	and.w	r3, r3, #7
 8006a38:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2b06      	cmp	r3, #6
 8006a3e:	d007      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f042 0201 	orr.w	r2, r2, #1
 8006a4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3714      	adds	r7, #20
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr

08006a5e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b082      	sub	sp, #8
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	f003 0302 	and.w	r3, r3, #2
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	d122      	bne.n	8006aba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	f003 0302 	and.w	r3, r3, #2
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d11b      	bne.n	8006aba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f06f 0202 	mvn.w	r2, #2
 8006a8a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	f003 0303 	and.w	r3, r3, #3
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d003      	beq.n	8006aa8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 f9a5 	bl	8006df0 <HAL_TIM_IC_CaptureCallback>
 8006aa6:	e005      	b.n	8006ab4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 f997 	bl	8006ddc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f9a8 	bl	8006e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	f003 0304 	and.w	r3, r3, #4
 8006ac4:	2b04      	cmp	r3, #4
 8006ac6:	d122      	bne.n	8006b0e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	f003 0304 	and.w	r3, r3, #4
 8006ad2:	2b04      	cmp	r3, #4
 8006ad4:	d11b      	bne.n	8006b0e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f06f 0204 	mvn.w	r2, #4
 8006ade:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d003      	beq.n	8006afc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 f97b 	bl	8006df0 <HAL_TIM_IC_CaptureCallback>
 8006afa:	e005      	b.n	8006b08 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 f96d 	bl	8006ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f97e 	bl	8006e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	f003 0308 	and.w	r3, r3, #8
 8006b18:	2b08      	cmp	r3, #8
 8006b1a:	d122      	bne.n	8006b62 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	f003 0308 	and.w	r3, r3, #8
 8006b26:	2b08      	cmp	r3, #8
 8006b28:	d11b      	bne.n	8006b62 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f06f 0208 	mvn.w	r2, #8
 8006b32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2204      	movs	r2, #4
 8006b38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	69db      	ldr	r3, [r3, #28]
 8006b40:	f003 0303 	and.w	r3, r3, #3
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d003      	beq.n	8006b50 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 f951 	bl	8006df0 <HAL_TIM_IC_CaptureCallback>
 8006b4e:	e005      	b.n	8006b5c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 f943 	bl	8006ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f954 	bl	8006e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	f003 0310 	and.w	r3, r3, #16
 8006b6c:	2b10      	cmp	r3, #16
 8006b6e:	d122      	bne.n	8006bb6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	f003 0310 	and.w	r3, r3, #16
 8006b7a:	2b10      	cmp	r3, #16
 8006b7c:	d11b      	bne.n	8006bb6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f06f 0210 	mvn.w	r2, #16
 8006b86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2208      	movs	r2, #8
 8006b8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	69db      	ldr	r3, [r3, #28]
 8006b94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d003      	beq.n	8006ba4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f927 	bl	8006df0 <HAL_TIM_IC_CaptureCallback>
 8006ba2:	e005      	b.n	8006bb0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 f919 	bl	8006ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f92a 	bl	8006e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	f003 0301 	and.w	r3, r3, #1
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d10e      	bne.n	8006be2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d107      	bne.n	8006be2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f06f 0201 	mvn.w	r2, #1
 8006bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f7fd f845 	bl	8003c6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bec:	2b80      	cmp	r3, #128	; 0x80
 8006bee:	d10e      	bne.n	8006c0e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bfa:	2b80      	cmp	r3, #128	; 0x80
 8006bfc:	d107      	bne.n	8006c0e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 faa1 	bl	8007150 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c18:	2b40      	cmp	r3, #64	; 0x40
 8006c1a:	d10e      	bne.n	8006c3a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c26:	2b40      	cmp	r3, #64	; 0x40
 8006c28:	d107      	bne.n	8006c3a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 f8ef 	bl	8006e18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	f003 0320 	and.w	r3, r3, #32
 8006c44:	2b20      	cmp	r3, #32
 8006c46:	d10e      	bne.n	8006c66 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	f003 0320 	and.w	r3, r3, #32
 8006c52:	2b20      	cmp	r3, #32
 8006c54:	d107      	bne.n	8006c66 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f06f 0220 	mvn.w	r2, #32
 8006c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 fa6b 	bl	800713c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c66:	bf00      	nop
 8006c68:	3708      	adds	r7, #8
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b084      	sub	sp, #16
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
 8006c76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d101      	bne.n	8006c86 <HAL_TIM_ConfigClockSource+0x18>
 8006c82:	2302      	movs	r3, #2
 8006c84:	e0a6      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x166>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2202      	movs	r2, #2
 8006c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ca4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cac:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2b40      	cmp	r3, #64	; 0x40
 8006cbc:	d067      	beq.n	8006d8e <HAL_TIM_ConfigClockSource+0x120>
 8006cbe:	2b40      	cmp	r3, #64	; 0x40
 8006cc0:	d80b      	bhi.n	8006cda <HAL_TIM_ConfigClockSource+0x6c>
 8006cc2:	2b10      	cmp	r3, #16
 8006cc4:	d073      	beq.n	8006dae <HAL_TIM_ConfigClockSource+0x140>
 8006cc6:	2b10      	cmp	r3, #16
 8006cc8:	d802      	bhi.n	8006cd0 <HAL_TIM_ConfigClockSource+0x62>
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d06f      	beq.n	8006dae <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006cce:	e078      	b.n	8006dc2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006cd0:	2b20      	cmp	r3, #32
 8006cd2:	d06c      	beq.n	8006dae <HAL_TIM_ConfigClockSource+0x140>
 8006cd4:	2b30      	cmp	r3, #48	; 0x30
 8006cd6:	d06a      	beq.n	8006dae <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006cd8:	e073      	b.n	8006dc2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006cda:	2b70      	cmp	r3, #112	; 0x70
 8006cdc:	d00d      	beq.n	8006cfa <HAL_TIM_ConfigClockSource+0x8c>
 8006cde:	2b70      	cmp	r3, #112	; 0x70
 8006ce0:	d804      	bhi.n	8006cec <HAL_TIM_ConfigClockSource+0x7e>
 8006ce2:	2b50      	cmp	r3, #80	; 0x50
 8006ce4:	d033      	beq.n	8006d4e <HAL_TIM_ConfigClockSource+0xe0>
 8006ce6:	2b60      	cmp	r3, #96	; 0x60
 8006ce8:	d041      	beq.n	8006d6e <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006cea:	e06a      	b.n	8006dc2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cf0:	d066      	beq.n	8006dc0 <HAL_TIM_ConfigClockSource+0x152>
 8006cf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cf6:	d017      	beq.n	8006d28 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006cf8:	e063      	b.n	8006dc2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6818      	ldr	r0, [r3, #0]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	6899      	ldr	r1, [r3, #8]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	685a      	ldr	r2, [r3, #4]
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	f000 f989 	bl	8007020 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d1c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	609a      	str	r2, [r3, #8]
      break;
 8006d26:	e04c      	b.n	8006dc2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6818      	ldr	r0, [r3, #0]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	6899      	ldr	r1, [r3, #8]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	685a      	ldr	r2, [r3, #4]
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	f000 f972 	bl	8007020 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689a      	ldr	r2, [r3, #8]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d4a:	609a      	str	r2, [r3, #8]
      break;
 8006d4c:	e039      	b.n	8006dc2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6818      	ldr	r0, [r3, #0]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	6859      	ldr	r1, [r3, #4]
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	f000 f8e6 	bl	8006f2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2150      	movs	r1, #80	; 0x50
 8006d66:	4618      	mov	r0, r3
 8006d68:	f000 f93f 	bl	8006fea <TIM_ITRx_SetConfig>
      break;
 8006d6c:	e029      	b.n	8006dc2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6818      	ldr	r0, [r3, #0]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	6859      	ldr	r1, [r3, #4]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	f000 f905 	bl	8006f8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2160      	movs	r1, #96	; 0x60
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 f92f 	bl	8006fea <TIM_ITRx_SetConfig>
      break;
 8006d8c:	e019      	b.n	8006dc2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6818      	ldr	r0, [r3, #0]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	6859      	ldr	r1, [r3, #4]
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	f000 f8c6 	bl	8006f2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2140      	movs	r1, #64	; 0x40
 8006da6:	4618      	mov	r0, r3
 8006da8:	f000 f91f 	bl	8006fea <TIM_ITRx_SetConfig>
      break;
 8006dac:	e009      	b.n	8006dc2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4619      	mov	r1, r3
 8006db8:	4610      	mov	r0, r2
 8006dba:	f000 f916 	bl	8006fea <TIM_ITRx_SetConfig>
      break;
 8006dbe:	e000      	b.n	8006dc2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006dc0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a34      	ldr	r2, [pc, #208]	; (8006f10 <TIM_Base_SetConfig+0xe4>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d00f      	beq.n	8006e64 <TIM_Base_SetConfig+0x38>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e4a:	d00b      	beq.n	8006e64 <TIM_Base_SetConfig+0x38>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a31      	ldr	r2, [pc, #196]	; (8006f14 <TIM_Base_SetConfig+0xe8>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d007      	beq.n	8006e64 <TIM_Base_SetConfig+0x38>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a30      	ldr	r2, [pc, #192]	; (8006f18 <TIM_Base_SetConfig+0xec>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d003      	beq.n	8006e64 <TIM_Base_SetConfig+0x38>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a2f      	ldr	r2, [pc, #188]	; (8006f1c <TIM_Base_SetConfig+0xf0>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d108      	bne.n	8006e76 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a25      	ldr	r2, [pc, #148]	; (8006f10 <TIM_Base_SetConfig+0xe4>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d01b      	beq.n	8006eb6 <TIM_Base_SetConfig+0x8a>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e84:	d017      	beq.n	8006eb6 <TIM_Base_SetConfig+0x8a>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a22      	ldr	r2, [pc, #136]	; (8006f14 <TIM_Base_SetConfig+0xe8>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d013      	beq.n	8006eb6 <TIM_Base_SetConfig+0x8a>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a21      	ldr	r2, [pc, #132]	; (8006f18 <TIM_Base_SetConfig+0xec>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d00f      	beq.n	8006eb6 <TIM_Base_SetConfig+0x8a>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a20      	ldr	r2, [pc, #128]	; (8006f1c <TIM_Base_SetConfig+0xf0>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d00b      	beq.n	8006eb6 <TIM_Base_SetConfig+0x8a>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a1f      	ldr	r2, [pc, #124]	; (8006f20 <TIM_Base_SetConfig+0xf4>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d007      	beq.n	8006eb6 <TIM_Base_SetConfig+0x8a>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a1e      	ldr	r2, [pc, #120]	; (8006f24 <TIM_Base_SetConfig+0xf8>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d003      	beq.n	8006eb6 <TIM_Base_SetConfig+0x8a>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a1d      	ldr	r2, [pc, #116]	; (8006f28 <TIM_Base_SetConfig+0xfc>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d108      	bne.n	8006ec8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ebc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	695b      	ldr	r3, [r3, #20]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	689a      	ldr	r2, [r3, #8]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a08      	ldr	r2, [pc, #32]	; (8006f10 <TIM_Base_SetConfig+0xe4>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d103      	bne.n	8006efc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	691a      	ldr	r2, [r3, #16]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	615a      	str	r2, [r3, #20]
}
 8006f02:	bf00      	nop
 8006f04:	3714      	adds	r7, #20
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	40010000 	.word	0x40010000
 8006f14:	40000400 	.word	0x40000400
 8006f18:	40000800 	.word	0x40000800
 8006f1c:	40000c00 	.word	0x40000c00
 8006f20:	40014000 	.word	0x40014000
 8006f24:	40014400 	.word	0x40014400
 8006f28:	40014800 	.word	0x40014800

08006f2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b087      	sub	sp, #28
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6a1b      	ldr	r3, [r3, #32]
 8006f3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6a1b      	ldr	r3, [r3, #32]
 8006f42:	f023 0201 	bic.w	r2, r3, #1
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	011b      	lsls	r3, r3, #4
 8006f5c:	693a      	ldr	r2, [r7, #16]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	f023 030a 	bic.w	r3, r3, #10
 8006f68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	621a      	str	r2, [r3, #32]
}
 8006f7e:	bf00      	nop
 8006f80:	371c      	adds	r7, #28
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr

08006f8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f8a:	b480      	push	{r7}
 8006f8c:	b087      	sub	sp, #28
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	60f8      	str	r0, [r7, #12]
 8006f92:	60b9      	str	r1, [r7, #8]
 8006f94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6a1b      	ldr	r3, [r3, #32]
 8006f9a:	f023 0210 	bic.w	r2, r3, #16
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6a1b      	ldr	r3, [r3, #32]
 8006fac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006fb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	031b      	lsls	r3, r3, #12
 8006fba:	697a      	ldr	r2, [r7, #20]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006fc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	011b      	lsls	r3, r3, #4
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	697a      	ldr	r2, [r7, #20]
 8006fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	693a      	ldr	r2, [r7, #16]
 8006fdc:	621a      	str	r2, [r3, #32]
}
 8006fde:	bf00      	nop
 8006fe0:	371c      	adds	r7, #28
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr

08006fea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fea:	b480      	push	{r7}
 8006fec:	b085      	sub	sp, #20
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
 8006ff2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007000:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007002:	683a      	ldr	r2, [r7, #0]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	4313      	orrs	r3, r2
 8007008:	f043 0307 	orr.w	r3, r3, #7
 800700c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	609a      	str	r2, [r3, #8]
}
 8007014:	bf00      	nop
 8007016:	3714      	adds	r7, #20
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007020:	b480      	push	{r7}
 8007022:	b087      	sub	sp, #28
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]
 800702c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800703a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	021a      	lsls	r2, r3, #8
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	431a      	orrs	r2, r3
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	4313      	orrs	r3, r2
 8007048:	697a      	ldr	r2, [r7, #20]
 800704a:	4313      	orrs	r3, r2
 800704c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	697a      	ldr	r2, [r7, #20]
 8007052:	609a      	str	r2, [r3, #8]
}
 8007054:	bf00      	nop
 8007056:	371c      	adds	r7, #28
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007070:	2b01      	cmp	r3, #1
 8007072:	d101      	bne.n	8007078 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007074:	2302      	movs	r3, #2
 8007076:	e050      	b.n	800711a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2202      	movs	r2, #2
 8007084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800709e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a1c      	ldr	r2, [pc, #112]	; (8007128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d018      	beq.n	80070ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070c4:	d013      	beq.n	80070ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a18      	ldr	r2, [pc, #96]	; (800712c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d00e      	beq.n	80070ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a16      	ldr	r2, [pc, #88]	; (8007130 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d009      	beq.n	80070ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a15      	ldr	r2, [pc, #84]	; (8007134 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d004      	beq.n	80070ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a13      	ldr	r2, [pc, #76]	; (8007138 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d10c      	bne.n	8007108 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3714      	adds	r7, #20
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	40010000 	.word	0x40010000
 800712c:	40000400 	.word	0x40000400
 8007130:	40000800 	.word	0x40000800
 8007134:	40000c00 	.word	0x40000c00
 8007138:	40014000 	.word	0x40014000

0800713c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007144:	bf00      	nop
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007158:	bf00      	nop
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e03f      	b.n	80071f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b00      	cmp	r3, #0
 8007180:	d106      	bne.n	8007190 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7fc ff16 	bl	8003fbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2224      	movs	r2, #36	; 0x24
 8007194:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68da      	ldr	r2, [r3, #12]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 fba1 	bl	80078f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	691a      	ldr	r2, [r3, #16]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	695a      	ldr	r2, [r3, #20]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68da      	ldr	r2, [r3, #12]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2220      	movs	r2, #32
 80071e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2220      	movs	r2, #32
 80071f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3708      	adds	r7, #8
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b088      	sub	sp, #32
 8007202:	af02      	add	r7, sp, #8
 8007204:	60f8      	str	r0, [r7, #12]
 8007206:	60b9      	str	r1, [r7, #8]
 8007208:	603b      	str	r3, [r7, #0]
 800720a:	4613      	mov	r3, r2
 800720c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800720e:	2300      	movs	r3, #0
 8007210:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b20      	cmp	r3, #32
 800721c:	f040 8083 	bne.w	8007326 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d002      	beq.n	800722c <HAL_UART_Transmit+0x2e>
 8007226:	88fb      	ldrh	r3, [r7, #6]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d101      	bne.n	8007230 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e07b      	b.n	8007328 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007236:	2b01      	cmp	r3, #1
 8007238:	d101      	bne.n	800723e <HAL_UART_Transmit+0x40>
 800723a:	2302      	movs	r3, #2
 800723c:	e074      	b.n	8007328 <HAL_UART_Transmit+0x12a>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2221      	movs	r2, #33	; 0x21
 8007250:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007254:	f7fd f83a 	bl	80042cc <HAL_GetTick>
 8007258:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	88fa      	ldrh	r2, [r7, #6]
 800725e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	88fa      	ldrh	r2, [r7, #6]
 8007264:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800726e:	e042      	b.n	80072f6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007274:	b29b      	uxth	r3, r3
 8007276:	3b01      	subs	r3, #1
 8007278:	b29a      	uxth	r2, r3
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007286:	d122      	bne.n	80072ce <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	9300      	str	r3, [sp, #0]
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	2200      	movs	r2, #0
 8007290:	2180      	movs	r1, #128	; 0x80
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f000 f9c0 	bl	8007618 <UART_WaitOnFlagUntilTimeout>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d001      	beq.n	80072a2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e042      	b.n	8007328 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	881b      	ldrh	r3, [r3, #0]
 80072aa:	461a      	mov	r2, r3
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072b4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d103      	bne.n	80072c6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	3302      	adds	r3, #2
 80072c2:	60bb      	str	r3, [r7, #8]
 80072c4:	e017      	b.n	80072f6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	3301      	adds	r3, #1
 80072ca:	60bb      	str	r3, [r7, #8]
 80072cc:	e013      	b.n	80072f6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	9300      	str	r3, [sp, #0]
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	2200      	movs	r2, #0
 80072d6:	2180      	movs	r1, #128	; 0x80
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f000 f99d 	bl	8007618 <UART_WaitOnFlagUntilTimeout>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d001      	beq.n	80072e8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e01f      	b.n	8007328 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	1c5a      	adds	r2, r3, #1
 80072ec:	60ba      	str	r2, [r7, #8]
 80072ee:	781a      	ldrb	r2, [r3, #0]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1b7      	bne.n	8007270 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	2200      	movs	r2, #0
 8007308:	2140      	movs	r1, #64	; 0x40
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f000 f984 	bl	8007618 <UART_WaitOnFlagUntilTimeout>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d001      	beq.n	800731a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8007316:	2303      	movs	r3, #3
 8007318:	e006      	b.n	8007328 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2220      	movs	r2, #32
 800731e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007322:	2300      	movs	r3, #0
 8007324:	e000      	b.n	8007328 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007326:	2302      	movs	r3, #2
  }
}
 8007328:	4618      	mov	r0, r3
 800732a:	3718      	adds	r7, #24
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	4613      	mov	r3, r2
 800733c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007344:	b2db      	uxtb	r3, r3
 8007346:	2b20      	cmp	r3, #32
 8007348:	d140      	bne.n	80073cc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d002      	beq.n	8007356 <HAL_UART_Receive_IT+0x26>
 8007350:	88fb      	ldrh	r3, [r7, #6]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d101      	bne.n	800735a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e039      	b.n	80073ce <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007360:	2b01      	cmp	r3, #1
 8007362:	d101      	bne.n	8007368 <HAL_UART_Receive_IT+0x38>
 8007364:	2302      	movs	r3, #2
 8007366:	e032      	b.n	80073ce <HAL_UART_Receive_IT+0x9e>
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	88fa      	ldrh	r2, [r7, #6]
 800737a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	88fa      	ldrh	r2, [r7, #6]
 8007380:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2222      	movs	r2, #34	; 0x22
 800738c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68da      	ldr	r2, [r3, #12]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073a6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	695a      	ldr	r2, [r3, #20]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f042 0201 	orr.w	r2, r2, #1
 80073b6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68da      	ldr	r2, [r3, #12]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f042 0220 	orr.w	r2, r2, #32
 80073c6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80073c8:	2300      	movs	r3, #0
 80073ca:	e000      	b.n	80073ce <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80073cc:	2302      	movs	r3, #2
  }
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3714      	adds	r7, #20
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
	...

080073dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b088      	sub	sp, #32
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80073fc:	2300      	movs	r3, #0
 80073fe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007400:	2300      	movs	r3, #0
 8007402:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	f003 030f 	and.w	r3, r3, #15
 800740a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10d      	bne.n	800742e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	f003 0320 	and.w	r3, r3, #32
 8007418:	2b00      	cmp	r3, #0
 800741a:	d008      	beq.n	800742e <HAL_UART_IRQHandler+0x52>
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	f003 0320 	and.w	r3, r3, #32
 8007422:	2b00      	cmp	r3, #0
 8007424:	d003      	beq.n	800742e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f9e0 	bl	80077ec <UART_Receive_IT>
      return;
 800742c:	e0d1      	b.n	80075d2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	2b00      	cmp	r3, #0
 8007432:	f000 80b0 	beq.w	8007596 <HAL_UART_IRQHandler+0x1ba>
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	f003 0301 	and.w	r3, r3, #1
 800743c:	2b00      	cmp	r3, #0
 800743e:	d105      	bne.n	800744c <HAL_UART_IRQHandler+0x70>
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007446:	2b00      	cmp	r3, #0
 8007448:	f000 80a5 	beq.w	8007596 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	f003 0301 	and.w	r3, r3, #1
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00a      	beq.n	800746c <HAL_UART_IRQHandler+0x90>
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800745c:	2b00      	cmp	r3, #0
 800745e:	d005      	beq.n	800746c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007464:	f043 0201 	orr.w	r2, r3, #1
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	f003 0304 	and.w	r3, r3, #4
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00a      	beq.n	800748c <HAL_UART_IRQHandler+0xb0>
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	f003 0301 	and.w	r3, r3, #1
 800747c:	2b00      	cmp	r3, #0
 800747e:	d005      	beq.n	800748c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007484:	f043 0202 	orr.w	r2, r3, #2
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	f003 0302 	and.w	r3, r3, #2
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00a      	beq.n	80074ac <HAL_UART_IRQHandler+0xd0>
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	f003 0301 	and.w	r3, r3, #1
 800749c:	2b00      	cmp	r3, #0
 800749e:	d005      	beq.n	80074ac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074a4:	f043 0204 	orr.w	r2, r3, #4
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	f003 0308 	and.w	r3, r3, #8
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00f      	beq.n	80074d6 <HAL_UART_IRQHandler+0xfa>
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	f003 0320 	and.w	r3, r3, #32
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d104      	bne.n	80074ca <HAL_UART_IRQHandler+0xee>
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d005      	beq.n	80074d6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ce:	f043 0208 	orr.w	r2, r3, #8
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d078      	beq.n	80075d0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	f003 0320 	and.w	r3, r3, #32
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d007      	beq.n	80074f8 <HAL_UART_IRQHandler+0x11c>
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	f003 0320 	and.w	r3, r3, #32
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d002      	beq.n	80074f8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f97a 	bl	80077ec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	695b      	ldr	r3, [r3, #20]
 80074fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007502:	2b40      	cmp	r3, #64	; 0x40
 8007504:	bf0c      	ite	eq
 8007506:	2301      	moveq	r3, #1
 8007508:	2300      	movne	r3, #0
 800750a:	b2db      	uxtb	r3, r3
 800750c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007512:	f003 0308 	and.w	r3, r3, #8
 8007516:	2b00      	cmp	r3, #0
 8007518:	d102      	bne.n	8007520 <HAL_UART_IRQHandler+0x144>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d031      	beq.n	8007584 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 f8c3 	bl	80076ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	695b      	ldr	r3, [r3, #20]
 800752c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007530:	2b40      	cmp	r3, #64	; 0x40
 8007532:	d123      	bne.n	800757c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	695a      	ldr	r2, [r3, #20]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007542:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007548:	2b00      	cmp	r3, #0
 800754a:	d013      	beq.n	8007574 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007550:	4a21      	ldr	r2, [pc, #132]	; (80075d8 <HAL_UART_IRQHandler+0x1fc>)
 8007552:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007558:	4618      	mov	r0, r3
 800755a:	f7fd fe15 	bl	8005188 <HAL_DMA_Abort_IT>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d016      	beq.n	8007592 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800756e:	4610      	mov	r0, r2
 8007570:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007572:	e00e      	b.n	8007592 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 f845 	bl	8007604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800757a:	e00a      	b.n	8007592 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 f841 	bl	8007604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007582:	e006      	b.n	8007592 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 f83d 	bl	8007604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007590:	e01e      	b.n	80075d0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007592:	bf00      	nop
    return;
 8007594:	e01c      	b.n	80075d0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800759c:	2b00      	cmp	r3, #0
 800759e:	d008      	beq.n	80075b2 <HAL_UART_IRQHandler+0x1d6>
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d003      	beq.n	80075b2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 f8b0 	bl	8007710 <UART_Transmit_IT>
    return;
 80075b0:	e00f      	b.n	80075d2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00a      	beq.n	80075d2 <HAL_UART_IRQHandler+0x1f6>
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d005      	beq.n	80075d2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f8f8 	bl	80077bc <UART_EndTransmit_IT>
    return;
 80075cc:	bf00      	nop
 80075ce:	e000      	b.n	80075d2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80075d0:	bf00      	nop
  }
}
 80075d2:	3720      	adds	r7, #32
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	080076e9 	.word	0x080076e9

080075dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	603b      	str	r3, [r7, #0]
 8007624:	4613      	mov	r3, r2
 8007626:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007628:	e02c      	b.n	8007684 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007630:	d028      	beq.n	8007684 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d007      	beq.n	8007648 <UART_WaitOnFlagUntilTimeout+0x30>
 8007638:	f7fc fe48 	bl	80042cc <HAL_GetTick>
 800763c:	4602      	mov	r2, r0
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	69ba      	ldr	r2, [r7, #24]
 8007644:	429a      	cmp	r2, r3
 8007646:	d21d      	bcs.n	8007684 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68da      	ldr	r2, [r3, #12]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007656:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	695a      	ldr	r2, [r3, #20]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f022 0201 	bic.w	r2, r2, #1
 8007666:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2220      	movs	r2, #32
 800766c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2220      	movs	r2, #32
 8007674:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007680:	2303      	movs	r3, #3
 8007682:	e00f      	b.n	80076a4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	4013      	ands	r3, r2
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	429a      	cmp	r2, r3
 8007692:	bf0c      	ite	eq
 8007694:	2301      	moveq	r3, #1
 8007696:	2300      	movne	r3, #0
 8007698:	b2db      	uxtb	r3, r3
 800769a:	461a      	mov	r2, r3
 800769c:	79fb      	ldrb	r3, [r7, #7]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d0c3      	beq.n	800762a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68da      	ldr	r2, [r3, #12]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80076c2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	695a      	ldr	r2, [r3, #20]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f022 0201 	bic.w	r2, r2, #1
 80076d2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2220      	movs	r2, #32
 80076d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f7ff ff7e 	bl	8007604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007708:	bf00      	nop
 800770a:	3710      	adds	r7, #16
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800771e:	b2db      	uxtb	r3, r3
 8007720:	2b21      	cmp	r3, #33	; 0x21
 8007722:	d144      	bne.n	80077ae <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800772c:	d11a      	bne.n	8007764 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a1b      	ldr	r3, [r3, #32]
 8007732:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	881b      	ldrh	r3, [r3, #0]
 8007738:	461a      	mov	r2, r3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007742:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d105      	bne.n	8007758 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a1b      	ldr	r3, [r3, #32]
 8007750:	1c9a      	adds	r2, r3, #2
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	621a      	str	r2, [r3, #32]
 8007756:	e00e      	b.n	8007776 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6a1b      	ldr	r3, [r3, #32]
 800775c:	1c5a      	adds	r2, r3, #1
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	621a      	str	r2, [r3, #32]
 8007762:	e008      	b.n	8007776 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a1b      	ldr	r3, [r3, #32]
 8007768:	1c59      	adds	r1, r3, #1
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	6211      	str	r1, [r2, #32]
 800776e:	781a      	ldrb	r2, [r3, #0]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800777a:	b29b      	uxth	r3, r3
 800777c:	3b01      	subs	r3, #1
 800777e:	b29b      	uxth	r3, r3
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	4619      	mov	r1, r3
 8007784:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10f      	bne.n	80077aa <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68da      	ldr	r2, [r3, #12]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007798:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68da      	ldr	r2, [r3, #12]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077a8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	e000      	b.n	80077b0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80077ae:	2302      	movs	r3, #2
  }
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3714      	adds	r7, #20
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68da      	ldr	r2, [r3, #12]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077d2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2220      	movs	r2, #32
 80077d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f7ff fefd 	bl	80075dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3708      	adds	r7, #8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	2b22      	cmp	r3, #34	; 0x22
 80077fe:	d171      	bne.n	80078e4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007808:	d123      	bne.n	8007852 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800780e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d10e      	bne.n	8007836 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	b29b      	uxth	r3, r3
 8007820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007824:	b29a      	uxth	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800782e:	1c9a      	adds	r2, r3, #2
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	629a      	str	r2, [r3, #40]	; 0x28
 8007834:	e029      	b.n	800788a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	b29b      	uxth	r3, r3
 800783e:	b2db      	uxtb	r3, r3
 8007840:	b29a      	uxth	r2, r3
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800784a:	1c5a      	adds	r2, r3, #1
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	629a      	str	r2, [r3, #40]	; 0x28
 8007850:	e01b      	b.n	800788a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10a      	bne.n	8007870 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	6858      	ldr	r0, [r3, #4]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007864:	1c59      	adds	r1, r3, #1
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	6291      	str	r1, [r2, #40]	; 0x28
 800786a:	b2c2      	uxtb	r2, r0
 800786c:	701a      	strb	r2, [r3, #0]
 800786e:	e00c      	b.n	800788a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	b2da      	uxtb	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800787c:	1c58      	adds	r0, r3, #1
 800787e:	6879      	ldr	r1, [r7, #4]
 8007880:	6288      	str	r0, [r1, #40]	; 0x28
 8007882:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007886:	b2d2      	uxtb	r2, r2
 8007888:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800788e:	b29b      	uxth	r3, r3
 8007890:	3b01      	subs	r3, #1
 8007892:	b29b      	uxth	r3, r3
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	4619      	mov	r1, r3
 8007898:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800789a:	2b00      	cmp	r3, #0
 800789c:	d120      	bne.n	80078e0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68da      	ldr	r2, [r3, #12]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f022 0220 	bic.w	r2, r2, #32
 80078ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68da      	ldr	r2, [r3, #12]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	695a      	ldr	r2, [r3, #20]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f022 0201 	bic.w	r2, r2, #1
 80078cc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2220      	movs	r2, #32
 80078d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f7ff fe8a 	bl	80075f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80078dc:	2300      	movs	r3, #0
 80078de:	e002      	b.n	80078e6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80078e0:	2300      	movs	r3, #0
 80078e2:	e000      	b.n	80078e6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80078e4:	2302      	movs	r3, #2
  }
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
	...

080078f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f4:	b085      	sub	sp, #20
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	68da      	ldr	r2, [r3, #12]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	430a      	orrs	r2, r1
 800790e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	689a      	ldr	r2, [r3, #8]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	431a      	orrs	r2, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	695b      	ldr	r3, [r3, #20]
 800791e:	431a      	orrs	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	69db      	ldr	r3, [r3, #28]
 8007924:	4313      	orrs	r3, r2
 8007926:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007932:	f023 030c 	bic.w	r3, r3, #12
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	6812      	ldr	r2, [r2, #0]
 800793a:	68f9      	ldr	r1, [r7, #12]
 800793c:	430b      	orrs	r3, r1
 800793e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	695b      	ldr	r3, [r3, #20]
 8007946:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	699a      	ldr	r2, [r3, #24]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	430a      	orrs	r2, r1
 8007954:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	69db      	ldr	r3, [r3, #28]
 800795a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800795e:	f040 818b 	bne.w	8007c78 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4ac1      	ldr	r2, [pc, #772]	; (8007c6c <UART_SetConfig+0x37c>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d005      	beq.n	8007978 <UART_SetConfig+0x88>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4abf      	ldr	r2, [pc, #764]	; (8007c70 <UART_SetConfig+0x380>)
 8007972:	4293      	cmp	r3, r2
 8007974:	f040 80bd 	bne.w	8007af2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007978:	f7fe fc92 	bl	80062a0 <HAL_RCC_GetPCLK2Freq>
 800797c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	461d      	mov	r5, r3
 8007982:	f04f 0600 	mov.w	r6, #0
 8007986:	46a8      	mov	r8, r5
 8007988:	46b1      	mov	r9, r6
 800798a:	eb18 0308 	adds.w	r3, r8, r8
 800798e:	eb49 0409 	adc.w	r4, r9, r9
 8007992:	4698      	mov	r8, r3
 8007994:	46a1      	mov	r9, r4
 8007996:	eb18 0805 	adds.w	r8, r8, r5
 800799a:	eb49 0906 	adc.w	r9, r9, r6
 800799e:	f04f 0100 	mov.w	r1, #0
 80079a2:	f04f 0200 	mov.w	r2, #0
 80079a6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80079aa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80079ae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80079b2:	4688      	mov	r8, r1
 80079b4:	4691      	mov	r9, r2
 80079b6:	eb18 0005 	adds.w	r0, r8, r5
 80079ba:	eb49 0106 	adc.w	r1, r9, r6
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	461d      	mov	r5, r3
 80079c4:	f04f 0600 	mov.w	r6, #0
 80079c8:	196b      	adds	r3, r5, r5
 80079ca:	eb46 0406 	adc.w	r4, r6, r6
 80079ce:	461a      	mov	r2, r3
 80079d0:	4623      	mov	r3, r4
 80079d2:	f7f9 f92b 	bl	8000c2c <__aeabi_uldivmod>
 80079d6:	4603      	mov	r3, r0
 80079d8:	460c      	mov	r4, r1
 80079da:	461a      	mov	r2, r3
 80079dc:	4ba5      	ldr	r3, [pc, #660]	; (8007c74 <UART_SetConfig+0x384>)
 80079de:	fba3 2302 	umull	r2, r3, r3, r2
 80079e2:	095b      	lsrs	r3, r3, #5
 80079e4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	461d      	mov	r5, r3
 80079ec:	f04f 0600 	mov.w	r6, #0
 80079f0:	46a9      	mov	r9, r5
 80079f2:	46b2      	mov	sl, r6
 80079f4:	eb19 0309 	adds.w	r3, r9, r9
 80079f8:	eb4a 040a 	adc.w	r4, sl, sl
 80079fc:	4699      	mov	r9, r3
 80079fe:	46a2      	mov	sl, r4
 8007a00:	eb19 0905 	adds.w	r9, r9, r5
 8007a04:	eb4a 0a06 	adc.w	sl, sl, r6
 8007a08:	f04f 0100 	mov.w	r1, #0
 8007a0c:	f04f 0200 	mov.w	r2, #0
 8007a10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a1c:	4689      	mov	r9, r1
 8007a1e:	4692      	mov	sl, r2
 8007a20:	eb19 0005 	adds.w	r0, r9, r5
 8007a24:	eb4a 0106 	adc.w	r1, sl, r6
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	461d      	mov	r5, r3
 8007a2e:	f04f 0600 	mov.w	r6, #0
 8007a32:	196b      	adds	r3, r5, r5
 8007a34:	eb46 0406 	adc.w	r4, r6, r6
 8007a38:	461a      	mov	r2, r3
 8007a3a:	4623      	mov	r3, r4
 8007a3c:	f7f9 f8f6 	bl	8000c2c <__aeabi_uldivmod>
 8007a40:	4603      	mov	r3, r0
 8007a42:	460c      	mov	r4, r1
 8007a44:	461a      	mov	r2, r3
 8007a46:	4b8b      	ldr	r3, [pc, #556]	; (8007c74 <UART_SetConfig+0x384>)
 8007a48:	fba3 1302 	umull	r1, r3, r3, r2
 8007a4c:	095b      	lsrs	r3, r3, #5
 8007a4e:	2164      	movs	r1, #100	; 0x64
 8007a50:	fb01 f303 	mul.w	r3, r1, r3
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	00db      	lsls	r3, r3, #3
 8007a58:	3332      	adds	r3, #50	; 0x32
 8007a5a:	4a86      	ldr	r2, [pc, #536]	; (8007c74 <UART_SetConfig+0x384>)
 8007a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a60:	095b      	lsrs	r3, r3, #5
 8007a62:	005b      	lsls	r3, r3, #1
 8007a64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007a68:	4498      	add	r8, r3
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	461d      	mov	r5, r3
 8007a6e:	f04f 0600 	mov.w	r6, #0
 8007a72:	46a9      	mov	r9, r5
 8007a74:	46b2      	mov	sl, r6
 8007a76:	eb19 0309 	adds.w	r3, r9, r9
 8007a7a:	eb4a 040a 	adc.w	r4, sl, sl
 8007a7e:	4699      	mov	r9, r3
 8007a80:	46a2      	mov	sl, r4
 8007a82:	eb19 0905 	adds.w	r9, r9, r5
 8007a86:	eb4a 0a06 	adc.w	sl, sl, r6
 8007a8a:	f04f 0100 	mov.w	r1, #0
 8007a8e:	f04f 0200 	mov.w	r2, #0
 8007a92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a96:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a9a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a9e:	4689      	mov	r9, r1
 8007aa0:	4692      	mov	sl, r2
 8007aa2:	eb19 0005 	adds.w	r0, r9, r5
 8007aa6:	eb4a 0106 	adc.w	r1, sl, r6
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	461d      	mov	r5, r3
 8007ab0:	f04f 0600 	mov.w	r6, #0
 8007ab4:	196b      	adds	r3, r5, r5
 8007ab6:	eb46 0406 	adc.w	r4, r6, r6
 8007aba:	461a      	mov	r2, r3
 8007abc:	4623      	mov	r3, r4
 8007abe:	f7f9 f8b5 	bl	8000c2c <__aeabi_uldivmod>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	460c      	mov	r4, r1
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	4b6a      	ldr	r3, [pc, #424]	; (8007c74 <UART_SetConfig+0x384>)
 8007aca:	fba3 1302 	umull	r1, r3, r3, r2
 8007ace:	095b      	lsrs	r3, r3, #5
 8007ad0:	2164      	movs	r1, #100	; 0x64
 8007ad2:	fb01 f303 	mul.w	r3, r1, r3
 8007ad6:	1ad3      	subs	r3, r2, r3
 8007ad8:	00db      	lsls	r3, r3, #3
 8007ada:	3332      	adds	r3, #50	; 0x32
 8007adc:	4a65      	ldr	r2, [pc, #404]	; (8007c74 <UART_SetConfig+0x384>)
 8007ade:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae2:	095b      	lsrs	r3, r3, #5
 8007ae4:	f003 0207 	and.w	r2, r3, #7
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4442      	add	r2, r8
 8007aee:	609a      	str	r2, [r3, #8]
 8007af0:	e26f      	b.n	8007fd2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007af2:	f7fe fbc1 	bl	8006278 <HAL_RCC_GetPCLK1Freq>
 8007af6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	461d      	mov	r5, r3
 8007afc:	f04f 0600 	mov.w	r6, #0
 8007b00:	46a8      	mov	r8, r5
 8007b02:	46b1      	mov	r9, r6
 8007b04:	eb18 0308 	adds.w	r3, r8, r8
 8007b08:	eb49 0409 	adc.w	r4, r9, r9
 8007b0c:	4698      	mov	r8, r3
 8007b0e:	46a1      	mov	r9, r4
 8007b10:	eb18 0805 	adds.w	r8, r8, r5
 8007b14:	eb49 0906 	adc.w	r9, r9, r6
 8007b18:	f04f 0100 	mov.w	r1, #0
 8007b1c:	f04f 0200 	mov.w	r2, #0
 8007b20:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007b24:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007b28:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007b2c:	4688      	mov	r8, r1
 8007b2e:	4691      	mov	r9, r2
 8007b30:	eb18 0005 	adds.w	r0, r8, r5
 8007b34:	eb49 0106 	adc.w	r1, r9, r6
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	461d      	mov	r5, r3
 8007b3e:	f04f 0600 	mov.w	r6, #0
 8007b42:	196b      	adds	r3, r5, r5
 8007b44:	eb46 0406 	adc.w	r4, r6, r6
 8007b48:	461a      	mov	r2, r3
 8007b4a:	4623      	mov	r3, r4
 8007b4c:	f7f9 f86e 	bl	8000c2c <__aeabi_uldivmod>
 8007b50:	4603      	mov	r3, r0
 8007b52:	460c      	mov	r4, r1
 8007b54:	461a      	mov	r2, r3
 8007b56:	4b47      	ldr	r3, [pc, #284]	; (8007c74 <UART_SetConfig+0x384>)
 8007b58:	fba3 2302 	umull	r2, r3, r3, r2
 8007b5c:	095b      	lsrs	r3, r3, #5
 8007b5e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	461d      	mov	r5, r3
 8007b66:	f04f 0600 	mov.w	r6, #0
 8007b6a:	46a9      	mov	r9, r5
 8007b6c:	46b2      	mov	sl, r6
 8007b6e:	eb19 0309 	adds.w	r3, r9, r9
 8007b72:	eb4a 040a 	adc.w	r4, sl, sl
 8007b76:	4699      	mov	r9, r3
 8007b78:	46a2      	mov	sl, r4
 8007b7a:	eb19 0905 	adds.w	r9, r9, r5
 8007b7e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007b82:	f04f 0100 	mov.w	r1, #0
 8007b86:	f04f 0200 	mov.w	r2, #0
 8007b8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b8e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b92:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b96:	4689      	mov	r9, r1
 8007b98:	4692      	mov	sl, r2
 8007b9a:	eb19 0005 	adds.w	r0, r9, r5
 8007b9e:	eb4a 0106 	adc.w	r1, sl, r6
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	461d      	mov	r5, r3
 8007ba8:	f04f 0600 	mov.w	r6, #0
 8007bac:	196b      	adds	r3, r5, r5
 8007bae:	eb46 0406 	adc.w	r4, r6, r6
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	4623      	mov	r3, r4
 8007bb6:	f7f9 f839 	bl	8000c2c <__aeabi_uldivmod>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	460c      	mov	r4, r1
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	4b2c      	ldr	r3, [pc, #176]	; (8007c74 <UART_SetConfig+0x384>)
 8007bc2:	fba3 1302 	umull	r1, r3, r3, r2
 8007bc6:	095b      	lsrs	r3, r3, #5
 8007bc8:	2164      	movs	r1, #100	; 0x64
 8007bca:	fb01 f303 	mul.w	r3, r1, r3
 8007bce:	1ad3      	subs	r3, r2, r3
 8007bd0:	00db      	lsls	r3, r3, #3
 8007bd2:	3332      	adds	r3, #50	; 0x32
 8007bd4:	4a27      	ldr	r2, [pc, #156]	; (8007c74 <UART_SetConfig+0x384>)
 8007bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bda:	095b      	lsrs	r3, r3, #5
 8007bdc:	005b      	lsls	r3, r3, #1
 8007bde:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007be2:	4498      	add	r8, r3
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	461d      	mov	r5, r3
 8007be8:	f04f 0600 	mov.w	r6, #0
 8007bec:	46a9      	mov	r9, r5
 8007bee:	46b2      	mov	sl, r6
 8007bf0:	eb19 0309 	adds.w	r3, r9, r9
 8007bf4:	eb4a 040a 	adc.w	r4, sl, sl
 8007bf8:	4699      	mov	r9, r3
 8007bfa:	46a2      	mov	sl, r4
 8007bfc:	eb19 0905 	adds.w	r9, r9, r5
 8007c00:	eb4a 0a06 	adc.w	sl, sl, r6
 8007c04:	f04f 0100 	mov.w	r1, #0
 8007c08:	f04f 0200 	mov.w	r2, #0
 8007c0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c10:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c14:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c18:	4689      	mov	r9, r1
 8007c1a:	4692      	mov	sl, r2
 8007c1c:	eb19 0005 	adds.w	r0, r9, r5
 8007c20:	eb4a 0106 	adc.w	r1, sl, r6
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	461d      	mov	r5, r3
 8007c2a:	f04f 0600 	mov.w	r6, #0
 8007c2e:	196b      	adds	r3, r5, r5
 8007c30:	eb46 0406 	adc.w	r4, r6, r6
 8007c34:	461a      	mov	r2, r3
 8007c36:	4623      	mov	r3, r4
 8007c38:	f7f8 fff8 	bl	8000c2c <__aeabi_uldivmod>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	460c      	mov	r4, r1
 8007c40:	461a      	mov	r2, r3
 8007c42:	4b0c      	ldr	r3, [pc, #48]	; (8007c74 <UART_SetConfig+0x384>)
 8007c44:	fba3 1302 	umull	r1, r3, r3, r2
 8007c48:	095b      	lsrs	r3, r3, #5
 8007c4a:	2164      	movs	r1, #100	; 0x64
 8007c4c:	fb01 f303 	mul.w	r3, r1, r3
 8007c50:	1ad3      	subs	r3, r2, r3
 8007c52:	00db      	lsls	r3, r3, #3
 8007c54:	3332      	adds	r3, #50	; 0x32
 8007c56:	4a07      	ldr	r2, [pc, #28]	; (8007c74 <UART_SetConfig+0x384>)
 8007c58:	fba2 2303 	umull	r2, r3, r2, r3
 8007c5c:	095b      	lsrs	r3, r3, #5
 8007c5e:	f003 0207 	and.w	r2, r3, #7
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4442      	add	r2, r8
 8007c68:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007c6a:	e1b2      	b.n	8007fd2 <UART_SetConfig+0x6e2>
 8007c6c:	40011000 	.word	0x40011000
 8007c70:	40011400 	.word	0x40011400
 8007c74:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4ad7      	ldr	r2, [pc, #860]	; (8007fdc <UART_SetConfig+0x6ec>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d005      	beq.n	8007c8e <UART_SetConfig+0x39e>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4ad6      	ldr	r2, [pc, #856]	; (8007fe0 <UART_SetConfig+0x6f0>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	f040 80d1 	bne.w	8007e30 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c8e:	f7fe fb07 	bl	80062a0 <HAL_RCC_GetPCLK2Freq>
 8007c92:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	469a      	mov	sl, r3
 8007c98:	f04f 0b00 	mov.w	fp, #0
 8007c9c:	46d0      	mov	r8, sl
 8007c9e:	46d9      	mov	r9, fp
 8007ca0:	eb18 0308 	adds.w	r3, r8, r8
 8007ca4:	eb49 0409 	adc.w	r4, r9, r9
 8007ca8:	4698      	mov	r8, r3
 8007caa:	46a1      	mov	r9, r4
 8007cac:	eb18 080a 	adds.w	r8, r8, sl
 8007cb0:	eb49 090b 	adc.w	r9, r9, fp
 8007cb4:	f04f 0100 	mov.w	r1, #0
 8007cb8:	f04f 0200 	mov.w	r2, #0
 8007cbc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007cc0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007cc4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007cc8:	4688      	mov	r8, r1
 8007cca:	4691      	mov	r9, r2
 8007ccc:	eb1a 0508 	adds.w	r5, sl, r8
 8007cd0:	eb4b 0609 	adc.w	r6, fp, r9
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	4619      	mov	r1, r3
 8007cda:	f04f 0200 	mov.w	r2, #0
 8007cde:	f04f 0300 	mov.w	r3, #0
 8007ce2:	f04f 0400 	mov.w	r4, #0
 8007ce6:	0094      	lsls	r4, r2, #2
 8007ce8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007cec:	008b      	lsls	r3, r1, #2
 8007cee:	461a      	mov	r2, r3
 8007cf0:	4623      	mov	r3, r4
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	4631      	mov	r1, r6
 8007cf6:	f7f8 ff99 	bl	8000c2c <__aeabi_uldivmod>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	460c      	mov	r4, r1
 8007cfe:	461a      	mov	r2, r3
 8007d00:	4bb8      	ldr	r3, [pc, #736]	; (8007fe4 <UART_SetConfig+0x6f4>)
 8007d02:	fba3 2302 	umull	r2, r3, r3, r2
 8007d06:	095b      	lsrs	r3, r3, #5
 8007d08:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	469b      	mov	fp, r3
 8007d10:	f04f 0c00 	mov.w	ip, #0
 8007d14:	46d9      	mov	r9, fp
 8007d16:	46e2      	mov	sl, ip
 8007d18:	eb19 0309 	adds.w	r3, r9, r9
 8007d1c:	eb4a 040a 	adc.w	r4, sl, sl
 8007d20:	4699      	mov	r9, r3
 8007d22:	46a2      	mov	sl, r4
 8007d24:	eb19 090b 	adds.w	r9, r9, fp
 8007d28:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007d2c:	f04f 0100 	mov.w	r1, #0
 8007d30:	f04f 0200 	mov.w	r2, #0
 8007d34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007d3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007d40:	4689      	mov	r9, r1
 8007d42:	4692      	mov	sl, r2
 8007d44:	eb1b 0509 	adds.w	r5, fp, r9
 8007d48:	eb4c 060a 	adc.w	r6, ip, sl
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	4619      	mov	r1, r3
 8007d52:	f04f 0200 	mov.w	r2, #0
 8007d56:	f04f 0300 	mov.w	r3, #0
 8007d5a:	f04f 0400 	mov.w	r4, #0
 8007d5e:	0094      	lsls	r4, r2, #2
 8007d60:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007d64:	008b      	lsls	r3, r1, #2
 8007d66:	461a      	mov	r2, r3
 8007d68:	4623      	mov	r3, r4
 8007d6a:	4628      	mov	r0, r5
 8007d6c:	4631      	mov	r1, r6
 8007d6e:	f7f8 ff5d 	bl	8000c2c <__aeabi_uldivmod>
 8007d72:	4603      	mov	r3, r0
 8007d74:	460c      	mov	r4, r1
 8007d76:	461a      	mov	r2, r3
 8007d78:	4b9a      	ldr	r3, [pc, #616]	; (8007fe4 <UART_SetConfig+0x6f4>)
 8007d7a:	fba3 1302 	umull	r1, r3, r3, r2
 8007d7e:	095b      	lsrs	r3, r3, #5
 8007d80:	2164      	movs	r1, #100	; 0x64
 8007d82:	fb01 f303 	mul.w	r3, r1, r3
 8007d86:	1ad3      	subs	r3, r2, r3
 8007d88:	011b      	lsls	r3, r3, #4
 8007d8a:	3332      	adds	r3, #50	; 0x32
 8007d8c:	4a95      	ldr	r2, [pc, #596]	; (8007fe4 <UART_SetConfig+0x6f4>)
 8007d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d92:	095b      	lsrs	r3, r3, #5
 8007d94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d98:	4498      	add	r8, r3
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	469b      	mov	fp, r3
 8007d9e:	f04f 0c00 	mov.w	ip, #0
 8007da2:	46d9      	mov	r9, fp
 8007da4:	46e2      	mov	sl, ip
 8007da6:	eb19 0309 	adds.w	r3, r9, r9
 8007daa:	eb4a 040a 	adc.w	r4, sl, sl
 8007dae:	4699      	mov	r9, r3
 8007db0:	46a2      	mov	sl, r4
 8007db2:	eb19 090b 	adds.w	r9, r9, fp
 8007db6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007dba:	f04f 0100 	mov.w	r1, #0
 8007dbe:	f04f 0200 	mov.w	r2, #0
 8007dc2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007dc6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007dca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007dce:	4689      	mov	r9, r1
 8007dd0:	4692      	mov	sl, r2
 8007dd2:	eb1b 0509 	adds.w	r5, fp, r9
 8007dd6:	eb4c 060a 	adc.w	r6, ip, sl
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	4619      	mov	r1, r3
 8007de0:	f04f 0200 	mov.w	r2, #0
 8007de4:	f04f 0300 	mov.w	r3, #0
 8007de8:	f04f 0400 	mov.w	r4, #0
 8007dec:	0094      	lsls	r4, r2, #2
 8007dee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007df2:	008b      	lsls	r3, r1, #2
 8007df4:	461a      	mov	r2, r3
 8007df6:	4623      	mov	r3, r4
 8007df8:	4628      	mov	r0, r5
 8007dfa:	4631      	mov	r1, r6
 8007dfc:	f7f8 ff16 	bl	8000c2c <__aeabi_uldivmod>
 8007e00:	4603      	mov	r3, r0
 8007e02:	460c      	mov	r4, r1
 8007e04:	461a      	mov	r2, r3
 8007e06:	4b77      	ldr	r3, [pc, #476]	; (8007fe4 <UART_SetConfig+0x6f4>)
 8007e08:	fba3 1302 	umull	r1, r3, r3, r2
 8007e0c:	095b      	lsrs	r3, r3, #5
 8007e0e:	2164      	movs	r1, #100	; 0x64
 8007e10:	fb01 f303 	mul.w	r3, r1, r3
 8007e14:	1ad3      	subs	r3, r2, r3
 8007e16:	011b      	lsls	r3, r3, #4
 8007e18:	3332      	adds	r3, #50	; 0x32
 8007e1a:	4a72      	ldr	r2, [pc, #456]	; (8007fe4 <UART_SetConfig+0x6f4>)
 8007e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e20:	095b      	lsrs	r3, r3, #5
 8007e22:	f003 020f 	and.w	r2, r3, #15
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4442      	add	r2, r8
 8007e2c:	609a      	str	r2, [r3, #8]
 8007e2e:	e0d0      	b.n	8007fd2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007e30:	f7fe fa22 	bl	8006278 <HAL_RCC_GetPCLK1Freq>
 8007e34:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	469a      	mov	sl, r3
 8007e3a:	f04f 0b00 	mov.w	fp, #0
 8007e3e:	46d0      	mov	r8, sl
 8007e40:	46d9      	mov	r9, fp
 8007e42:	eb18 0308 	adds.w	r3, r8, r8
 8007e46:	eb49 0409 	adc.w	r4, r9, r9
 8007e4a:	4698      	mov	r8, r3
 8007e4c:	46a1      	mov	r9, r4
 8007e4e:	eb18 080a 	adds.w	r8, r8, sl
 8007e52:	eb49 090b 	adc.w	r9, r9, fp
 8007e56:	f04f 0100 	mov.w	r1, #0
 8007e5a:	f04f 0200 	mov.w	r2, #0
 8007e5e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007e62:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007e66:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007e6a:	4688      	mov	r8, r1
 8007e6c:	4691      	mov	r9, r2
 8007e6e:	eb1a 0508 	adds.w	r5, sl, r8
 8007e72:	eb4b 0609 	adc.w	r6, fp, r9
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	f04f 0200 	mov.w	r2, #0
 8007e80:	f04f 0300 	mov.w	r3, #0
 8007e84:	f04f 0400 	mov.w	r4, #0
 8007e88:	0094      	lsls	r4, r2, #2
 8007e8a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007e8e:	008b      	lsls	r3, r1, #2
 8007e90:	461a      	mov	r2, r3
 8007e92:	4623      	mov	r3, r4
 8007e94:	4628      	mov	r0, r5
 8007e96:	4631      	mov	r1, r6
 8007e98:	f7f8 fec8 	bl	8000c2c <__aeabi_uldivmod>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	460c      	mov	r4, r1
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	4b50      	ldr	r3, [pc, #320]	; (8007fe4 <UART_SetConfig+0x6f4>)
 8007ea4:	fba3 2302 	umull	r2, r3, r3, r2
 8007ea8:	095b      	lsrs	r3, r3, #5
 8007eaa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	469b      	mov	fp, r3
 8007eb2:	f04f 0c00 	mov.w	ip, #0
 8007eb6:	46d9      	mov	r9, fp
 8007eb8:	46e2      	mov	sl, ip
 8007eba:	eb19 0309 	adds.w	r3, r9, r9
 8007ebe:	eb4a 040a 	adc.w	r4, sl, sl
 8007ec2:	4699      	mov	r9, r3
 8007ec4:	46a2      	mov	sl, r4
 8007ec6:	eb19 090b 	adds.w	r9, r9, fp
 8007eca:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007ece:	f04f 0100 	mov.w	r1, #0
 8007ed2:	f04f 0200 	mov.w	r2, #0
 8007ed6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007eda:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007ede:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007ee2:	4689      	mov	r9, r1
 8007ee4:	4692      	mov	sl, r2
 8007ee6:	eb1b 0509 	adds.w	r5, fp, r9
 8007eea:	eb4c 060a 	adc.w	r6, ip, sl
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	f04f 0200 	mov.w	r2, #0
 8007ef8:	f04f 0300 	mov.w	r3, #0
 8007efc:	f04f 0400 	mov.w	r4, #0
 8007f00:	0094      	lsls	r4, r2, #2
 8007f02:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007f06:	008b      	lsls	r3, r1, #2
 8007f08:	461a      	mov	r2, r3
 8007f0a:	4623      	mov	r3, r4
 8007f0c:	4628      	mov	r0, r5
 8007f0e:	4631      	mov	r1, r6
 8007f10:	f7f8 fe8c 	bl	8000c2c <__aeabi_uldivmod>
 8007f14:	4603      	mov	r3, r0
 8007f16:	460c      	mov	r4, r1
 8007f18:	461a      	mov	r2, r3
 8007f1a:	4b32      	ldr	r3, [pc, #200]	; (8007fe4 <UART_SetConfig+0x6f4>)
 8007f1c:	fba3 1302 	umull	r1, r3, r3, r2
 8007f20:	095b      	lsrs	r3, r3, #5
 8007f22:	2164      	movs	r1, #100	; 0x64
 8007f24:	fb01 f303 	mul.w	r3, r1, r3
 8007f28:	1ad3      	subs	r3, r2, r3
 8007f2a:	011b      	lsls	r3, r3, #4
 8007f2c:	3332      	adds	r3, #50	; 0x32
 8007f2e:	4a2d      	ldr	r2, [pc, #180]	; (8007fe4 <UART_SetConfig+0x6f4>)
 8007f30:	fba2 2303 	umull	r2, r3, r2, r3
 8007f34:	095b      	lsrs	r3, r3, #5
 8007f36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f3a:	4498      	add	r8, r3
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	469b      	mov	fp, r3
 8007f40:	f04f 0c00 	mov.w	ip, #0
 8007f44:	46d9      	mov	r9, fp
 8007f46:	46e2      	mov	sl, ip
 8007f48:	eb19 0309 	adds.w	r3, r9, r9
 8007f4c:	eb4a 040a 	adc.w	r4, sl, sl
 8007f50:	4699      	mov	r9, r3
 8007f52:	46a2      	mov	sl, r4
 8007f54:	eb19 090b 	adds.w	r9, r9, fp
 8007f58:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007f5c:	f04f 0100 	mov.w	r1, #0
 8007f60:	f04f 0200 	mov.w	r2, #0
 8007f64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f68:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007f6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007f70:	4689      	mov	r9, r1
 8007f72:	4692      	mov	sl, r2
 8007f74:	eb1b 0509 	adds.w	r5, fp, r9
 8007f78:	eb4c 060a 	adc.w	r6, ip, sl
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	4619      	mov	r1, r3
 8007f82:	f04f 0200 	mov.w	r2, #0
 8007f86:	f04f 0300 	mov.w	r3, #0
 8007f8a:	f04f 0400 	mov.w	r4, #0
 8007f8e:	0094      	lsls	r4, r2, #2
 8007f90:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007f94:	008b      	lsls	r3, r1, #2
 8007f96:	461a      	mov	r2, r3
 8007f98:	4623      	mov	r3, r4
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	4631      	mov	r1, r6
 8007f9e:	f7f8 fe45 	bl	8000c2c <__aeabi_uldivmod>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	460c      	mov	r4, r1
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	4b0e      	ldr	r3, [pc, #56]	; (8007fe4 <UART_SetConfig+0x6f4>)
 8007faa:	fba3 1302 	umull	r1, r3, r3, r2
 8007fae:	095b      	lsrs	r3, r3, #5
 8007fb0:	2164      	movs	r1, #100	; 0x64
 8007fb2:	fb01 f303 	mul.w	r3, r1, r3
 8007fb6:	1ad3      	subs	r3, r2, r3
 8007fb8:	011b      	lsls	r3, r3, #4
 8007fba:	3332      	adds	r3, #50	; 0x32
 8007fbc:	4a09      	ldr	r2, [pc, #36]	; (8007fe4 <UART_SetConfig+0x6f4>)
 8007fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8007fc2:	095b      	lsrs	r3, r3, #5
 8007fc4:	f003 020f 	and.w	r2, r3, #15
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4442      	add	r2, r8
 8007fce:	609a      	str	r2, [r3, #8]
}
 8007fd0:	e7ff      	b.n	8007fd2 <UART_SetConfig+0x6e2>
 8007fd2:	bf00      	nop
 8007fd4:	3714      	adds	r7, #20
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fdc:	40011000 	.word	0x40011000
 8007fe0:	40011400 	.word	0x40011400
 8007fe4:	51eb851f 	.word	0x51eb851f

08007fe8 <__errno>:
 8007fe8:	4b01      	ldr	r3, [pc, #4]	; (8007ff0 <__errno+0x8>)
 8007fea:	6818      	ldr	r0, [r3, #0]
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	20000020 	.word	0x20000020

08007ff4 <__libc_init_array>:
 8007ff4:	b570      	push	{r4, r5, r6, lr}
 8007ff6:	4e0d      	ldr	r6, [pc, #52]	; (800802c <__libc_init_array+0x38>)
 8007ff8:	4c0d      	ldr	r4, [pc, #52]	; (8008030 <__libc_init_array+0x3c>)
 8007ffa:	1ba4      	subs	r4, r4, r6
 8007ffc:	10a4      	asrs	r4, r4, #2
 8007ffe:	2500      	movs	r5, #0
 8008000:	42a5      	cmp	r5, r4
 8008002:	d109      	bne.n	8008018 <__libc_init_array+0x24>
 8008004:	4e0b      	ldr	r6, [pc, #44]	; (8008034 <__libc_init_array+0x40>)
 8008006:	4c0c      	ldr	r4, [pc, #48]	; (8008038 <__libc_init_array+0x44>)
 8008008:	f001 fc3c 	bl	8009884 <_init>
 800800c:	1ba4      	subs	r4, r4, r6
 800800e:	10a4      	asrs	r4, r4, #2
 8008010:	2500      	movs	r5, #0
 8008012:	42a5      	cmp	r5, r4
 8008014:	d105      	bne.n	8008022 <__libc_init_array+0x2e>
 8008016:	bd70      	pop	{r4, r5, r6, pc}
 8008018:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800801c:	4798      	blx	r3
 800801e:	3501      	adds	r5, #1
 8008020:	e7ee      	b.n	8008000 <__libc_init_array+0xc>
 8008022:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008026:	4798      	blx	r3
 8008028:	3501      	adds	r5, #1
 800802a:	e7f2      	b.n	8008012 <__libc_init_array+0x1e>
 800802c:	0800a178 	.word	0x0800a178
 8008030:	0800a178 	.word	0x0800a178
 8008034:	0800a178 	.word	0x0800a178
 8008038:	0800a17c 	.word	0x0800a17c

0800803c <memcpy>:
 800803c:	b510      	push	{r4, lr}
 800803e:	1e43      	subs	r3, r0, #1
 8008040:	440a      	add	r2, r1
 8008042:	4291      	cmp	r1, r2
 8008044:	d100      	bne.n	8008048 <memcpy+0xc>
 8008046:	bd10      	pop	{r4, pc}
 8008048:	f811 4b01 	ldrb.w	r4, [r1], #1
 800804c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008050:	e7f7      	b.n	8008042 <memcpy+0x6>

08008052 <memset>:
 8008052:	4402      	add	r2, r0
 8008054:	4603      	mov	r3, r0
 8008056:	4293      	cmp	r3, r2
 8008058:	d100      	bne.n	800805c <memset+0xa>
 800805a:	4770      	bx	lr
 800805c:	f803 1b01 	strb.w	r1, [r3], #1
 8008060:	e7f9      	b.n	8008056 <memset+0x4>
	...

08008064 <siprintf>:
 8008064:	b40e      	push	{r1, r2, r3}
 8008066:	b500      	push	{lr}
 8008068:	b09c      	sub	sp, #112	; 0x70
 800806a:	ab1d      	add	r3, sp, #116	; 0x74
 800806c:	9002      	str	r0, [sp, #8]
 800806e:	9006      	str	r0, [sp, #24]
 8008070:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008074:	4809      	ldr	r0, [pc, #36]	; (800809c <siprintf+0x38>)
 8008076:	9107      	str	r1, [sp, #28]
 8008078:	9104      	str	r1, [sp, #16]
 800807a:	4909      	ldr	r1, [pc, #36]	; (80080a0 <siprintf+0x3c>)
 800807c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008080:	9105      	str	r1, [sp, #20]
 8008082:	6800      	ldr	r0, [r0, #0]
 8008084:	9301      	str	r3, [sp, #4]
 8008086:	a902      	add	r1, sp, #8
 8008088:	f000 f866 	bl	8008158 <_svfiprintf_r>
 800808c:	9b02      	ldr	r3, [sp, #8]
 800808e:	2200      	movs	r2, #0
 8008090:	701a      	strb	r2, [r3, #0]
 8008092:	b01c      	add	sp, #112	; 0x70
 8008094:	f85d eb04 	ldr.w	lr, [sp], #4
 8008098:	b003      	add	sp, #12
 800809a:	4770      	bx	lr
 800809c:	20000020 	.word	0x20000020
 80080a0:	ffff0208 	.word	0xffff0208

080080a4 <__ssputs_r>:
 80080a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080a8:	688e      	ldr	r6, [r1, #8]
 80080aa:	429e      	cmp	r6, r3
 80080ac:	4682      	mov	sl, r0
 80080ae:	460c      	mov	r4, r1
 80080b0:	4690      	mov	r8, r2
 80080b2:	4699      	mov	r9, r3
 80080b4:	d837      	bhi.n	8008126 <__ssputs_r+0x82>
 80080b6:	898a      	ldrh	r2, [r1, #12]
 80080b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80080bc:	d031      	beq.n	8008122 <__ssputs_r+0x7e>
 80080be:	6825      	ldr	r5, [r4, #0]
 80080c0:	6909      	ldr	r1, [r1, #16]
 80080c2:	1a6f      	subs	r7, r5, r1
 80080c4:	6965      	ldr	r5, [r4, #20]
 80080c6:	2302      	movs	r3, #2
 80080c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080cc:	fb95 f5f3 	sdiv	r5, r5, r3
 80080d0:	f109 0301 	add.w	r3, r9, #1
 80080d4:	443b      	add	r3, r7
 80080d6:	429d      	cmp	r5, r3
 80080d8:	bf38      	it	cc
 80080da:	461d      	movcc	r5, r3
 80080dc:	0553      	lsls	r3, r2, #21
 80080de:	d530      	bpl.n	8008142 <__ssputs_r+0x9e>
 80080e0:	4629      	mov	r1, r5
 80080e2:	f000 fb21 	bl	8008728 <_malloc_r>
 80080e6:	4606      	mov	r6, r0
 80080e8:	b950      	cbnz	r0, 8008100 <__ssputs_r+0x5c>
 80080ea:	230c      	movs	r3, #12
 80080ec:	f8ca 3000 	str.w	r3, [sl]
 80080f0:	89a3      	ldrh	r3, [r4, #12]
 80080f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080f6:	81a3      	strh	r3, [r4, #12]
 80080f8:	f04f 30ff 	mov.w	r0, #4294967295
 80080fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008100:	463a      	mov	r2, r7
 8008102:	6921      	ldr	r1, [r4, #16]
 8008104:	f7ff ff9a 	bl	800803c <memcpy>
 8008108:	89a3      	ldrh	r3, [r4, #12]
 800810a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800810e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008112:	81a3      	strh	r3, [r4, #12]
 8008114:	6126      	str	r6, [r4, #16]
 8008116:	6165      	str	r5, [r4, #20]
 8008118:	443e      	add	r6, r7
 800811a:	1bed      	subs	r5, r5, r7
 800811c:	6026      	str	r6, [r4, #0]
 800811e:	60a5      	str	r5, [r4, #8]
 8008120:	464e      	mov	r6, r9
 8008122:	454e      	cmp	r6, r9
 8008124:	d900      	bls.n	8008128 <__ssputs_r+0x84>
 8008126:	464e      	mov	r6, r9
 8008128:	4632      	mov	r2, r6
 800812a:	4641      	mov	r1, r8
 800812c:	6820      	ldr	r0, [r4, #0]
 800812e:	f000 fa93 	bl	8008658 <memmove>
 8008132:	68a3      	ldr	r3, [r4, #8]
 8008134:	1b9b      	subs	r3, r3, r6
 8008136:	60a3      	str	r3, [r4, #8]
 8008138:	6823      	ldr	r3, [r4, #0]
 800813a:	441e      	add	r6, r3
 800813c:	6026      	str	r6, [r4, #0]
 800813e:	2000      	movs	r0, #0
 8008140:	e7dc      	b.n	80080fc <__ssputs_r+0x58>
 8008142:	462a      	mov	r2, r5
 8008144:	f000 fb4a 	bl	80087dc <_realloc_r>
 8008148:	4606      	mov	r6, r0
 800814a:	2800      	cmp	r0, #0
 800814c:	d1e2      	bne.n	8008114 <__ssputs_r+0x70>
 800814e:	6921      	ldr	r1, [r4, #16]
 8008150:	4650      	mov	r0, sl
 8008152:	f000 fa9b 	bl	800868c <_free_r>
 8008156:	e7c8      	b.n	80080ea <__ssputs_r+0x46>

08008158 <_svfiprintf_r>:
 8008158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800815c:	461d      	mov	r5, r3
 800815e:	898b      	ldrh	r3, [r1, #12]
 8008160:	061f      	lsls	r7, r3, #24
 8008162:	b09d      	sub	sp, #116	; 0x74
 8008164:	4680      	mov	r8, r0
 8008166:	460c      	mov	r4, r1
 8008168:	4616      	mov	r6, r2
 800816a:	d50f      	bpl.n	800818c <_svfiprintf_r+0x34>
 800816c:	690b      	ldr	r3, [r1, #16]
 800816e:	b96b      	cbnz	r3, 800818c <_svfiprintf_r+0x34>
 8008170:	2140      	movs	r1, #64	; 0x40
 8008172:	f000 fad9 	bl	8008728 <_malloc_r>
 8008176:	6020      	str	r0, [r4, #0]
 8008178:	6120      	str	r0, [r4, #16]
 800817a:	b928      	cbnz	r0, 8008188 <_svfiprintf_r+0x30>
 800817c:	230c      	movs	r3, #12
 800817e:	f8c8 3000 	str.w	r3, [r8]
 8008182:	f04f 30ff 	mov.w	r0, #4294967295
 8008186:	e0c8      	b.n	800831a <_svfiprintf_r+0x1c2>
 8008188:	2340      	movs	r3, #64	; 0x40
 800818a:	6163      	str	r3, [r4, #20]
 800818c:	2300      	movs	r3, #0
 800818e:	9309      	str	r3, [sp, #36]	; 0x24
 8008190:	2320      	movs	r3, #32
 8008192:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008196:	2330      	movs	r3, #48	; 0x30
 8008198:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800819c:	9503      	str	r5, [sp, #12]
 800819e:	f04f 0b01 	mov.w	fp, #1
 80081a2:	4637      	mov	r7, r6
 80081a4:	463d      	mov	r5, r7
 80081a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80081aa:	b10b      	cbz	r3, 80081b0 <_svfiprintf_r+0x58>
 80081ac:	2b25      	cmp	r3, #37	; 0x25
 80081ae:	d13e      	bne.n	800822e <_svfiprintf_r+0xd6>
 80081b0:	ebb7 0a06 	subs.w	sl, r7, r6
 80081b4:	d00b      	beq.n	80081ce <_svfiprintf_r+0x76>
 80081b6:	4653      	mov	r3, sl
 80081b8:	4632      	mov	r2, r6
 80081ba:	4621      	mov	r1, r4
 80081bc:	4640      	mov	r0, r8
 80081be:	f7ff ff71 	bl	80080a4 <__ssputs_r>
 80081c2:	3001      	adds	r0, #1
 80081c4:	f000 80a4 	beq.w	8008310 <_svfiprintf_r+0x1b8>
 80081c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ca:	4453      	add	r3, sl
 80081cc:	9309      	str	r3, [sp, #36]	; 0x24
 80081ce:	783b      	ldrb	r3, [r7, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	f000 809d 	beq.w	8008310 <_svfiprintf_r+0x1b8>
 80081d6:	2300      	movs	r3, #0
 80081d8:	f04f 32ff 	mov.w	r2, #4294967295
 80081dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081e0:	9304      	str	r3, [sp, #16]
 80081e2:	9307      	str	r3, [sp, #28]
 80081e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081e8:	931a      	str	r3, [sp, #104]	; 0x68
 80081ea:	462f      	mov	r7, r5
 80081ec:	2205      	movs	r2, #5
 80081ee:	f817 1b01 	ldrb.w	r1, [r7], #1
 80081f2:	4850      	ldr	r0, [pc, #320]	; (8008334 <_svfiprintf_r+0x1dc>)
 80081f4:	f7f7 fffc 	bl	80001f0 <memchr>
 80081f8:	9b04      	ldr	r3, [sp, #16]
 80081fa:	b9d0      	cbnz	r0, 8008232 <_svfiprintf_r+0xda>
 80081fc:	06d9      	lsls	r1, r3, #27
 80081fe:	bf44      	itt	mi
 8008200:	2220      	movmi	r2, #32
 8008202:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008206:	071a      	lsls	r2, r3, #28
 8008208:	bf44      	itt	mi
 800820a:	222b      	movmi	r2, #43	; 0x2b
 800820c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008210:	782a      	ldrb	r2, [r5, #0]
 8008212:	2a2a      	cmp	r2, #42	; 0x2a
 8008214:	d015      	beq.n	8008242 <_svfiprintf_r+0xea>
 8008216:	9a07      	ldr	r2, [sp, #28]
 8008218:	462f      	mov	r7, r5
 800821a:	2000      	movs	r0, #0
 800821c:	250a      	movs	r5, #10
 800821e:	4639      	mov	r1, r7
 8008220:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008224:	3b30      	subs	r3, #48	; 0x30
 8008226:	2b09      	cmp	r3, #9
 8008228:	d94d      	bls.n	80082c6 <_svfiprintf_r+0x16e>
 800822a:	b1b8      	cbz	r0, 800825c <_svfiprintf_r+0x104>
 800822c:	e00f      	b.n	800824e <_svfiprintf_r+0xf6>
 800822e:	462f      	mov	r7, r5
 8008230:	e7b8      	b.n	80081a4 <_svfiprintf_r+0x4c>
 8008232:	4a40      	ldr	r2, [pc, #256]	; (8008334 <_svfiprintf_r+0x1dc>)
 8008234:	1a80      	subs	r0, r0, r2
 8008236:	fa0b f000 	lsl.w	r0, fp, r0
 800823a:	4318      	orrs	r0, r3
 800823c:	9004      	str	r0, [sp, #16]
 800823e:	463d      	mov	r5, r7
 8008240:	e7d3      	b.n	80081ea <_svfiprintf_r+0x92>
 8008242:	9a03      	ldr	r2, [sp, #12]
 8008244:	1d11      	adds	r1, r2, #4
 8008246:	6812      	ldr	r2, [r2, #0]
 8008248:	9103      	str	r1, [sp, #12]
 800824a:	2a00      	cmp	r2, #0
 800824c:	db01      	blt.n	8008252 <_svfiprintf_r+0xfa>
 800824e:	9207      	str	r2, [sp, #28]
 8008250:	e004      	b.n	800825c <_svfiprintf_r+0x104>
 8008252:	4252      	negs	r2, r2
 8008254:	f043 0302 	orr.w	r3, r3, #2
 8008258:	9207      	str	r2, [sp, #28]
 800825a:	9304      	str	r3, [sp, #16]
 800825c:	783b      	ldrb	r3, [r7, #0]
 800825e:	2b2e      	cmp	r3, #46	; 0x2e
 8008260:	d10c      	bne.n	800827c <_svfiprintf_r+0x124>
 8008262:	787b      	ldrb	r3, [r7, #1]
 8008264:	2b2a      	cmp	r3, #42	; 0x2a
 8008266:	d133      	bne.n	80082d0 <_svfiprintf_r+0x178>
 8008268:	9b03      	ldr	r3, [sp, #12]
 800826a:	1d1a      	adds	r2, r3, #4
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	9203      	str	r2, [sp, #12]
 8008270:	2b00      	cmp	r3, #0
 8008272:	bfb8      	it	lt
 8008274:	f04f 33ff 	movlt.w	r3, #4294967295
 8008278:	3702      	adds	r7, #2
 800827a:	9305      	str	r3, [sp, #20]
 800827c:	4d2e      	ldr	r5, [pc, #184]	; (8008338 <_svfiprintf_r+0x1e0>)
 800827e:	7839      	ldrb	r1, [r7, #0]
 8008280:	2203      	movs	r2, #3
 8008282:	4628      	mov	r0, r5
 8008284:	f7f7 ffb4 	bl	80001f0 <memchr>
 8008288:	b138      	cbz	r0, 800829a <_svfiprintf_r+0x142>
 800828a:	2340      	movs	r3, #64	; 0x40
 800828c:	1b40      	subs	r0, r0, r5
 800828e:	fa03 f000 	lsl.w	r0, r3, r0
 8008292:	9b04      	ldr	r3, [sp, #16]
 8008294:	4303      	orrs	r3, r0
 8008296:	3701      	adds	r7, #1
 8008298:	9304      	str	r3, [sp, #16]
 800829a:	7839      	ldrb	r1, [r7, #0]
 800829c:	4827      	ldr	r0, [pc, #156]	; (800833c <_svfiprintf_r+0x1e4>)
 800829e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082a2:	2206      	movs	r2, #6
 80082a4:	1c7e      	adds	r6, r7, #1
 80082a6:	f7f7 ffa3 	bl	80001f0 <memchr>
 80082aa:	2800      	cmp	r0, #0
 80082ac:	d038      	beq.n	8008320 <_svfiprintf_r+0x1c8>
 80082ae:	4b24      	ldr	r3, [pc, #144]	; (8008340 <_svfiprintf_r+0x1e8>)
 80082b0:	bb13      	cbnz	r3, 80082f8 <_svfiprintf_r+0x1a0>
 80082b2:	9b03      	ldr	r3, [sp, #12]
 80082b4:	3307      	adds	r3, #7
 80082b6:	f023 0307 	bic.w	r3, r3, #7
 80082ba:	3308      	adds	r3, #8
 80082bc:	9303      	str	r3, [sp, #12]
 80082be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082c0:	444b      	add	r3, r9
 80082c2:	9309      	str	r3, [sp, #36]	; 0x24
 80082c4:	e76d      	b.n	80081a2 <_svfiprintf_r+0x4a>
 80082c6:	fb05 3202 	mla	r2, r5, r2, r3
 80082ca:	2001      	movs	r0, #1
 80082cc:	460f      	mov	r7, r1
 80082ce:	e7a6      	b.n	800821e <_svfiprintf_r+0xc6>
 80082d0:	2300      	movs	r3, #0
 80082d2:	3701      	adds	r7, #1
 80082d4:	9305      	str	r3, [sp, #20]
 80082d6:	4619      	mov	r1, r3
 80082d8:	250a      	movs	r5, #10
 80082da:	4638      	mov	r0, r7
 80082dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082e0:	3a30      	subs	r2, #48	; 0x30
 80082e2:	2a09      	cmp	r2, #9
 80082e4:	d903      	bls.n	80082ee <_svfiprintf_r+0x196>
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d0c8      	beq.n	800827c <_svfiprintf_r+0x124>
 80082ea:	9105      	str	r1, [sp, #20]
 80082ec:	e7c6      	b.n	800827c <_svfiprintf_r+0x124>
 80082ee:	fb05 2101 	mla	r1, r5, r1, r2
 80082f2:	2301      	movs	r3, #1
 80082f4:	4607      	mov	r7, r0
 80082f6:	e7f0      	b.n	80082da <_svfiprintf_r+0x182>
 80082f8:	ab03      	add	r3, sp, #12
 80082fa:	9300      	str	r3, [sp, #0]
 80082fc:	4622      	mov	r2, r4
 80082fe:	4b11      	ldr	r3, [pc, #68]	; (8008344 <_svfiprintf_r+0x1ec>)
 8008300:	a904      	add	r1, sp, #16
 8008302:	4640      	mov	r0, r8
 8008304:	f3af 8000 	nop.w
 8008308:	f1b0 3fff 	cmp.w	r0, #4294967295
 800830c:	4681      	mov	r9, r0
 800830e:	d1d6      	bne.n	80082be <_svfiprintf_r+0x166>
 8008310:	89a3      	ldrh	r3, [r4, #12]
 8008312:	065b      	lsls	r3, r3, #25
 8008314:	f53f af35 	bmi.w	8008182 <_svfiprintf_r+0x2a>
 8008318:	9809      	ldr	r0, [sp, #36]	; 0x24
 800831a:	b01d      	add	sp, #116	; 0x74
 800831c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008320:	ab03      	add	r3, sp, #12
 8008322:	9300      	str	r3, [sp, #0]
 8008324:	4622      	mov	r2, r4
 8008326:	4b07      	ldr	r3, [pc, #28]	; (8008344 <_svfiprintf_r+0x1ec>)
 8008328:	a904      	add	r1, sp, #16
 800832a:	4640      	mov	r0, r8
 800832c:	f000 f882 	bl	8008434 <_printf_i>
 8008330:	e7ea      	b.n	8008308 <_svfiprintf_r+0x1b0>
 8008332:	bf00      	nop
 8008334:	08009f64 	.word	0x08009f64
 8008338:	08009f6a 	.word	0x08009f6a
 800833c:	08009f6e 	.word	0x08009f6e
 8008340:	00000000 	.word	0x00000000
 8008344:	080080a5 	.word	0x080080a5

08008348 <_printf_common>:
 8008348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800834c:	4691      	mov	r9, r2
 800834e:	461f      	mov	r7, r3
 8008350:	688a      	ldr	r2, [r1, #8]
 8008352:	690b      	ldr	r3, [r1, #16]
 8008354:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008358:	4293      	cmp	r3, r2
 800835a:	bfb8      	it	lt
 800835c:	4613      	movlt	r3, r2
 800835e:	f8c9 3000 	str.w	r3, [r9]
 8008362:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008366:	4606      	mov	r6, r0
 8008368:	460c      	mov	r4, r1
 800836a:	b112      	cbz	r2, 8008372 <_printf_common+0x2a>
 800836c:	3301      	adds	r3, #1
 800836e:	f8c9 3000 	str.w	r3, [r9]
 8008372:	6823      	ldr	r3, [r4, #0]
 8008374:	0699      	lsls	r1, r3, #26
 8008376:	bf42      	ittt	mi
 8008378:	f8d9 3000 	ldrmi.w	r3, [r9]
 800837c:	3302      	addmi	r3, #2
 800837e:	f8c9 3000 	strmi.w	r3, [r9]
 8008382:	6825      	ldr	r5, [r4, #0]
 8008384:	f015 0506 	ands.w	r5, r5, #6
 8008388:	d107      	bne.n	800839a <_printf_common+0x52>
 800838a:	f104 0a19 	add.w	sl, r4, #25
 800838e:	68e3      	ldr	r3, [r4, #12]
 8008390:	f8d9 2000 	ldr.w	r2, [r9]
 8008394:	1a9b      	subs	r3, r3, r2
 8008396:	42ab      	cmp	r3, r5
 8008398:	dc28      	bgt.n	80083ec <_printf_common+0xa4>
 800839a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800839e:	6822      	ldr	r2, [r4, #0]
 80083a0:	3300      	adds	r3, #0
 80083a2:	bf18      	it	ne
 80083a4:	2301      	movne	r3, #1
 80083a6:	0692      	lsls	r2, r2, #26
 80083a8:	d42d      	bmi.n	8008406 <_printf_common+0xbe>
 80083aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083ae:	4639      	mov	r1, r7
 80083b0:	4630      	mov	r0, r6
 80083b2:	47c0      	blx	r8
 80083b4:	3001      	adds	r0, #1
 80083b6:	d020      	beq.n	80083fa <_printf_common+0xb2>
 80083b8:	6823      	ldr	r3, [r4, #0]
 80083ba:	68e5      	ldr	r5, [r4, #12]
 80083bc:	f8d9 2000 	ldr.w	r2, [r9]
 80083c0:	f003 0306 	and.w	r3, r3, #6
 80083c4:	2b04      	cmp	r3, #4
 80083c6:	bf08      	it	eq
 80083c8:	1aad      	subeq	r5, r5, r2
 80083ca:	68a3      	ldr	r3, [r4, #8]
 80083cc:	6922      	ldr	r2, [r4, #16]
 80083ce:	bf0c      	ite	eq
 80083d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083d4:	2500      	movne	r5, #0
 80083d6:	4293      	cmp	r3, r2
 80083d8:	bfc4      	itt	gt
 80083da:	1a9b      	subgt	r3, r3, r2
 80083dc:	18ed      	addgt	r5, r5, r3
 80083de:	f04f 0900 	mov.w	r9, #0
 80083e2:	341a      	adds	r4, #26
 80083e4:	454d      	cmp	r5, r9
 80083e6:	d11a      	bne.n	800841e <_printf_common+0xd6>
 80083e8:	2000      	movs	r0, #0
 80083ea:	e008      	b.n	80083fe <_printf_common+0xb6>
 80083ec:	2301      	movs	r3, #1
 80083ee:	4652      	mov	r2, sl
 80083f0:	4639      	mov	r1, r7
 80083f2:	4630      	mov	r0, r6
 80083f4:	47c0      	blx	r8
 80083f6:	3001      	adds	r0, #1
 80083f8:	d103      	bne.n	8008402 <_printf_common+0xba>
 80083fa:	f04f 30ff 	mov.w	r0, #4294967295
 80083fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008402:	3501      	adds	r5, #1
 8008404:	e7c3      	b.n	800838e <_printf_common+0x46>
 8008406:	18e1      	adds	r1, r4, r3
 8008408:	1c5a      	adds	r2, r3, #1
 800840a:	2030      	movs	r0, #48	; 0x30
 800840c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008410:	4422      	add	r2, r4
 8008412:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008416:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800841a:	3302      	adds	r3, #2
 800841c:	e7c5      	b.n	80083aa <_printf_common+0x62>
 800841e:	2301      	movs	r3, #1
 8008420:	4622      	mov	r2, r4
 8008422:	4639      	mov	r1, r7
 8008424:	4630      	mov	r0, r6
 8008426:	47c0      	blx	r8
 8008428:	3001      	adds	r0, #1
 800842a:	d0e6      	beq.n	80083fa <_printf_common+0xb2>
 800842c:	f109 0901 	add.w	r9, r9, #1
 8008430:	e7d8      	b.n	80083e4 <_printf_common+0x9c>
	...

08008434 <_printf_i>:
 8008434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008438:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800843c:	460c      	mov	r4, r1
 800843e:	7e09      	ldrb	r1, [r1, #24]
 8008440:	b085      	sub	sp, #20
 8008442:	296e      	cmp	r1, #110	; 0x6e
 8008444:	4617      	mov	r7, r2
 8008446:	4606      	mov	r6, r0
 8008448:	4698      	mov	r8, r3
 800844a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800844c:	f000 80b3 	beq.w	80085b6 <_printf_i+0x182>
 8008450:	d822      	bhi.n	8008498 <_printf_i+0x64>
 8008452:	2963      	cmp	r1, #99	; 0x63
 8008454:	d036      	beq.n	80084c4 <_printf_i+0x90>
 8008456:	d80a      	bhi.n	800846e <_printf_i+0x3a>
 8008458:	2900      	cmp	r1, #0
 800845a:	f000 80b9 	beq.w	80085d0 <_printf_i+0x19c>
 800845e:	2958      	cmp	r1, #88	; 0x58
 8008460:	f000 8083 	beq.w	800856a <_printf_i+0x136>
 8008464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008468:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800846c:	e032      	b.n	80084d4 <_printf_i+0xa0>
 800846e:	2964      	cmp	r1, #100	; 0x64
 8008470:	d001      	beq.n	8008476 <_printf_i+0x42>
 8008472:	2969      	cmp	r1, #105	; 0x69
 8008474:	d1f6      	bne.n	8008464 <_printf_i+0x30>
 8008476:	6820      	ldr	r0, [r4, #0]
 8008478:	6813      	ldr	r3, [r2, #0]
 800847a:	0605      	lsls	r5, r0, #24
 800847c:	f103 0104 	add.w	r1, r3, #4
 8008480:	d52a      	bpl.n	80084d8 <_printf_i+0xa4>
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	6011      	str	r1, [r2, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	da03      	bge.n	8008492 <_printf_i+0x5e>
 800848a:	222d      	movs	r2, #45	; 0x2d
 800848c:	425b      	negs	r3, r3
 800848e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008492:	486f      	ldr	r0, [pc, #444]	; (8008650 <_printf_i+0x21c>)
 8008494:	220a      	movs	r2, #10
 8008496:	e039      	b.n	800850c <_printf_i+0xd8>
 8008498:	2973      	cmp	r1, #115	; 0x73
 800849a:	f000 809d 	beq.w	80085d8 <_printf_i+0x1a4>
 800849e:	d808      	bhi.n	80084b2 <_printf_i+0x7e>
 80084a0:	296f      	cmp	r1, #111	; 0x6f
 80084a2:	d020      	beq.n	80084e6 <_printf_i+0xb2>
 80084a4:	2970      	cmp	r1, #112	; 0x70
 80084a6:	d1dd      	bne.n	8008464 <_printf_i+0x30>
 80084a8:	6823      	ldr	r3, [r4, #0]
 80084aa:	f043 0320 	orr.w	r3, r3, #32
 80084ae:	6023      	str	r3, [r4, #0]
 80084b0:	e003      	b.n	80084ba <_printf_i+0x86>
 80084b2:	2975      	cmp	r1, #117	; 0x75
 80084b4:	d017      	beq.n	80084e6 <_printf_i+0xb2>
 80084b6:	2978      	cmp	r1, #120	; 0x78
 80084b8:	d1d4      	bne.n	8008464 <_printf_i+0x30>
 80084ba:	2378      	movs	r3, #120	; 0x78
 80084bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80084c0:	4864      	ldr	r0, [pc, #400]	; (8008654 <_printf_i+0x220>)
 80084c2:	e055      	b.n	8008570 <_printf_i+0x13c>
 80084c4:	6813      	ldr	r3, [r2, #0]
 80084c6:	1d19      	adds	r1, r3, #4
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	6011      	str	r1, [r2, #0]
 80084cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084d4:	2301      	movs	r3, #1
 80084d6:	e08c      	b.n	80085f2 <_printf_i+0x1be>
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	6011      	str	r1, [r2, #0]
 80084dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80084e0:	bf18      	it	ne
 80084e2:	b21b      	sxthne	r3, r3
 80084e4:	e7cf      	b.n	8008486 <_printf_i+0x52>
 80084e6:	6813      	ldr	r3, [r2, #0]
 80084e8:	6825      	ldr	r5, [r4, #0]
 80084ea:	1d18      	adds	r0, r3, #4
 80084ec:	6010      	str	r0, [r2, #0]
 80084ee:	0628      	lsls	r0, r5, #24
 80084f0:	d501      	bpl.n	80084f6 <_printf_i+0xc2>
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	e002      	b.n	80084fc <_printf_i+0xc8>
 80084f6:	0668      	lsls	r0, r5, #25
 80084f8:	d5fb      	bpl.n	80084f2 <_printf_i+0xbe>
 80084fa:	881b      	ldrh	r3, [r3, #0]
 80084fc:	4854      	ldr	r0, [pc, #336]	; (8008650 <_printf_i+0x21c>)
 80084fe:	296f      	cmp	r1, #111	; 0x6f
 8008500:	bf14      	ite	ne
 8008502:	220a      	movne	r2, #10
 8008504:	2208      	moveq	r2, #8
 8008506:	2100      	movs	r1, #0
 8008508:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800850c:	6865      	ldr	r5, [r4, #4]
 800850e:	60a5      	str	r5, [r4, #8]
 8008510:	2d00      	cmp	r5, #0
 8008512:	f2c0 8095 	blt.w	8008640 <_printf_i+0x20c>
 8008516:	6821      	ldr	r1, [r4, #0]
 8008518:	f021 0104 	bic.w	r1, r1, #4
 800851c:	6021      	str	r1, [r4, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d13d      	bne.n	800859e <_printf_i+0x16a>
 8008522:	2d00      	cmp	r5, #0
 8008524:	f040 808e 	bne.w	8008644 <_printf_i+0x210>
 8008528:	4665      	mov	r5, ip
 800852a:	2a08      	cmp	r2, #8
 800852c:	d10b      	bne.n	8008546 <_printf_i+0x112>
 800852e:	6823      	ldr	r3, [r4, #0]
 8008530:	07db      	lsls	r3, r3, #31
 8008532:	d508      	bpl.n	8008546 <_printf_i+0x112>
 8008534:	6923      	ldr	r3, [r4, #16]
 8008536:	6862      	ldr	r2, [r4, #4]
 8008538:	429a      	cmp	r2, r3
 800853a:	bfde      	ittt	le
 800853c:	2330      	movle	r3, #48	; 0x30
 800853e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008542:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008546:	ebac 0305 	sub.w	r3, ip, r5
 800854a:	6123      	str	r3, [r4, #16]
 800854c:	f8cd 8000 	str.w	r8, [sp]
 8008550:	463b      	mov	r3, r7
 8008552:	aa03      	add	r2, sp, #12
 8008554:	4621      	mov	r1, r4
 8008556:	4630      	mov	r0, r6
 8008558:	f7ff fef6 	bl	8008348 <_printf_common>
 800855c:	3001      	adds	r0, #1
 800855e:	d14d      	bne.n	80085fc <_printf_i+0x1c8>
 8008560:	f04f 30ff 	mov.w	r0, #4294967295
 8008564:	b005      	add	sp, #20
 8008566:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800856a:	4839      	ldr	r0, [pc, #228]	; (8008650 <_printf_i+0x21c>)
 800856c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008570:	6813      	ldr	r3, [r2, #0]
 8008572:	6821      	ldr	r1, [r4, #0]
 8008574:	1d1d      	adds	r5, r3, #4
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6015      	str	r5, [r2, #0]
 800857a:	060a      	lsls	r2, r1, #24
 800857c:	d50b      	bpl.n	8008596 <_printf_i+0x162>
 800857e:	07ca      	lsls	r2, r1, #31
 8008580:	bf44      	itt	mi
 8008582:	f041 0120 	orrmi.w	r1, r1, #32
 8008586:	6021      	strmi	r1, [r4, #0]
 8008588:	b91b      	cbnz	r3, 8008592 <_printf_i+0x15e>
 800858a:	6822      	ldr	r2, [r4, #0]
 800858c:	f022 0220 	bic.w	r2, r2, #32
 8008590:	6022      	str	r2, [r4, #0]
 8008592:	2210      	movs	r2, #16
 8008594:	e7b7      	b.n	8008506 <_printf_i+0xd2>
 8008596:	064d      	lsls	r5, r1, #25
 8008598:	bf48      	it	mi
 800859a:	b29b      	uxthmi	r3, r3
 800859c:	e7ef      	b.n	800857e <_printf_i+0x14a>
 800859e:	4665      	mov	r5, ip
 80085a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80085a4:	fb02 3311 	mls	r3, r2, r1, r3
 80085a8:	5cc3      	ldrb	r3, [r0, r3]
 80085aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80085ae:	460b      	mov	r3, r1
 80085b0:	2900      	cmp	r1, #0
 80085b2:	d1f5      	bne.n	80085a0 <_printf_i+0x16c>
 80085b4:	e7b9      	b.n	800852a <_printf_i+0xf6>
 80085b6:	6813      	ldr	r3, [r2, #0]
 80085b8:	6825      	ldr	r5, [r4, #0]
 80085ba:	6961      	ldr	r1, [r4, #20]
 80085bc:	1d18      	adds	r0, r3, #4
 80085be:	6010      	str	r0, [r2, #0]
 80085c0:	0628      	lsls	r0, r5, #24
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	d501      	bpl.n	80085ca <_printf_i+0x196>
 80085c6:	6019      	str	r1, [r3, #0]
 80085c8:	e002      	b.n	80085d0 <_printf_i+0x19c>
 80085ca:	066a      	lsls	r2, r5, #25
 80085cc:	d5fb      	bpl.n	80085c6 <_printf_i+0x192>
 80085ce:	8019      	strh	r1, [r3, #0]
 80085d0:	2300      	movs	r3, #0
 80085d2:	6123      	str	r3, [r4, #16]
 80085d4:	4665      	mov	r5, ip
 80085d6:	e7b9      	b.n	800854c <_printf_i+0x118>
 80085d8:	6813      	ldr	r3, [r2, #0]
 80085da:	1d19      	adds	r1, r3, #4
 80085dc:	6011      	str	r1, [r2, #0]
 80085de:	681d      	ldr	r5, [r3, #0]
 80085e0:	6862      	ldr	r2, [r4, #4]
 80085e2:	2100      	movs	r1, #0
 80085e4:	4628      	mov	r0, r5
 80085e6:	f7f7 fe03 	bl	80001f0 <memchr>
 80085ea:	b108      	cbz	r0, 80085f0 <_printf_i+0x1bc>
 80085ec:	1b40      	subs	r0, r0, r5
 80085ee:	6060      	str	r0, [r4, #4]
 80085f0:	6863      	ldr	r3, [r4, #4]
 80085f2:	6123      	str	r3, [r4, #16]
 80085f4:	2300      	movs	r3, #0
 80085f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085fa:	e7a7      	b.n	800854c <_printf_i+0x118>
 80085fc:	6923      	ldr	r3, [r4, #16]
 80085fe:	462a      	mov	r2, r5
 8008600:	4639      	mov	r1, r7
 8008602:	4630      	mov	r0, r6
 8008604:	47c0      	blx	r8
 8008606:	3001      	adds	r0, #1
 8008608:	d0aa      	beq.n	8008560 <_printf_i+0x12c>
 800860a:	6823      	ldr	r3, [r4, #0]
 800860c:	079b      	lsls	r3, r3, #30
 800860e:	d413      	bmi.n	8008638 <_printf_i+0x204>
 8008610:	68e0      	ldr	r0, [r4, #12]
 8008612:	9b03      	ldr	r3, [sp, #12]
 8008614:	4298      	cmp	r0, r3
 8008616:	bfb8      	it	lt
 8008618:	4618      	movlt	r0, r3
 800861a:	e7a3      	b.n	8008564 <_printf_i+0x130>
 800861c:	2301      	movs	r3, #1
 800861e:	464a      	mov	r2, r9
 8008620:	4639      	mov	r1, r7
 8008622:	4630      	mov	r0, r6
 8008624:	47c0      	blx	r8
 8008626:	3001      	adds	r0, #1
 8008628:	d09a      	beq.n	8008560 <_printf_i+0x12c>
 800862a:	3501      	adds	r5, #1
 800862c:	68e3      	ldr	r3, [r4, #12]
 800862e:	9a03      	ldr	r2, [sp, #12]
 8008630:	1a9b      	subs	r3, r3, r2
 8008632:	42ab      	cmp	r3, r5
 8008634:	dcf2      	bgt.n	800861c <_printf_i+0x1e8>
 8008636:	e7eb      	b.n	8008610 <_printf_i+0x1dc>
 8008638:	2500      	movs	r5, #0
 800863a:	f104 0919 	add.w	r9, r4, #25
 800863e:	e7f5      	b.n	800862c <_printf_i+0x1f8>
 8008640:	2b00      	cmp	r3, #0
 8008642:	d1ac      	bne.n	800859e <_printf_i+0x16a>
 8008644:	7803      	ldrb	r3, [r0, #0]
 8008646:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800864a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800864e:	e76c      	b.n	800852a <_printf_i+0xf6>
 8008650:	08009f75 	.word	0x08009f75
 8008654:	08009f86 	.word	0x08009f86

08008658 <memmove>:
 8008658:	4288      	cmp	r0, r1
 800865a:	b510      	push	{r4, lr}
 800865c:	eb01 0302 	add.w	r3, r1, r2
 8008660:	d807      	bhi.n	8008672 <memmove+0x1a>
 8008662:	1e42      	subs	r2, r0, #1
 8008664:	4299      	cmp	r1, r3
 8008666:	d00a      	beq.n	800867e <memmove+0x26>
 8008668:	f811 4b01 	ldrb.w	r4, [r1], #1
 800866c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008670:	e7f8      	b.n	8008664 <memmove+0xc>
 8008672:	4283      	cmp	r3, r0
 8008674:	d9f5      	bls.n	8008662 <memmove+0xa>
 8008676:	1881      	adds	r1, r0, r2
 8008678:	1ad2      	subs	r2, r2, r3
 800867a:	42d3      	cmn	r3, r2
 800867c:	d100      	bne.n	8008680 <memmove+0x28>
 800867e:	bd10      	pop	{r4, pc}
 8008680:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008684:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008688:	e7f7      	b.n	800867a <memmove+0x22>
	...

0800868c <_free_r>:
 800868c:	b538      	push	{r3, r4, r5, lr}
 800868e:	4605      	mov	r5, r0
 8008690:	2900      	cmp	r1, #0
 8008692:	d045      	beq.n	8008720 <_free_r+0x94>
 8008694:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008698:	1f0c      	subs	r4, r1, #4
 800869a:	2b00      	cmp	r3, #0
 800869c:	bfb8      	it	lt
 800869e:	18e4      	addlt	r4, r4, r3
 80086a0:	f000 f8d2 	bl	8008848 <__malloc_lock>
 80086a4:	4a1f      	ldr	r2, [pc, #124]	; (8008724 <_free_r+0x98>)
 80086a6:	6813      	ldr	r3, [r2, #0]
 80086a8:	4610      	mov	r0, r2
 80086aa:	b933      	cbnz	r3, 80086ba <_free_r+0x2e>
 80086ac:	6063      	str	r3, [r4, #4]
 80086ae:	6014      	str	r4, [r2, #0]
 80086b0:	4628      	mov	r0, r5
 80086b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086b6:	f000 b8c8 	b.w	800884a <__malloc_unlock>
 80086ba:	42a3      	cmp	r3, r4
 80086bc:	d90c      	bls.n	80086d8 <_free_r+0x4c>
 80086be:	6821      	ldr	r1, [r4, #0]
 80086c0:	1862      	adds	r2, r4, r1
 80086c2:	4293      	cmp	r3, r2
 80086c4:	bf04      	itt	eq
 80086c6:	681a      	ldreq	r2, [r3, #0]
 80086c8:	685b      	ldreq	r3, [r3, #4]
 80086ca:	6063      	str	r3, [r4, #4]
 80086cc:	bf04      	itt	eq
 80086ce:	1852      	addeq	r2, r2, r1
 80086d0:	6022      	streq	r2, [r4, #0]
 80086d2:	6004      	str	r4, [r0, #0]
 80086d4:	e7ec      	b.n	80086b0 <_free_r+0x24>
 80086d6:	4613      	mov	r3, r2
 80086d8:	685a      	ldr	r2, [r3, #4]
 80086da:	b10a      	cbz	r2, 80086e0 <_free_r+0x54>
 80086dc:	42a2      	cmp	r2, r4
 80086de:	d9fa      	bls.n	80086d6 <_free_r+0x4a>
 80086e0:	6819      	ldr	r1, [r3, #0]
 80086e2:	1858      	adds	r0, r3, r1
 80086e4:	42a0      	cmp	r0, r4
 80086e6:	d10b      	bne.n	8008700 <_free_r+0x74>
 80086e8:	6820      	ldr	r0, [r4, #0]
 80086ea:	4401      	add	r1, r0
 80086ec:	1858      	adds	r0, r3, r1
 80086ee:	4282      	cmp	r2, r0
 80086f0:	6019      	str	r1, [r3, #0]
 80086f2:	d1dd      	bne.n	80086b0 <_free_r+0x24>
 80086f4:	6810      	ldr	r0, [r2, #0]
 80086f6:	6852      	ldr	r2, [r2, #4]
 80086f8:	605a      	str	r2, [r3, #4]
 80086fa:	4401      	add	r1, r0
 80086fc:	6019      	str	r1, [r3, #0]
 80086fe:	e7d7      	b.n	80086b0 <_free_r+0x24>
 8008700:	d902      	bls.n	8008708 <_free_r+0x7c>
 8008702:	230c      	movs	r3, #12
 8008704:	602b      	str	r3, [r5, #0]
 8008706:	e7d3      	b.n	80086b0 <_free_r+0x24>
 8008708:	6820      	ldr	r0, [r4, #0]
 800870a:	1821      	adds	r1, r4, r0
 800870c:	428a      	cmp	r2, r1
 800870e:	bf04      	itt	eq
 8008710:	6811      	ldreq	r1, [r2, #0]
 8008712:	6852      	ldreq	r2, [r2, #4]
 8008714:	6062      	str	r2, [r4, #4]
 8008716:	bf04      	itt	eq
 8008718:	1809      	addeq	r1, r1, r0
 800871a:	6021      	streq	r1, [r4, #0]
 800871c:	605c      	str	r4, [r3, #4]
 800871e:	e7c7      	b.n	80086b0 <_free_r+0x24>
 8008720:	bd38      	pop	{r3, r4, r5, pc}
 8008722:	bf00      	nop
 8008724:	20000218 	.word	0x20000218

08008728 <_malloc_r>:
 8008728:	b570      	push	{r4, r5, r6, lr}
 800872a:	1ccd      	adds	r5, r1, #3
 800872c:	f025 0503 	bic.w	r5, r5, #3
 8008730:	3508      	adds	r5, #8
 8008732:	2d0c      	cmp	r5, #12
 8008734:	bf38      	it	cc
 8008736:	250c      	movcc	r5, #12
 8008738:	2d00      	cmp	r5, #0
 800873a:	4606      	mov	r6, r0
 800873c:	db01      	blt.n	8008742 <_malloc_r+0x1a>
 800873e:	42a9      	cmp	r1, r5
 8008740:	d903      	bls.n	800874a <_malloc_r+0x22>
 8008742:	230c      	movs	r3, #12
 8008744:	6033      	str	r3, [r6, #0]
 8008746:	2000      	movs	r0, #0
 8008748:	bd70      	pop	{r4, r5, r6, pc}
 800874a:	f000 f87d 	bl	8008848 <__malloc_lock>
 800874e:	4a21      	ldr	r2, [pc, #132]	; (80087d4 <_malloc_r+0xac>)
 8008750:	6814      	ldr	r4, [r2, #0]
 8008752:	4621      	mov	r1, r4
 8008754:	b991      	cbnz	r1, 800877c <_malloc_r+0x54>
 8008756:	4c20      	ldr	r4, [pc, #128]	; (80087d8 <_malloc_r+0xb0>)
 8008758:	6823      	ldr	r3, [r4, #0]
 800875a:	b91b      	cbnz	r3, 8008764 <_malloc_r+0x3c>
 800875c:	4630      	mov	r0, r6
 800875e:	f000 f863 	bl	8008828 <_sbrk_r>
 8008762:	6020      	str	r0, [r4, #0]
 8008764:	4629      	mov	r1, r5
 8008766:	4630      	mov	r0, r6
 8008768:	f000 f85e 	bl	8008828 <_sbrk_r>
 800876c:	1c43      	adds	r3, r0, #1
 800876e:	d124      	bne.n	80087ba <_malloc_r+0x92>
 8008770:	230c      	movs	r3, #12
 8008772:	6033      	str	r3, [r6, #0]
 8008774:	4630      	mov	r0, r6
 8008776:	f000 f868 	bl	800884a <__malloc_unlock>
 800877a:	e7e4      	b.n	8008746 <_malloc_r+0x1e>
 800877c:	680b      	ldr	r3, [r1, #0]
 800877e:	1b5b      	subs	r3, r3, r5
 8008780:	d418      	bmi.n	80087b4 <_malloc_r+0x8c>
 8008782:	2b0b      	cmp	r3, #11
 8008784:	d90f      	bls.n	80087a6 <_malloc_r+0x7e>
 8008786:	600b      	str	r3, [r1, #0]
 8008788:	50cd      	str	r5, [r1, r3]
 800878a:	18cc      	adds	r4, r1, r3
 800878c:	4630      	mov	r0, r6
 800878e:	f000 f85c 	bl	800884a <__malloc_unlock>
 8008792:	f104 000b 	add.w	r0, r4, #11
 8008796:	1d23      	adds	r3, r4, #4
 8008798:	f020 0007 	bic.w	r0, r0, #7
 800879c:	1ac3      	subs	r3, r0, r3
 800879e:	d0d3      	beq.n	8008748 <_malloc_r+0x20>
 80087a0:	425a      	negs	r2, r3
 80087a2:	50e2      	str	r2, [r4, r3]
 80087a4:	e7d0      	b.n	8008748 <_malloc_r+0x20>
 80087a6:	428c      	cmp	r4, r1
 80087a8:	684b      	ldr	r3, [r1, #4]
 80087aa:	bf16      	itet	ne
 80087ac:	6063      	strne	r3, [r4, #4]
 80087ae:	6013      	streq	r3, [r2, #0]
 80087b0:	460c      	movne	r4, r1
 80087b2:	e7eb      	b.n	800878c <_malloc_r+0x64>
 80087b4:	460c      	mov	r4, r1
 80087b6:	6849      	ldr	r1, [r1, #4]
 80087b8:	e7cc      	b.n	8008754 <_malloc_r+0x2c>
 80087ba:	1cc4      	adds	r4, r0, #3
 80087bc:	f024 0403 	bic.w	r4, r4, #3
 80087c0:	42a0      	cmp	r0, r4
 80087c2:	d005      	beq.n	80087d0 <_malloc_r+0xa8>
 80087c4:	1a21      	subs	r1, r4, r0
 80087c6:	4630      	mov	r0, r6
 80087c8:	f000 f82e 	bl	8008828 <_sbrk_r>
 80087cc:	3001      	adds	r0, #1
 80087ce:	d0cf      	beq.n	8008770 <_malloc_r+0x48>
 80087d0:	6025      	str	r5, [r4, #0]
 80087d2:	e7db      	b.n	800878c <_malloc_r+0x64>
 80087d4:	20000218 	.word	0x20000218
 80087d8:	2000021c 	.word	0x2000021c

080087dc <_realloc_r>:
 80087dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087de:	4607      	mov	r7, r0
 80087e0:	4614      	mov	r4, r2
 80087e2:	460e      	mov	r6, r1
 80087e4:	b921      	cbnz	r1, 80087f0 <_realloc_r+0x14>
 80087e6:	4611      	mov	r1, r2
 80087e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80087ec:	f7ff bf9c 	b.w	8008728 <_malloc_r>
 80087f0:	b922      	cbnz	r2, 80087fc <_realloc_r+0x20>
 80087f2:	f7ff ff4b 	bl	800868c <_free_r>
 80087f6:	4625      	mov	r5, r4
 80087f8:	4628      	mov	r0, r5
 80087fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087fc:	f000 f826 	bl	800884c <_malloc_usable_size_r>
 8008800:	42a0      	cmp	r0, r4
 8008802:	d20f      	bcs.n	8008824 <_realloc_r+0x48>
 8008804:	4621      	mov	r1, r4
 8008806:	4638      	mov	r0, r7
 8008808:	f7ff ff8e 	bl	8008728 <_malloc_r>
 800880c:	4605      	mov	r5, r0
 800880e:	2800      	cmp	r0, #0
 8008810:	d0f2      	beq.n	80087f8 <_realloc_r+0x1c>
 8008812:	4631      	mov	r1, r6
 8008814:	4622      	mov	r2, r4
 8008816:	f7ff fc11 	bl	800803c <memcpy>
 800881a:	4631      	mov	r1, r6
 800881c:	4638      	mov	r0, r7
 800881e:	f7ff ff35 	bl	800868c <_free_r>
 8008822:	e7e9      	b.n	80087f8 <_realloc_r+0x1c>
 8008824:	4635      	mov	r5, r6
 8008826:	e7e7      	b.n	80087f8 <_realloc_r+0x1c>

08008828 <_sbrk_r>:
 8008828:	b538      	push	{r3, r4, r5, lr}
 800882a:	4c06      	ldr	r4, [pc, #24]	; (8008844 <_sbrk_r+0x1c>)
 800882c:	2300      	movs	r3, #0
 800882e:	4605      	mov	r5, r0
 8008830:	4608      	mov	r0, r1
 8008832:	6023      	str	r3, [r4, #0]
 8008834:	f7fb fc6e 	bl	8004114 <_sbrk>
 8008838:	1c43      	adds	r3, r0, #1
 800883a:	d102      	bne.n	8008842 <_sbrk_r+0x1a>
 800883c:	6823      	ldr	r3, [r4, #0]
 800883e:	b103      	cbz	r3, 8008842 <_sbrk_r+0x1a>
 8008840:	602b      	str	r3, [r5, #0]
 8008842:	bd38      	pop	{r3, r4, r5, pc}
 8008844:	200003e4 	.word	0x200003e4

08008848 <__malloc_lock>:
 8008848:	4770      	bx	lr

0800884a <__malloc_unlock>:
 800884a:	4770      	bx	lr

0800884c <_malloc_usable_size_r>:
 800884c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008850:	1f18      	subs	r0, r3, #4
 8008852:	2b00      	cmp	r3, #0
 8008854:	bfbc      	itt	lt
 8008856:	580b      	ldrlt	r3, [r1, r0]
 8008858:	18c0      	addlt	r0, r0, r3
 800885a:	4770      	bx	lr
 800885c:	0000      	movs	r0, r0
	...

08008860 <sin>:
 8008860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008862:	ec51 0b10 	vmov	r0, r1, d0
 8008866:	4a20      	ldr	r2, [pc, #128]	; (80088e8 <sin+0x88>)
 8008868:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800886c:	4293      	cmp	r3, r2
 800886e:	dc07      	bgt.n	8008880 <sin+0x20>
 8008870:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80088e0 <sin+0x80>
 8008874:	2000      	movs	r0, #0
 8008876:	f000 fe37 	bl	80094e8 <__kernel_sin>
 800887a:	ec51 0b10 	vmov	r0, r1, d0
 800887e:	e007      	b.n	8008890 <sin+0x30>
 8008880:	4a1a      	ldr	r2, [pc, #104]	; (80088ec <sin+0x8c>)
 8008882:	4293      	cmp	r3, r2
 8008884:	dd09      	ble.n	800889a <sin+0x3a>
 8008886:	ee10 2a10 	vmov	r2, s0
 800888a:	460b      	mov	r3, r1
 800888c:	f7f7 fd04 	bl	8000298 <__aeabi_dsub>
 8008890:	ec41 0b10 	vmov	d0, r0, r1
 8008894:	b005      	add	sp, #20
 8008896:	f85d fb04 	ldr.w	pc, [sp], #4
 800889a:	4668      	mov	r0, sp
 800889c:	f000 f828 	bl	80088f0 <__ieee754_rem_pio2>
 80088a0:	f000 0003 	and.w	r0, r0, #3
 80088a4:	2801      	cmp	r0, #1
 80088a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80088aa:	ed9d 0b00 	vldr	d0, [sp]
 80088ae:	d004      	beq.n	80088ba <sin+0x5a>
 80088b0:	2802      	cmp	r0, #2
 80088b2:	d005      	beq.n	80088c0 <sin+0x60>
 80088b4:	b970      	cbnz	r0, 80088d4 <sin+0x74>
 80088b6:	2001      	movs	r0, #1
 80088b8:	e7dd      	b.n	8008876 <sin+0x16>
 80088ba:	f000 fa0d 	bl	8008cd8 <__kernel_cos>
 80088be:	e7dc      	b.n	800887a <sin+0x1a>
 80088c0:	2001      	movs	r0, #1
 80088c2:	f000 fe11 	bl	80094e8 <__kernel_sin>
 80088c6:	ec53 2b10 	vmov	r2, r3, d0
 80088ca:	ee10 0a10 	vmov	r0, s0
 80088ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80088d2:	e7dd      	b.n	8008890 <sin+0x30>
 80088d4:	f000 fa00 	bl	8008cd8 <__kernel_cos>
 80088d8:	e7f5      	b.n	80088c6 <sin+0x66>
 80088da:	bf00      	nop
 80088dc:	f3af 8000 	nop.w
	...
 80088e8:	3fe921fb 	.word	0x3fe921fb
 80088ec:	7fefffff 	.word	0x7fefffff

080088f0 <__ieee754_rem_pio2>:
 80088f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f4:	ec57 6b10 	vmov	r6, r7, d0
 80088f8:	4bc3      	ldr	r3, [pc, #780]	; (8008c08 <__ieee754_rem_pio2+0x318>)
 80088fa:	b08d      	sub	sp, #52	; 0x34
 80088fc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008900:	4598      	cmp	r8, r3
 8008902:	4604      	mov	r4, r0
 8008904:	9704      	str	r7, [sp, #16]
 8008906:	dc07      	bgt.n	8008918 <__ieee754_rem_pio2+0x28>
 8008908:	2200      	movs	r2, #0
 800890a:	2300      	movs	r3, #0
 800890c:	ed84 0b00 	vstr	d0, [r4]
 8008910:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008914:	2500      	movs	r5, #0
 8008916:	e027      	b.n	8008968 <__ieee754_rem_pio2+0x78>
 8008918:	4bbc      	ldr	r3, [pc, #752]	; (8008c0c <__ieee754_rem_pio2+0x31c>)
 800891a:	4598      	cmp	r8, r3
 800891c:	dc75      	bgt.n	8008a0a <__ieee754_rem_pio2+0x11a>
 800891e:	9b04      	ldr	r3, [sp, #16]
 8008920:	4dbb      	ldr	r5, [pc, #748]	; (8008c10 <__ieee754_rem_pio2+0x320>)
 8008922:	2b00      	cmp	r3, #0
 8008924:	ee10 0a10 	vmov	r0, s0
 8008928:	a3a9      	add	r3, pc, #676	; (adr r3, 8008bd0 <__ieee754_rem_pio2+0x2e0>)
 800892a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892e:	4639      	mov	r1, r7
 8008930:	dd36      	ble.n	80089a0 <__ieee754_rem_pio2+0xb0>
 8008932:	f7f7 fcb1 	bl	8000298 <__aeabi_dsub>
 8008936:	45a8      	cmp	r8, r5
 8008938:	4606      	mov	r6, r0
 800893a:	460f      	mov	r7, r1
 800893c:	d018      	beq.n	8008970 <__ieee754_rem_pio2+0x80>
 800893e:	a3a6      	add	r3, pc, #664	; (adr r3, 8008bd8 <__ieee754_rem_pio2+0x2e8>)
 8008940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008944:	f7f7 fca8 	bl	8000298 <__aeabi_dsub>
 8008948:	4602      	mov	r2, r0
 800894a:	460b      	mov	r3, r1
 800894c:	e9c4 2300 	strd	r2, r3, [r4]
 8008950:	4630      	mov	r0, r6
 8008952:	4639      	mov	r1, r7
 8008954:	f7f7 fca0 	bl	8000298 <__aeabi_dsub>
 8008958:	a39f      	add	r3, pc, #636	; (adr r3, 8008bd8 <__ieee754_rem_pio2+0x2e8>)
 800895a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895e:	f7f7 fc9b 	bl	8000298 <__aeabi_dsub>
 8008962:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008966:	2501      	movs	r5, #1
 8008968:	4628      	mov	r0, r5
 800896a:	b00d      	add	sp, #52	; 0x34
 800896c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008970:	a39b      	add	r3, pc, #620	; (adr r3, 8008be0 <__ieee754_rem_pio2+0x2f0>)
 8008972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008976:	f7f7 fc8f 	bl	8000298 <__aeabi_dsub>
 800897a:	a39b      	add	r3, pc, #620	; (adr r3, 8008be8 <__ieee754_rem_pio2+0x2f8>)
 800897c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008980:	4606      	mov	r6, r0
 8008982:	460f      	mov	r7, r1
 8008984:	f7f7 fc88 	bl	8000298 <__aeabi_dsub>
 8008988:	4602      	mov	r2, r0
 800898a:	460b      	mov	r3, r1
 800898c:	e9c4 2300 	strd	r2, r3, [r4]
 8008990:	4630      	mov	r0, r6
 8008992:	4639      	mov	r1, r7
 8008994:	f7f7 fc80 	bl	8000298 <__aeabi_dsub>
 8008998:	a393      	add	r3, pc, #588	; (adr r3, 8008be8 <__ieee754_rem_pio2+0x2f8>)
 800899a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899e:	e7de      	b.n	800895e <__ieee754_rem_pio2+0x6e>
 80089a0:	f7f7 fc7c 	bl	800029c <__adddf3>
 80089a4:	45a8      	cmp	r8, r5
 80089a6:	4606      	mov	r6, r0
 80089a8:	460f      	mov	r7, r1
 80089aa:	d016      	beq.n	80089da <__ieee754_rem_pio2+0xea>
 80089ac:	a38a      	add	r3, pc, #552	; (adr r3, 8008bd8 <__ieee754_rem_pio2+0x2e8>)
 80089ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b2:	f7f7 fc73 	bl	800029c <__adddf3>
 80089b6:	4602      	mov	r2, r0
 80089b8:	460b      	mov	r3, r1
 80089ba:	e9c4 2300 	strd	r2, r3, [r4]
 80089be:	4630      	mov	r0, r6
 80089c0:	4639      	mov	r1, r7
 80089c2:	f7f7 fc69 	bl	8000298 <__aeabi_dsub>
 80089c6:	a384      	add	r3, pc, #528	; (adr r3, 8008bd8 <__ieee754_rem_pio2+0x2e8>)
 80089c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089cc:	f7f7 fc66 	bl	800029c <__adddf3>
 80089d0:	f04f 35ff 	mov.w	r5, #4294967295
 80089d4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80089d8:	e7c6      	b.n	8008968 <__ieee754_rem_pio2+0x78>
 80089da:	a381      	add	r3, pc, #516	; (adr r3, 8008be0 <__ieee754_rem_pio2+0x2f0>)
 80089dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e0:	f7f7 fc5c 	bl	800029c <__adddf3>
 80089e4:	a380      	add	r3, pc, #512	; (adr r3, 8008be8 <__ieee754_rem_pio2+0x2f8>)
 80089e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ea:	4606      	mov	r6, r0
 80089ec:	460f      	mov	r7, r1
 80089ee:	f7f7 fc55 	bl	800029c <__adddf3>
 80089f2:	4602      	mov	r2, r0
 80089f4:	460b      	mov	r3, r1
 80089f6:	e9c4 2300 	strd	r2, r3, [r4]
 80089fa:	4630      	mov	r0, r6
 80089fc:	4639      	mov	r1, r7
 80089fe:	f7f7 fc4b 	bl	8000298 <__aeabi_dsub>
 8008a02:	a379      	add	r3, pc, #484	; (adr r3, 8008be8 <__ieee754_rem_pio2+0x2f8>)
 8008a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a08:	e7e0      	b.n	80089cc <__ieee754_rem_pio2+0xdc>
 8008a0a:	4b82      	ldr	r3, [pc, #520]	; (8008c14 <__ieee754_rem_pio2+0x324>)
 8008a0c:	4598      	cmp	r8, r3
 8008a0e:	f300 80d0 	bgt.w	8008bb2 <__ieee754_rem_pio2+0x2c2>
 8008a12:	f000 fe23 	bl	800965c <fabs>
 8008a16:	ec57 6b10 	vmov	r6, r7, d0
 8008a1a:	ee10 0a10 	vmov	r0, s0
 8008a1e:	a374      	add	r3, pc, #464	; (adr r3, 8008bf0 <__ieee754_rem_pio2+0x300>)
 8008a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a24:	4639      	mov	r1, r7
 8008a26:	f7f7 fdef 	bl	8000608 <__aeabi_dmul>
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	4b7a      	ldr	r3, [pc, #488]	; (8008c18 <__ieee754_rem_pio2+0x328>)
 8008a2e:	f7f7 fc35 	bl	800029c <__adddf3>
 8008a32:	f7f8 f883 	bl	8000b3c <__aeabi_d2iz>
 8008a36:	4605      	mov	r5, r0
 8008a38:	f7f7 fd7c 	bl	8000534 <__aeabi_i2d>
 8008a3c:	a364      	add	r3, pc, #400	; (adr r3, 8008bd0 <__ieee754_rem_pio2+0x2e0>)
 8008a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a46:	f7f7 fddf 	bl	8000608 <__aeabi_dmul>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	4630      	mov	r0, r6
 8008a50:	4639      	mov	r1, r7
 8008a52:	f7f7 fc21 	bl	8000298 <__aeabi_dsub>
 8008a56:	a360      	add	r3, pc, #384	; (adr r3, 8008bd8 <__ieee754_rem_pio2+0x2e8>)
 8008a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5c:	4682      	mov	sl, r0
 8008a5e:	468b      	mov	fp, r1
 8008a60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a64:	f7f7 fdd0 	bl	8000608 <__aeabi_dmul>
 8008a68:	2d1f      	cmp	r5, #31
 8008a6a:	4606      	mov	r6, r0
 8008a6c:	460f      	mov	r7, r1
 8008a6e:	dc0c      	bgt.n	8008a8a <__ieee754_rem_pio2+0x19a>
 8008a70:	1e6a      	subs	r2, r5, #1
 8008a72:	4b6a      	ldr	r3, [pc, #424]	; (8008c1c <__ieee754_rem_pio2+0x32c>)
 8008a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a78:	4543      	cmp	r3, r8
 8008a7a:	d006      	beq.n	8008a8a <__ieee754_rem_pio2+0x19a>
 8008a7c:	4632      	mov	r2, r6
 8008a7e:	463b      	mov	r3, r7
 8008a80:	4650      	mov	r0, sl
 8008a82:	4659      	mov	r1, fp
 8008a84:	f7f7 fc08 	bl	8000298 <__aeabi_dsub>
 8008a88:	e00e      	b.n	8008aa8 <__ieee754_rem_pio2+0x1b8>
 8008a8a:	4632      	mov	r2, r6
 8008a8c:	463b      	mov	r3, r7
 8008a8e:	4650      	mov	r0, sl
 8008a90:	4659      	mov	r1, fp
 8008a92:	f7f7 fc01 	bl	8000298 <__aeabi_dsub>
 8008a96:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008a9a:	9305      	str	r3, [sp, #20]
 8008a9c:	9a05      	ldr	r2, [sp, #20]
 8008a9e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008aa2:	1ad3      	subs	r3, r2, r3
 8008aa4:	2b10      	cmp	r3, #16
 8008aa6:	dc02      	bgt.n	8008aae <__ieee754_rem_pio2+0x1be>
 8008aa8:	e9c4 0100 	strd	r0, r1, [r4]
 8008aac:	e039      	b.n	8008b22 <__ieee754_rem_pio2+0x232>
 8008aae:	a34c      	add	r3, pc, #304	; (adr r3, 8008be0 <__ieee754_rem_pio2+0x2f0>)
 8008ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ab8:	f7f7 fda6 	bl	8000608 <__aeabi_dmul>
 8008abc:	4606      	mov	r6, r0
 8008abe:	460f      	mov	r7, r1
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	460b      	mov	r3, r1
 8008ac4:	4650      	mov	r0, sl
 8008ac6:	4659      	mov	r1, fp
 8008ac8:	f7f7 fbe6 	bl	8000298 <__aeabi_dsub>
 8008acc:	4602      	mov	r2, r0
 8008ace:	460b      	mov	r3, r1
 8008ad0:	4680      	mov	r8, r0
 8008ad2:	4689      	mov	r9, r1
 8008ad4:	4650      	mov	r0, sl
 8008ad6:	4659      	mov	r1, fp
 8008ad8:	f7f7 fbde 	bl	8000298 <__aeabi_dsub>
 8008adc:	4632      	mov	r2, r6
 8008ade:	463b      	mov	r3, r7
 8008ae0:	f7f7 fbda 	bl	8000298 <__aeabi_dsub>
 8008ae4:	a340      	add	r3, pc, #256	; (adr r3, 8008be8 <__ieee754_rem_pio2+0x2f8>)
 8008ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aea:	4606      	mov	r6, r0
 8008aec:	460f      	mov	r7, r1
 8008aee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008af2:	f7f7 fd89 	bl	8000608 <__aeabi_dmul>
 8008af6:	4632      	mov	r2, r6
 8008af8:	463b      	mov	r3, r7
 8008afa:	f7f7 fbcd 	bl	8000298 <__aeabi_dsub>
 8008afe:	4602      	mov	r2, r0
 8008b00:	460b      	mov	r3, r1
 8008b02:	4606      	mov	r6, r0
 8008b04:	460f      	mov	r7, r1
 8008b06:	4640      	mov	r0, r8
 8008b08:	4649      	mov	r1, r9
 8008b0a:	f7f7 fbc5 	bl	8000298 <__aeabi_dsub>
 8008b0e:	9a05      	ldr	r2, [sp, #20]
 8008b10:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008b14:	1ad3      	subs	r3, r2, r3
 8008b16:	2b31      	cmp	r3, #49	; 0x31
 8008b18:	dc20      	bgt.n	8008b5c <__ieee754_rem_pio2+0x26c>
 8008b1a:	e9c4 0100 	strd	r0, r1, [r4]
 8008b1e:	46c2      	mov	sl, r8
 8008b20:	46cb      	mov	fp, r9
 8008b22:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008b26:	4650      	mov	r0, sl
 8008b28:	4642      	mov	r2, r8
 8008b2a:	464b      	mov	r3, r9
 8008b2c:	4659      	mov	r1, fp
 8008b2e:	f7f7 fbb3 	bl	8000298 <__aeabi_dsub>
 8008b32:	463b      	mov	r3, r7
 8008b34:	4632      	mov	r2, r6
 8008b36:	f7f7 fbaf 	bl	8000298 <__aeabi_dsub>
 8008b3a:	9b04      	ldr	r3, [sp, #16]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008b42:	f6bf af11 	bge.w	8008968 <__ieee754_rem_pio2+0x78>
 8008b46:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008b4a:	6063      	str	r3, [r4, #4]
 8008b4c:	f8c4 8000 	str.w	r8, [r4]
 8008b50:	60a0      	str	r0, [r4, #8]
 8008b52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b56:	60e3      	str	r3, [r4, #12]
 8008b58:	426d      	negs	r5, r5
 8008b5a:	e705      	b.n	8008968 <__ieee754_rem_pio2+0x78>
 8008b5c:	a326      	add	r3, pc, #152	; (adr r3, 8008bf8 <__ieee754_rem_pio2+0x308>)
 8008b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b66:	f7f7 fd4f 	bl	8000608 <__aeabi_dmul>
 8008b6a:	4606      	mov	r6, r0
 8008b6c:	460f      	mov	r7, r1
 8008b6e:	4602      	mov	r2, r0
 8008b70:	460b      	mov	r3, r1
 8008b72:	4640      	mov	r0, r8
 8008b74:	4649      	mov	r1, r9
 8008b76:	f7f7 fb8f 	bl	8000298 <__aeabi_dsub>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	4682      	mov	sl, r0
 8008b80:	468b      	mov	fp, r1
 8008b82:	4640      	mov	r0, r8
 8008b84:	4649      	mov	r1, r9
 8008b86:	f7f7 fb87 	bl	8000298 <__aeabi_dsub>
 8008b8a:	4632      	mov	r2, r6
 8008b8c:	463b      	mov	r3, r7
 8008b8e:	f7f7 fb83 	bl	8000298 <__aeabi_dsub>
 8008b92:	a31b      	add	r3, pc, #108	; (adr r3, 8008c00 <__ieee754_rem_pio2+0x310>)
 8008b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b98:	4606      	mov	r6, r0
 8008b9a:	460f      	mov	r7, r1
 8008b9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ba0:	f7f7 fd32 	bl	8000608 <__aeabi_dmul>
 8008ba4:	4632      	mov	r2, r6
 8008ba6:	463b      	mov	r3, r7
 8008ba8:	f7f7 fb76 	bl	8000298 <__aeabi_dsub>
 8008bac:	4606      	mov	r6, r0
 8008bae:	460f      	mov	r7, r1
 8008bb0:	e764      	b.n	8008a7c <__ieee754_rem_pio2+0x18c>
 8008bb2:	4b1b      	ldr	r3, [pc, #108]	; (8008c20 <__ieee754_rem_pio2+0x330>)
 8008bb4:	4598      	cmp	r8, r3
 8008bb6:	dd35      	ble.n	8008c24 <__ieee754_rem_pio2+0x334>
 8008bb8:	ee10 2a10 	vmov	r2, s0
 8008bbc:	463b      	mov	r3, r7
 8008bbe:	4630      	mov	r0, r6
 8008bc0:	4639      	mov	r1, r7
 8008bc2:	f7f7 fb69 	bl	8000298 <__aeabi_dsub>
 8008bc6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008bca:	e9c4 0100 	strd	r0, r1, [r4]
 8008bce:	e6a1      	b.n	8008914 <__ieee754_rem_pio2+0x24>
 8008bd0:	54400000 	.word	0x54400000
 8008bd4:	3ff921fb 	.word	0x3ff921fb
 8008bd8:	1a626331 	.word	0x1a626331
 8008bdc:	3dd0b461 	.word	0x3dd0b461
 8008be0:	1a600000 	.word	0x1a600000
 8008be4:	3dd0b461 	.word	0x3dd0b461
 8008be8:	2e037073 	.word	0x2e037073
 8008bec:	3ba3198a 	.word	0x3ba3198a
 8008bf0:	6dc9c883 	.word	0x6dc9c883
 8008bf4:	3fe45f30 	.word	0x3fe45f30
 8008bf8:	2e000000 	.word	0x2e000000
 8008bfc:	3ba3198a 	.word	0x3ba3198a
 8008c00:	252049c1 	.word	0x252049c1
 8008c04:	397b839a 	.word	0x397b839a
 8008c08:	3fe921fb 	.word	0x3fe921fb
 8008c0c:	4002d97b 	.word	0x4002d97b
 8008c10:	3ff921fb 	.word	0x3ff921fb
 8008c14:	413921fb 	.word	0x413921fb
 8008c18:	3fe00000 	.word	0x3fe00000
 8008c1c:	08009f98 	.word	0x08009f98
 8008c20:	7fefffff 	.word	0x7fefffff
 8008c24:	ea4f 5528 	mov.w	r5, r8, asr #20
 8008c28:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8008c2c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8008c30:	4630      	mov	r0, r6
 8008c32:	460f      	mov	r7, r1
 8008c34:	f7f7 ff82 	bl	8000b3c <__aeabi_d2iz>
 8008c38:	f7f7 fc7c 	bl	8000534 <__aeabi_i2d>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	460b      	mov	r3, r1
 8008c40:	4630      	mov	r0, r6
 8008c42:	4639      	mov	r1, r7
 8008c44:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008c48:	f7f7 fb26 	bl	8000298 <__aeabi_dsub>
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	4b1f      	ldr	r3, [pc, #124]	; (8008ccc <__ieee754_rem_pio2+0x3dc>)
 8008c50:	f7f7 fcda 	bl	8000608 <__aeabi_dmul>
 8008c54:	460f      	mov	r7, r1
 8008c56:	4606      	mov	r6, r0
 8008c58:	f7f7 ff70 	bl	8000b3c <__aeabi_d2iz>
 8008c5c:	f7f7 fc6a 	bl	8000534 <__aeabi_i2d>
 8008c60:	4602      	mov	r2, r0
 8008c62:	460b      	mov	r3, r1
 8008c64:	4630      	mov	r0, r6
 8008c66:	4639      	mov	r1, r7
 8008c68:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008c6c:	f7f7 fb14 	bl	8000298 <__aeabi_dsub>
 8008c70:	2200      	movs	r2, #0
 8008c72:	4b16      	ldr	r3, [pc, #88]	; (8008ccc <__ieee754_rem_pio2+0x3dc>)
 8008c74:	f7f7 fcc8 	bl	8000608 <__aeabi_dmul>
 8008c78:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008c7c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8008c80:	f04f 0803 	mov.w	r8, #3
 8008c84:	2600      	movs	r6, #0
 8008c86:	2700      	movs	r7, #0
 8008c88:	4632      	mov	r2, r6
 8008c8a:	463b      	mov	r3, r7
 8008c8c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8008c90:	f108 3aff 	add.w	sl, r8, #4294967295
 8008c94:	f7f7 ff20 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c98:	b9b0      	cbnz	r0, 8008cc8 <__ieee754_rem_pio2+0x3d8>
 8008c9a:	4b0d      	ldr	r3, [pc, #52]	; (8008cd0 <__ieee754_rem_pio2+0x3e0>)
 8008c9c:	9301      	str	r3, [sp, #4]
 8008c9e:	2302      	movs	r3, #2
 8008ca0:	9300      	str	r3, [sp, #0]
 8008ca2:	462a      	mov	r2, r5
 8008ca4:	4643      	mov	r3, r8
 8008ca6:	4621      	mov	r1, r4
 8008ca8:	a806      	add	r0, sp, #24
 8008caa:	f000 f8dd 	bl	8008e68 <__kernel_rem_pio2>
 8008cae:	9b04      	ldr	r3, [sp, #16]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	4605      	mov	r5, r0
 8008cb4:	f6bf ae58 	bge.w	8008968 <__ieee754_rem_pio2+0x78>
 8008cb8:	6863      	ldr	r3, [r4, #4]
 8008cba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008cbe:	6063      	str	r3, [r4, #4]
 8008cc0:	68e3      	ldr	r3, [r4, #12]
 8008cc2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008cc6:	e746      	b.n	8008b56 <__ieee754_rem_pio2+0x266>
 8008cc8:	46d0      	mov	r8, sl
 8008cca:	e7dd      	b.n	8008c88 <__ieee754_rem_pio2+0x398>
 8008ccc:	41700000 	.word	0x41700000
 8008cd0:	0800a018 	.word	0x0800a018
 8008cd4:	00000000 	.word	0x00000000

08008cd8 <__kernel_cos>:
 8008cd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cdc:	ec59 8b10 	vmov	r8, r9, d0
 8008ce0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8008ce4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8008ce8:	ed2d 8b02 	vpush	{d8}
 8008cec:	eeb0 8a41 	vmov.f32	s16, s2
 8008cf0:	eef0 8a61 	vmov.f32	s17, s3
 8008cf4:	da07      	bge.n	8008d06 <__kernel_cos+0x2e>
 8008cf6:	ee10 0a10 	vmov	r0, s0
 8008cfa:	4649      	mov	r1, r9
 8008cfc:	f7f7 ff1e 	bl	8000b3c <__aeabi_d2iz>
 8008d00:	2800      	cmp	r0, #0
 8008d02:	f000 8089 	beq.w	8008e18 <__kernel_cos+0x140>
 8008d06:	4642      	mov	r2, r8
 8008d08:	464b      	mov	r3, r9
 8008d0a:	4640      	mov	r0, r8
 8008d0c:	4649      	mov	r1, r9
 8008d0e:	f7f7 fc7b 	bl	8000608 <__aeabi_dmul>
 8008d12:	2200      	movs	r2, #0
 8008d14:	4b4e      	ldr	r3, [pc, #312]	; (8008e50 <__kernel_cos+0x178>)
 8008d16:	4604      	mov	r4, r0
 8008d18:	460d      	mov	r5, r1
 8008d1a:	f7f7 fc75 	bl	8000608 <__aeabi_dmul>
 8008d1e:	a340      	add	r3, pc, #256	; (adr r3, 8008e20 <__kernel_cos+0x148>)
 8008d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d24:	4682      	mov	sl, r0
 8008d26:	468b      	mov	fp, r1
 8008d28:	4620      	mov	r0, r4
 8008d2a:	4629      	mov	r1, r5
 8008d2c:	f7f7 fc6c 	bl	8000608 <__aeabi_dmul>
 8008d30:	a33d      	add	r3, pc, #244	; (adr r3, 8008e28 <__kernel_cos+0x150>)
 8008d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d36:	f7f7 fab1 	bl	800029c <__adddf3>
 8008d3a:	4622      	mov	r2, r4
 8008d3c:	462b      	mov	r3, r5
 8008d3e:	f7f7 fc63 	bl	8000608 <__aeabi_dmul>
 8008d42:	a33b      	add	r3, pc, #236	; (adr r3, 8008e30 <__kernel_cos+0x158>)
 8008d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d48:	f7f7 faa6 	bl	8000298 <__aeabi_dsub>
 8008d4c:	4622      	mov	r2, r4
 8008d4e:	462b      	mov	r3, r5
 8008d50:	f7f7 fc5a 	bl	8000608 <__aeabi_dmul>
 8008d54:	a338      	add	r3, pc, #224	; (adr r3, 8008e38 <__kernel_cos+0x160>)
 8008d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5a:	f7f7 fa9f 	bl	800029c <__adddf3>
 8008d5e:	4622      	mov	r2, r4
 8008d60:	462b      	mov	r3, r5
 8008d62:	f7f7 fc51 	bl	8000608 <__aeabi_dmul>
 8008d66:	a336      	add	r3, pc, #216	; (adr r3, 8008e40 <__kernel_cos+0x168>)
 8008d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6c:	f7f7 fa94 	bl	8000298 <__aeabi_dsub>
 8008d70:	4622      	mov	r2, r4
 8008d72:	462b      	mov	r3, r5
 8008d74:	f7f7 fc48 	bl	8000608 <__aeabi_dmul>
 8008d78:	a333      	add	r3, pc, #204	; (adr r3, 8008e48 <__kernel_cos+0x170>)
 8008d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7e:	f7f7 fa8d 	bl	800029c <__adddf3>
 8008d82:	4622      	mov	r2, r4
 8008d84:	462b      	mov	r3, r5
 8008d86:	f7f7 fc3f 	bl	8000608 <__aeabi_dmul>
 8008d8a:	4622      	mov	r2, r4
 8008d8c:	462b      	mov	r3, r5
 8008d8e:	f7f7 fc3b 	bl	8000608 <__aeabi_dmul>
 8008d92:	ec53 2b18 	vmov	r2, r3, d8
 8008d96:	4604      	mov	r4, r0
 8008d98:	460d      	mov	r5, r1
 8008d9a:	4640      	mov	r0, r8
 8008d9c:	4649      	mov	r1, r9
 8008d9e:	f7f7 fc33 	bl	8000608 <__aeabi_dmul>
 8008da2:	460b      	mov	r3, r1
 8008da4:	4602      	mov	r2, r0
 8008da6:	4629      	mov	r1, r5
 8008da8:	4620      	mov	r0, r4
 8008daa:	f7f7 fa75 	bl	8000298 <__aeabi_dsub>
 8008dae:	4b29      	ldr	r3, [pc, #164]	; (8008e54 <__kernel_cos+0x17c>)
 8008db0:	429e      	cmp	r6, r3
 8008db2:	4680      	mov	r8, r0
 8008db4:	4689      	mov	r9, r1
 8008db6:	dc11      	bgt.n	8008ddc <__kernel_cos+0x104>
 8008db8:	4602      	mov	r2, r0
 8008dba:	460b      	mov	r3, r1
 8008dbc:	4650      	mov	r0, sl
 8008dbe:	4659      	mov	r1, fp
 8008dc0:	f7f7 fa6a 	bl	8000298 <__aeabi_dsub>
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	4924      	ldr	r1, [pc, #144]	; (8008e58 <__kernel_cos+0x180>)
 8008dc8:	4602      	mov	r2, r0
 8008dca:	2000      	movs	r0, #0
 8008dcc:	f7f7 fa64 	bl	8000298 <__aeabi_dsub>
 8008dd0:	ecbd 8b02 	vpop	{d8}
 8008dd4:	ec41 0b10 	vmov	d0, r0, r1
 8008dd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ddc:	4b1f      	ldr	r3, [pc, #124]	; (8008e5c <__kernel_cos+0x184>)
 8008dde:	491e      	ldr	r1, [pc, #120]	; (8008e58 <__kernel_cos+0x180>)
 8008de0:	429e      	cmp	r6, r3
 8008de2:	bfcc      	ite	gt
 8008de4:	4d1e      	ldrgt	r5, [pc, #120]	; (8008e60 <__kernel_cos+0x188>)
 8008de6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8008dea:	2400      	movs	r4, #0
 8008dec:	4622      	mov	r2, r4
 8008dee:	462b      	mov	r3, r5
 8008df0:	2000      	movs	r0, #0
 8008df2:	f7f7 fa51 	bl	8000298 <__aeabi_dsub>
 8008df6:	4622      	mov	r2, r4
 8008df8:	4606      	mov	r6, r0
 8008dfa:	460f      	mov	r7, r1
 8008dfc:	462b      	mov	r3, r5
 8008dfe:	4650      	mov	r0, sl
 8008e00:	4659      	mov	r1, fp
 8008e02:	f7f7 fa49 	bl	8000298 <__aeabi_dsub>
 8008e06:	4642      	mov	r2, r8
 8008e08:	464b      	mov	r3, r9
 8008e0a:	f7f7 fa45 	bl	8000298 <__aeabi_dsub>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	460b      	mov	r3, r1
 8008e12:	4630      	mov	r0, r6
 8008e14:	4639      	mov	r1, r7
 8008e16:	e7d9      	b.n	8008dcc <__kernel_cos+0xf4>
 8008e18:	2000      	movs	r0, #0
 8008e1a:	490f      	ldr	r1, [pc, #60]	; (8008e58 <__kernel_cos+0x180>)
 8008e1c:	e7d8      	b.n	8008dd0 <__kernel_cos+0xf8>
 8008e1e:	bf00      	nop
 8008e20:	be8838d4 	.word	0xbe8838d4
 8008e24:	bda8fae9 	.word	0xbda8fae9
 8008e28:	bdb4b1c4 	.word	0xbdb4b1c4
 8008e2c:	3e21ee9e 	.word	0x3e21ee9e
 8008e30:	809c52ad 	.word	0x809c52ad
 8008e34:	3e927e4f 	.word	0x3e927e4f
 8008e38:	19cb1590 	.word	0x19cb1590
 8008e3c:	3efa01a0 	.word	0x3efa01a0
 8008e40:	16c15177 	.word	0x16c15177
 8008e44:	3f56c16c 	.word	0x3f56c16c
 8008e48:	5555554c 	.word	0x5555554c
 8008e4c:	3fa55555 	.word	0x3fa55555
 8008e50:	3fe00000 	.word	0x3fe00000
 8008e54:	3fd33332 	.word	0x3fd33332
 8008e58:	3ff00000 	.word	0x3ff00000
 8008e5c:	3fe90000 	.word	0x3fe90000
 8008e60:	3fd20000 	.word	0x3fd20000
 8008e64:	00000000 	.word	0x00000000

08008e68 <__kernel_rem_pio2>:
 8008e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e6c:	ed2d 8b02 	vpush	{d8}
 8008e70:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8008e74:	1ed4      	subs	r4, r2, #3
 8008e76:	9308      	str	r3, [sp, #32]
 8008e78:	9101      	str	r1, [sp, #4]
 8008e7a:	4bc5      	ldr	r3, [pc, #788]	; (8009190 <__kernel_rem_pio2+0x328>)
 8008e7c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8008e7e:	9009      	str	r0, [sp, #36]	; 0x24
 8008e80:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008e84:	9304      	str	r3, [sp, #16]
 8008e86:	9b08      	ldr	r3, [sp, #32]
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	9307      	str	r3, [sp, #28]
 8008e8c:	2318      	movs	r3, #24
 8008e8e:	fb94 f4f3 	sdiv	r4, r4, r3
 8008e92:	f06f 0317 	mvn.w	r3, #23
 8008e96:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8008e9a:	fb04 3303 	mla	r3, r4, r3, r3
 8008e9e:	eb03 0a02 	add.w	sl, r3, r2
 8008ea2:	9b04      	ldr	r3, [sp, #16]
 8008ea4:	9a07      	ldr	r2, [sp, #28]
 8008ea6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8009180 <__kernel_rem_pio2+0x318>
 8008eaa:	eb03 0802 	add.w	r8, r3, r2
 8008eae:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008eb0:	1aa7      	subs	r7, r4, r2
 8008eb2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008eb6:	ae22      	add	r6, sp, #136	; 0x88
 8008eb8:	2500      	movs	r5, #0
 8008eba:	4545      	cmp	r5, r8
 8008ebc:	dd13      	ble.n	8008ee6 <__kernel_rem_pio2+0x7e>
 8008ebe:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8009180 <__kernel_rem_pio2+0x318>
 8008ec2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8008ec6:	2600      	movs	r6, #0
 8008ec8:	9b04      	ldr	r3, [sp, #16]
 8008eca:	429e      	cmp	r6, r3
 8008ecc:	dc32      	bgt.n	8008f34 <__kernel_rem_pio2+0xcc>
 8008ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ed0:	9302      	str	r3, [sp, #8]
 8008ed2:	9b08      	ldr	r3, [sp, #32]
 8008ed4:	199d      	adds	r5, r3, r6
 8008ed6:	ab22      	add	r3, sp, #136	; 0x88
 8008ed8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008edc:	9306      	str	r3, [sp, #24]
 8008ede:	ec59 8b18 	vmov	r8, r9, d8
 8008ee2:	2700      	movs	r7, #0
 8008ee4:	e01f      	b.n	8008f26 <__kernel_rem_pio2+0xbe>
 8008ee6:	42ef      	cmn	r7, r5
 8008ee8:	d407      	bmi.n	8008efa <__kernel_rem_pio2+0x92>
 8008eea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008eee:	f7f7 fb21 	bl	8000534 <__aeabi_i2d>
 8008ef2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008ef6:	3501      	adds	r5, #1
 8008ef8:	e7df      	b.n	8008eba <__kernel_rem_pio2+0x52>
 8008efa:	ec51 0b18 	vmov	r0, r1, d8
 8008efe:	e7f8      	b.n	8008ef2 <__kernel_rem_pio2+0x8a>
 8008f00:	9906      	ldr	r1, [sp, #24]
 8008f02:	9d02      	ldr	r5, [sp, #8]
 8008f04:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8008f08:	9106      	str	r1, [sp, #24]
 8008f0a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8008f0e:	9502      	str	r5, [sp, #8]
 8008f10:	f7f7 fb7a 	bl	8000608 <__aeabi_dmul>
 8008f14:	4602      	mov	r2, r0
 8008f16:	460b      	mov	r3, r1
 8008f18:	4640      	mov	r0, r8
 8008f1a:	4649      	mov	r1, r9
 8008f1c:	f7f7 f9be 	bl	800029c <__adddf3>
 8008f20:	3701      	adds	r7, #1
 8008f22:	4680      	mov	r8, r0
 8008f24:	4689      	mov	r9, r1
 8008f26:	9b07      	ldr	r3, [sp, #28]
 8008f28:	429f      	cmp	r7, r3
 8008f2a:	dde9      	ble.n	8008f00 <__kernel_rem_pio2+0x98>
 8008f2c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8008f30:	3601      	adds	r6, #1
 8008f32:	e7c9      	b.n	8008ec8 <__kernel_rem_pio2+0x60>
 8008f34:	9b04      	ldr	r3, [sp, #16]
 8008f36:	aa0e      	add	r2, sp, #56	; 0x38
 8008f38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008f3c:	930c      	str	r3, [sp, #48]	; 0x30
 8008f3e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008f40:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008f44:	9c04      	ldr	r4, [sp, #16]
 8008f46:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f48:	ab9a      	add	r3, sp, #616	; 0x268
 8008f4a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8008f4e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008f52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008f56:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8008f5a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8008f5e:	ab9a      	add	r3, sp, #616	; 0x268
 8008f60:	445b      	add	r3, fp
 8008f62:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8008f66:	2500      	movs	r5, #0
 8008f68:	1b63      	subs	r3, r4, r5
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	dc78      	bgt.n	8009060 <__kernel_rem_pio2+0x1f8>
 8008f6e:	4650      	mov	r0, sl
 8008f70:	ec49 8b10 	vmov	d0, r8, r9
 8008f74:	f000 fc00 	bl	8009778 <scalbn>
 8008f78:	ec57 6b10 	vmov	r6, r7, d0
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008f82:	ee10 0a10 	vmov	r0, s0
 8008f86:	4639      	mov	r1, r7
 8008f88:	f7f7 fb3e 	bl	8000608 <__aeabi_dmul>
 8008f8c:	ec41 0b10 	vmov	d0, r0, r1
 8008f90:	f000 fb6e 	bl	8009670 <floor>
 8008f94:	2200      	movs	r2, #0
 8008f96:	ec51 0b10 	vmov	r0, r1, d0
 8008f9a:	4b7e      	ldr	r3, [pc, #504]	; (8009194 <__kernel_rem_pio2+0x32c>)
 8008f9c:	f7f7 fb34 	bl	8000608 <__aeabi_dmul>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	4630      	mov	r0, r6
 8008fa6:	4639      	mov	r1, r7
 8008fa8:	f7f7 f976 	bl	8000298 <__aeabi_dsub>
 8008fac:	460f      	mov	r7, r1
 8008fae:	4606      	mov	r6, r0
 8008fb0:	f7f7 fdc4 	bl	8000b3c <__aeabi_d2iz>
 8008fb4:	9006      	str	r0, [sp, #24]
 8008fb6:	f7f7 fabd 	bl	8000534 <__aeabi_i2d>
 8008fba:	4602      	mov	r2, r0
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	4639      	mov	r1, r7
 8008fc2:	f7f7 f969 	bl	8000298 <__aeabi_dsub>
 8008fc6:	f1ba 0f00 	cmp.w	sl, #0
 8008fca:	4606      	mov	r6, r0
 8008fcc:	460f      	mov	r7, r1
 8008fce:	dd6c      	ble.n	80090aa <__kernel_rem_pio2+0x242>
 8008fd0:	1e62      	subs	r2, r4, #1
 8008fd2:	ab0e      	add	r3, sp, #56	; 0x38
 8008fd4:	f1ca 0118 	rsb	r1, sl, #24
 8008fd8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008fdc:	9d06      	ldr	r5, [sp, #24]
 8008fde:	fa40 f301 	asr.w	r3, r0, r1
 8008fe2:	441d      	add	r5, r3
 8008fe4:	408b      	lsls	r3, r1
 8008fe6:	1ac0      	subs	r0, r0, r3
 8008fe8:	ab0e      	add	r3, sp, #56	; 0x38
 8008fea:	9506      	str	r5, [sp, #24]
 8008fec:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008ff0:	f1ca 0317 	rsb	r3, sl, #23
 8008ff4:	fa40 f303 	asr.w	r3, r0, r3
 8008ff8:	9302      	str	r3, [sp, #8]
 8008ffa:	9b02      	ldr	r3, [sp, #8]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	dd62      	ble.n	80090c6 <__kernel_rem_pio2+0x25e>
 8009000:	9b06      	ldr	r3, [sp, #24]
 8009002:	2200      	movs	r2, #0
 8009004:	3301      	adds	r3, #1
 8009006:	9306      	str	r3, [sp, #24]
 8009008:	4615      	mov	r5, r2
 800900a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800900e:	4294      	cmp	r4, r2
 8009010:	f300 8095 	bgt.w	800913e <__kernel_rem_pio2+0x2d6>
 8009014:	f1ba 0f00 	cmp.w	sl, #0
 8009018:	dd07      	ble.n	800902a <__kernel_rem_pio2+0x1c2>
 800901a:	f1ba 0f01 	cmp.w	sl, #1
 800901e:	f000 80a2 	beq.w	8009166 <__kernel_rem_pio2+0x2fe>
 8009022:	f1ba 0f02 	cmp.w	sl, #2
 8009026:	f000 80c1 	beq.w	80091ac <__kernel_rem_pio2+0x344>
 800902a:	9b02      	ldr	r3, [sp, #8]
 800902c:	2b02      	cmp	r3, #2
 800902e:	d14a      	bne.n	80090c6 <__kernel_rem_pio2+0x25e>
 8009030:	4632      	mov	r2, r6
 8009032:	463b      	mov	r3, r7
 8009034:	2000      	movs	r0, #0
 8009036:	4958      	ldr	r1, [pc, #352]	; (8009198 <__kernel_rem_pio2+0x330>)
 8009038:	f7f7 f92e 	bl	8000298 <__aeabi_dsub>
 800903c:	4606      	mov	r6, r0
 800903e:	460f      	mov	r7, r1
 8009040:	2d00      	cmp	r5, #0
 8009042:	d040      	beq.n	80090c6 <__kernel_rem_pio2+0x25e>
 8009044:	4650      	mov	r0, sl
 8009046:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8009188 <__kernel_rem_pio2+0x320>
 800904a:	f000 fb95 	bl	8009778 <scalbn>
 800904e:	4630      	mov	r0, r6
 8009050:	4639      	mov	r1, r7
 8009052:	ec53 2b10 	vmov	r2, r3, d0
 8009056:	f7f7 f91f 	bl	8000298 <__aeabi_dsub>
 800905a:	4606      	mov	r6, r0
 800905c:	460f      	mov	r7, r1
 800905e:	e032      	b.n	80090c6 <__kernel_rem_pio2+0x25e>
 8009060:	2200      	movs	r2, #0
 8009062:	4b4e      	ldr	r3, [pc, #312]	; (800919c <__kernel_rem_pio2+0x334>)
 8009064:	4640      	mov	r0, r8
 8009066:	4649      	mov	r1, r9
 8009068:	f7f7 face 	bl	8000608 <__aeabi_dmul>
 800906c:	f7f7 fd66 	bl	8000b3c <__aeabi_d2iz>
 8009070:	f7f7 fa60 	bl	8000534 <__aeabi_i2d>
 8009074:	2200      	movs	r2, #0
 8009076:	4b4a      	ldr	r3, [pc, #296]	; (80091a0 <__kernel_rem_pio2+0x338>)
 8009078:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800907c:	f7f7 fac4 	bl	8000608 <__aeabi_dmul>
 8009080:	4602      	mov	r2, r0
 8009082:	460b      	mov	r3, r1
 8009084:	4640      	mov	r0, r8
 8009086:	4649      	mov	r1, r9
 8009088:	f7f7 f906 	bl	8000298 <__aeabi_dsub>
 800908c:	f7f7 fd56 	bl	8000b3c <__aeabi_d2iz>
 8009090:	ab0e      	add	r3, sp, #56	; 0x38
 8009092:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8009096:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800909a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800909e:	f7f7 f8fd 	bl	800029c <__adddf3>
 80090a2:	3501      	adds	r5, #1
 80090a4:	4680      	mov	r8, r0
 80090a6:	4689      	mov	r9, r1
 80090a8:	e75e      	b.n	8008f68 <__kernel_rem_pio2+0x100>
 80090aa:	d105      	bne.n	80090b8 <__kernel_rem_pio2+0x250>
 80090ac:	1e63      	subs	r3, r4, #1
 80090ae:	aa0e      	add	r2, sp, #56	; 0x38
 80090b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80090b4:	15c3      	asrs	r3, r0, #23
 80090b6:	e79f      	b.n	8008ff8 <__kernel_rem_pio2+0x190>
 80090b8:	2200      	movs	r2, #0
 80090ba:	4b3a      	ldr	r3, [pc, #232]	; (80091a4 <__kernel_rem_pio2+0x33c>)
 80090bc:	f7f7 fd2a 	bl	8000b14 <__aeabi_dcmpge>
 80090c0:	2800      	cmp	r0, #0
 80090c2:	d139      	bne.n	8009138 <__kernel_rem_pio2+0x2d0>
 80090c4:	9002      	str	r0, [sp, #8]
 80090c6:	2200      	movs	r2, #0
 80090c8:	2300      	movs	r3, #0
 80090ca:	4630      	mov	r0, r6
 80090cc:	4639      	mov	r1, r7
 80090ce:	f7f7 fd03 	bl	8000ad8 <__aeabi_dcmpeq>
 80090d2:	2800      	cmp	r0, #0
 80090d4:	f000 80c7 	beq.w	8009266 <__kernel_rem_pio2+0x3fe>
 80090d8:	1e65      	subs	r5, r4, #1
 80090da:	462b      	mov	r3, r5
 80090dc:	2200      	movs	r2, #0
 80090de:	9904      	ldr	r1, [sp, #16]
 80090e0:	428b      	cmp	r3, r1
 80090e2:	da6a      	bge.n	80091ba <__kernel_rem_pio2+0x352>
 80090e4:	2a00      	cmp	r2, #0
 80090e6:	f000 8088 	beq.w	80091fa <__kernel_rem_pio2+0x392>
 80090ea:	ab0e      	add	r3, sp, #56	; 0x38
 80090ec:	f1aa 0a18 	sub.w	sl, sl, #24
 80090f0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	f000 80b4 	beq.w	8009262 <__kernel_rem_pio2+0x3fa>
 80090fa:	4650      	mov	r0, sl
 80090fc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8009188 <__kernel_rem_pio2+0x320>
 8009100:	f000 fb3a 	bl	8009778 <scalbn>
 8009104:	00ec      	lsls	r4, r5, #3
 8009106:	ab72      	add	r3, sp, #456	; 0x1c8
 8009108:	191e      	adds	r6, r3, r4
 800910a:	ec59 8b10 	vmov	r8, r9, d0
 800910e:	f106 0a08 	add.w	sl, r6, #8
 8009112:	462f      	mov	r7, r5
 8009114:	2f00      	cmp	r7, #0
 8009116:	f280 80df 	bge.w	80092d8 <__kernel_rem_pio2+0x470>
 800911a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8009180 <__kernel_rem_pio2+0x318>
 800911e:	f04f 0a00 	mov.w	sl, #0
 8009122:	eba5 030a 	sub.w	r3, r5, sl
 8009126:	2b00      	cmp	r3, #0
 8009128:	f2c0 810a 	blt.w	8009340 <__kernel_rem_pio2+0x4d8>
 800912c:	f8df b078 	ldr.w	fp, [pc, #120]	; 80091a8 <__kernel_rem_pio2+0x340>
 8009130:	ec59 8b18 	vmov	r8, r9, d8
 8009134:	2700      	movs	r7, #0
 8009136:	e0f5      	b.n	8009324 <__kernel_rem_pio2+0x4bc>
 8009138:	2302      	movs	r3, #2
 800913a:	9302      	str	r3, [sp, #8]
 800913c:	e760      	b.n	8009000 <__kernel_rem_pio2+0x198>
 800913e:	ab0e      	add	r3, sp, #56	; 0x38
 8009140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009144:	b94d      	cbnz	r5, 800915a <__kernel_rem_pio2+0x2f2>
 8009146:	b12b      	cbz	r3, 8009154 <__kernel_rem_pio2+0x2ec>
 8009148:	a80e      	add	r0, sp, #56	; 0x38
 800914a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800914e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8009152:	2301      	movs	r3, #1
 8009154:	3201      	adds	r2, #1
 8009156:	461d      	mov	r5, r3
 8009158:	e759      	b.n	800900e <__kernel_rem_pio2+0x1a6>
 800915a:	a80e      	add	r0, sp, #56	; 0x38
 800915c:	1acb      	subs	r3, r1, r3
 800915e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8009162:	462b      	mov	r3, r5
 8009164:	e7f6      	b.n	8009154 <__kernel_rem_pio2+0x2ec>
 8009166:	1e62      	subs	r2, r4, #1
 8009168:	ab0e      	add	r3, sp, #56	; 0x38
 800916a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800916e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009172:	a90e      	add	r1, sp, #56	; 0x38
 8009174:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009178:	e757      	b.n	800902a <__kernel_rem_pio2+0x1c2>
 800917a:	bf00      	nop
 800917c:	f3af 8000 	nop.w
	...
 800918c:	3ff00000 	.word	0x3ff00000
 8009190:	0800a160 	.word	0x0800a160
 8009194:	40200000 	.word	0x40200000
 8009198:	3ff00000 	.word	0x3ff00000
 800919c:	3e700000 	.word	0x3e700000
 80091a0:	41700000 	.word	0x41700000
 80091a4:	3fe00000 	.word	0x3fe00000
 80091a8:	0800a120 	.word	0x0800a120
 80091ac:	1e62      	subs	r2, r4, #1
 80091ae:	ab0e      	add	r3, sp, #56	; 0x38
 80091b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091b4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80091b8:	e7db      	b.n	8009172 <__kernel_rem_pio2+0x30a>
 80091ba:	a90e      	add	r1, sp, #56	; 0x38
 80091bc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80091c0:	3b01      	subs	r3, #1
 80091c2:	430a      	orrs	r2, r1
 80091c4:	e78b      	b.n	80090de <__kernel_rem_pio2+0x276>
 80091c6:	3301      	adds	r3, #1
 80091c8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80091cc:	2900      	cmp	r1, #0
 80091ce:	d0fa      	beq.n	80091c6 <__kernel_rem_pio2+0x35e>
 80091d0:	9a08      	ldr	r2, [sp, #32]
 80091d2:	4422      	add	r2, r4
 80091d4:	00d2      	lsls	r2, r2, #3
 80091d6:	a922      	add	r1, sp, #136	; 0x88
 80091d8:	18e3      	adds	r3, r4, r3
 80091da:	9206      	str	r2, [sp, #24]
 80091dc:	440a      	add	r2, r1
 80091de:	9302      	str	r3, [sp, #8]
 80091e0:	f10b 0108 	add.w	r1, fp, #8
 80091e4:	f102 0308 	add.w	r3, r2, #8
 80091e8:	1c66      	adds	r6, r4, #1
 80091ea:	910a      	str	r1, [sp, #40]	; 0x28
 80091ec:	2500      	movs	r5, #0
 80091ee:	930d      	str	r3, [sp, #52]	; 0x34
 80091f0:	9b02      	ldr	r3, [sp, #8]
 80091f2:	42b3      	cmp	r3, r6
 80091f4:	da04      	bge.n	8009200 <__kernel_rem_pio2+0x398>
 80091f6:	461c      	mov	r4, r3
 80091f8:	e6a6      	b.n	8008f48 <__kernel_rem_pio2+0xe0>
 80091fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091fc:	2301      	movs	r3, #1
 80091fe:	e7e3      	b.n	80091c8 <__kernel_rem_pio2+0x360>
 8009200:	9b06      	ldr	r3, [sp, #24]
 8009202:	18ef      	adds	r7, r5, r3
 8009204:	ab22      	add	r3, sp, #136	; 0x88
 8009206:	441f      	add	r7, r3
 8009208:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800920a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800920e:	f7f7 f991 	bl	8000534 <__aeabi_i2d>
 8009212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009214:	461c      	mov	r4, r3
 8009216:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009218:	e9c7 0100 	strd	r0, r1, [r7]
 800921c:	eb03 0b05 	add.w	fp, r3, r5
 8009220:	2700      	movs	r7, #0
 8009222:	f04f 0800 	mov.w	r8, #0
 8009226:	f04f 0900 	mov.w	r9, #0
 800922a:	9b07      	ldr	r3, [sp, #28]
 800922c:	429f      	cmp	r7, r3
 800922e:	dd08      	ble.n	8009242 <__kernel_rem_pio2+0x3da>
 8009230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009232:	aa72      	add	r2, sp, #456	; 0x1c8
 8009234:	18eb      	adds	r3, r5, r3
 8009236:	4413      	add	r3, r2
 8009238:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800923c:	3601      	adds	r6, #1
 800923e:	3508      	adds	r5, #8
 8009240:	e7d6      	b.n	80091f0 <__kernel_rem_pio2+0x388>
 8009242:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009246:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800924a:	f7f7 f9dd 	bl	8000608 <__aeabi_dmul>
 800924e:	4602      	mov	r2, r0
 8009250:	460b      	mov	r3, r1
 8009252:	4640      	mov	r0, r8
 8009254:	4649      	mov	r1, r9
 8009256:	f7f7 f821 	bl	800029c <__adddf3>
 800925a:	3701      	adds	r7, #1
 800925c:	4680      	mov	r8, r0
 800925e:	4689      	mov	r9, r1
 8009260:	e7e3      	b.n	800922a <__kernel_rem_pio2+0x3c2>
 8009262:	3d01      	subs	r5, #1
 8009264:	e741      	b.n	80090ea <__kernel_rem_pio2+0x282>
 8009266:	f1ca 0000 	rsb	r0, sl, #0
 800926a:	ec47 6b10 	vmov	d0, r6, r7
 800926e:	f000 fa83 	bl	8009778 <scalbn>
 8009272:	ec57 6b10 	vmov	r6, r7, d0
 8009276:	2200      	movs	r2, #0
 8009278:	4b99      	ldr	r3, [pc, #612]	; (80094e0 <__kernel_rem_pio2+0x678>)
 800927a:	ee10 0a10 	vmov	r0, s0
 800927e:	4639      	mov	r1, r7
 8009280:	f7f7 fc48 	bl	8000b14 <__aeabi_dcmpge>
 8009284:	b1f8      	cbz	r0, 80092c6 <__kernel_rem_pio2+0x45e>
 8009286:	2200      	movs	r2, #0
 8009288:	4b96      	ldr	r3, [pc, #600]	; (80094e4 <__kernel_rem_pio2+0x67c>)
 800928a:	4630      	mov	r0, r6
 800928c:	4639      	mov	r1, r7
 800928e:	f7f7 f9bb 	bl	8000608 <__aeabi_dmul>
 8009292:	f7f7 fc53 	bl	8000b3c <__aeabi_d2iz>
 8009296:	4680      	mov	r8, r0
 8009298:	f7f7 f94c 	bl	8000534 <__aeabi_i2d>
 800929c:	2200      	movs	r2, #0
 800929e:	4b90      	ldr	r3, [pc, #576]	; (80094e0 <__kernel_rem_pio2+0x678>)
 80092a0:	f7f7 f9b2 	bl	8000608 <__aeabi_dmul>
 80092a4:	460b      	mov	r3, r1
 80092a6:	4602      	mov	r2, r0
 80092a8:	4639      	mov	r1, r7
 80092aa:	4630      	mov	r0, r6
 80092ac:	f7f6 fff4 	bl	8000298 <__aeabi_dsub>
 80092b0:	f7f7 fc44 	bl	8000b3c <__aeabi_d2iz>
 80092b4:	1c65      	adds	r5, r4, #1
 80092b6:	ab0e      	add	r3, sp, #56	; 0x38
 80092b8:	f10a 0a18 	add.w	sl, sl, #24
 80092bc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80092c0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80092c4:	e719      	b.n	80090fa <__kernel_rem_pio2+0x292>
 80092c6:	4630      	mov	r0, r6
 80092c8:	4639      	mov	r1, r7
 80092ca:	f7f7 fc37 	bl	8000b3c <__aeabi_d2iz>
 80092ce:	ab0e      	add	r3, sp, #56	; 0x38
 80092d0:	4625      	mov	r5, r4
 80092d2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80092d6:	e710      	b.n	80090fa <__kernel_rem_pio2+0x292>
 80092d8:	ab0e      	add	r3, sp, #56	; 0x38
 80092da:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80092de:	f7f7 f929 	bl	8000534 <__aeabi_i2d>
 80092e2:	4642      	mov	r2, r8
 80092e4:	464b      	mov	r3, r9
 80092e6:	f7f7 f98f 	bl	8000608 <__aeabi_dmul>
 80092ea:	2200      	movs	r2, #0
 80092ec:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80092f0:	4b7c      	ldr	r3, [pc, #496]	; (80094e4 <__kernel_rem_pio2+0x67c>)
 80092f2:	4640      	mov	r0, r8
 80092f4:	4649      	mov	r1, r9
 80092f6:	f7f7 f987 	bl	8000608 <__aeabi_dmul>
 80092fa:	3f01      	subs	r7, #1
 80092fc:	4680      	mov	r8, r0
 80092fe:	4689      	mov	r9, r1
 8009300:	e708      	b.n	8009114 <__kernel_rem_pio2+0x2ac>
 8009302:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8009306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800930e:	f7f7 f97b 	bl	8000608 <__aeabi_dmul>
 8009312:	4602      	mov	r2, r0
 8009314:	460b      	mov	r3, r1
 8009316:	4640      	mov	r0, r8
 8009318:	4649      	mov	r1, r9
 800931a:	f7f6 ffbf 	bl	800029c <__adddf3>
 800931e:	3701      	adds	r7, #1
 8009320:	4680      	mov	r8, r0
 8009322:	4689      	mov	r9, r1
 8009324:	9b04      	ldr	r3, [sp, #16]
 8009326:	429f      	cmp	r7, r3
 8009328:	dc01      	bgt.n	800932e <__kernel_rem_pio2+0x4c6>
 800932a:	45ba      	cmp	sl, r7
 800932c:	dae9      	bge.n	8009302 <__kernel_rem_pio2+0x49a>
 800932e:	ab4a      	add	r3, sp, #296	; 0x128
 8009330:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009334:	e9c3 8900 	strd	r8, r9, [r3]
 8009338:	f10a 0a01 	add.w	sl, sl, #1
 800933c:	3e08      	subs	r6, #8
 800933e:	e6f0      	b.n	8009122 <__kernel_rem_pio2+0x2ba>
 8009340:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009342:	2b03      	cmp	r3, #3
 8009344:	d85b      	bhi.n	80093fe <__kernel_rem_pio2+0x596>
 8009346:	e8df f003 	tbb	[pc, r3]
 800934a:	264a      	.short	0x264a
 800934c:	0226      	.short	0x0226
 800934e:	ab9a      	add	r3, sp, #616	; 0x268
 8009350:	441c      	add	r4, r3
 8009352:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8009356:	46a2      	mov	sl, r4
 8009358:	46ab      	mov	fp, r5
 800935a:	f1bb 0f00 	cmp.w	fp, #0
 800935e:	dc6c      	bgt.n	800943a <__kernel_rem_pio2+0x5d2>
 8009360:	46a2      	mov	sl, r4
 8009362:	46ab      	mov	fp, r5
 8009364:	f1bb 0f01 	cmp.w	fp, #1
 8009368:	f300 8086 	bgt.w	8009478 <__kernel_rem_pio2+0x610>
 800936c:	2000      	movs	r0, #0
 800936e:	2100      	movs	r1, #0
 8009370:	2d01      	cmp	r5, #1
 8009372:	f300 80a0 	bgt.w	80094b6 <__kernel_rem_pio2+0x64e>
 8009376:	9b02      	ldr	r3, [sp, #8]
 8009378:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800937c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8009380:	2b00      	cmp	r3, #0
 8009382:	f040 809e 	bne.w	80094c2 <__kernel_rem_pio2+0x65a>
 8009386:	9b01      	ldr	r3, [sp, #4]
 8009388:	e9c3 7800 	strd	r7, r8, [r3]
 800938c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8009390:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009394:	e033      	b.n	80093fe <__kernel_rem_pio2+0x596>
 8009396:	3408      	adds	r4, #8
 8009398:	ab4a      	add	r3, sp, #296	; 0x128
 800939a:	441c      	add	r4, r3
 800939c:	462e      	mov	r6, r5
 800939e:	2000      	movs	r0, #0
 80093a0:	2100      	movs	r1, #0
 80093a2:	2e00      	cmp	r6, #0
 80093a4:	da3a      	bge.n	800941c <__kernel_rem_pio2+0x5b4>
 80093a6:	9b02      	ldr	r3, [sp, #8]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d03d      	beq.n	8009428 <__kernel_rem_pio2+0x5c0>
 80093ac:	4602      	mov	r2, r0
 80093ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093b2:	9c01      	ldr	r4, [sp, #4]
 80093b4:	e9c4 2300 	strd	r2, r3, [r4]
 80093b8:	4602      	mov	r2, r0
 80093ba:	460b      	mov	r3, r1
 80093bc:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80093c0:	f7f6 ff6a 	bl	8000298 <__aeabi_dsub>
 80093c4:	ae4c      	add	r6, sp, #304	; 0x130
 80093c6:	2401      	movs	r4, #1
 80093c8:	42a5      	cmp	r5, r4
 80093ca:	da30      	bge.n	800942e <__kernel_rem_pio2+0x5c6>
 80093cc:	9b02      	ldr	r3, [sp, #8]
 80093ce:	b113      	cbz	r3, 80093d6 <__kernel_rem_pio2+0x56e>
 80093d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093d4:	4619      	mov	r1, r3
 80093d6:	9b01      	ldr	r3, [sp, #4]
 80093d8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80093dc:	e00f      	b.n	80093fe <__kernel_rem_pio2+0x596>
 80093de:	ab9a      	add	r3, sp, #616	; 0x268
 80093e0:	441c      	add	r4, r3
 80093e2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80093e6:	2000      	movs	r0, #0
 80093e8:	2100      	movs	r1, #0
 80093ea:	2d00      	cmp	r5, #0
 80093ec:	da10      	bge.n	8009410 <__kernel_rem_pio2+0x5a8>
 80093ee:	9b02      	ldr	r3, [sp, #8]
 80093f0:	b113      	cbz	r3, 80093f8 <__kernel_rem_pio2+0x590>
 80093f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093f6:	4619      	mov	r1, r3
 80093f8:	9b01      	ldr	r3, [sp, #4]
 80093fa:	e9c3 0100 	strd	r0, r1, [r3]
 80093fe:	9b06      	ldr	r3, [sp, #24]
 8009400:	f003 0007 	and.w	r0, r3, #7
 8009404:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8009408:	ecbd 8b02 	vpop	{d8}
 800940c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009410:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009414:	f7f6 ff42 	bl	800029c <__adddf3>
 8009418:	3d01      	subs	r5, #1
 800941a:	e7e6      	b.n	80093ea <__kernel_rem_pio2+0x582>
 800941c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009420:	f7f6 ff3c 	bl	800029c <__adddf3>
 8009424:	3e01      	subs	r6, #1
 8009426:	e7bc      	b.n	80093a2 <__kernel_rem_pio2+0x53a>
 8009428:	4602      	mov	r2, r0
 800942a:	460b      	mov	r3, r1
 800942c:	e7c1      	b.n	80093b2 <__kernel_rem_pio2+0x54a>
 800942e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8009432:	f7f6 ff33 	bl	800029c <__adddf3>
 8009436:	3401      	adds	r4, #1
 8009438:	e7c6      	b.n	80093c8 <__kernel_rem_pio2+0x560>
 800943a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800943e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8009442:	4640      	mov	r0, r8
 8009444:	ec53 2b17 	vmov	r2, r3, d7
 8009448:	4649      	mov	r1, r9
 800944a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800944e:	f7f6 ff25 	bl	800029c <__adddf3>
 8009452:	4602      	mov	r2, r0
 8009454:	460b      	mov	r3, r1
 8009456:	4606      	mov	r6, r0
 8009458:	460f      	mov	r7, r1
 800945a:	4640      	mov	r0, r8
 800945c:	4649      	mov	r1, r9
 800945e:	f7f6 ff1b 	bl	8000298 <__aeabi_dsub>
 8009462:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009466:	f7f6 ff19 	bl	800029c <__adddf3>
 800946a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800946e:	e9ca 0100 	strd	r0, r1, [sl]
 8009472:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8009476:	e770      	b.n	800935a <__kernel_rem_pio2+0x4f2>
 8009478:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800947c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8009480:	4630      	mov	r0, r6
 8009482:	ec53 2b17 	vmov	r2, r3, d7
 8009486:	4639      	mov	r1, r7
 8009488:	ed8d 7b04 	vstr	d7, [sp, #16]
 800948c:	f7f6 ff06 	bl	800029c <__adddf3>
 8009490:	4602      	mov	r2, r0
 8009492:	460b      	mov	r3, r1
 8009494:	4680      	mov	r8, r0
 8009496:	4689      	mov	r9, r1
 8009498:	4630      	mov	r0, r6
 800949a:	4639      	mov	r1, r7
 800949c:	f7f6 fefc 	bl	8000298 <__aeabi_dsub>
 80094a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094a4:	f7f6 fefa 	bl	800029c <__adddf3>
 80094a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80094ac:	e9ca 0100 	strd	r0, r1, [sl]
 80094b0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80094b4:	e756      	b.n	8009364 <__kernel_rem_pio2+0x4fc>
 80094b6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80094ba:	f7f6 feef 	bl	800029c <__adddf3>
 80094be:	3d01      	subs	r5, #1
 80094c0:	e756      	b.n	8009370 <__kernel_rem_pio2+0x508>
 80094c2:	9b01      	ldr	r3, [sp, #4]
 80094c4:	9a01      	ldr	r2, [sp, #4]
 80094c6:	601f      	str	r7, [r3, #0]
 80094c8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80094cc:	605c      	str	r4, [r3, #4]
 80094ce:	609d      	str	r5, [r3, #8]
 80094d0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80094d4:	60d3      	str	r3, [r2, #12]
 80094d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094da:	6110      	str	r0, [r2, #16]
 80094dc:	6153      	str	r3, [r2, #20]
 80094de:	e78e      	b.n	80093fe <__kernel_rem_pio2+0x596>
 80094e0:	41700000 	.word	0x41700000
 80094e4:	3e700000 	.word	0x3e700000

080094e8 <__kernel_sin>:
 80094e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ec:	ec55 4b10 	vmov	r4, r5, d0
 80094f0:	b085      	sub	sp, #20
 80094f2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80094f6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80094fa:	ed8d 1b00 	vstr	d1, [sp]
 80094fe:	9002      	str	r0, [sp, #8]
 8009500:	da06      	bge.n	8009510 <__kernel_sin+0x28>
 8009502:	ee10 0a10 	vmov	r0, s0
 8009506:	4629      	mov	r1, r5
 8009508:	f7f7 fb18 	bl	8000b3c <__aeabi_d2iz>
 800950c:	2800      	cmp	r0, #0
 800950e:	d051      	beq.n	80095b4 <__kernel_sin+0xcc>
 8009510:	4622      	mov	r2, r4
 8009512:	462b      	mov	r3, r5
 8009514:	4620      	mov	r0, r4
 8009516:	4629      	mov	r1, r5
 8009518:	f7f7 f876 	bl	8000608 <__aeabi_dmul>
 800951c:	4682      	mov	sl, r0
 800951e:	468b      	mov	fp, r1
 8009520:	4602      	mov	r2, r0
 8009522:	460b      	mov	r3, r1
 8009524:	4620      	mov	r0, r4
 8009526:	4629      	mov	r1, r5
 8009528:	f7f7 f86e 	bl	8000608 <__aeabi_dmul>
 800952c:	a341      	add	r3, pc, #260	; (adr r3, 8009634 <__kernel_sin+0x14c>)
 800952e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009532:	4680      	mov	r8, r0
 8009534:	4689      	mov	r9, r1
 8009536:	4650      	mov	r0, sl
 8009538:	4659      	mov	r1, fp
 800953a:	f7f7 f865 	bl	8000608 <__aeabi_dmul>
 800953e:	a33f      	add	r3, pc, #252	; (adr r3, 800963c <__kernel_sin+0x154>)
 8009540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009544:	f7f6 fea8 	bl	8000298 <__aeabi_dsub>
 8009548:	4652      	mov	r2, sl
 800954a:	465b      	mov	r3, fp
 800954c:	f7f7 f85c 	bl	8000608 <__aeabi_dmul>
 8009550:	a33c      	add	r3, pc, #240	; (adr r3, 8009644 <__kernel_sin+0x15c>)
 8009552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009556:	f7f6 fea1 	bl	800029c <__adddf3>
 800955a:	4652      	mov	r2, sl
 800955c:	465b      	mov	r3, fp
 800955e:	f7f7 f853 	bl	8000608 <__aeabi_dmul>
 8009562:	a33a      	add	r3, pc, #232	; (adr r3, 800964c <__kernel_sin+0x164>)
 8009564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009568:	f7f6 fe96 	bl	8000298 <__aeabi_dsub>
 800956c:	4652      	mov	r2, sl
 800956e:	465b      	mov	r3, fp
 8009570:	f7f7 f84a 	bl	8000608 <__aeabi_dmul>
 8009574:	a337      	add	r3, pc, #220	; (adr r3, 8009654 <__kernel_sin+0x16c>)
 8009576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957a:	f7f6 fe8f 	bl	800029c <__adddf3>
 800957e:	9b02      	ldr	r3, [sp, #8]
 8009580:	4606      	mov	r6, r0
 8009582:	460f      	mov	r7, r1
 8009584:	b9db      	cbnz	r3, 80095be <__kernel_sin+0xd6>
 8009586:	4602      	mov	r2, r0
 8009588:	460b      	mov	r3, r1
 800958a:	4650      	mov	r0, sl
 800958c:	4659      	mov	r1, fp
 800958e:	f7f7 f83b 	bl	8000608 <__aeabi_dmul>
 8009592:	a325      	add	r3, pc, #148	; (adr r3, 8009628 <__kernel_sin+0x140>)
 8009594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009598:	f7f6 fe7e 	bl	8000298 <__aeabi_dsub>
 800959c:	4642      	mov	r2, r8
 800959e:	464b      	mov	r3, r9
 80095a0:	f7f7 f832 	bl	8000608 <__aeabi_dmul>
 80095a4:	4602      	mov	r2, r0
 80095a6:	460b      	mov	r3, r1
 80095a8:	4620      	mov	r0, r4
 80095aa:	4629      	mov	r1, r5
 80095ac:	f7f6 fe76 	bl	800029c <__adddf3>
 80095b0:	4604      	mov	r4, r0
 80095b2:	460d      	mov	r5, r1
 80095b4:	ec45 4b10 	vmov	d0, r4, r5
 80095b8:	b005      	add	sp, #20
 80095ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095be:	2200      	movs	r2, #0
 80095c0:	4b1b      	ldr	r3, [pc, #108]	; (8009630 <__kernel_sin+0x148>)
 80095c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80095c6:	f7f7 f81f 	bl	8000608 <__aeabi_dmul>
 80095ca:	4632      	mov	r2, r6
 80095cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095d0:	463b      	mov	r3, r7
 80095d2:	4640      	mov	r0, r8
 80095d4:	4649      	mov	r1, r9
 80095d6:	f7f7 f817 	bl	8000608 <__aeabi_dmul>
 80095da:	4602      	mov	r2, r0
 80095dc:	460b      	mov	r3, r1
 80095de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095e2:	f7f6 fe59 	bl	8000298 <__aeabi_dsub>
 80095e6:	4652      	mov	r2, sl
 80095e8:	465b      	mov	r3, fp
 80095ea:	f7f7 f80d 	bl	8000608 <__aeabi_dmul>
 80095ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095f2:	f7f6 fe51 	bl	8000298 <__aeabi_dsub>
 80095f6:	a30c      	add	r3, pc, #48	; (adr r3, 8009628 <__kernel_sin+0x140>)
 80095f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095fc:	4606      	mov	r6, r0
 80095fe:	460f      	mov	r7, r1
 8009600:	4640      	mov	r0, r8
 8009602:	4649      	mov	r1, r9
 8009604:	f7f7 f800 	bl	8000608 <__aeabi_dmul>
 8009608:	4602      	mov	r2, r0
 800960a:	460b      	mov	r3, r1
 800960c:	4630      	mov	r0, r6
 800960e:	4639      	mov	r1, r7
 8009610:	f7f6 fe44 	bl	800029c <__adddf3>
 8009614:	4602      	mov	r2, r0
 8009616:	460b      	mov	r3, r1
 8009618:	4620      	mov	r0, r4
 800961a:	4629      	mov	r1, r5
 800961c:	f7f6 fe3c 	bl	8000298 <__aeabi_dsub>
 8009620:	e7c6      	b.n	80095b0 <__kernel_sin+0xc8>
 8009622:	bf00      	nop
 8009624:	f3af 8000 	nop.w
 8009628:	55555549 	.word	0x55555549
 800962c:	3fc55555 	.word	0x3fc55555
 8009630:	3fe00000 	.word	0x3fe00000
 8009634:	5acfd57c 	.word	0x5acfd57c
 8009638:	3de5d93a 	.word	0x3de5d93a
 800963c:	8a2b9ceb 	.word	0x8a2b9ceb
 8009640:	3e5ae5e6 	.word	0x3e5ae5e6
 8009644:	57b1fe7d 	.word	0x57b1fe7d
 8009648:	3ec71de3 	.word	0x3ec71de3
 800964c:	19c161d5 	.word	0x19c161d5
 8009650:	3f2a01a0 	.word	0x3f2a01a0
 8009654:	1110f8a6 	.word	0x1110f8a6
 8009658:	3f811111 	.word	0x3f811111

0800965c <fabs>:
 800965c:	ec51 0b10 	vmov	r0, r1, d0
 8009660:	ee10 2a10 	vmov	r2, s0
 8009664:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009668:	ec43 2b10 	vmov	d0, r2, r3
 800966c:	4770      	bx	lr
	...

08009670 <floor>:
 8009670:	ec51 0b10 	vmov	r0, r1, d0
 8009674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009678:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800967c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009680:	2e13      	cmp	r6, #19
 8009682:	460c      	mov	r4, r1
 8009684:	ee10 5a10 	vmov	r5, s0
 8009688:	4680      	mov	r8, r0
 800968a:	dc34      	bgt.n	80096f6 <floor+0x86>
 800968c:	2e00      	cmp	r6, #0
 800968e:	da16      	bge.n	80096be <floor+0x4e>
 8009690:	a335      	add	r3, pc, #212	; (adr r3, 8009768 <floor+0xf8>)
 8009692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009696:	f7f6 fe01 	bl	800029c <__adddf3>
 800969a:	2200      	movs	r2, #0
 800969c:	2300      	movs	r3, #0
 800969e:	f7f7 fa43 	bl	8000b28 <__aeabi_dcmpgt>
 80096a2:	b148      	cbz	r0, 80096b8 <floor+0x48>
 80096a4:	2c00      	cmp	r4, #0
 80096a6:	da59      	bge.n	800975c <floor+0xec>
 80096a8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80096ac:	4a30      	ldr	r2, [pc, #192]	; (8009770 <floor+0x100>)
 80096ae:	432b      	orrs	r3, r5
 80096b0:	2500      	movs	r5, #0
 80096b2:	42ab      	cmp	r3, r5
 80096b4:	bf18      	it	ne
 80096b6:	4614      	movne	r4, r2
 80096b8:	4621      	mov	r1, r4
 80096ba:	4628      	mov	r0, r5
 80096bc:	e025      	b.n	800970a <floor+0x9a>
 80096be:	4f2d      	ldr	r7, [pc, #180]	; (8009774 <floor+0x104>)
 80096c0:	4137      	asrs	r7, r6
 80096c2:	ea01 0307 	and.w	r3, r1, r7
 80096c6:	4303      	orrs	r3, r0
 80096c8:	d01f      	beq.n	800970a <floor+0x9a>
 80096ca:	a327      	add	r3, pc, #156	; (adr r3, 8009768 <floor+0xf8>)
 80096cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d0:	f7f6 fde4 	bl	800029c <__adddf3>
 80096d4:	2200      	movs	r2, #0
 80096d6:	2300      	movs	r3, #0
 80096d8:	f7f7 fa26 	bl	8000b28 <__aeabi_dcmpgt>
 80096dc:	2800      	cmp	r0, #0
 80096de:	d0eb      	beq.n	80096b8 <floor+0x48>
 80096e0:	2c00      	cmp	r4, #0
 80096e2:	bfbe      	ittt	lt
 80096e4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80096e8:	fa43 f606 	asrlt.w	r6, r3, r6
 80096ec:	19a4      	addlt	r4, r4, r6
 80096ee:	ea24 0407 	bic.w	r4, r4, r7
 80096f2:	2500      	movs	r5, #0
 80096f4:	e7e0      	b.n	80096b8 <floor+0x48>
 80096f6:	2e33      	cmp	r6, #51	; 0x33
 80096f8:	dd0b      	ble.n	8009712 <floor+0xa2>
 80096fa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80096fe:	d104      	bne.n	800970a <floor+0x9a>
 8009700:	ee10 2a10 	vmov	r2, s0
 8009704:	460b      	mov	r3, r1
 8009706:	f7f6 fdc9 	bl	800029c <__adddf3>
 800970a:	ec41 0b10 	vmov	d0, r0, r1
 800970e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009712:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009716:	f04f 33ff 	mov.w	r3, #4294967295
 800971a:	fa23 f707 	lsr.w	r7, r3, r7
 800971e:	4207      	tst	r7, r0
 8009720:	d0f3      	beq.n	800970a <floor+0x9a>
 8009722:	a311      	add	r3, pc, #68	; (adr r3, 8009768 <floor+0xf8>)
 8009724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009728:	f7f6 fdb8 	bl	800029c <__adddf3>
 800972c:	2200      	movs	r2, #0
 800972e:	2300      	movs	r3, #0
 8009730:	f7f7 f9fa 	bl	8000b28 <__aeabi_dcmpgt>
 8009734:	2800      	cmp	r0, #0
 8009736:	d0bf      	beq.n	80096b8 <floor+0x48>
 8009738:	2c00      	cmp	r4, #0
 800973a:	da02      	bge.n	8009742 <floor+0xd2>
 800973c:	2e14      	cmp	r6, #20
 800973e:	d103      	bne.n	8009748 <floor+0xd8>
 8009740:	3401      	adds	r4, #1
 8009742:	ea25 0507 	bic.w	r5, r5, r7
 8009746:	e7b7      	b.n	80096b8 <floor+0x48>
 8009748:	2301      	movs	r3, #1
 800974a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800974e:	fa03 f606 	lsl.w	r6, r3, r6
 8009752:	4435      	add	r5, r6
 8009754:	4545      	cmp	r5, r8
 8009756:	bf38      	it	cc
 8009758:	18e4      	addcc	r4, r4, r3
 800975a:	e7f2      	b.n	8009742 <floor+0xd2>
 800975c:	2500      	movs	r5, #0
 800975e:	462c      	mov	r4, r5
 8009760:	e7aa      	b.n	80096b8 <floor+0x48>
 8009762:	bf00      	nop
 8009764:	f3af 8000 	nop.w
 8009768:	8800759c 	.word	0x8800759c
 800976c:	7e37e43c 	.word	0x7e37e43c
 8009770:	bff00000 	.word	0xbff00000
 8009774:	000fffff 	.word	0x000fffff

08009778 <scalbn>:
 8009778:	b570      	push	{r4, r5, r6, lr}
 800977a:	ec55 4b10 	vmov	r4, r5, d0
 800977e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009782:	4606      	mov	r6, r0
 8009784:	462b      	mov	r3, r5
 8009786:	b9aa      	cbnz	r2, 80097b4 <scalbn+0x3c>
 8009788:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800978c:	4323      	orrs	r3, r4
 800978e:	d03b      	beq.n	8009808 <scalbn+0x90>
 8009790:	4b31      	ldr	r3, [pc, #196]	; (8009858 <scalbn+0xe0>)
 8009792:	4629      	mov	r1, r5
 8009794:	2200      	movs	r2, #0
 8009796:	ee10 0a10 	vmov	r0, s0
 800979a:	f7f6 ff35 	bl	8000608 <__aeabi_dmul>
 800979e:	4b2f      	ldr	r3, [pc, #188]	; (800985c <scalbn+0xe4>)
 80097a0:	429e      	cmp	r6, r3
 80097a2:	4604      	mov	r4, r0
 80097a4:	460d      	mov	r5, r1
 80097a6:	da12      	bge.n	80097ce <scalbn+0x56>
 80097a8:	a327      	add	r3, pc, #156	; (adr r3, 8009848 <scalbn+0xd0>)
 80097aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ae:	f7f6 ff2b 	bl	8000608 <__aeabi_dmul>
 80097b2:	e009      	b.n	80097c8 <scalbn+0x50>
 80097b4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80097b8:	428a      	cmp	r2, r1
 80097ba:	d10c      	bne.n	80097d6 <scalbn+0x5e>
 80097bc:	ee10 2a10 	vmov	r2, s0
 80097c0:	4620      	mov	r0, r4
 80097c2:	4629      	mov	r1, r5
 80097c4:	f7f6 fd6a 	bl	800029c <__adddf3>
 80097c8:	4604      	mov	r4, r0
 80097ca:	460d      	mov	r5, r1
 80097cc:	e01c      	b.n	8009808 <scalbn+0x90>
 80097ce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80097d2:	460b      	mov	r3, r1
 80097d4:	3a36      	subs	r2, #54	; 0x36
 80097d6:	4432      	add	r2, r6
 80097d8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80097dc:	428a      	cmp	r2, r1
 80097de:	dd0b      	ble.n	80097f8 <scalbn+0x80>
 80097e0:	ec45 4b11 	vmov	d1, r4, r5
 80097e4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8009850 <scalbn+0xd8>
 80097e8:	f000 f83c 	bl	8009864 <copysign>
 80097ec:	a318      	add	r3, pc, #96	; (adr r3, 8009850 <scalbn+0xd8>)
 80097ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f2:	ec51 0b10 	vmov	r0, r1, d0
 80097f6:	e7da      	b.n	80097ae <scalbn+0x36>
 80097f8:	2a00      	cmp	r2, #0
 80097fa:	dd08      	ble.n	800980e <scalbn+0x96>
 80097fc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009800:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009804:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009808:	ec45 4b10 	vmov	d0, r4, r5
 800980c:	bd70      	pop	{r4, r5, r6, pc}
 800980e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009812:	da0d      	bge.n	8009830 <scalbn+0xb8>
 8009814:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009818:	429e      	cmp	r6, r3
 800981a:	ec45 4b11 	vmov	d1, r4, r5
 800981e:	dce1      	bgt.n	80097e4 <scalbn+0x6c>
 8009820:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8009848 <scalbn+0xd0>
 8009824:	f000 f81e 	bl	8009864 <copysign>
 8009828:	a307      	add	r3, pc, #28	; (adr r3, 8009848 <scalbn+0xd0>)
 800982a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982e:	e7e0      	b.n	80097f2 <scalbn+0x7a>
 8009830:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009834:	3236      	adds	r2, #54	; 0x36
 8009836:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800983a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800983e:	4620      	mov	r0, r4
 8009840:	4629      	mov	r1, r5
 8009842:	2200      	movs	r2, #0
 8009844:	4b06      	ldr	r3, [pc, #24]	; (8009860 <scalbn+0xe8>)
 8009846:	e7b2      	b.n	80097ae <scalbn+0x36>
 8009848:	c2f8f359 	.word	0xc2f8f359
 800984c:	01a56e1f 	.word	0x01a56e1f
 8009850:	8800759c 	.word	0x8800759c
 8009854:	7e37e43c 	.word	0x7e37e43c
 8009858:	43500000 	.word	0x43500000
 800985c:	ffff3cb0 	.word	0xffff3cb0
 8009860:	3c900000 	.word	0x3c900000

08009864 <copysign>:
 8009864:	ec51 0b10 	vmov	r0, r1, d0
 8009868:	ee11 0a90 	vmov	r0, s3
 800986c:	ee10 2a10 	vmov	r2, s0
 8009870:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009874:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8009878:	ea41 0300 	orr.w	r3, r1, r0
 800987c:	ec43 2b10 	vmov	d0, r2, r3
 8009880:	4770      	bx	lr
	...

08009884 <_init>:
 8009884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009886:	bf00      	nop
 8009888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800988a:	bc08      	pop	{r3}
 800988c:	469e      	mov	lr, r3
 800988e:	4770      	bx	lr

08009890 <_fini>:
 8009890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009892:	bf00      	nop
 8009894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009896:	bc08      	pop	{r3}
 8009898:	469e      	mov	lr, r3
 800989a:	4770      	bx	lr
