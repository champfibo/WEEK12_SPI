
WEEK_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000981c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000908  080099c0  080099c0  000199c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2c8  0800a2c8  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2c8  0800a2c8  0001a2c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2d0  0800a2d0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2d0  0800a2d0  0001a2d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2d4  0800a2d4  0001a2d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800a2d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000088  0800a35c  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  0800a35c  000203e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa69  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020cb  00000000  00000000  0002fb1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f70  00000000  00000000  00031be8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e68  00000000  00000000  00032b58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017732  00000000  00000000  000339c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b39b  00000000  00000000  0004b0f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094641  00000000  00000000  0005648d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eaace  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004864  00000000  00000000  000eab4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080099a4 	.word	0x080099a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	080099a4 	.word	0x080099a4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2f>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b94:	bf24      	itt	cs
 8000b96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9e:	d90d      	bls.n	8000bbc <__aeabi_d2f+0x30>
 8000ba0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bb0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb4:	bf08      	it	eq
 8000bb6:	f020 0001 	biceq.w	r0, r0, #1
 8000bba:	4770      	bx	lr
 8000bbc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bc0:	d121      	bne.n	8000c06 <__aeabi_d2f+0x7a>
 8000bc2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc6:	bfbc      	itt	lt
 8000bc8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	4770      	bxlt	lr
 8000bce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bd2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd6:	f1c2 0218 	rsb	r2, r2, #24
 8000bda:	f1c2 0c20 	rsb	ip, r2, #32
 8000bde:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be2:	fa20 f002 	lsr.w	r0, r0, r2
 8000be6:	bf18      	it	ne
 8000be8:	f040 0001 	orrne.w	r0, r0, #1
 8000bec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf8:	ea40 000c 	orr.w	r0, r0, ip
 8000bfc:	fa23 f302 	lsr.w	r3, r3, r2
 8000c00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c04:	e7cc      	b.n	8000ba0 <__aeabi_d2f+0x14>
 8000c06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0a:	d107      	bne.n	8000c1c <__aeabi_d2f+0x90>
 8000c0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c10:	bf1e      	ittt	ne
 8000c12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c1a:	4770      	bxne	lr
 8000c1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <__aeabi_uldivmod>:
 8000c2c:	b953      	cbnz	r3, 8000c44 <__aeabi_uldivmod+0x18>
 8000c2e:	b94a      	cbnz	r2, 8000c44 <__aeabi_uldivmod+0x18>
 8000c30:	2900      	cmp	r1, #0
 8000c32:	bf08      	it	eq
 8000c34:	2800      	cmpeq	r0, #0
 8000c36:	bf1c      	itt	ne
 8000c38:	f04f 31ff 	movne.w	r1, #4294967295
 8000c3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c40:	f000 b972 	b.w	8000f28 <__aeabi_idiv0>
 8000c44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c4c:	f000 f806 	bl	8000c5c <__udivmoddi4>
 8000c50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c58:	b004      	add	sp, #16
 8000c5a:	4770      	bx	lr

08000c5c <__udivmoddi4>:
 8000c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c60:	9e08      	ldr	r6, [sp, #32]
 8000c62:	4604      	mov	r4, r0
 8000c64:	4688      	mov	r8, r1
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d14b      	bne.n	8000d02 <__udivmoddi4+0xa6>
 8000c6a:	428a      	cmp	r2, r1
 8000c6c:	4615      	mov	r5, r2
 8000c6e:	d967      	bls.n	8000d40 <__udivmoddi4+0xe4>
 8000c70:	fab2 f282 	clz	r2, r2
 8000c74:	b14a      	cbz	r2, 8000c8a <__udivmoddi4+0x2e>
 8000c76:	f1c2 0720 	rsb	r7, r2, #32
 8000c7a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c7e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c82:	4095      	lsls	r5, r2
 8000c84:	ea47 0803 	orr.w	r8, r7, r3
 8000c88:	4094      	lsls	r4, r2
 8000c8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c8e:	0c23      	lsrs	r3, r4, #16
 8000c90:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c94:	fa1f fc85 	uxth.w	ip, r5
 8000c98:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c9c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ca0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	d909      	bls.n	8000cbc <__udivmoddi4+0x60>
 8000ca8:	18eb      	adds	r3, r5, r3
 8000caa:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cae:	f080 811b 	bcs.w	8000ee8 <__udivmoddi4+0x28c>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 8118 	bls.w	8000ee8 <__udivmoddi4+0x28c>
 8000cb8:	3f02      	subs	r7, #2
 8000cba:	442b      	add	r3, r5
 8000cbc:	1a5b      	subs	r3, r3, r1
 8000cbe:	b2a4      	uxth	r4, r4
 8000cc0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ccc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cd0:	45a4      	cmp	ip, r4
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x8c>
 8000cd4:	192c      	adds	r4, r5, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	f080 8107 	bcs.w	8000eec <__udivmoddi4+0x290>
 8000cde:	45a4      	cmp	ip, r4
 8000ce0:	f240 8104 	bls.w	8000eec <__udivmoddi4+0x290>
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	442c      	add	r4, r5
 8000ce8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cec:	eba4 040c 	sub.w	r4, r4, ip
 8000cf0:	2700      	movs	r7, #0
 8000cf2:	b11e      	cbz	r6, 8000cfc <__udivmoddi4+0xa0>
 8000cf4:	40d4      	lsrs	r4, r2
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e9c6 4300 	strd	r4, r3, [r6]
 8000cfc:	4639      	mov	r1, r7
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0xbe>
 8000d06:	2e00      	cmp	r6, #0
 8000d08:	f000 80eb 	beq.w	8000ee2 <__udivmoddi4+0x286>
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	e9c6 0100 	strd	r0, r1, [r6]
 8000d12:	4638      	mov	r0, r7
 8000d14:	4639      	mov	r1, r7
 8000d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1a:	fab3 f783 	clz	r7, r3
 8000d1e:	2f00      	cmp	r7, #0
 8000d20:	d147      	bne.n	8000db2 <__udivmoddi4+0x156>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d302      	bcc.n	8000d2c <__udivmoddi4+0xd0>
 8000d26:	4282      	cmp	r2, r0
 8000d28:	f200 80fa 	bhi.w	8000f20 <__udivmoddi4+0x2c4>
 8000d2c:	1a84      	subs	r4, r0, r2
 8000d2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d32:	2001      	movs	r0, #1
 8000d34:	4698      	mov	r8, r3
 8000d36:	2e00      	cmp	r6, #0
 8000d38:	d0e0      	beq.n	8000cfc <__udivmoddi4+0xa0>
 8000d3a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d3e:	e7dd      	b.n	8000cfc <__udivmoddi4+0xa0>
 8000d40:	b902      	cbnz	r2, 8000d44 <__udivmoddi4+0xe8>
 8000d42:	deff      	udf	#255	; 0xff
 8000d44:	fab2 f282 	clz	r2, r2
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	f040 808f 	bne.w	8000e6c <__udivmoddi4+0x210>
 8000d4e:	1b49      	subs	r1, r1, r5
 8000d50:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d54:	fa1f f885 	uxth.w	r8, r5
 8000d58:	2701      	movs	r7, #1
 8000d5a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d5e:	0c23      	lsrs	r3, r4, #16
 8000d60:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb08 f10c 	mul.w	r1, r8, ip
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d907      	bls.n	8000d80 <__udivmoddi4+0x124>
 8000d70:	18eb      	adds	r3, r5, r3
 8000d72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0x122>
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	f200 80cd 	bhi.w	8000f18 <__udivmoddi4+0x2bc>
 8000d7e:	4684      	mov	ip, r0
 8000d80:	1a59      	subs	r1, r3, r1
 8000d82:	b2a3      	uxth	r3, r4
 8000d84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d88:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d8c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d90:	fb08 f800 	mul.w	r8, r8, r0
 8000d94:	45a0      	cmp	r8, r4
 8000d96:	d907      	bls.n	8000da8 <__udivmoddi4+0x14c>
 8000d98:	192c      	adds	r4, r5, r4
 8000d9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9e:	d202      	bcs.n	8000da6 <__udivmoddi4+0x14a>
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	f200 80b6 	bhi.w	8000f12 <__udivmoddi4+0x2b6>
 8000da6:	4618      	mov	r0, r3
 8000da8:	eba4 0408 	sub.w	r4, r4, r8
 8000dac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000db0:	e79f      	b.n	8000cf2 <__udivmoddi4+0x96>
 8000db2:	f1c7 0c20 	rsb	ip, r7, #32
 8000db6:	40bb      	lsls	r3, r7
 8000db8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dbc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dc0:	fa01 f407 	lsl.w	r4, r1, r7
 8000dc4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dc8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dcc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dd0:	4325      	orrs	r5, r4
 8000dd2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000dd6:	0c2c      	lsrs	r4, r5, #16
 8000dd8:	fb08 3319 	mls	r3, r8, r9, r3
 8000ddc:	fa1f fa8e 	uxth.w	sl, lr
 8000de0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000de4:	fb09 f40a 	mul.w	r4, r9, sl
 8000de8:	429c      	cmp	r4, r3
 8000dea:	fa02 f207 	lsl.w	r2, r2, r7
 8000dee:	fa00 f107 	lsl.w	r1, r0, r7
 8000df2:	d90b      	bls.n	8000e0c <__udivmoddi4+0x1b0>
 8000df4:	eb1e 0303 	adds.w	r3, lr, r3
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	f080 8087 	bcs.w	8000f0e <__udivmoddi4+0x2b2>
 8000e00:	429c      	cmp	r4, r3
 8000e02:	f240 8084 	bls.w	8000f0e <__udivmoddi4+0x2b2>
 8000e06:	f1a9 0902 	sub.w	r9, r9, #2
 8000e0a:	4473      	add	r3, lr
 8000e0c:	1b1b      	subs	r3, r3, r4
 8000e0e:	b2ad      	uxth	r5, r5
 8000e10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e14:	fb08 3310 	mls	r3, r8, r0, r3
 8000e18:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e1c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e20:	45a2      	cmp	sl, r4
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x1da>
 8000e24:	eb1e 0404 	adds.w	r4, lr, r4
 8000e28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2c:	d26b      	bcs.n	8000f06 <__udivmoddi4+0x2aa>
 8000e2e:	45a2      	cmp	sl, r4
 8000e30:	d969      	bls.n	8000f06 <__udivmoddi4+0x2aa>
 8000e32:	3802      	subs	r0, #2
 8000e34:	4474      	add	r4, lr
 8000e36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	eba4 040a 	sub.w	r4, r4, sl
 8000e42:	454c      	cmp	r4, r9
 8000e44:	46c2      	mov	sl, r8
 8000e46:	464b      	mov	r3, r9
 8000e48:	d354      	bcc.n	8000ef4 <__udivmoddi4+0x298>
 8000e4a:	d051      	beq.n	8000ef0 <__udivmoddi4+0x294>
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d069      	beq.n	8000f24 <__udivmoddi4+0x2c8>
 8000e50:	ebb1 050a 	subs.w	r5, r1, sl
 8000e54:	eb64 0403 	sbc.w	r4, r4, r3
 8000e58:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e5c:	40fd      	lsrs	r5, r7
 8000e5e:	40fc      	lsrs	r4, r7
 8000e60:	ea4c 0505 	orr.w	r5, ip, r5
 8000e64:	e9c6 5400 	strd	r5, r4, [r6]
 8000e68:	2700      	movs	r7, #0
 8000e6a:	e747      	b.n	8000cfc <__udivmoddi4+0xa0>
 8000e6c:	f1c2 0320 	rsb	r3, r2, #32
 8000e70:	fa20 f703 	lsr.w	r7, r0, r3
 8000e74:	4095      	lsls	r5, r2
 8000e76:	fa01 f002 	lsl.w	r0, r1, r2
 8000e7a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e7e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e82:	4338      	orrs	r0, r7
 8000e84:	0c01      	lsrs	r1, r0, #16
 8000e86:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e8a:	fa1f f885 	uxth.w	r8, r5
 8000e8e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e96:	fb07 f308 	mul.w	r3, r7, r8
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000ea0:	d907      	bls.n	8000eb2 <__udivmoddi4+0x256>
 8000ea2:	1869      	adds	r1, r5, r1
 8000ea4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ea8:	d22f      	bcs.n	8000f0a <__udivmoddi4+0x2ae>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d92d      	bls.n	8000f0a <__udivmoddi4+0x2ae>
 8000eae:	3f02      	subs	r7, #2
 8000eb0:	4429      	add	r1, r5
 8000eb2:	1acb      	subs	r3, r1, r3
 8000eb4:	b281      	uxth	r1, r0
 8000eb6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eba:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb00 f308 	mul.w	r3, r0, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d907      	bls.n	8000eda <__udivmoddi4+0x27e>
 8000eca:	1869      	adds	r1, r5, r1
 8000ecc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ed0:	d217      	bcs.n	8000f02 <__udivmoddi4+0x2a6>
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d915      	bls.n	8000f02 <__udivmoddi4+0x2a6>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	4429      	add	r1, r5
 8000eda:	1ac9      	subs	r1, r1, r3
 8000edc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ee0:	e73b      	b.n	8000d5a <__udivmoddi4+0xfe>
 8000ee2:	4637      	mov	r7, r6
 8000ee4:	4630      	mov	r0, r6
 8000ee6:	e709      	b.n	8000cfc <__udivmoddi4+0xa0>
 8000ee8:	4607      	mov	r7, r0
 8000eea:	e6e7      	b.n	8000cbc <__udivmoddi4+0x60>
 8000eec:	4618      	mov	r0, r3
 8000eee:	e6fb      	b.n	8000ce8 <__udivmoddi4+0x8c>
 8000ef0:	4541      	cmp	r1, r8
 8000ef2:	d2ab      	bcs.n	8000e4c <__udivmoddi4+0x1f0>
 8000ef4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ef8:	eb69 020e 	sbc.w	r2, r9, lr
 8000efc:	3801      	subs	r0, #1
 8000efe:	4613      	mov	r3, r2
 8000f00:	e7a4      	b.n	8000e4c <__udivmoddi4+0x1f0>
 8000f02:	4660      	mov	r0, ip
 8000f04:	e7e9      	b.n	8000eda <__udivmoddi4+0x27e>
 8000f06:	4618      	mov	r0, r3
 8000f08:	e795      	b.n	8000e36 <__udivmoddi4+0x1da>
 8000f0a:	4667      	mov	r7, ip
 8000f0c:	e7d1      	b.n	8000eb2 <__udivmoddi4+0x256>
 8000f0e:	4681      	mov	r9, r0
 8000f10:	e77c      	b.n	8000e0c <__udivmoddi4+0x1b0>
 8000f12:	3802      	subs	r0, #2
 8000f14:	442c      	add	r4, r5
 8000f16:	e747      	b.n	8000da8 <__udivmoddi4+0x14c>
 8000f18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f1c:	442b      	add	r3, r5
 8000f1e:	e72f      	b.n	8000d80 <__udivmoddi4+0x124>
 8000f20:	4638      	mov	r0, r7
 8000f22:	e708      	b.n	8000d36 <__udivmoddi4+0xda>
 8000f24:	4637      	mov	r7, r6
 8000f26:	e6e9      	b.n	8000cfc <__udivmoddi4+0xa0>

08000f28 <__aeabi_idiv0>:
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	0000      	movs	r0, r0
	...

08000f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f30:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8000f34:	b08e      	sub	sp, #56	; 0x38
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f38:	f003 f9f4 	bl	8004324 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3c:	f002 fca0 	bl	8003880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f40:	f002 fe4a 	bl	8003bd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f44:	f002 fe28 	bl	8003b98 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f48:	f002 fdfc 	bl	8003b44 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000f4c:	f002 fd52 	bl	80039f4 <MX_SPI3_Init>
  MX_ADC1_Init();
 8000f50:	f002 fcfe 	bl	8003950 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000f54:	f002 fd86 	bl	8003a64 <MX_TIM3_Init>
  MX_TIM11_Init();
 8000f58:	f002 fdd0 	bl	8003afc <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);
 8000f5c:	48bf      	ldr	r0, [pc, #764]	; (800125c <main+0x32c>)
 8000f5e:	f005 fdc8 	bl	8006af2 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim11);
 8000f62:	48bf      	ldr	r0, [pc, #764]	; (8001260 <main+0x330>)
 8000f64:	f005 fde9 	bl	8006b3a <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	49be      	ldr	r1, [pc, #760]	; (8001264 <main+0x334>)
 8000f6c:	48be      	ldr	r0, [pc, #760]	; (8001268 <main+0x338>)
 8000f6e:	f003 fbcf 	bl	8004710 <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f78:	48bc      	ldr	r0, [pc, #752]	; (800126c <main+0x33c>)
 8000f7a:	f004 fdbb 	bl	8005af4 <HAL_GPIO_WritePin>

	 char temp[]="HELLO WORLD\r\n please type something to test UART\r\n";
 8000f7e:	4bbc      	ldr	r3, [pc, #752]	; (8001270 <main+0x340>)
 8000f80:	463c      	mov	r4, r7
 8000f82:	461d      	mov	r5, r3
 8000f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f90:	682b      	ldr	r3, [r5, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	8022      	strh	r2, [r4, #0]
 8000f96:	3402      	adds	r4, #2
 8000f98:	0c1b      	lsrs	r3, r3, #16
 8000f9a:	7023      	strb	r3, [r4, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff f91e 	bl	80001e0 <strlen>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	b29a      	uxth	r2, r3
 8000fa8:	4639      	mov	r1, r7
 8000faa:	230a      	movs	r3, #10
 8000fac:	48b1      	ldr	r0, [pc, #708]	; (8001274 <main+0x344>)
 8000fae:	f006 f9b8 	bl	8007322 <HAL_UART_Transmit>
		static uint64_t timestamp =0;



		/*Method 2 Interrupt Mode*/
				HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 32);
 8000fb2:	2220      	movs	r2, #32
 8000fb4:	49b0      	ldr	r1, [pc, #704]	; (8001278 <main+0x348>)
 8000fb6:	48af      	ldr	r0, [pc, #700]	; (8001274 <main+0x344>)
 8000fb8:	f006 fa4c 	bl	8007454 <HAL_UART_Receive_IT>

				/*Method 2 W/ 1 Char Received*/
				int16_t inputchar = UARTRecieveIT();
 8000fbc:	f002 ff24 	bl	8003e08 <UARTRecieveIT>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	86fb      	strh	r3, [r7, #54]	; 0x36
				if(inputchar!=-1)
 8000fc4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8000fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fcc:	d011      	beq.n	8000ff2 <main+0xc2>
				{

					sprintf(TxDataBuffer, "ReceivedChar:[%c]\r\n", inputchar);
 8000fce:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	49a9      	ldr	r1, [pc, #676]	; (800127c <main+0x34c>)
 8000fd6:	48aa      	ldr	r0, [pc, #680]	; (8001280 <main+0x350>)
 8000fd8:	f007 f8d6 	bl	8008188 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000fdc:	48a8      	ldr	r0, [pc, #672]	; (8001280 <main+0x350>)
 8000fde:	f7ff f8ff 	bl	80001e0 <strlen>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fea:	49a5      	ldr	r1, [pc, #660]	; (8001280 <main+0x350>)
 8000fec:	48a1      	ldr	r0, [pc, #644]	; (8001274 <main+0x344>)
 8000fee:	f006 f998 	bl	8007322 <HAL_UART_Transmit>
				}

				switch (STATE_Display)
 8000ff2:	4ba4      	ldr	r3, [pc, #656]	; (8001284 <main+0x354>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b29      	cmp	r3, #41	; 0x29
 8000ff8:	f201 878e 	bhi.w	8002f18 <main+0x1fe8>
 8000ffc:	a201      	add	r2, pc, #4	; (adr r2, 8001004 <main+0xd4>)
 8000ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001002:	bf00      	nop
 8001004:	080010ad 	.word	0x080010ad
 8001008:	08002f19 	.word	0x08002f19
 800100c:	08002f19 	.word	0x08002f19
 8001010:	08002f19 	.word	0x08002f19
 8001014:	08002f19 	.word	0x08002f19
 8001018:	08002f19 	.word	0x08002f19
 800101c:	08002f19 	.word	0x08002f19
 8001020:	08002f19 	.word	0x08002f19
 8001024:	08002f19 	.word	0x08002f19
 8001028:	08002f19 	.word	0x08002f19
 800102c:	080010b7 	.word	0x080010b7
 8001030:	080010e7 	.word	0x080010e7
 8001034:	08002f19 	.word	0x08002f19
 8001038:	08002f19 	.word	0x08002f19
 800103c:	08002f19 	.word	0x08002f19
 8001040:	08002f19 	.word	0x08002f19
 8001044:	08002f19 	.word	0x08002f19
 8001048:	08002f19 	.word	0x08002f19
 800104c:	08002f19 	.word	0x08002f19
 8001050:	08002f19 	.word	0x08002f19
 8001054:	080011d1 	.word	0x080011d1
 8001058:	08001201 	.word	0x08001201
 800105c:	08002f19 	.word	0x08002f19
 8001060:	08002f19 	.word	0x08002f19
 8001064:	08002f19 	.word	0x08002f19
 8001068:	08002f19 	.word	0x08002f19
 800106c:	08002f19 	.word	0x08002f19
 8001070:	08002f19 	.word	0x08002f19
 8001074:	08002f19 	.word	0x08002f19
 8001078:	08002f19 	.word	0x08002f19
 800107c:	08001c43 	.word	0x08001c43
 8001080:	08001c73 	.word	0x08001c73
 8001084:	08002f19 	.word	0x08002f19
 8001088:	08002f19 	.word	0x08002f19
 800108c:	08002f19 	.word	0x08002f19
 8001090:	08002f19 	.word	0x08002f19
 8001094:	08002f19 	.word	0x08002f19
 8001098:	08002f19 	.word	0x08002f19
 800109c:	08002f19 	.word	0x08002f19
 80010a0:	08002f19 	.word	0x08002f19
 80010a4:	080024af 	.word	0x080024af
 80010a8:	080024df 	.word	0x080024df
						    {
						    case StateDisplay_Start:
						      STATE_Display = StateDisplay_MenuRoot_Print;
 80010ac:	4b75      	ldr	r3, [pc, #468]	; (8001284 <main+0x354>)
 80010ae:	220a      	movs	r2, #10
 80010b0:	701a      	strb	r2, [r3, #0]
						      break;
 80010b2:	f001 bf31 	b.w	8002f18 <main+0x1fe8>

						    case StateDisplay_MenuRoot_Print: //display one time state
						    	sprintf(TxDataBuffer, "*****MainMenu***** \r\n 1: Sawtooth \r\n 2: Sine wave \r\n 3: Square wave \r\n");
 80010b6:	4a72      	ldr	r2, [pc, #456]	; (8001280 <main+0x350>)
 80010b8:	4b73      	ldr	r3, [pc, #460]	; (8001288 <main+0x358>)
 80010ba:	4610      	mov	r0, r2
 80010bc:	4619      	mov	r1, r3
 80010be:	2347      	movs	r3, #71	; 0x47
 80010c0:	461a      	mov	r2, r3
 80010c2:	f007 f84d 	bl	8008160 <memcpy>
						    	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80010c6:	486e      	ldr	r0, [pc, #440]	; (8001280 <main+0x350>)
 80010c8:	f7ff f88a 	bl	80001e0 <strlen>
 80010cc:	4603      	mov	r3, r0
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d4:	496a      	ldr	r1, [pc, #424]	; (8001280 <main+0x350>)
 80010d6:	4867      	ldr	r0, [pc, #412]	; (8001274 <main+0x344>)
 80010d8:	f006 f923 	bl	8007322 <HAL_UART_Transmit>
						      STATE_Display = StateDisplay_MenuRoot_WaitInput;
 80010dc:	4b69      	ldr	r3, [pc, #420]	; (8001284 <main+0x354>)
 80010de:	220b      	movs	r2, #11
 80010e0:	701a      	strb	r2, [r3, #0]
						      break;
 80010e2:	f001 bf19 	b.w	8002f18 <main+0x1fe8>


						    case StateDisplay_MenuRoot_WaitInput: //wait state for input

						      switch (inputchar)
 80010e6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80010ea:	2b31      	cmp	r3, #49	; 0x31
 80010ec:	d00a      	beq.n	8001104 <main+0x1d4>
 80010ee:	2b31      	cmp	r3, #49	; 0x31
 80010f0:	dc03      	bgt.n	80010fa <main+0x1ca>
 80010f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f6:	d068      	beq.n	80011ca <main+0x29a>
 80010f8:	e04d      	b.n	8001196 <main+0x266>
 80010fa:	2b32      	cmp	r3, #50	; 0x32
 80010fc:	d020      	beq.n	8001140 <main+0x210>
 80010fe:	2b33      	cmp	r3, #51	; 0x33
 8001100:	d03f      	beq.n	8001182 <main+0x252>
 8001102:	e048      	b.n	8001196 <main+0x266>
						      case -1:
						      	break;

						      case '1':

						        STATE_Display = StateDisplay_MenuSawtooth_Print;
 8001104:	4b5f      	ldr	r3, [pc, #380]	; (8001284 <main+0x354>)
 8001106:	2214      	movs	r2, #20
 8001108:	701a      	strb	r2, [r3, #0]
						        a=1;       //  (1 on)(0 off)
 800110a:	4b60      	ldr	r3, [pc, #384]	; (800128c <main+0x35c>)
 800110c:	2201      	movs	r2, #1
 800110e:	601a      	str	r2, [r3, #0]
						        mode =1;   // output
 8001110:	4b5f      	ldr	r3, [pc, #380]	; (8001290 <main+0x360>)
 8001112:	2201      	movs	r2, #1
 8001114:	601a      	str	r2, [r3, #0]
						        Status_sawtooth = 0;  //positive/negative ramp
 8001116:	4b5f      	ldr	r3, [pc, #380]	; (8001294 <main+0x364>)
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
						        sprintf(TxDataBuffer, " Sawtooth \r\n ");
 800111c:	4a58      	ldr	r2, [pc, #352]	; (8001280 <main+0x350>)
 800111e:	4b5e      	ldr	r3, [pc, #376]	; (8001298 <main+0x368>)
 8001120:	4614      	mov	r4, r2
 8001122:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001124:	c407      	stmia	r4!, {r0, r1, r2}
 8001126:	8023      	strh	r3, [r4, #0]
						        HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001128:	4855      	ldr	r0, [pc, #340]	; (8001280 <main+0x350>)
 800112a:	f7ff f859 	bl	80001e0 <strlen>
 800112e:	4603      	mov	r3, r0
 8001130:	b29a      	uxth	r2, r3
 8001132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001136:	4952      	ldr	r1, [pc, #328]	; (8001280 <main+0x350>)
 8001138:	484e      	ldr	r0, [pc, #312]	; (8001274 <main+0x344>)
 800113a:	f006 f8f2 	bl	8007322 <HAL_UART_Transmit>


						        break;
 800113e:	e045      	b.n	80011cc <main+0x29c>
						      case '2':
						        STATE_Display = StateDisplay_MenuSine_Print;
 8001140:	4b50      	ldr	r3, [pc, #320]	; (8001284 <main+0x354>)
 8001142:	221e      	movs	r2, #30
 8001144:	701a      	strb	r2, [r3, #0]
						        a=1;
 8001146:	4b51      	ldr	r3, [pc, #324]	; (800128c <main+0x35c>)
 8001148:	2201      	movs	r2, #1
 800114a:	601a      	str	r2, [r3, #0]
						        mode=2;
 800114c:	4b50      	ldr	r3, [pc, #320]	; (8001290 <main+0x360>)
 800114e:	2202      	movs	r2, #2
 8001150:	601a      	str	r2, [r3, #0]
						        timestampsin = micros();
 8001152:	f002 fe3f 	bl	8003dd4 <micros>
 8001156:	4603      	mov	r3, r0
 8001158:	460c      	mov	r4, r1
 800115a:	4a50      	ldr	r2, [pc, #320]	; (800129c <main+0x36c>)
 800115c:	e9c2 3400 	strd	r3, r4, [r2]
						        sprintf(TxDataBuffer, " Sine \r\n ");
 8001160:	4b47      	ldr	r3, [pc, #284]	; (8001280 <main+0x350>)
 8001162:	4a4f      	ldr	r2, [pc, #316]	; (80012a0 <main+0x370>)
 8001164:	ca07      	ldmia	r2, {r0, r1, r2}
 8001166:	c303      	stmia	r3!, {r0, r1}
 8001168:	801a      	strh	r2, [r3, #0]
						          HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800116a:	4845      	ldr	r0, [pc, #276]	; (8001280 <main+0x350>)
 800116c:	f7ff f838 	bl	80001e0 <strlen>
 8001170:	4603      	mov	r3, r0
 8001172:	b29a      	uxth	r2, r3
 8001174:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001178:	4941      	ldr	r1, [pc, #260]	; (8001280 <main+0x350>)
 800117a:	483e      	ldr	r0, [pc, #248]	; (8001274 <main+0x344>)
 800117c:	f006 f8d1 	bl	8007322 <HAL_UART_Transmit>
						        break;
 8001180:	e024      	b.n	80011cc <main+0x29c>
						      case '3':
						      	 STATE_Display =StateDisplay_MenuSquare_Print;
 8001182:	4b40      	ldr	r3, [pc, #256]	; (8001284 <main+0x354>)
 8001184:	2228      	movs	r2, #40	; 0x28
 8001186:	701a      	strb	r2, [r3, #0]
						      	a=1;
 8001188:	4b40      	ldr	r3, [pc, #256]	; (800128c <main+0x35c>)
 800118a:	2201      	movs	r2, #1
 800118c:	601a      	str	r2, [r3, #0]
						      	mode=3;
 800118e:	4b40      	ldr	r3, [pc, #256]	; (8001290 <main+0x360>)
 8001190:	2203      	movs	r2, #3
 8001192:	601a      	str	r2, [r3, #0]
						      	break;
 8001194:	e01a      	b.n	80011cc <main+0x29c>
						      default: // actully error , you can add error message
						    	  sprintf(TxDataBuffer, "unidentified input \r\n");
 8001196:	4a3a      	ldr	r2, [pc, #232]	; (8001280 <main+0x350>)
 8001198:	4b42      	ldr	r3, [pc, #264]	; (80012a4 <main+0x374>)
 800119a:	4614      	mov	r4, r2
 800119c:	461d      	mov	r5, r3
 800119e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011a6:	6020      	str	r0, [r4, #0]
 80011a8:	3404      	adds	r4, #4
 80011aa:	8021      	strh	r1, [r4, #0]
						    	   HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80011ac:	4834      	ldr	r0, [pc, #208]	; (8001280 <main+0x350>)
 80011ae:	f7ff f817 	bl	80001e0 <strlen>
 80011b2:	4603      	mov	r3, r0
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ba:	4931      	ldr	r1, [pc, #196]	; (8001280 <main+0x350>)
 80011bc:	482d      	ldr	r0, [pc, #180]	; (8001274 <main+0x344>)
 80011be:	f006 f8b0 	bl	8007322 <HAL_UART_Transmit>
						        STATE_Display = StateDisplay_MenuRoot_Print;
 80011c2:	4b30      	ldr	r3, [pc, #192]	; (8001284 <main+0x354>)
 80011c4:	220a      	movs	r2, #10
 80011c6:	701a      	strb	r2, [r3, #0]
						        break;
 80011c8:	e000      	b.n	80011cc <main+0x29c>
						      	break;
 80011ca:	bf00      	nop
						      }
						      break;
 80011cc:	f001 bea4 	b.w	8002f18 <main+0x1fe8>

						      //Menu 1 sawtooth

						      case StateDisplay_MenuSawtooth_Print: //display state

						      	sprintf(TxDataBuffer, "Sawtooth \r\n a. +0.1 Hz \r\n s. -0.1 Hz \r\n d. On/Off \r\n f.reverse \r\n x. Back \r\n g. V High +0.1V \r\n h. High -0.1V \r\n j. V Low +0.1V \r\n k. Low -0.1V  \r\n");
 80011d0:	4a2b      	ldr	r2, [pc, #172]	; (8001280 <main+0x350>)
 80011d2:	4b35      	ldr	r3, [pc, #212]	; (80012a8 <main+0x378>)
 80011d4:	4610      	mov	r0, r2
 80011d6:	4619      	mov	r1, r3
 80011d8:	2394      	movs	r3, #148	; 0x94
 80011da:	461a      	mov	r2, r3
 80011dc:	f006 ffc0 	bl	8008160 <memcpy>
						      	 HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80011e0:	4827      	ldr	r0, [pc, #156]	; (8001280 <main+0x350>)
 80011e2:	f7fe fffd 	bl	80001e0 <strlen>
 80011e6:	4603      	mov	r3, r0
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ee:	4924      	ldr	r1, [pc, #144]	; (8001280 <main+0x350>)
 80011f0:	4820      	ldr	r0, [pc, #128]	; (8001274 <main+0x344>)
 80011f2:	f006 f896 	bl	8007322 <HAL_UART_Transmit>

						      	STATE_Display = StateDisplay_MenuSawtooth_WaitInput;
 80011f6:	4b23      	ldr	r3, [pc, #140]	; (8001284 <main+0x354>)
 80011f8:	2215      	movs	r2, #21
 80011fa:	701a      	strb	r2, [r3, #0]
						      break;
 80011fc:	f001 be8c 	b.w	8002f18 <main+0x1fe8>

						      case StateDisplay_MenuSawtooth_WaitInput: //make decision state
						      	 switch (inputchar)
 8001200:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001204:	2b67      	cmp	r3, #103	; 0x67
 8001206:	f000 81ef 	beq.w	80015e8 <main+0x6b8>
 800120a:	2b67      	cmp	r3, #103	; 0x67
 800120c:	dc11      	bgt.n	8001232 <main+0x302>
 800120e:	2b61      	cmp	r3, #97	; 0x61
 8001210:	f000 8082 	beq.w	8001318 <main+0x3e8>
 8001214:	2b61      	cmp	r3, #97	; 0x61
 8001216:	dc05      	bgt.n	8001224 <main+0x2f4>
 8001218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800121c:	f000 850e 	beq.w	8001c3c <main+0xd0c>
 8001220:	f000 bcf2 	b.w	8001c08 <main+0xcd8>
 8001224:	2b64      	cmp	r3, #100	; 0x64
 8001226:	d041      	beq.n	80012ac <main+0x37c>
 8001228:	2b66      	cmp	r3, #102	; 0x66
 800122a:	f000 817f 	beq.w	800152c <main+0x5fc>
 800122e:	f000 bceb 	b.w	8001c08 <main+0xcd8>
 8001232:	2b6b      	cmp	r3, #107	; 0x6b
 8001234:	f000 840d 	beq.w	8001a52 <main+0xb22>
 8001238:	2b6b      	cmp	r3, #107	; 0x6b
 800123a:	dc07      	bgt.n	800124c <main+0x31c>
 800123c:	2b68      	cmp	r3, #104	; 0x68
 800123e:	f000 826f 	beq.w	8001720 <main+0x7f0>
 8001242:	2b6a      	cmp	r3, #106	; 0x6a
 8001244:	f000 8353 	beq.w	80018ee <main+0x9be>
 8001248:	f000 bcde 	b.w	8001c08 <main+0xcd8>
 800124c:	2b73      	cmp	r3, #115	; 0x73
 800124e:	f000 80d1 	beq.w	80013f4 <main+0x4c4>
 8001252:	2b78      	cmp	r3, #120	; 0x78
 8001254:	f000 8163 	beq.w	800151e <main+0x5ee>
 8001258:	f000 bcd6 	b.w	8001c08 <main+0xcd8>
 800125c:	20000220 	.word	0x20000220
 8001260:	20000300 	.word	0x20000300
 8001264:	200001c0 	.word	0x200001c0
 8001268:	200002b8 	.word	0x200002b8
 800126c:	40020000 	.word	0x40020000
 8001270:	0800a064 	.word	0x0800a064
 8001274:	200003a0 	.word	0x200003a0
 8001278:	20000124 	.word	0x20000124
 800127c:	080099c0 	.word	0x080099c0
 8001280:	200000a4 	.word	0x200000a4
 8001284:	200001a4 	.word	0x200001a4
 8001288:	080099d4 	.word	0x080099d4
 800128c:	200001ac 	.word	0x200001ac
 8001290:	200001b8 	.word	0x200001b8
 8001294:	200001dc 	.word	0x200001dc
 8001298:	08009a1c 	.word	0x08009a1c
 800129c:	20000200 	.word	0x20000200
 80012a0:	08009a2c 	.word	0x08009a2c
 80012a4:	08009a38 	.word	0x08009a38
 80012a8:	08009a50 	.word	0x08009a50
						      		     case -1:
						      		    	 break;


						      		           case 'd': // on/off
						      		             if (a==0)
 80012ac:	4bb0      	ldr	r3, [pc, #704]	; (8001570 <main+0x640>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d114      	bne.n	80012de <main+0x3ae>
						      		             {

						      		            	 sprintf(TxDataBuffer, "Turned On \r\n");
 80012b4:	4aaf      	ldr	r2, [pc, #700]	; (8001574 <main+0x644>)
 80012b6:	4bb0      	ldr	r3, [pc, #704]	; (8001578 <main+0x648>)
 80012b8:	4614      	mov	r4, r2
 80012ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012bc:	c407      	stmia	r4!, {r0, r1, r2}
 80012be:	7023      	strb	r3, [r4, #0]
						      		            	 HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80012c0:	48ac      	ldr	r0, [pc, #688]	; (8001574 <main+0x644>)
 80012c2:	f7fe ff8d 	bl	80001e0 <strlen>
 80012c6:	4603      	mov	r3, r0
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ce:	49a9      	ldr	r1, [pc, #676]	; (8001574 <main+0x644>)
 80012d0:	48aa      	ldr	r0, [pc, #680]	; (800157c <main+0x64c>)
 80012d2:	f006 f826 	bl	8007322 <HAL_UART_Transmit>
						      		            	 a=1;
 80012d6:	4ba6      	ldr	r3, [pc, #664]	; (8001570 <main+0x640>)
 80012d8:	2201      	movs	r2, #1
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	e017      	b.n	800130e <main+0x3de>

						      		             }
						      		             else if (a==1)
 80012de:	4ba4      	ldr	r3, [pc, #656]	; (8001570 <main+0x640>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d113      	bne.n	800130e <main+0x3de>
						      		             {
						      		            	 	 a=0;
 80012e6:	4ba2      	ldr	r3, [pc, #648]	; (8001570 <main+0x640>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
						      		             		sprintf(TxDataBuffer, "Turned Off \r\n");
 80012ec:	4aa1      	ldr	r2, [pc, #644]	; (8001574 <main+0x644>)
 80012ee:	4ba4      	ldr	r3, [pc, #656]	; (8001580 <main+0x650>)
 80012f0:	4614      	mov	r4, r2
 80012f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012f4:	c407      	stmia	r4!, {r0, r1, r2}
 80012f6:	8023      	strh	r3, [r4, #0]
						      		             		 HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80012f8:	489e      	ldr	r0, [pc, #632]	; (8001574 <main+0x644>)
 80012fa:	f7fe ff71 	bl	80001e0 <strlen>
 80012fe:	4603      	mov	r3, r0
 8001300:	b29a      	uxth	r2, r3
 8001302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001306:	499b      	ldr	r1, [pc, #620]	; (8001574 <main+0x644>)
 8001308:	489c      	ldr	r0, [pc, #624]	; (800157c <main+0x64c>)
 800130a:	f006 f80a 	bl	8007322 <HAL_UART_Transmit>

						      		             		 }
						      		           STATE_Display = StateDisplay_MenuSawtooth_Print;
 800130e:	4b9d      	ldr	r3, [pc, #628]	; (8001584 <main+0x654>)
 8001310:	2214      	movs	r2, #20
 8001312:	701a      	strb	r2, [r3, #0]

						      		             break;
 8001314:	f000 bc93 	b.w	8001c3e <main+0xd0e>
						      		           case 'a':  // เพิ่มความถี่
						      		        	   a=1;
 8001318:	4b95      	ldr	r3, [pc, #596]	; (8001570 <main+0x640>)
 800131a:	2201      	movs	r2, #1
 800131c:	601a      	str	r2, [r3, #0]
						      		             if(F_sawtooth <10)
 800131e:	4b9a      	ldr	r3, [pc, #616]	; (8001588 <main+0x658>)
 8001320:	edd3 7a00 	vldr	s15, [r3]
 8001324:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001328:	eef4 7ac7 	vcmpe.f32	s15, s14
 800132c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001330:	d546      	bpl.n	80013c0 <main+0x490>
						      		             {
						      		            	F_sawtooth+=0.1;
 8001332:	4b95      	ldr	r3, [pc, #596]	; (8001588 <main+0x658>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f90e 	bl	8000558 <__aeabi_f2d>
 800133c:	a38a      	add	r3, pc, #552	; (adr r3, 8001568 <main+0x638>)
 800133e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001342:	f7fe ffab 	bl	800029c <__adddf3>
 8001346:	4603      	mov	r3, r0
 8001348:	460c      	mov	r4, r1
 800134a:	4618      	mov	r0, r3
 800134c:	4621      	mov	r1, r4
 800134e:	f7ff fc1d 	bl	8000b8c <__aeabi_d2f>
 8001352:	4602      	mov	r2, r0
 8001354:	4b8c      	ldr	r3, [pc, #560]	; (8001588 <main+0x658>)
 8001356:	601a      	str	r2, [r3, #0]
						      		            	t=F_sawtooth*10;
 8001358:	4b8b      	ldr	r3, [pc, #556]	; (8001588 <main+0x658>)
 800135a:	edd3 7a00 	vldr	s15, [r3]
 800135e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001362:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001366:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800136a:	ee17 2a90 	vmov	r2, s15
 800136e:	4b87      	ldr	r3, [pc, #540]	; (800158c <main+0x65c>)
 8001370:	601a      	str	r2, [r3, #0]
						      		            	sprintf(TxDataBuffer," F_sawtooth is [%d.%d] Hz \r\n" ,t/10,t%10);
 8001372:	4b86      	ldr	r3, [pc, #536]	; (800158c <main+0x65c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a86      	ldr	r2, [pc, #536]	; (8001590 <main+0x660>)
 8001378:	fb82 1203 	smull	r1, r2, r2, r3
 800137c:	1092      	asrs	r2, r2, #2
 800137e:	17db      	asrs	r3, r3, #31
 8001380:	1ad0      	subs	r0, r2, r3
 8001382:	4b82      	ldr	r3, [pc, #520]	; (800158c <main+0x65c>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	4b82      	ldr	r3, [pc, #520]	; (8001590 <main+0x660>)
 8001388:	fb83 1302 	smull	r1, r3, r3, r2
 800138c:	1099      	asrs	r1, r3, #2
 800138e:	17d3      	asrs	r3, r2, #31
 8001390:	1ac9      	subs	r1, r1, r3
 8001392:	460b      	mov	r3, r1
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	440b      	add	r3, r1
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	1ad1      	subs	r1, r2, r3
 800139c:	460b      	mov	r3, r1
 800139e:	4602      	mov	r2, r0
 80013a0:	497c      	ldr	r1, [pc, #496]	; (8001594 <main+0x664>)
 80013a2:	4874      	ldr	r0, [pc, #464]	; (8001574 <main+0x644>)
 80013a4:	f006 fef0 	bl	8008188 <siprintf>
						      		            	 HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80013a8:	4872      	ldr	r0, [pc, #456]	; (8001574 <main+0x644>)
 80013aa:	f7fe ff19 	bl	80001e0 <strlen>
 80013ae:	4603      	mov	r3, r0
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b6:	496f      	ldr	r1, [pc, #444]	; (8001574 <main+0x644>)
 80013b8:	4870      	ldr	r0, [pc, #448]	; (800157c <main+0x64c>)
 80013ba:	f005 ffb2 	bl	8007322 <HAL_UART_Transmit>
 80013be:	e014      	b.n	80013ea <main+0x4ba>
						      		             }
						      		             else
						      		             {
						      		            	sprintf(TxDataBuffer," the highest frequency \r\n" );
 80013c0:	4a6c      	ldr	r2, [pc, #432]	; (8001574 <main+0x644>)
 80013c2:	4b75      	ldr	r3, [pc, #468]	; (8001598 <main+0x668>)
 80013c4:	4614      	mov	r4, r2
 80013c6:	461d      	mov	r5, r3
 80013c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013d0:	c403      	stmia	r4!, {r0, r1}
 80013d2:	8022      	strh	r2, [r4, #0]
						      		            	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80013d4:	4867      	ldr	r0, [pc, #412]	; (8001574 <main+0x644>)
 80013d6:	f7fe ff03 	bl	80001e0 <strlen>
 80013da:	4603      	mov	r3, r0
 80013dc:	b29a      	uxth	r2, r3
 80013de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e2:	4964      	ldr	r1, [pc, #400]	; (8001574 <main+0x644>)
 80013e4:	4865      	ldr	r0, [pc, #404]	; (800157c <main+0x64c>)
 80013e6:	f005 ff9c 	bl	8007322 <HAL_UART_Transmit>
						      		             }


						      		           STATE_Display = StateDisplay_MenuSawtooth_Print ;
 80013ea:	4b66      	ldr	r3, [pc, #408]	; (8001584 <main+0x654>)
 80013ec:	2214      	movs	r2, #20
 80013ee:	701a      	strb	r2, [r3, #0]
						      		             break;
 80013f0:	f000 bc25 	b.w	8001c3e <main+0xd0e>
						      		           case 's': //  ลดความถี่
						      		        	   a=1;
 80013f4:	4b5e      	ldr	r3, [pc, #376]	; (8001570 <main+0x640>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	601a      	str	r2, [r3, #0]
						      		        	   if(F_sawtooth- 0.1 >0){
 80013fa:	4b63      	ldr	r3, [pc, #396]	; (8001588 <main+0x658>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f8aa 	bl	8000558 <__aeabi_f2d>
 8001404:	a358      	add	r3, pc, #352	; (adr r3, 8001568 <main+0x638>)
 8001406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140a:	f7fe ff45 	bl	8000298 <__aeabi_dsub>
 800140e:	4603      	mov	r3, r0
 8001410:	460c      	mov	r4, r1
 8001412:	4618      	mov	r0, r3
 8001414:	4621      	mov	r1, r4
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	f04f 0300 	mov.w	r3, #0
 800141e:	f7ff fb83 	bl	8000b28 <__aeabi_dcmpgt>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d046      	beq.n	80014b6 <main+0x586>
						      		        	 F_sawtooth=F_sawtooth-0.1;
 8001428:	4b57      	ldr	r3, [pc, #348]	; (8001588 <main+0x658>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff f893 	bl	8000558 <__aeabi_f2d>
 8001432:	a34d      	add	r3, pc, #308	; (adr r3, 8001568 <main+0x638>)
 8001434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001438:	f7fe ff2e 	bl	8000298 <__aeabi_dsub>
 800143c:	4603      	mov	r3, r0
 800143e:	460c      	mov	r4, r1
 8001440:	4618      	mov	r0, r3
 8001442:	4621      	mov	r1, r4
 8001444:	f7ff fba2 	bl	8000b8c <__aeabi_d2f>
 8001448:	4602      	mov	r2, r0
 800144a:	4b4f      	ldr	r3, [pc, #316]	; (8001588 <main+0x658>)
 800144c:	601a      	str	r2, [r3, #0]
						      		        	t=F_sawtooth*10;
 800144e:	4b4e      	ldr	r3, [pc, #312]	; (8001588 <main+0x658>)
 8001450:	edd3 7a00 	vldr	s15, [r3]
 8001454:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001458:	ee67 7a87 	vmul.f32	s15, s15, s14
 800145c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001460:	ee17 2a90 	vmov	r2, s15
 8001464:	4b49      	ldr	r3, [pc, #292]	; (800158c <main+0x65c>)
 8001466:	601a      	str	r2, [r3, #0]
						      		        	sprintf(TxDataBuffer,"  F_sawtooth [%d.%d] Hz \r\n" ,t/10,t%10);
 8001468:	4b48      	ldr	r3, [pc, #288]	; (800158c <main+0x65c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a48      	ldr	r2, [pc, #288]	; (8001590 <main+0x660>)
 800146e:	fb82 1203 	smull	r1, r2, r2, r3
 8001472:	1092      	asrs	r2, r2, #2
 8001474:	17db      	asrs	r3, r3, #31
 8001476:	1ad0      	subs	r0, r2, r3
 8001478:	4b44      	ldr	r3, [pc, #272]	; (800158c <main+0x65c>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b44      	ldr	r3, [pc, #272]	; (8001590 <main+0x660>)
 800147e:	fb83 1302 	smull	r1, r3, r3, r2
 8001482:	1099      	asrs	r1, r3, #2
 8001484:	17d3      	asrs	r3, r2, #31
 8001486:	1ac9      	subs	r1, r1, r3
 8001488:	460b      	mov	r3, r1
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	1ad1      	subs	r1, r2, r3
 8001492:	460b      	mov	r3, r1
 8001494:	4602      	mov	r2, r0
 8001496:	4941      	ldr	r1, [pc, #260]	; (800159c <main+0x66c>)
 8001498:	4836      	ldr	r0, [pc, #216]	; (8001574 <main+0x644>)
 800149a:	f006 fe75 	bl	8008188 <siprintf>
						      		        	 HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800149e:	4835      	ldr	r0, [pc, #212]	; (8001574 <main+0x644>)
 80014a0:	f7fe fe9e 	bl	80001e0 <strlen>
 80014a4:	4603      	mov	r3, r0
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ac:	4931      	ldr	r1, [pc, #196]	; (8001574 <main+0x644>)
 80014ae:	4833      	ldr	r0, [pc, #204]	; (800157c <main+0x64c>)
 80014b0:	f005 ff37 	bl	8007322 <HAL_UART_Transmit>
 80014b4:	e02f      	b.n	8001516 <main+0x5e6>
						      		        	   }
						      		        	 else if(F_sawtooth- 0.1 <=0)
 80014b6:	4b34      	ldr	r3, [pc, #208]	; (8001588 <main+0x658>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff f84c 	bl	8000558 <__aeabi_f2d>
 80014c0:	a329      	add	r3, pc, #164	; (adr r3, 8001568 <main+0x638>)
 80014c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c6:	f7fe fee7 	bl	8000298 <__aeabi_dsub>
 80014ca:	4603      	mov	r3, r0
 80014cc:	460c      	mov	r4, r1
 80014ce:	4618      	mov	r0, r3
 80014d0:	4621      	mov	r1, r4
 80014d2:	f04f 0200 	mov.w	r2, #0
 80014d6:	f04f 0300 	mov.w	r3, #0
 80014da:	f7ff fb11 	bl	8000b00 <__aeabi_dcmple>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d018      	beq.n	8001516 <main+0x5e6>
						      		            {
						      		        	F_sawtooth=0;
 80014e4:	4b28      	ldr	r3, [pc, #160]	; (8001588 <main+0x658>)
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
						      		        	sprintf(TxDataBuffer," the Lower frequency \r\n" );
 80014ec:	4a21      	ldr	r2, [pc, #132]	; (8001574 <main+0x644>)
 80014ee:	4b2c      	ldr	r3, [pc, #176]	; (80015a0 <main+0x670>)
 80014f0:	4614      	mov	r4, r2
 80014f2:	461d      	mov	r5, r3
 80014f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014f8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80014fc:	e884 0003 	stmia.w	r4, {r0, r1}
						      		        	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001500:	481c      	ldr	r0, [pc, #112]	; (8001574 <main+0x644>)
 8001502:	f7fe fe6d 	bl	80001e0 <strlen>
 8001506:	4603      	mov	r3, r0
 8001508:	b29a      	uxth	r2, r3
 800150a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150e:	4919      	ldr	r1, [pc, #100]	; (8001574 <main+0x644>)
 8001510:	481a      	ldr	r0, [pc, #104]	; (800157c <main+0x64c>)
 8001512:	f005 ff06 	bl	8007322 <HAL_UART_Transmit>

						      		            }

						      		           STATE_Display = StateDisplay_MenuSawtooth_Print;
 8001516:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <main+0x654>)
 8001518:	2214      	movs	r2, #20
 800151a:	701a      	strb	r2, [r3, #0]

						      		           break;
 800151c:	e38f      	b.n	8001c3e <main+0xd0e>

						      		           case 'x': // back to main manu
						      		        	   a=0;
 800151e:	4b14      	ldr	r3, [pc, #80]	; (8001570 <main+0x640>)
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
						      		           STATE_Display = StateDisplay_MenuRoot_Print;
 8001524:	4b17      	ldr	r3, [pc, #92]	; (8001584 <main+0x654>)
 8001526:	220a      	movs	r2, #10
 8001528:	701a      	strb	r2, [r3, #0]
						      		           break;
 800152a:	e388      	b.n	8001c3e <main+0xd0e>
						      		         case 'f': // reverse
						      		        	if(Status_sawtooth == 1)
 800152c:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <main+0x674>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d13b      	bne.n	80015ac <main+0x67c>
						      		        	{
						      		        		Status_sawtooth = 0;
 8001534:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <main+0x674>)
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
						      		        		 sprintf(TxDataBuffer, "Positive Ramp \r\n");
 800153a:	4a0e      	ldr	r2, [pc, #56]	; (8001574 <main+0x644>)
 800153c:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <main+0x678>)
 800153e:	4614      	mov	r4, r2
 8001540:	461d      	mov	r5, r3
 8001542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001546:	682b      	ldr	r3, [r5, #0]
 8001548:	7023      	strb	r3, [r4, #0]
						      		        		 HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800154a:	480a      	ldr	r0, [pc, #40]	; (8001574 <main+0x644>)
 800154c:	f7fe fe48 	bl	80001e0 <strlen>
 8001550:	4603      	mov	r3, r0
 8001552:	b29a      	uxth	r2, r3
 8001554:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001558:	4906      	ldr	r1, [pc, #24]	; (8001574 <main+0x644>)
 800155a:	4808      	ldr	r0, [pc, #32]	; (800157c <main+0x64c>)
 800155c:	f005 fee1 	bl	8007322 <HAL_UART_Transmit>
 8001560:	e03e      	b.n	80015e0 <main+0x6b0>
 8001562:	bf00      	nop
 8001564:	f3af 8000 	nop.w
 8001568:	9999999a 	.word	0x9999999a
 800156c:	3fb99999 	.word	0x3fb99999
 8001570:	200001ac 	.word	0x200001ac
 8001574:	200000a4 	.word	0x200000a4
 8001578:	08009ae4 	.word	0x08009ae4
 800157c:	200003a0 	.word	0x200003a0
 8001580:	08009af4 	.word	0x08009af4
 8001584:	200001a4 	.word	0x200001a4
 8001588:	200001d8 	.word	0x200001d8
 800158c:	200001b4 	.word	0x200001b4
 8001590:	66666667 	.word	0x66666667
 8001594:	08009b04 	.word	0x08009b04
 8001598:	08009b24 	.word	0x08009b24
 800159c:	08009b40 	.word	0x08009b40
 80015a0:	08009b5c 	.word	0x08009b5c
 80015a4:	200001dc 	.word	0x200001dc
 80015a8:	08009b74 	.word	0x08009b74
						      		        	}
						      		        	else if(Status_sawtooth == 0)
 80015ac:	4b9c      	ldr	r3, [pc, #624]	; (8001820 <main+0x8f0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d115      	bne.n	80015e0 <main+0x6b0>
						      		        		{
						      		        		Status_sawtooth = 1;
 80015b4:	4b9a      	ldr	r3, [pc, #616]	; (8001820 <main+0x8f0>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	601a      	str	r2, [r3, #0]
						      		        		sprintf(TxDataBuffer, "Negative Ramp \r\n");
 80015ba:	4a9a      	ldr	r2, [pc, #616]	; (8001824 <main+0x8f4>)
 80015bc:	4b9a      	ldr	r3, [pc, #616]	; (8001828 <main+0x8f8>)
 80015be:	4614      	mov	r4, r2
 80015c0:	461d      	mov	r5, r3
 80015c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015c6:	682b      	ldr	r3, [r5, #0]
 80015c8:	7023      	strb	r3, [r4, #0]
						      		        	 HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80015ca:	4896      	ldr	r0, [pc, #600]	; (8001824 <main+0x8f4>)
 80015cc:	f7fe fe08 	bl	80001e0 <strlen>
 80015d0:	4603      	mov	r3, r0
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d8:	4992      	ldr	r1, [pc, #584]	; (8001824 <main+0x8f4>)
 80015da:	4894      	ldr	r0, [pc, #592]	; (800182c <main+0x8fc>)
 80015dc:	f005 fea1 	bl	8007322 <HAL_UART_Transmit>
						      		        		}

						      		         	 STATE_Display =StateDisplay_MenuSawtooth_Print;
 80015e0:	4b93      	ldr	r3, [pc, #588]	; (8001830 <main+0x900>)
 80015e2:	2214      	movs	r2, #20
 80015e4:	701a      	strb	r2, [r3, #0]
						      		         	 break;
 80015e6:	e32a      	b.n	8001c3e <main+0xd0e>
						      		         case 'g':// +V High
						      		        	if(VoltHigh_sawtooth +0.1 <3.3){
 80015e8:	4b92      	ldr	r3, [pc, #584]	; (8001834 <main+0x904>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe ffb3 	bl	8000558 <__aeabi_f2d>
 80015f2:	a387      	add	r3, pc, #540	; (adr r3, 8001810 <main+0x8e0>)
 80015f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f8:	f7fe fe50 	bl	800029c <__adddf3>
 80015fc:	4603      	mov	r3, r0
 80015fe:	460c      	mov	r4, r1
 8001600:	4618      	mov	r0, r3
 8001602:	4621      	mov	r1, r4
 8001604:	a384      	add	r3, pc, #528	; (adr r3, 8001818 <main+0x8e8>)
 8001606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160a:	f7ff fa6f 	bl	8000aec <__aeabi_dcmplt>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d046      	beq.n	80016a2 <main+0x772>
						      		        	VoltHigh_sawtooth =VoltHigh_sawtooth +0.1;
 8001614:	4b87      	ldr	r3, [pc, #540]	; (8001834 <main+0x904>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f7fe ff9d 	bl	8000558 <__aeabi_f2d>
 800161e:	a37c      	add	r3, pc, #496	; (adr r3, 8001810 <main+0x8e0>)
 8001620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001624:	f7fe fe3a 	bl	800029c <__adddf3>
 8001628:	4603      	mov	r3, r0
 800162a:	460c      	mov	r4, r1
 800162c:	4618      	mov	r0, r3
 800162e:	4621      	mov	r1, r4
 8001630:	f7ff faac 	bl	8000b8c <__aeabi_d2f>
 8001634:	4602      	mov	r2, r0
 8001636:	4b7f      	ldr	r3, [pc, #508]	; (8001834 <main+0x904>)
 8001638:	601a      	str	r2, [r3, #0]
						      		        	t=VoltHigh_sawtooth*10;
 800163a:	4b7e      	ldr	r3, [pc, #504]	; (8001834 <main+0x904>)
 800163c:	edd3 7a00 	vldr	s15, [r3]
 8001640:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001644:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001648:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800164c:	ee17 2a90 	vmov	r2, s15
 8001650:	4b79      	ldr	r3, [pc, #484]	; (8001838 <main+0x908>)
 8001652:	601a      	str	r2, [r3, #0]
						      		        	sprintf(TxDataBuffer,"  VoltHigh_sawtooth is [%d.%d] V \r\n" ,t/10,t%10);
 8001654:	4b78      	ldr	r3, [pc, #480]	; (8001838 <main+0x908>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a78      	ldr	r2, [pc, #480]	; (800183c <main+0x90c>)
 800165a:	fb82 1203 	smull	r1, r2, r2, r3
 800165e:	1092      	asrs	r2, r2, #2
 8001660:	17db      	asrs	r3, r3, #31
 8001662:	1ad0      	subs	r0, r2, r3
 8001664:	4b74      	ldr	r3, [pc, #464]	; (8001838 <main+0x908>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b74      	ldr	r3, [pc, #464]	; (800183c <main+0x90c>)
 800166a:	fb83 1302 	smull	r1, r3, r3, r2
 800166e:	1099      	asrs	r1, r3, #2
 8001670:	17d3      	asrs	r3, r2, #31
 8001672:	1ac9      	subs	r1, r1, r3
 8001674:	460b      	mov	r3, r1
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	1ad1      	subs	r1, r2, r3
 800167e:	460b      	mov	r3, r1
 8001680:	4602      	mov	r2, r0
 8001682:	496f      	ldr	r1, [pc, #444]	; (8001840 <main+0x910>)
 8001684:	4867      	ldr	r0, [pc, #412]	; (8001824 <main+0x8f4>)
 8001686:	f006 fd7f 	bl	8008188 <siprintf>
						      		        	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800168a:	4866      	ldr	r0, [pc, #408]	; (8001824 <main+0x8f4>)
 800168c:	f7fe fda8 	bl	80001e0 <strlen>
 8001690:	4603      	mov	r3, r0
 8001692:	b29a      	uxth	r2, r3
 8001694:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001698:	4962      	ldr	r1, [pc, #392]	; (8001824 <main+0x8f4>)
 800169a:	4864      	ldr	r0, [pc, #400]	; (800182c <main+0x8fc>)
 800169c:	f005 fe41 	bl	8007322 <HAL_UART_Transmit>

						      		        		sprintf(TxDataBuffer,"  VoltHigh_sawtoothis 3.3 V \r\n" ,t/10,t%10);
						      		        		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);

						      		        	}
						      		        	break;
 80016a0:	e2cd      	b.n	8001c3e <main+0xd0e>
						      		        		VoltHigh_sawtooth =3.3;
 80016a2:	4b64      	ldr	r3, [pc, #400]	; (8001834 <main+0x904>)
 80016a4:	4a67      	ldr	r2, [pc, #412]	; (8001844 <main+0x914>)
 80016a6:	601a      	str	r2, [r3, #0]
						      		        		 sprintf(TxDataBuffer,"highest VoltHigh_sawtooth\r\n");
 80016a8:	4a5e      	ldr	r2, [pc, #376]	; (8001824 <main+0x8f4>)
 80016aa:	4b67      	ldr	r3, [pc, #412]	; (8001848 <main+0x918>)
 80016ac:	4614      	mov	r4, r2
 80016ae:	461d      	mov	r5, r3
 80016b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
						      		        		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80016bc:	4859      	ldr	r0, [pc, #356]	; (8001824 <main+0x8f4>)
 80016be:	f7fe fd8f 	bl	80001e0 <strlen>
 80016c2:	4603      	mov	r3, r0
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ca:	4956      	ldr	r1, [pc, #344]	; (8001824 <main+0x8f4>)
 80016cc:	4857      	ldr	r0, [pc, #348]	; (800182c <main+0x8fc>)
 80016ce:	f005 fe28 	bl	8007322 <HAL_UART_Transmit>
						      		        		sprintf(TxDataBuffer,"  VoltHigh_sawtoothis 3.3 V \r\n" ,t/10,t%10);
 80016d2:	4b59      	ldr	r3, [pc, #356]	; (8001838 <main+0x908>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a59      	ldr	r2, [pc, #356]	; (800183c <main+0x90c>)
 80016d8:	fb82 1203 	smull	r1, r2, r2, r3
 80016dc:	1092      	asrs	r2, r2, #2
 80016de:	17db      	asrs	r3, r3, #31
 80016e0:	1ad0      	subs	r0, r2, r3
 80016e2:	4b55      	ldr	r3, [pc, #340]	; (8001838 <main+0x908>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	4b55      	ldr	r3, [pc, #340]	; (800183c <main+0x90c>)
 80016e8:	fb83 1302 	smull	r1, r3, r3, r2
 80016ec:	1099      	asrs	r1, r3, #2
 80016ee:	17d3      	asrs	r3, r2, #31
 80016f0:	1ac9      	subs	r1, r1, r3
 80016f2:	460b      	mov	r3, r1
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	440b      	add	r3, r1
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	1ad1      	subs	r1, r2, r3
 80016fc:	460b      	mov	r3, r1
 80016fe:	4602      	mov	r2, r0
 8001700:	4952      	ldr	r1, [pc, #328]	; (800184c <main+0x91c>)
 8001702:	4848      	ldr	r0, [pc, #288]	; (8001824 <main+0x8f4>)
 8001704:	f006 fd40 	bl	8008188 <siprintf>
						      		        		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001708:	4846      	ldr	r0, [pc, #280]	; (8001824 <main+0x8f4>)
 800170a:	f7fe fd69 	bl	80001e0 <strlen>
 800170e:	4603      	mov	r3, r0
 8001710:	b29a      	uxth	r2, r3
 8001712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001716:	4943      	ldr	r1, [pc, #268]	; (8001824 <main+0x8f4>)
 8001718:	4844      	ldr	r0, [pc, #272]	; (800182c <main+0x8fc>)
 800171a:	f005 fe02 	bl	8007322 <HAL_UART_Transmit>
						      		        	break;
 800171e:	e28e      	b.n	8001c3e <main+0xd0e>
						      		       case 'h':// -V High
						      		    	   if(VoltHigh_sawtooth-0.1>0){
 8001720:	4b44      	ldr	r3, [pc, #272]	; (8001834 <main+0x904>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f7fe ff17 	bl	8000558 <__aeabi_f2d>
 800172a:	a339      	add	r3, pc, #228	; (adr r3, 8001810 <main+0x8e0>)
 800172c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001730:	f7fe fdb2 	bl	8000298 <__aeabi_dsub>
 8001734:	4603      	mov	r3, r0
 8001736:	460c      	mov	r4, r1
 8001738:	4618      	mov	r0, r3
 800173a:	4621      	mov	r1, r4
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	f7ff f9f0 	bl	8000b28 <__aeabi_dcmpgt>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d046      	beq.n	80017dc <main+0x8ac>
						      		       	VoltHigh_sawtooth =VoltHigh_sawtooth -0.1;
 800174e:	4b39      	ldr	r3, [pc, #228]	; (8001834 <main+0x904>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe ff00 	bl	8000558 <__aeabi_f2d>
 8001758:	a32d      	add	r3, pc, #180	; (adr r3, 8001810 <main+0x8e0>)
 800175a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175e:	f7fe fd9b 	bl	8000298 <__aeabi_dsub>
 8001762:	4603      	mov	r3, r0
 8001764:	460c      	mov	r4, r1
 8001766:	4618      	mov	r0, r3
 8001768:	4621      	mov	r1, r4
 800176a:	f7ff fa0f 	bl	8000b8c <__aeabi_d2f>
 800176e:	4602      	mov	r2, r0
 8001770:	4b30      	ldr	r3, [pc, #192]	; (8001834 <main+0x904>)
 8001772:	601a      	str	r2, [r3, #0]
						      		      t=VoltHigh_sawtooth*10;
 8001774:	4b2f      	ldr	r3, [pc, #188]	; (8001834 <main+0x904>)
 8001776:	edd3 7a00 	vldr	s15, [r3]
 800177a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800177e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001782:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001786:	ee17 2a90 	vmov	r2, s15
 800178a:	4b2b      	ldr	r3, [pc, #172]	; (8001838 <main+0x908>)
 800178c:	601a      	str	r2, [r3, #0]
						      		      	sprintf(TxDataBuffer,"  VoltHigh_sawtoothis [%d.%d] V\r\n" ,t/10,t%10);
 800178e:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <main+0x908>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a2a      	ldr	r2, [pc, #168]	; (800183c <main+0x90c>)
 8001794:	fb82 1203 	smull	r1, r2, r2, r3
 8001798:	1092      	asrs	r2, r2, #2
 800179a:	17db      	asrs	r3, r3, #31
 800179c:	1ad0      	subs	r0, r2, r3
 800179e:	4b26      	ldr	r3, [pc, #152]	; (8001838 <main+0x908>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	4b26      	ldr	r3, [pc, #152]	; (800183c <main+0x90c>)
 80017a4:	fb83 1302 	smull	r1, r3, r3, r2
 80017a8:	1099      	asrs	r1, r3, #2
 80017aa:	17d3      	asrs	r3, r2, #31
 80017ac:	1ac9      	subs	r1, r1, r3
 80017ae:	460b      	mov	r3, r1
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	440b      	add	r3, r1
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	1ad1      	subs	r1, r2, r3
 80017b8:	460b      	mov	r3, r1
 80017ba:	4602      	mov	r2, r0
 80017bc:	4924      	ldr	r1, [pc, #144]	; (8001850 <main+0x920>)
 80017be:	4819      	ldr	r0, [pc, #100]	; (8001824 <main+0x8f4>)
 80017c0:	f006 fce2 	bl	8008188 <siprintf>
						      		      	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80017c4:	4817      	ldr	r0, [pc, #92]	; (8001824 <main+0x8f4>)
 80017c6:	f7fe fd0b 	bl	80001e0 <strlen>
 80017ca:	4603      	mov	r3, r0
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d2:	4914      	ldr	r1, [pc, #80]	; (8001824 <main+0x8f4>)
 80017d4:	4815      	ldr	r0, [pc, #84]	; (800182c <main+0x8fc>)
 80017d6:	f005 fda4 	bl	8007322 <HAL_UART_Transmit>
					      		        		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
					      		        		 t=VoltHigh_sawtooth*10;
					      		        		 sprintf(TxDataBuffer,"  VoltHigh_sawtoothis 0 V \r\n" ,t/10,t%10);
					      		        			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
						      		       	}
						      		      break;
 80017da:	e230      	b.n	8001c3e <main+0xd0e>
						      		    	   }else if (VoltHigh_sawtooth-0.1 <=0)
 80017dc:	4b15      	ldr	r3, [pc, #84]	; (8001834 <main+0x904>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7fe feb9 	bl	8000558 <__aeabi_f2d>
 80017e6:	a30a      	add	r3, pc, #40	; (adr r3, 8001810 <main+0x8e0>)
 80017e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ec:	f7fe fd54 	bl	8000298 <__aeabi_dsub>
 80017f0:	4603      	mov	r3, r0
 80017f2:	460c      	mov	r4, r1
 80017f4:	4618      	mov	r0, r3
 80017f6:	4621      	mov	r1, r4
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	f04f 0300 	mov.w	r3, #0
 8001800:	f7ff f97e 	bl	8000b00 <__aeabi_dcmple>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d124      	bne.n	8001854 <main+0x924>
						      		      break;
 800180a:	e218      	b.n	8001c3e <main+0xd0e>
 800180c:	f3af 8000 	nop.w
 8001810:	9999999a 	.word	0x9999999a
 8001814:	3fb99999 	.word	0x3fb99999
 8001818:	66666666 	.word	0x66666666
 800181c:	400a6666 	.word	0x400a6666
 8001820:	200001dc 	.word	0x200001dc
 8001824:	200000a4 	.word	0x200000a4
 8001828:	08009b88 	.word	0x08009b88
 800182c:	200003a0 	.word	0x200003a0
 8001830:	200001a4 	.word	0x200001a4
 8001834:	20000004 	.word	0x20000004
 8001838:	200001b4 	.word	0x200001b4
 800183c:	66666667 	.word	0x66666667
 8001840:	08009b9c 	.word	0x08009b9c
 8001844:	40533333 	.word	0x40533333
 8001848:	08009bc0 	.word	0x08009bc0
 800184c:	08009bdc 	.word	0x08009bdc
 8001850:	08009bfc 	.word	0x08009bfc
						      		       		VoltHigh_sawtooth =0;
 8001854:	4bbe      	ldr	r3, [pc, #760]	; (8001b50 <main+0xc20>)
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
					      		        		 sprintf(TxDataBuffer,"lower VoltHigh_sawtooth\r\n");
 800185c:	4abd      	ldr	r2, [pc, #756]	; (8001b54 <main+0xc24>)
 800185e:	4bbe      	ldr	r3, [pc, #760]	; (8001b58 <main+0xc28>)
 8001860:	4614      	mov	r4, r2
 8001862:	461d      	mov	r5, r3
 8001864:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001868:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800186c:	c403      	stmia	r4!, {r0, r1}
 800186e:	8022      	strh	r2, [r4, #0]
					      		        		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001870:	48b8      	ldr	r0, [pc, #736]	; (8001b54 <main+0xc24>)
 8001872:	f7fe fcb5 	bl	80001e0 <strlen>
 8001876:	4603      	mov	r3, r0
 8001878:	b29a      	uxth	r2, r3
 800187a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800187e:	49b5      	ldr	r1, [pc, #724]	; (8001b54 <main+0xc24>)
 8001880:	48b6      	ldr	r0, [pc, #728]	; (8001b5c <main+0xc2c>)
 8001882:	f005 fd4e 	bl	8007322 <HAL_UART_Transmit>
					      		        		 t=VoltHigh_sawtooth*10;
 8001886:	4bb2      	ldr	r3, [pc, #712]	; (8001b50 <main+0xc20>)
 8001888:	edd3 7a00 	vldr	s15, [r3]
 800188c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001890:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001894:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001898:	ee17 2a90 	vmov	r2, s15
 800189c:	4bb0      	ldr	r3, [pc, #704]	; (8001b60 <main+0xc30>)
 800189e:	601a      	str	r2, [r3, #0]
					      		        		 sprintf(TxDataBuffer,"  VoltHigh_sawtoothis 0 V \r\n" ,t/10,t%10);
 80018a0:	4baf      	ldr	r3, [pc, #700]	; (8001b60 <main+0xc30>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4aaf      	ldr	r2, [pc, #700]	; (8001b64 <main+0xc34>)
 80018a6:	fb82 1203 	smull	r1, r2, r2, r3
 80018aa:	1092      	asrs	r2, r2, #2
 80018ac:	17db      	asrs	r3, r3, #31
 80018ae:	1ad0      	subs	r0, r2, r3
 80018b0:	4bab      	ldr	r3, [pc, #684]	; (8001b60 <main+0xc30>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4bab      	ldr	r3, [pc, #684]	; (8001b64 <main+0xc34>)
 80018b6:	fb83 1302 	smull	r1, r3, r3, r2
 80018ba:	1099      	asrs	r1, r3, #2
 80018bc:	17d3      	asrs	r3, r2, #31
 80018be:	1ac9      	subs	r1, r1, r3
 80018c0:	460b      	mov	r3, r1
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	1ad1      	subs	r1, r2, r3
 80018ca:	460b      	mov	r3, r1
 80018cc:	4602      	mov	r2, r0
 80018ce:	49a6      	ldr	r1, [pc, #664]	; (8001b68 <main+0xc38>)
 80018d0:	48a0      	ldr	r0, [pc, #640]	; (8001b54 <main+0xc24>)
 80018d2:	f006 fc59 	bl	8008188 <siprintf>
					      		        			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80018d6:	489f      	ldr	r0, [pc, #636]	; (8001b54 <main+0xc24>)
 80018d8:	f7fe fc82 	bl	80001e0 <strlen>
 80018dc:	4603      	mov	r3, r0
 80018de:	b29a      	uxth	r2, r3
 80018e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e4:	499b      	ldr	r1, [pc, #620]	; (8001b54 <main+0xc24>)
 80018e6:	489d      	ldr	r0, [pc, #628]	; (8001b5c <main+0xc2c>)
 80018e8:	f005 fd1b 	bl	8007322 <HAL_UART_Transmit>
						      		      break;
 80018ec:	e1a7      	b.n	8001c3e <main+0xd0e>
						      		     case 'j':// +V Low
						      		    	 if(VoltLow_sawtooth +0.1 <3.3){
 80018ee:	4b9f      	ldr	r3, [pc, #636]	; (8001b6c <main+0xc3c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fe30 	bl	8000558 <__aeabi_f2d>
 80018f8:	a391      	add	r3, pc, #580	; (adr r3, 8001b40 <main+0xc10>)
 80018fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fe:	f7fe fccd 	bl	800029c <__adddf3>
 8001902:	4603      	mov	r3, r0
 8001904:	460c      	mov	r4, r1
 8001906:	4618      	mov	r0, r3
 8001908:	4621      	mov	r1, r4
 800190a:	a38f      	add	r3, pc, #572	; (adr r3, 8001b48 <main+0xc18>)
 800190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001910:	f7ff f8ec 	bl	8000aec <__aeabi_dcmplt>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d046      	beq.n	80019a8 <main+0xa78>
						      		     VoltLow_sawtooth =VoltLow_sawtooth +0.1;
 800191a:	4b94      	ldr	r3, [pc, #592]	; (8001b6c <main+0xc3c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fe1a 	bl	8000558 <__aeabi_f2d>
 8001924:	a386      	add	r3, pc, #536	; (adr r3, 8001b40 <main+0xc10>)
 8001926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192a:	f7fe fcb7 	bl	800029c <__adddf3>
 800192e:	4603      	mov	r3, r0
 8001930:	460c      	mov	r4, r1
 8001932:	4618      	mov	r0, r3
 8001934:	4621      	mov	r1, r4
 8001936:	f7ff f929 	bl	8000b8c <__aeabi_d2f>
 800193a:	4602      	mov	r2, r0
 800193c:	4b8b      	ldr	r3, [pc, #556]	; (8001b6c <main+0xc3c>)
 800193e:	601a      	str	r2, [r3, #0]
						      		   t=VoltLow_sawtooth*10;
 8001940:	4b8a      	ldr	r3, [pc, #552]	; (8001b6c <main+0xc3c>)
 8001942:	edd3 7a00 	vldr	s15, [r3]
 8001946:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800194a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800194e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001952:	ee17 2a90 	vmov	r2, s15
 8001956:	4b82      	ldr	r3, [pc, #520]	; (8001b60 <main+0xc30>)
 8001958:	601a      	str	r2, [r3, #0]
						      		  	sprintf(TxDataBuffer,"  VoltLow_sawtooth is [%d.%d] V \r\n" ,t/10,t%10);
 800195a:	4b81      	ldr	r3, [pc, #516]	; (8001b60 <main+0xc30>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a81      	ldr	r2, [pc, #516]	; (8001b64 <main+0xc34>)
 8001960:	fb82 1203 	smull	r1, r2, r2, r3
 8001964:	1092      	asrs	r2, r2, #2
 8001966:	17db      	asrs	r3, r3, #31
 8001968:	1ad0      	subs	r0, r2, r3
 800196a:	4b7d      	ldr	r3, [pc, #500]	; (8001b60 <main+0xc30>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	4b7d      	ldr	r3, [pc, #500]	; (8001b64 <main+0xc34>)
 8001970:	fb83 1302 	smull	r1, r3, r3, r2
 8001974:	1099      	asrs	r1, r3, #2
 8001976:	17d3      	asrs	r3, r2, #31
 8001978:	1ac9      	subs	r1, r1, r3
 800197a:	460b      	mov	r3, r1
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	440b      	add	r3, r1
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	1ad1      	subs	r1, r2, r3
 8001984:	460b      	mov	r3, r1
 8001986:	4602      	mov	r2, r0
 8001988:	4979      	ldr	r1, [pc, #484]	; (8001b70 <main+0xc40>)
 800198a:	4872      	ldr	r0, [pc, #456]	; (8001b54 <main+0xc24>)
 800198c:	f006 fbfc 	bl	8008188 <siprintf>
						      		   	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001990:	4870      	ldr	r0, [pc, #448]	; (8001b54 <main+0xc24>)
 8001992:	f7fe fc25 	bl	80001e0 <strlen>
 8001996:	4603      	mov	r3, r0
 8001998:	b29a      	uxth	r2, r3
 800199a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800199e:	496d      	ldr	r1, [pc, #436]	; (8001b54 <main+0xc24>)
 80019a0:	486e      	ldr	r0, [pc, #440]	; (8001b5c <main+0xc2c>)
 80019a2:	f005 fcbe 	bl	8007322 <HAL_UART_Transmit>
						      		    	sprintf(TxDataBuffer,"  VoltLow_sawtooth is 3.3 V \r\n" );
						      		    	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
						      		    	 sprintf(TxDataBuffer,"highest VoltLow_sawtooth");
						      		    	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
						      		     }
						      		   break;
 80019a6:	e14a      	b.n	8001c3e <main+0xd0e>
						      		   	else if (VoltLow_sawtooth +0.1 >=3.3)
 80019a8:	4b70      	ldr	r3, [pc, #448]	; (8001b6c <main+0xc3c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fdd3 	bl	8000558 <__aeabi_f2d>
 80019b2:	a363      	add	r3, pc, #396	; (adr r3, 8001b40 <main+0xc10>)
 80019b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b8:	f7fe fc70 	bl	800029c <__adddf3>
 80019bc:	4603      	mov	r3, r0
 80019be:	460c      	mov	r4, r1
 80019c0:	4618      	mov	r0, r3
 80019c2:	4621      	mov	r1, r4
 80019c4:	a360      	add	r3, pc, #384	; (adr r3, 8001b48 <main+0xc18>)
 80019c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ca:	f7ff f8a3 	bl	8000b14 <__aeabi_dcmpge>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d100      	bne.n	80019d6 <main+0xaa6>
						      		   break;
 80019d4:	e133      	b.n	8001c3e <main+0xd0e>
						      		    	VoltLow_sawtooth =3.3;
 80019d6:	4b65      	ldr	r3, [pc, #404]	; (8001b6c <main+0xc3c>)
 80019d8:	4a66      	ldr	r2, [pc, #408]	; (8001b74 <main+0xc44>)
 80019da:	601a      	str	r2, [r3, #0]
						      		    	t=VoltLow_sawtooth*10;
 80019dc:	4b63      	ldr	r3, [pc, #396]	; (8001b6c <main+0xc3c>)
 80019de:	edd3 7a00 	vldr	s15, [r3]
 80019e2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80019e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019ee:	ee17 2a90 	vmov	r2, s15
 80019f2:	4b5b      	ldr	r3, [pc, #364]	; (8001b60 <main+0xc30>)
 80019f4:	601a      	str	r2, [r3, #0]
						      		    	sprintf(TxDataBuffer,"  VoltLow_sawtooth is 3.3 V \r\n" );
 80019f6:	4a57      	ldr	r2, [pc, #348]	; (8001b54 <main+0xc24>)
 80019f8:	4b5f      	ldr	r3, [pc, #380]	; (8001b78 <main+0xc48>)
 80019fa:	4614      	mov	r4, r2
 80019fc:	461d      	mov	r5, r3
 80019fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a02:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001a06:	c407      	stmia	r4!, {r0, r1, r2}
 8001a08:	8023      	strh	r3, [r4, #0]
 8001a0a:	3402      	adds	r4, #2
 8001a0c:	0c1b      	lsrs	r3, r3, #16
 8001a0e:	7023      	strb	r3, [r4, #0]
						      		    	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001a10:	4850      	ldr	r0, [pc, #320]	; (8001b54 <main+0xc24>)
 8001a12:	f7fe fbe5 	bl	80001e0 <strlen>
 8001a16:	4603      	mov	r3, r0
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a1e:	494d      	ldr	r1, [pc, #308]	; (8001b54 <main+0xc24>)
 8001a20:	484e      	ldr	r0, [pc, #312]	; (8001b5c <main+0xc2c>)
 8001a22:	f005 fc7e 	bl	8007322 <HAL_UART_Transmit>
						      		    	 sprintf(TxDataBuffer,"highest VoltLow_sawtooth");
 8001a26:	4a4b      	ldr	r2, [pc, #300]	; (8001b54 <main+0xc24>)
 8001a28:	4b54      	ldr	r3, [pc, #336]	; (8001b7c <main+0xc4c>)
 8001a2a:	4614      	mov	r4, r2
 8001a2c:	461d      	mov	r5, r3
 8001a2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a32:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a36:	c403      	stmia	r4!, {r0, r1}
 8001a38:	7022      	strb	r2, [r4, #0]
						      		    	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001a3a:	4846      	ldr	r0, [pc, #280]	; (8001b54 <main+0xc24>)
 8001a3c:	f7fe fbd0 	bl	80001e0 <strlen>
 8001a40:	4603      	mov	r3, r0
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a48:	4942      	ldr	r1, [pc, #264]	; (8001b54 <main+0xc24>)
 8001a4a:	4844      	ldr	r0, [pc, #272]	; (8001b5c <main+0xc2c>)
 8001a4c:	f005 fc69 	bl	8007322 <HAL_UART_Transmit>
						      		   break;
 8001a50:	e0f5      	b.n	8001c3e <main+0xd0e>
						      		   case 'k':// -V Low
						      			   if(VoltLow_sawtooth -0.1 >0){
 8001a52:	4b46      	ldr	r3, [pc, #280]	; (8001b6c <main+0xc3c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fd7e 	bl	8000558 <__aeabi_f2d>
 8001a5c:	a338      	add	r3, pc, #224	; (adr r3, 8001b40 <main+0xc10>)
 8001a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a62:	f7fe fc19 	bl	8000298 <__aeabi_dsub>
 8001a66:	4603      	mov	r3, r0
 8001a68:	460c      	mov	r4, r1
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	4621      	mov	r1, r4
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	f7ff f857 	bl	8000b28 <__aeabi_dcmpgt>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d046      	beq.n	8001b0e <main+0xbde>
						      		  	 VoltLow_sawtooth =VoltLow_sawtooth -0.1;
 8001a80:	4b3a      	ldr	r3, [pc, #232]	; (8001b6c <main+0xc3c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7fe fd67 	bl	8000558 <__aeabi_f2d>
 8001a8a:	a32d      	add	r3, pc, #180	; (adr r3, 8001b40 <main+0xc10>)
 8001a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a90:	f7fe fc02 	bl	8000298 <__aeabi_dsub>
 8001a94:	4603      	mov	r3, r0
 8001a96:	460c      	mov	r4, r1
 8001a98:	4618      	mov	r0, r3
 8001a9a:	4621      	mov	r1, r4
 8001a9c:	f7ff f876 	bl	8000b8c <__aeabi_d2f>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	4b32      	ldr	r3, [pc, #200]	; (8001b6c <main+0xc3c>)
 8001aa4:	601a      	str	r2, [r3, #0]
						      		  	 t=VoltLow_sawtooth*10;
 8001aa6:	4b31      	ldr	r3, [pc, #196]	; (8001b6c <main+0xc3c>)
 8001aa8:	edd3 7a00 	vldr	s15, [r3]
 8001aac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ab0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ab4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ab8:	ee17 2a90 	vmov	r2, s15
 8001abc:	4b28      	ldr	r3, [pc, #160]	; (8001b60 <main+0xc30>)
 8001abe:	601a      	str	r2, [r3, #0]
						      		  	sprintf(TxDataBuffer,"  VoltLow_sawtooth is [%d.%d] V \r\n" ,t/10,t%10);
 8001ac0:	4b27      	ldr	r3, [pc, #156]	; (8001b60 <main+0xc30>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a27      	ldr	r2, [pc, #156]	; (8001b64 <main+0xc34>)
 8001ac6:	fb82 1203 	smull	r1, r2, r2, r3
 8001aca:	1092      	asrs	r2, r2, #2
 8001acc:	17db      	asrs	r3, r3, #31
 8001ace:	1ad0      	subs	r0, r2, r3
 8001ad0:	4b23      	ldr	r3, [pc, #140]	; (8001b60 <main+0xc30>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4b23      	ldr	r3, [pc, #140]	; (8001b64 <main+0xc34>)
 8001ad6:	fb83 1302 	smull	r1, r3, r3, r2
 8001ada:	1099      	asrs	r1, r3, #2
 8001adc:	17d3      	asrs	r3, r2, #31
 8001ade:	1ac9      	subs	r1, r1, r3
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	1ad1      	subs	r1, r2, r3
 8001aea:	460b      	mov	r3, r1
 8001aec:	4602      	mov	r2, r0
 8001aee:	4920      	ldr	r1, [pc, #128]	; (8001b70 <main+0xc40>)
 8001af0:	4818      	ldr	r0, [pc, #96]	; (8001b54 <main+0xc24>)
 8001af2:	f006 fb49 	bl	8008188 <siprintf>
						      		  		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001af6:	4817      	ldr	r0, [pc, #92]	; (8001b54 <main+0xc24>)
 8001af8:	f7fe fb72 	bl	80001e0 <strlen>
 8001afc:	4603      	mov	r3, r0
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b04:	4913      	ldr	r1, [pc, #76]	; (8001b54 <main+0xc24>)
 8001b06:	4815      	ldr	r0, [pc, #84]	; (8001b5c <main+0xc2c>)
 8001b08:	f005 fc0b 	bl	8007322 <HAL_UART_Transmit>
						      		  	sprintf(TxDataBuffer,"  VoltLow_sawtooth is 0 V \r\n" ,t/10,t%10);
						      		  	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
						      		  	sprintf(TxDataBuffer,"lower VoltLow_sawtooth");
						      		  	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
						      		  		}
						      		  		break;
 8001b0c:	e097      	b.n	8001c3e <main+0xd0e>
						      		  		else if (VoltLow_sawtooth -0.1<=0)
 8001b0e:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <main+0xc3c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fd20 	bl	8000558 <__aeabi_f2d>
 8001b18:	a309      	add	r3, pc, #36	; (adr r3, 8001b40 <main+0xc10>)
 8001b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1e:	f7fe fbbb 	bl	8000298 <__aeabi_dsub>
 8001b22:	4603      	mov	r3, r0
 8001b24:	460c      	mov	r4, r1
 8001b26:	4618      	mov	r0, r3
 8001b28:	4621      	mov	r1, r4
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	f7fe ffe5 	bl	8000b00 <__aeabi_dcmple>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d121      	bne.n	8001b80 <main+0xc50>
						      		  		break;
 8001b3c:	e07f      	b.n	8001c3e <main+0xd0e>
 8001b3e:	bf00      	nop
 8001b40:	9999999a 	.word	0x9999999a
 8001b44:	3fb99999 	.word	0x3fb99999
 8001b48:	66666666 	.word	0x66666666
 8001b4c:	400a6666 	.word	0x400a6666
 8001b50:	20000004 	.word	0x20000004
 8001b54:	200000a4 	.word	0x200000a4
 8001b58:	08009c20 	.word	0x08009c20
 8001b5c:	200003a0 	.word	0x200003a0
 8001b60:	200001b4 	.word	0x200001b4
 8001b64:	66666667 	.word	0x66666667
 8001b68:	08009c3c 	.word	0x08009c3c
 8001b6c:	200001e4 	.word	0x200001e4
 8001b70:	08009c5c 	.word	0x08009c5c
 8001b74:	40533333 	.word	0x40533333
 8001b78:	08009c80 	.word	0x08009c80
 8001b7c:	08009ca0 	.word	0x08009ca0
						      		  		VoltLow_sawtooth =0;
 8001b80:	4ba7      	ldr	r3, [pc, #668]	; (8001e20 <main+0xef0>)
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
						      		  	sprintf(TxDataBuffer,"  VoltLow_sawtooth is 0 V \r\n" ,t/10,t%10);
 8001b88:	4ba6      	ldr	r3, [pc, #664]	; (8001e24 <main+0xef4>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4aa6      	ldr	r2, [pc, #664]	; (8001e28 <main+0xef8>)
 8001b8e:	fb82 1203 	smull	r1, r2, r2, r3
 8001b92:	1092      	asrs	r2, r2, #2
 8001b94:	17db      	asrs	r3, r3, #31
 8001b96:	1ad0      	subs	r0, r2, r3
 8001b98:	4ba2      	ldr	r3, [pc, #648]	; (8001e24 <main+0xef4>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4ba2      	ldr	r3, [pc, #648]	; (8001e28 <main+0xef8>)
 8001b9e:	fb83 1302 	smull	r1, r3, r3, r2
 8001ba2:	1099      	asrs	r1, r3, #2
 8001ba4:	17d3      	asrs	r3, r2, #31
 8001ba6:	1ac9      	subs	r1, r1, r3
 8001ba8:	460b      	mov	r3, r1
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	1ad1      	subs	r1, r2, r3
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	499d      	ldr	r1, [pc, #628]	; (8001e2c <main+0xefc>)
 8001bb8:	489d      	ldr	r0, [pc, #628]	; (8001e30 <main+0xf00>)
 8001bba:	f006 fae5 	bl	8008188 <siprintf>
						      		  	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001bbe:	489c      	ldr	r0, [pc, #624]	; (8001e30 <main+0xf00>)
 8001bc0:	f7fe fb0e 	bl	80001e0 <strlen>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bcc:	4998      	ldr	r1, [pc, #608]	; (8001e30 <main+0xf00>)
 8001bce:	4899      	ldr	r0, [pc, #612]	; (8001e34 <main+0xf04>)
 8001bd0:	f005 fba7 	bl	8007322 <HAL_UART_Transmit>
						      		  	sprintf(TxDataBuffer,"lower VoltLow_sawtooth");
 8001bd4:	4a96      	ldr	r2, [pc, #600]	; (8001e30 <main+0xf00>)
 8001bd6:	4b98      	ldr	r3, [pc, #608]	; (8001e38 <main+0xf08>)
 8001bd8:	4614      	mov	r4, r2
 8001bda:	461d      	mov	r5, r3
 8001bdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001be0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001be4:	6020      	str	r0, [r4, #0]
 8001be6:	3404      	adds	r4, #4
 8001be8:	8021      	strh	r1, [r4, #0]
 8001bea:	3402      	adds	r4, #2
 8001bec:	0c0b      	lsrs	r3, r1, #16
 8001bee:	7023      	strb	r3, [r4, #0]
						      		  	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001bf0:	488f      	ldr	r0, [pc, #572]	; (8001e30 <main+0xf00>)
 8001bf2:	f7fe faf5 	bl	80001e0 <strlen>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bfe:	498c      	ldr	r1, [pc, #560]	; (8001e30 <main+0xf00>)
 8001c00:	488c      	ldr	r0, [pc, #560]	; (8001e34 <main+0xf04>)
 8001c02:	f005 fb8e 	bl	8007322 <HAL_UART_Transmit>
						      		  		break;
 8001c06:	e01a      	b.n	8001c3e <main+0xd0e>


						      		           default: //show error
						      		        	  sprintf(TxDataBuffer, "unidentified input \r\n");
 8001c08:	4a89      	ldr	r2, [pc, #548]	; (8001e30 <main+0xf00>)
 8001c0a:	4b8c      	ldr	r3, [pc, #560]	; (8001e3c <main+0xf0c>)
 8001c0c:	4614      	mov	r4, r2
 8001c0e:	461d      	mov	r5, r3
 8001c10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c14:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c18:	6020      	str	r0, [r4, #0]
 8001c1a:	3404      	adds	r4, #4
 8001c1c:	8021      	strh	r1, [r4, #0]
						      		        	   HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001c1e:	4884      	ldr	r0, [pc, #528]	; (8001e30 <main+0xf00>)
 8001c20:	f7fe fade 	bl	80001e0 <strlen>
 8001c24:	4603      	mov	r3, r0
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c2c:	4980      	ldr	r1, [pc, #512]	; (8001e30 <main+0xf00>)
 8001c2e:	4881      	ldr	r0, [pc, #516]	; (8001e34 <main+0xf04>)
 8001c30:	f005 fb77 	bl	8007322 <HAL_UART_Transmit>
						      		             STATE_Display = StateDisplay_MenuSawtooth_Print;
 8001c34:	4b82      	ldr	r3, [pc, #520]	; (8001e40 <main+0xf10>)
 8001c36:	2214      	movs	r2, #20
 8001c38:	701a      	strb	r2, [r3, #0]
						      		             break;
 8001c3a:	e000      	b.n	8001c3e <main+0xd0e>
						      		    	 break;
 8001c3c:	bf00      	nop
						      		           }
						      	break;
 8001c3e:	f001 b96b 	b.w	8002f18 <main+0x1fe8>
						      	//Menu 2 sine

						      	case StateDisplay_MenuSine_Print: //display state

						      	sprintf(TxDataBuffer, "Sine \r\n a. +0.1 Hz \r\n s. -0.1 Hz \r\n d. On/Off \r\n x. Back \r\n g. V High +0.1V \r\n h. High -0.1V \r\n j. V Low +0.1V \r\n k. Low -0.1V  \r\n");
 8001c42:	4a7b      	ldr	r2, [pc, #492]	; (8001e30 <main+0xf00>)
 8001c44:	4b7f      	ldr	r3, [pc, #508]	; (8001e44 <main+0xf14>)
 8001c46:	4610      	mov	r0, r2
 8001c48:	4619      	mov	r1, r3
 8001c4a:	2383      	movs	r3, #131	; 0x83
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	f006 fa87 	bl	8008160 <memcpy>
						      	 HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001c52:	4877      	ldr	r0, [pc, #476]	; (8001e30 <main+0xf00>)
 8001c54:	f7fe fac4 	bl	80001e0 <strlen>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c60:	4973      	ldr	r1, [pc, #460]	; (8001e30 <main+0xf00>)
 8001c62:	4874      	ldr	r0, [pc, #464]	; (8001e34 <main+0xf04>)
 8001c64:	f005 fb5d 	bl	8007322 <HAL_UART_Transmit>

						      		STATE_Display = StateDisplay_MenuSine_WaitInput;
 8001c68:	4b75      	ldr	r3, [pc, #468]	; (8001e40 <main+0xf10>)
 8001c6a:	221f      	movs	r2, #31
 8001c6c:	701a      	strb	r2, [r3, #0]
						      		 break;
 8001c6e:	f001 b953 	b.w	8002f18 <main+0x1fe8>

						      		  case StateDisplay_MenuSine_WaitInput: //make decision state
						      		 switch (inputchar)
 8001c72:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001c76:	2b68      	cmp	r3, #104	; 0x68
 8001c78:	f000 824a 	beq.w	8002110 <main+0x11e0>
 8001c7c:	2b68      	cmp	r3, #104	; 0x68
 8001c7e:	dc0e      	bgt.n	8001c9e <main+0xd6e>
 8001c80:	2b61      	cmp	r3, #97	; 0x61
 8001c82:	d051      	beq.n	8001d28 <main+0xdf8>
 8001c84:	2b61      	cmp	r3, #97	; 0x61
 8001c86:	dc04      	bgt.n	8001c92 <main+0xd62>
 8001c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8c:	f000 840c 	beq.w	80024a8 <main+0x1578>
 8001c90:	e3f0      	b.n	8002474 <main+0x1544>
 8001c92:	2b64      	cmp	r3, #100	; 0x64
 8001c94:	d013      	beq.n	8001cbe <main+0xd8e>
 8001c96:	2b67      	cmp	r3, #103	; 0x67
 8001c98:	f000 8187 	beq.w	8001faa <main+0x107a>
 8001c9c:	e3ea      	b.n	8002474 <main+0x1544>
 8001c9e:	2b6b      	cmp	r3, #107	; 0x6b
 8001ca0:	f000 837a 	beq.w	8002398 <main+0x1468>
 8001ca4:	2b6b      	cmp	r3, #107	; 0x6b
 8001ca6:	dc03      	bgt.n	8001cb0 <main+0xd80>
 8001ca8:	2b6a      	cmp	r3, #106	; 0x6a
 8001caa:	f000 82c3 	beq.w	8002234 <main+0x1304>
 8001cae:	e3e1      	b.n	8002474 <main+0x1544>
 8001cb0:	2b73      	cmp	r3, #115	; 0x73
 8001cb2:	f000 80d7 	beq.w	8001e64 <main+0xf34>
 8001cb6:	2b78      	cmp	r3, #120	; 0x78
 8001cb8:	f000 8170 	beq.w	8001f9c <main+0x106c>
 8001cbc:	e3da      	b.n	8002474 <main+0x1544>
						      				{
						      			 case -1:
						      				 break;
						      			 case 'd': // on/off

						      				if (a==0)
 8001cbe:	4b62      	ldr	r3, [pc, #392]	; (8001e48 <main+0xf18>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d114      	bne.n	8001cf0 <main+0xdc0>
						      			 {

						      				 sprintf(TxDataBuffer, "Turned On \r\n");
 8001cc6:	4a5a      	ldr	r2, [pc, #360]	; (8001e30 <main+0xf00>)
 8001cc8:	4b60      	ldr	r3, [pc, #384]	; (8001e4c <main+0xf1c>)
 8001cca:	4614      	mov	r4, r2
 8001ccc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cce:	c407      	stmia	r4!, {r0, r1, r2}
 8001cd0:	7023      	strb	r3, [r4, #0]
						      				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001cd2:	4857      	ldr	r0, [pc, #348]	; (8001e30 <main+0xf00>)
 8001cd4:	f7fe fa84 	bl	80001e0 <strlen>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce0:	4953      	ldr	r1, [pc, #332]	; (8001e30 <main+0xf00>)
 8001ce2:	4854      	ldr	r0, [pc, #336]	; (8001e34 <main+0xf04>)
 8001ce4:	f005 fb1d 	bl	8007322 <HAL_UART_Transmit>
						      				a=1;
 8001ce8:	4b57      	ldr	r3, [pc, #348]	; (8001e48 <main+0xf18>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	e017      	b.n	8001d20 <main+0xdf0>

						      				 }
						      			else if (a==1)
 8001cf0:	4b55      	ldr	r3, [pc, #340]	; (8001e48 <main+0xf18>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d113      	bne.n	8001d20 <main+0xdf0>
						      				 {
						      					a=0;
 8001cf8:	4b53      	ldr	r3, [pc, #332]	; (8001e48 <main+0xf18>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
						      				sprintf(TxDataBuffer, "Turned Off \r\n");
 8001cfe:	4a4c      	ldr	r2, [pc, #304]	; (8001e30 <main+0xf00>)
 8001d00:	4b53      	ldr	r3, [pc, #332]	; (8001e50 <main+0xf20>)
 8001d02:	4614      	mov	r4, r2
 8001d04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d06:	c407      	stmia	r4!, {r0, r1, r2}
 8001d08:	8023      	strh	r3, [r4, #0]
						      				 HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001d0a:	4849      	ldr	r0, [pc, #292]	; (8001e30 <main+0xf00>)
 8001d0c:	f7fe fa68 	bl	80001e0 <strlen>
 8001d10:	4603      	mov	r3, r0
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d18:	4945      	ldr	r1, [pc, #276]	; (8001e30 <main+0xf00>)
 8001d1a:	4846      	ldr	r0, [pc, #280]	; (8001e34 <main+0xf04>)
 8001d1c:	f005 fb01 	bl	8007322 <HAL_UART_Transmit>

						      				 }
						      				STATE_Display = StateDisplay_MenuSine_Print;
 8001d20:	4b47      	ldr	r3, [pc, #284]	; (8001e40 <main+0xf10>)
 8001d22:	221e      	movs	r2, #30
 8001d24:	701a      	strb	r2, [r3, #0]

						      				break;
 8001d26:	e3c0      	b.n	80024aa <main+0x157a>
						      				case 'a':  // เพิ่มความถี่
						      					timestampsin = micros();
 8001d28:	f002 f854 	bl	8003dd4 <micros>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	460c      	mov	r4, r1
 8001d30:	4a48      	ldr	r2, [pc, #288]	; (8001e54 <main+0xf24>)
 8001d32:	e9c2 3400 	strd	r3, r4, [r2]
						      				a=1;
 8001d36:	4b44      	ldr	r3, [pc, #272]	; (8001e48 <main+0xf18>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
						      				if(F_sin <10)
 8001d3c:	4b46      	ldr	r3, [pc, #280]	; (8001e58 <main+0xf28>)
 8001d3e:	edd3 7a00 	vldr	s15, [r3]
 8001d42:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4e:	d546      	bpl.n	8001dde <main+0xeae>
						      				 {
						      				F_sin+=0.1;
 8001d50:	4b41      	ldr	r3, [pc, #260]	; (8001e58 <main+0xf28>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fbff 	bl	8000558 <__aeabi_f2d>
 8001d5a:	a32f      	add	r3, pc, #188	; (adr r3, 8001e18 <main+0xee8>)
 8001d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d60:	f7fe fa9c 	bl	800029c <__adddf3>
 8001d64:	4603      	mov	r3, r0
 8001d66:	460c      	mov	r4, r1
 8001d68:	4618      	mov	r0, r3
 8001d6a:	4621      	mov	r1, r4
 8001d6c:	f7fe ff0e 	bl	8000b8c <__aeabi_d2f>
 8001d70:	4602      	mov	r2, r0
 8001d72:	4b39      	ldr	r3, [pc, #228]	; (8001e58 <main+0xf28>)
 8001d74:	601a      	str	r2, [r3, #0]
						      				t=F_sin*10;
 8001d76:	4b38      	ldr	r3, [pc, #224]	; (8001e58 <main+0xf28>)
 8001d78:	edd3 7a00 	vldr	s15, [r3]
 8001d7c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d88:	ee17 2a90 	vmov	r2, s15
 8001d8c:	4b25      	ldr	r3, [pc, #148]	; (8001e24 <main+0xef4>)
 8001d8e:	601a      	str	r2, [r3, #0]
						      				sprintf(TxDataBuffer," F_sin is [%d.%d] Hz \r\n" ,t/10,t%10);
 8001d90:	4b24      	ldr	r3, [pc, #144]	; (8001e24 <main+0xef4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a24      	ldr	r2, [pc, #144]	; (8001e28 <main+0xef8>)
 8001d96:	fb82 1203 	smull	r1, r2, r2, r3
 8001d9a:	1092      	asrs	r2, r2, #2
 8001d9c:	17db      	asrs	r3, r3, #31
 8001d9e:	1ad0      	subs	r0, r2, r3
 8001da0:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <main+0xef4>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <main+0xef8>)
 8001da6:	fb83 1302 	smull	r1, r3, r3, r2
 8001daa:	1099      	asrs	r1, r3, #2
 8001dac:	17d3      	asrs	r3, r2, #31
 8001dae:	1ac9      	subs	r1, r1, r3
 8001db0:	460b      	mov	r3, r1
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	1ad1      	subs	r1, r2, r3
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	4927      	ldr	r1, [pc, #156]	; (8001e5c <main+0xf2c>)
 8001dc0:	481b      	ldr	r0, [pc, #108]	; (8001e30 <main+0xf00>)
 8001dc2:	f006 f9e1 	bl	8008188 <siprintf>
						      				 HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001dc6:	481a      	ldr	r0, [pc, #104]	; (8001e30 <main+0xf00>)
 8001dc8:	f7fe fa0a 	bl	80001e0 <strlen>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dd4:	4916      	ldr	r1, [pc, #88]	; (8001e30 <main+0xf00>)
 8001dd6:	4817      	ldr	r0, [pc, #92]	; (8001e34 <main+0xf04>)
 8001dd8:	f005 faa3 	bl	8007322 <HAL_UART_Transmit>
 8001ddc:	e017      	b.n	8001e0e <main+0xede>
						      				 }
						      				 else
						      				 {
						      				sprintf(TxDataBuffer," the highest frequency 10Hz \r\n" );
 8001dde:	4a14      	ldr	r2, [pc, #80]	; (8001e30 <main+0xf00>)
 8001de0:	4b1f      	ldr	r3, [pc, #124]	; (8001e60 <main+0xf30>)
 8001de2:	4614      	mov	r4, r2
 8001de4:	461d      	mov	r5, r3
 8001de6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001de8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001dee:	c407      	stmia	r4!, {r0, r1, r2}
 8001df0:	8023      	strh	r3, [r4, #0]
 8001df2:	3402      	adds	r4, #2
 8001df4:	0c1b      	lsrs	r3, r3, #16
 8001df6:	7023      	strb	r3, [r4, #0]
						      					HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001df8:	480d      	ldr	r0, [pc, #52]	; (8001e30 <main+0xf00>)
 8001dfa:	f7fe f9f1 	bl	80001e0 <strlen>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e06:	490a      	ldr	r1, [pc, #40]	; (8001e30 <main+0xf00>)
 8001e08:	480a      	ldr	r0, [pc, #40]	; (8001e34 <main+0xf04>)
 8001e0a:	f005 fa8a 	bl	8007322 <HAL_UART_Transmit>
						      				}


						      					  STATE_Display = StateDisplay_MenuSine_Print ;
 8001e0e:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <main+0xf10>)
 8001e10:	221e      	movs	r2, #30
 8001e12:	701a      	strb	r2, [r3, #0]
						      					   break;
 8001e14:	e349      	b.n	80024aa <main+0x157a>
 8001e16:	bf00      	nop
 8001e18:	9999999a 	.word	0x9999999a
 8001e1c:	3fb99999 	.word	0x3fb99999
 8001e20:	200001e4 	.word	0x200001e4
 8001e24:	200001b4 	.word	0x200001b4
 8001e28:	66666667 	.word	0x66666667
 8001e2c:	08009cbc 	.word	0x08009cbc
 8001e30:	200000a4 	.word	0x200000a4
 8001e34:	200003a0 	.word	0x200003a0
 8001e38:	08009cdc 	.word	0x08009cdc
 8001e3c:	08009a38 	.word	0x08009a38
 8001e40:	200001a4 	.word	0x200001a4
 8001e44:	08009cf4 	.word	0x08009cf4
 8001e48:	200001ac 	.word	0x200001ac
 8001e4c:	08009ae4 	.word	0x08009ae4
 8001e50:	08009af4 	.word	0x08009af4
 8001e54:	20000200 	.word	0x20000200
 8001e58:	200001e8 	.word	0x200001e8
 8001e5c:	08009d78 	.word	0x08009d78
 8001e60:	08009d90 	.word	0x08009d90
						      			  case 's': //  ลดความถี่
						      				timestampsin = micros();
 8001e64:	f001 ffb6 	bl	8003dd4 <micros>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	460c      	mov	r4, r1
 8001e6c:	4a9a      	ldr	r2, [pc, #616]	; (80020d8 <main+0x11a8>)
 8001e6e:	e9c2 3400 	strd	r3, r4, [r2]
						      						 a=1;
 8001e72:	4b9a      	ldr	r3, [pc, #616]	; (80020dc <main+0x11ac>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	601a      	str	r2, [r3, #0]
						      						 if(F_sin-0.1>0){
 8001e78:	4b99      	ldr	r3, [pc, #612]	; (80020e0 <main+0x11b0>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe fb6b 	bl	8000558 <__aeabi_f2d>
 8001e82:	a391      	add	r3, pc, #580	; (adr r3, 80020c8 <main+0x1198>)
 8001e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e88:	f7fe fa06 	bl	8000298 <__aeabi_dsub>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	460c      	mov	r4, r1
 8001e90:	4618      	mov	r0, r3
 8001e92:	4621      	mov	r1, r4
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	f04f 0300 	mov.w	r3, #0
 8001e9c:	f7fe fe44 	bl	8000b28 <__aeabi_dcmpgt>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d046      	beq.n	8001f34 <main+0x1004>
						      			 F_sin=F_sin-0.1;
 8001ea6:	4b8e      	ldr	r3, [pc, #568]	; (80020e0 <main+0x11b0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe fb54 	bl	8000558 <__aeabi_f2d>
 8001eb0:	a385      	add	r3, pc, #532	; (adr r3, 80020c8 <main+0x1198>)
 8001eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb6:	f7fe f9ef 	bl	8000298 <__aeabi_dsub>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	460c      	mov	r4, r1
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	4621      	mov	r1, r4
 8001ec2:	f7fe fe63 	bl	8000b8c <__aeabi_d2f>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	4b85      	ldr	r3, [pc, #532]	; (80020e0 <main+0x11b0>)
 8001eca:	601a      	str	r2, [r3, #0]
						      			t=F_sin*10;
 8001ecc:	4b84      	ldr	r3, [pc, #528]	; (80020e0 <main+0x11b0>)
 8001ece:	edd3 7a00 	vldr	s15, [r3]
 8001ed2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ed6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ede:	ee17 2a90 	vmov	r2, s15
 8001ee2:	4b80      	ldr	r3, [pc, #512]	; (80020e4 <main+0x11b4>)
 8001ee4:	601a      	str	r2, [r3, #0]
						      			sprintf(TxDataBuffer," F_sin is [%d.%d] Hz \r\n" ,t/10,t%10);
 8001ee6:	4b7f      	ldr	r3, [pc, #508]	; (80020e4 <main+0x11b4>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a7f      	ldr	r2, [pc, #508]	; (80020e8 <main+0x11b8>)
 8001eec:	fb82 1203 	smull	r1, r2, r2, r3
 8001ef0:	1092      	asrs	r2, r2, #2
 8001ef2:	17db      	asrs	r3, r3, #31
 8001ef4:	1ad0      	subs	r0, r2, r3
 8001ef6:	4b7b      	ldr	r3, [pc, #492]	; (80020e4 <main+0x11b4>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	4b7b      	ldr	r3, [pc, #492]	; (80020e8 <main+0x11b8>)
 8001efc:	fb83 1302 	smull	r1, r3, r3, r2
 8001f00:	1099      	asrs	r1, r3, #2
 8001f02:	17d3      	asrs	r3, r2, #31
 8001f04:	1ac9      	subs	r1, r1, r3
 8001f06:	460b      	mov	r3, r1
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	1ad1      	subs	r1, r2, r3
 8001f10:	460b      	mov	r3, r1
 8001f12:	4602      	mov	r2, r0
 8001f14:	4975      	ldr	r1, [pc, #468]	; (80020ec <main+0x11bc>)
 8001f16:	4876      	ldr	r0, [pc, #472]	; (80020f0 <main+0x11c0>)
 8001f18:	f006 f936 	bl	8008188 <siprintf>
						      				 HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001f1c:	4874      	ldr	r0, [pc, #464]	; (80020f0 <main+0x11c0>)
 8001f1e:	f7fe f95f 	bl	80001e0 <strlen>
 8001f22:	4603      	mov	r3, r0
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f2a:	4971      	ldr	r1, [pc, #452]	; (80020f0 <main+0x11c0>)
 8001f2c:	4871      	ldr	r0, [pc, #452]	; (80020f4 <main+0x11c4>)
 8001f2e:	f005 f9f8 	bl	8007322 <HAL_UART_Transmit>
 8001f32:	e02f      	b.n	8001f94 <main+0x1064>
						      						 }else if(F_sin-0.1<=0)
 8001f34:	4b6a      	ldr	r3, [pc, #424]	; (80020e0 <main+0x11b0>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe fb0d 	bl	8000558 <__aeabi_f2d>
 8001f3e:	a362      	add	r3, pc, #392	; (adr r3, 80020c8 <main+0x1198>)
 8001f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f44:	f7fe f9a8 	bl	8000298 <__aeabi_dsub>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	460c      	mov	r4, r1
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	4621      	mov	r1, r4
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	f04f 0300 	mov.w	r3, #0
 8001f58:	f7fe fdd2 	bl	8000b00 <__aeabi_dcmple>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d018      	beq.n	8001f94 <main+0x1064>
						      					  {
						      					F_sin=0;
 8001f62:	4b5f      	ldr	r3, [pc, #380]	; (80020e0 <main+0x11b0>)
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
						      					sprintf(TxDataBuffer," the lower frequency 0 V \r\n" );
 8001f6a:	4a61      	ldr	r2, [pc, #388]	; (80020f0 <main+0x11c0>)
 8001f6c:	4b62      	ldr	r3, [pc, #392]	; (80020f8 <main+0x11c8>)
 8001f6e:	4614      	mov	r4, r2
 8001f70:	461d      	mov	r5, r3
 8001f72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
						      					HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001f7e:	485c      	ldr	r0, [pc, #368]	; (80020f0 <main+0x11c0>)
 8001f80:	f7fe f92e 	bl	80001e0 <strlen>
 8001f84:	4603      	mov	r3, r0
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f8c:	4958      	ldr	r1, [pc, #352]	; (80020f0 <main+0x11c0>)
 8001f8e:	4859      	ldr	r0, [pc, #356]	; (80020f4 <main+0x11c4>)
 8001f90:	f005 f9c7 	bl	8007322 <HAL_UART_Transmit>

						      					}

						      				STATE_Display = StateDisplay_MenuSine_Print;
 8001f94:	4b59      	ldr	r3, [pc, #356]	; (80020fc <main+0x11cc>)
 8001f96:	221e      	movs	r2, #30
 8001f98:	701a      	strb	r2, [r3, #0]

						      				  break;
 8001f9a:	e286      	b.n	80024aa <main+0x157a>

						      				 case 'x': // back to main manu

						      					 a=0;
 8001f9c:	4b4f      	ldr	r3, [pc, #316]	; (80020dc <main+0x11ac>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
						      					 STATE_Display = StateDisplay_MenuRoot_Print;
 8001fa2:	4b56      	ldr	r3, [pc, #344]	; (80020fc <main+0x11cc>)
 8001fa4:	220a      	movs	r2, #10
 8001fa6:	701a      	strb	r2, [r3, #0]
						      				 break;
 8001fa8:	e27f      	b.n	80024aa <main+0x157a>
						      				 case 'g':// +V High
						      					if (VoltHigh_sin +0.1 <3.3){
 8001faa:	4b55      	ldr	r3, [pc, #340]	; (8002100 <main+0x11d0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe fad2 	bl	8000558 <__aeabi_f2d>
 8001fb4:	a344      	add	r3, pc, #272	; (adr r3, 80020c8 <main+0x1198>)
 8001fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fba:	f7fe f96f 	bl	800029c <__adddf3>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	460c      	mov	r4, r1
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	4621      	mov	r1, r4
 8001fc6:	a342      	add	r3, pc, #264	; (adr r3, 80020d0 <main+0x11a0>)
 8001fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fcc:	f7fe fd8e 	bl	8000aec <__aeabi_dcmplt>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d046      	beq.n	8002064 <main+0x1134>
						      			VoltHigh_sin =VoltHigh_sin +0.1;
 8001fd6:	4b4a      	ldr	r3, [pc, #296]	; (8002100 <main+0x11d0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe fabc 	bl	8000558 <__aeabi_f2d>
 8001fe0:	a339      	add	r3, pc, #228	; (adr r3, 80020c8 <main+0x1198>)
 8001fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe6:	f7fe f959 	bl	800029c <__adddf3>
 8001fea:	4603      	mov	r3, r0
 8001fec:	460c      	mov	r4, r1
 8001fee:	4618      	mov	r0, r3
 8001ff0:	4621      	mov	r1, r4
 8001ff2:	f7fe fdcb 	bl	8000b8c <__aeabi_d2f>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	4b41      	ldr	r3, [pc, #260]	; (8002100 <main+0x11d0>)
 8001ffa:	601a      	str	r2, [r3, #0]
						      			t=VoltHigh_sin*10;
 8001ffc:	4b40      	ldr	r3, [pc, #256]	; (8002100 <main+0x11d0>)
 8001ffe:	edd3 7a00 	vldr	s15, [r3]
 8002002:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002006:	ee67 7a87 	vmul.f32	s15, s15, s14
 800200a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800200e:	ee17 2a90 	vmov	r2, s15
 8002012:	4b34      	ldr	r3, [pc, #208]	; (80020e4 <main+0x11b4>)
 8002014:	601a      	str	r2, [r3, #0]
						      			sprintf(TxDataBuffer," VoltHigh_sin is [%d.%d] V \r\n" ,t/10,t%10);
 8002016:	4b33      	ldr	r3, [pc, #204]	; (80020e4 <main+0x11b4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a33      	ldr	r2, [pc, #204]	; (80020e8 <main+0x11b8>)
 800201c:	fb82 1203 	smull	r1, r2, r2, r3
 8002020:	1092      	asrs	r2, r2, #2
 8002022:	17db      	asrs	r3, r3, #31
 8002024:	1ad0      	subs	r0, r2, r3
 8002026:	4b2f      	ldr	r3, [pc, #188]	; (80020e4 <main+0x11b4>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	4b2f      	ldr	r3, [pc, #188]	; (80020e8 <main+0x11b8>)
 800202c:	fb83 1302 	smull	r1, r3, r3, r2
 8002030:	1099      	asrs	r1, r3, #2
 8002032:	17d3      	asrs	r3, r2, #31
 8002034:	1ac9      	subs	r1, r1, r3
 8002036:	460b      	mov	r3, r1
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	440b      	add	r3, r1
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	1ad1      	subs	r1, r2, r3
 8002040:	460b      	mov	r3, r1
 8002042:	4602      	mov	r2, r0
 8002044:	492f      	ldr	r1, [pc, #188]	; (8002104 <main+0x11d4>)
 8002046:	482a      	ldr	r0, [pc, #168]	; (80020f0 <main+0x11c0>)
 8002048:	f006 f89e 	bl	8008188 <siprintf>
						      			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800204c:	4828      	ldr	r0, [pc, #160]	; (80020f0 <main+0x11c0>)
 800204e:	f7fe f8c7 	bl	80001e0 <strlen>
 8002052:	4603      	mov	r3, r0
 8002054:	b29a      	uxth	r2, r3
 8002056:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800205a:	4925      	ldr	r1, [pc, #148]	; (80020f0 <main+0x11c0>)
 800205c:	4825      	ldr	r0, [pc, #148]	; (80020f4 <main+0x11c4>)
 800205e:	f005 f960 	bl	8007322 <HAL_UART_Transmit>
 8002062:	e02d      	b.n	80020c0 <main+0x1190>

						      					}
						      					else if (VoltHigh_sin +0.1 >=3.3)
 8002064:	4b26      	ldr	r3, [pc, #152]	; (8002100 <main+0x11d0>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe fa75 	bl	8000558 <__aeabi_f2d>
 800206e:	a316      	add	r3, pc, #88	; (adr r3, 80020c8 <main+0x1198>)
 8002070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002074:	f7fe f912 	bl	800029c <__adddf3>
 8002078:	4603      	mov	r3, r0
 800207a:	460c      	mov	r4, r1
 800207c:	4618      	mov	r0, r3
 800207e:	4621      	mov	r1, r4
 8002080:	a313      	add	r3, pc, #76	; (adr r3, 80020d0 <main+0x11a0>)
 8002082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002086:	f7fe fd45 	bl	8000b14 <__aeabi_dcmpge>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d017      	beq.n	80020c0 <main+0x1190>
						      			{
						      			VoltHigh_sin =3.3;
 8002090:	4b1b      	ldr	r3, [pc, #108]	; (8002100 <main+0x11d0>)
 8002092:	4a1d      	ldr	r2, [pc, #116]	; (8002108 <main+0x11d8>)
 8002094:	601a      	str	r2, [r3, #0]
						      			sprintf(TxDataBuffer," Maximum VoltHigh_sin  3.3 V \r\n");
 8002096:	4a16      	ldr	r2, [pc, #88]	; (80020f0 <main+0x11c0>)
 8002098:	4b1c      	ldr	r3, [pc, #112]	; (800210c <main+0x11dc>)
 800209a:	4614      	mov	r4, r2
 800209c:	461d      	mov	r5, r3
 800209e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020a2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80020a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
						      			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80020aa:	4811      	ldr	r0, [pc, #68]	; (80020f0 <main+0x11c0>)
 80020ac:	f7fe f898 	bl	80001e0 <strlen>
 80020b0:	4603      	mov	r3, r0
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020b8:	490d      	ldr	r1, [pc, #52]	; (80020f0 <main+0x11c0>)
 80020ba:	480e      	ldr	r0, [pc, #56]	; (80020f4 <main+0x11c4>)
 80020bc:	f005 f931 	bl	8007322 <HAL_UART_Transmit>
						      			}
						      			STATE_Display = StateDisplay_MenuSine_Print;
 80020c0:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <main+0x11cc>)
 80020c2:	221e      	movs	r2, #30
 80020c4:	701a      	strb	r2, [r3, #0]
						      			break;
 80020c6:	e1f0      	b.n	80024aa <main+0x157a>
 80020c8:	9999999a 	.word	0x9999999a
 80020cc:	3fb99999 	.word	0x3fb99999
 80020d0:	66666666 	.word	0x66666666
 80020d4:	400a6666 	.word	0x400a6666
 80020d8:	20000200 	.word	0x20000200
 80020dc:	200001ac 	.word	0x200001ac
 80020e0:	200001e8 	.word	0x200001e8
 80020e4:	200001b4 	.word	0x200001b4
 80020e8:	66666667 	.word	0x66666667
 80020ec:	08009d78 	.word	0x08009d78
 80020f0:	200000a4 	.word	0x200000a4
 80020f4:	200003a0 	.word	0x200003a0
 80020f8:	08009db0 	.word	0x08009db0
 80020fc:	200001a4 	.word	0x200001a4
 8002100:	20000008 	.word	0x20000008
 8002104:	08009dcc 	.word	0x08009dcc
 8002108:	40533333 	.word	0x40533333
 800210c:	08009dec 	.word	0x08009dec
						      		 case 'h':// -V High
						      			 if(VoltHigh_sin -0.1>0){
 8002110:	4b95      	ldr	r3, [pc, #596]	; (8002368 <main+0x1438>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f7fe fa1f 	bl	8000558 <__aeabi_f2d>
 800211a:	a38f      	add	r3, pc, #572	; (adr r3, 8002358 <main+0x1428>)
 800211c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002120:	f7fe f8ba 	bl	8000298 <__aeabi_dsub>
 8002124:	4603      	mov	r3, r0
 8002126:	460c      	mov	r4, r1
 8002128:	4618      	mov	r0, r3
 800212a:	4621      	mov	r1, r4
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	f04f 0300 	mov.w	r3, #0
 8002134:	f7fe fcf8 	bl	8000b28 <__aeabi_dcmpgt>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d046      	beq.n	80021cc <main+0x129c>
						      			VoltHigh_sin =VoltHigh_sin -0.1;
 800213e:	4b8a      	ldr	r3, [pc, #552]	; (8002368 <main+0x1438>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe fa08 	bl	8000558 <__aeabi_f2d>
 8002148:	a383      	add	r3, pc, #524	; (adr r3, 8002358 <main+0x1428>)
 800214a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214e:	f7fe f8a3 	bl	8000298 <__aeabi_dsub>
 8002152:	4603      	mov	r3, r0
 8002154:	460c      	mov	r4, r1
 8002156:	4618      	mov	r0, r3
 8002158:	4621      	mov	r1, r4
 800215a:	f7fe fd17 	bl	8000b8c <__aeabi_d2f>
 800215e:	4602      	mov	r2, r0
 8002160:	4b81      	ldr	r3, [pc, #516]	; (8002368 <main+0x1438>)
 8002162:	601a      	str	r2, [r3, #0]
						      			t=VoltHigh_sin*10;
 8002164:	4b80      	ldr	r3, [pc, #512]	; (8002368 <main+0x1438>)
 8002166:	edd3 7a00 	vldr	s15, [r3]
 800216a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800216e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002172:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002176:	ee17 2a90 	vmov	r2, s15
 800217a:	4b7c      	ldr	r3, [pc, #496]	; (800236c <main+0x143c>)
 800217c:	601a      	str	r2, [r3, #0]
						      			sprintf(TxDataBuffer," VoltHigh_sin is [%d.%d] V \r\n" ,t/10,t%10);
 800217e:	4b7b      	ldr	r3, [pc, #492]	; (800236c <main+0x143c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a7b      	ldr	r2, [pc, #492]	; (8002370 <main+0x1440>)
 8002184:	fb82 1203 	smull	r1, r2, r2, r3
 8002188:	1092      	asrs	r2, r2, #2
 800218a:	17db      	asrs	r3, r3, #31
 800218c:	1ad0      	subs	r0, r2, r3
 800218e:	4b77      	ldr	r3, [pc, #476]	; (800236c <main+0x143c>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	4b77      	ldr	r3, [pc, #476]	; (8002370 <main+0x1440>)
 8002194:	fb83 1302 	smull	r1, r3, r3, r2
 8002198:	1099      	asrs	r1, r3, #2
 800219a:	17d3      	asrs	r3, r2, #31
 800219c:	1ac9      	subs	r1, r1, r3
 800219e:	460b      	mov	r3, r1
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	440b      	add	r3, r1
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	1ad1      	subs	r1, r2, r3
 80021a8:	460b      	mov	r3, r1
 80021aa:	4602      	mov	r2, r0
 80021ac:	4971      	ldr	r1, [pc, #452]	; (8002374 <main+0x1444>)
 80021ae:	4872      	ldr	r0, [pc, #456]	; (8002378 <main+0x1448>)
 80021b0:	f005 ffea 	bl	8008188 <siprintf>
						      				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80021b4:	4870      	ldr	r0, [pc, #448]	; (8002378 <main+0x1448>)
 80021b6:	f7fe f813 	bl	80001e0 <strlen>
 80021ba:	4603      	mov	r3, r0
 80021bc:	b29a      	uxth	r2, r3
 80021be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021c2:	496d      	ldr	r1, [pc, #436]	; (8002378 <main+0x1448>)
 80021c4:	486d      	ldr	r0, [pc, #436]	; (800237c <main+0x144c>)
 80021c6:	f005 f8ac 	bl	8007322 <HAL_UART_Transmit>
 80021ca:	e02f      	b.n	800222c <main+0x12fc>
						      			 }
						      				else if (VoltHigh_sin -0.1<=0)
 80021cc:	4b66      	ldr	r3, [pc, #408]	; (8002368 <main+0x1438>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe f9c1 	bl	8000558 <__aeabi_f2d>
 80021d6:	a360      	add	r3, pc, #384	; (adr r3, 8002358 <main+0x1428>)
 80021d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021dc:	f7fe f85c 	bl	8000298 <__aeabi_dsub>
 80021e0:	4603      	mov	r3, r0
 80021e2:	460c      	mov	r4, r1
 80021e4:	4618      	mov	r0, r3
 80021e6:	4621      	mov	r1, r4
 80021e8:	f04f 0200 	mov.w	r2, #0
 80021ec:	f04f 0300 	mov.w	r3, #0
 80021f0:	f7fe fc86 	bl	8000b00 <__aeabi_dcmple>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d018      	beq.n	800222c <main+0x12fc>
						      				{
						      			VoltHigh_sin =0;
 80021fa:	4b5b      	ldr	r3, [pc, #364]	; (8002368 <main+0x1438>)
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
						      			sprintf(TxDataBuffer," Lower  VoltHigh_sin  0 V \r\n");
 8002202:	4a5d      	ldr	r2, [pc, #372]	; (8002378 <main+0x1448>)
 8002204:	4b5e      	ldr	r3, [pc, #376]	; (8002380 <main+0x1450>)
 8002206:	4614      	mov	r4, r2
 8002208:	461d      	mov	r5, r3
 800220a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800220c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800220e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002212:	c407      	stmia	r4!, {r0, r1, r2}
 8002214:	7023      	strb	r3, [r4, #0]
						      			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002216:	4858      	ldr	r0, [pc, #352]	; (8002378 <main+0x1448>)
 8002218:	f7fd ffe2 	bl	80001e0 <strlen>
 800221c:	4603      	mov	r3, r0
 800221e:	b29a      	uxth	r2, r3
 8002220:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002224:	4954      	ldr	r1, [pc, #336]	; (8002378 <main+0x1448>)
 8002226:	4855      	ldr	r0, [pc, #340]	; (800237c <main+0x144c>)
 8002228:	f005 f87b 	bl	8007322 <HAL_UART_Transmit>
						      			 	}
						      				STATE_Display = StateDisplay_MenuSine_Print;
 800222c:	4b55      	ldr	r3, [pc, #340]	; (8002384 <main+0x1454>)
 800222e:	221e      	movs	r2, #30
 8002230:	701a      	strb	r2, [r3, #0]
						      				 break;
 8002232:	e13a      	b.n	80024aa <main+0x157a>
						      				 case 'j':// +V Low
						      				if (VoltLow_sin+0.1 <3.3){
 8002234:	4b54      	ldr	r3, [pc, #336]	; (8002388 <main+0x1458>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f7fe f98d 	bl	8000558 <__aeabi_f2d>
 800223e:	a346      	add	r3, pc, #280	; (adr r3, 8002358 <main+0x1428>)
 8002240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002244:	f7fe f82a 	bl	800029c <__adddf3>
 8002248:	4603      	mov	r3, r0
 800224a:	460c      	mov	r4, r1
 800224c:	4618      	mov	r0, r3
 800224e:	4621      	mov	r1, r4
 8002250:	a343      	add	r3, pc, #268	; (adr r3, 8002360 <main+0x1430>)
 8002252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002256:	f7fe fc49 	bl	8000aec <__aeabi_dcmplt>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d046      	beq.n	80022ee <main+0x13be>
						      				 VoltLow_sin =VoltLow_sin +0.1;
 8002260:	4b49      	ldr	r3, [pc, #292]	; (8002388 <main+0x1458>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f7fe f977 	bl	8000558 <__aeabi_f2d>
 800226a:	a33b      	add	r3, pc, #236	; (adr r3, 8002358 <main+0x1428>)
 800226c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002270:	f7fe f814 	bl	800029c <__adddf3>
 8002274:	4603      	mov	r3, r0
 8002276:	460c      	mov	r4, r1
 8002278:	4618      	mov	r0, r3
 800227a:	4621      	mov	r1, r4
 800227c:	f7fe fc86 	bl	8000b8c <__aeabi_d2f>
 8002280:	4602      	mov	r2, r0
 8002282:	4b41      	ldr	r3, [pc, #260]	; (8002388 <main+0x1458>)
 8002284:	601a      	str	r2, [r3, #0]
						      				t=VoltLow_sin*10;
 8002286:	4b40      	ldr	r3, [pc, #256]	; (8002388 <main+0x1458>)
 8002288:	edd3 7a00 	vldr	s15, [r3]
 800228c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002290:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002294:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002298:	ee17 2a90 	vmov	r2, s15
 800229c:	4b33      	ldr	r3, [pc, #204]	; (800236c <main+0x143c>)
 800229e:	601a      	str	r2, [r3, #0]
						      				sprintf(TxDataBuffer," VoltLow_sinis [%d.%d] V \r\n" ,t/10,t%10);
 80022a0:	4b32      	ldr	r3, [pc, #200]	; (800236c <main+0x143c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a32      	ldr	r2, [pc, #200]	; (8002370 <main+0x1440>)
 80022a6:	fb82 1203 	smull	r1, r2, r2, r3
 80022aa:	1092      	asrs	r2, r2, #2
 80022ac:	17db      	asrs	r3, r3, #31
 80022ae:	1ad0      	subs	r0, r2, r3
 80022b0:	4b2e      	ldr	r3, [pc, #184]	; (800236c <main+0x143c>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4b2e      	ldr	r3, [pc, #184]	; (8002370 <main+0x1440>)
 80022b6:	fb83 1302 	smull	r1, r3, r3, r2
 80022ba:	1099      	asrs	r1, r3, #2
 80022bc:	17d3      	asrs	r3, r2, #31
 80022be:	1ac9      	subs	r1, r1, r3
 80022c0:	460b      	mov	r3, r1
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	1ad1      	subs	r1, r2, r3
 80022ca:	460b      	mov	r3, r1
 80022cc:	4602      	mov	r2, r0
 80022ce:	492f      	ldr	r1, [pc, #188]	; (800238c <main+0x145c>)
 80022d0:	4829      	ldr	r0, [pc, #164]	; (8002378 <main+0x1448>)
 80022d2:	f005 ff59 	bl	8008188 <siprintf>
						      				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80022d6:	4828      	ldr	r0, [pc, #160]	; (8002378 <main+0x1448>)
 80022d8:	f7fd ff82 	bl	80001e0 <strlen>
 80022dc:	4603      	mov	r3, r0
 80022de:	b29a      	uxth	r2, r3
 80022e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022e4:	4924      	ldr	r1, [pc, #144]	; (8002378 <main+0x1448>)
 80022e6:	4825      	ldr	r0, [pc, #148]	; (800237c <main+0x144c>)
 80022e8:	f005 f81b 	bl	8007322 <HAL_UART_Transmit>
 80022ec:	e02d      	b.n	800234a <main+0x141a>
						      				}
						      				else if (VoltLow_sin+0.1>=3.3)
 80022ee:	4b26      	ldr	r3, [pc, #152]	; (8002388 <main+0x1458>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7fe f930 	bl	8000558 <__aeabi_f2d>
 80022f8:	a317      	add	r3, pc, #92	; (adr r3, 8002358 <main+0x1428>)
 80022fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fe:	f7fd ffcd 	bl	800029c <__adddf3>
 8002302:	4603      	mov	r3, r0
 8002304:	460c      	mov	r4, r1
 8002306:	4618      	mov	r0, r3
 8002308:	4621      	mov	r1, r4
 800230a:	a315      	add	r3, pc, #84	; (adr r3, 8002360 <main+0x1430>)
 800230c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002310:	f7fe fc00 	bl	8000b14 <__aeabi_dcmpge>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d017      	beq.n	800234a <main+0x141a>
						      				 {
						      				VoltLow_sin =3.3;
 800231a:	4b1b      	ldr	r3, [pc, #108]	; (8002388 <main+0x1458>)
 800231c:	4a1c      	ldr	r2, [pc, #112]	; (8002390 <main+0x1460>)
 800231e:	601a      	str	r2, [r3, #0]
						      				sprintf(TxDataBuffer," Maximum  VoltLow_sin  3.3 V \r\n");
 8002320:	4a15      	ldr	r2, [pc, #84]	; (8002378 <main+0x1448>)
 8002322:	4b1c      	ldr	r3, [pc, #112]	; (8002394 <main+0x1464>)
 8002324:	4614      	mov	r4, r2
 8002326:	461d      	mov	r5, r3
 8002328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800232a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800232c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002330:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
						      				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002334:	4810      	ldr	r0, [pc, #64]	; (8002378 <main+0x1448>)
 8002336:	f7fd ff53 	bl	80001e0 <strlen>
 800233a:	4603      	mov	r3, r0
 800233c:	b29a      	uxth	r2, r3
 800233e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002342:	490d      	ldr	r1, [pc, #52]	; (8002378 <main+0x1448>)
 8002344:	480d      	ldr	r0, [pc, #52]	; (800237c <main+0x144c>)
 8002346:	f004 ffec 	bl	8007322 <HAL_UART_Transmit>
						      				 }
						      				STATE_Display = StateDisplay_MenuSine_Print;
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <main+0x1454>)
 800234c:	221e      	movs	r2, #30
 800234e:	701a      	strb	r2, [r3, #0]
						      				 break;
 8002350:	e0ab      	b.n	80024aa <main+0x157a>
 8002352:	bf00      	nop
 8002354:	f3af 8000 	nop.w
 8002358:	9999999a 	.word	0x9999999a
 800235c:	3fb99999 	.word	0x3fb99999
 8002360:	66666666 	.word	0x66666666
 8002364:	400a6666 	.word	0x400a6666
 8002368:	20000008 	.word	0x20000008
 800236c:	200001b4 	.word	0x200001b4
 8002370:	66666667 	.word	0x66666667
 8002374:	08009dcc 	.word	0x08009dcc
 8002378:	200000a4 	.word	0x200000a4
 800237c:	200003a0 	.word	0x200003a0
 8002380:	08009e0c 	.word	0x08009e0c
 8002384:	200001a4 	.word	0x200001a4
 8002388:	200001f0 	.word	0x200001f0
 800238c:	08009e2c 	.word	0x08009e2c
 8002390:	40533333 	.word	0x40533333
 8002394:	08009e48 	.word	0x08009e48
						      				 case 'k':// -V Low

						      				 VoltLow_sin =VoltLow_sin -0.1;
 8002398:	4bb1      	ldr	r3, [pc, #708]	; (8002660 <main+0x1730>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe f8db 	bl	8000558 <__aeabi_f2d>
 80023a2:	a3ad      	add	r3, pc, #692	; (adr r3, 8002658 <main+0x1728>)
 80023a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a8:	f7fd ff76 	bl	8000298 <__aeabi_dsub>
 80023ac:	4603      	mov	r3, r0
 80023ae:	460c      	mov	r4, r1
 80023b0:	4618      	mov	r0, r3
 80023b2:	4621      	mov	r1, r4
 80023b4:	f7fe fbea 	bl	8000b8c <__aeabi_d2f>
 80023b8:	4602      	mov	r2, r0
 80023ba:	4ba9      	ldr	r3, [pc, #676]	; (8002660 <main+0x1730>)
 80023bc:	601a      	str	r2, [r3, #0]
						      				 t= VoltLow_sin*10;
 80023be:	4ba8      	ldr	r3, [pc, #672]	; (8002660 <main+0x1730>)
 80023c0:	edd3 7a00 	vldr	s15, [r3]
 80023c4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80023c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023d0:	ee17 2a90 	vmov	r2, s15
 80023d4:	4ba3      	ldr	r3, [pc, #652]	; (8002664 <main+0x1734>)
 80023d6:	601a      	str	r2, [r3, #0]
						      				sprintf(TxDataBuffer," VoltLow_sinis [%d.%d] V \r\n" ,t/10,t%10);
 80023d8:	4ba2      	ldr	r3, [pc, #648]	; (8002664 <main+0x1734>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4aa2      	ldr	r2, [pc, #648]	; (8002668 <main+0x1738>)
 80023de:	fb82 1203 	smull	r1, r2, r2, r3
 80023e2:	1092      	asrs	r2, r2, #2
 80023e4:	17db      	asrs	r3, r3, #31
 80023e6:	1ad0      	subs	r0, r2, r3
 80023e8:	4b9e      	ldr	r3, [pc, #632]	; (8002664 <main+0x1734>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4b9e      	ldr	r3, [pc, #632]	; (8002668 <main+0x1738>)
 80023ee:	fb83 1302 	smull	r1, r3, r3, r2
 80023f2:	1099      	asrs	r1, r3, #2
 80023f4:	17d3      	asrs	r3, r2, #31
 80023f6:	1ac9      	subs	r1, r1, r3
 80023f8:	460b      	mov	r3, r1
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	1ad1      	subs	r1, r2, r3
 8002402:	460b      	mov	r3, r1
 8002404:	4602      	mov	r2, r0
 8002406:	4999      	ldr	r1, [pc, #612]	; (800266c <main+0x173c>)
 8002408:	4899      	ldr	r0, [pc, #612]	; (8002670 <main+0x1740>)
 800240a:	f005 febd 	bl	8008188 <siprintf>
						      				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800240e:	4898      	ldr	r0, [pc, #608]	; (8002670 <main+0x1740>)
 8002410:	f7fd fee6 	bl	80001e0 <strlen>
 8002414:	4603      	mov	r3, r0
 8002416:	b29a      	uxth	r2, r3
 8002418:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800241c:	4994      	ldr	r1, [pc, #592]	; (8002670 <main+0x1740>)
 800241e:	4895      	ldr	r0, [pc, #596]	; (8002674 <main+0x1744>)
 8002420:	f004 ff7f 	bl	8007322 <HAL_UART_Transmit>
						      				if (VoltLow_sin <=0)
 8002424:	4b8e      	ldr	r3, [pc, #568]	; (8002660 <main+0x1730>)
 8002426:	edd3 7a00 	vldr	s15, [r3]
 800242a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800242e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002432:	d81b      	bhi.n	800246c <main+0x153c>
						      				{
						      				VoltLow_sin=0;
 8002434:	4b8a      	ldr	r3, [pc, #552]	; (8002660 <main+0x1730>)
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
						      				sprintf(TxDataBuffer," Lower VoltLow_sin  0 V \r\n");
 800243c:	4a8c      	ldr	r2, [pc, #560]	; (8002670 <main+0x1740>)
 800243e:	4b8e      	ldr	r3, [pc, #568]	; (8002678 <main+0x1748>)
 8002440:	4614      	mov	r4, r2
 8002442:	461d      	mov	r5, r3
 8002444:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002446:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002448:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800244c:	c403      	stmia	r4!, {r0, r1}
 800244e:	8022      	strh	r2, [r4, #0]
 8002450:	3402      	adds	r4, #2
 8002452:	0c13      	lsrs	r3, r2, #16
 8002454:	7023      	strb	r3, [r4, #0]
						      				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002456:	4886      	ldr	r0, [pc, #536]	; (8002670 <main+0x1740>)
 8002458:	f7fd fec2 	bl	80001e0 <strlen>
 800245c:	4603      	mov	r3, r0
 800245e:	b29a      	uxth	r2, r3
 8002460:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002464:	4982      	ldr	r1, [pc, #520]	; (8002670 <main+0x1740>)
 8002466:	4883      	ldr	r0, [pc, #524]	; (8002674 <main+0x1744>)
 8002468:	f004 ff5b 	bl	8007322 <HAL_UART_Transmit>
						      				}
						      				STATE_Display = StateDisplay_MenuSine_Print;
 800246c:	4b83      	ldr	r3, [pc, #524]	; (800267c <main+0x174c>)
 800246e:	221e      	movs	r2, #30
 8002470:	701a      	strb	r2, [r3, #0]
						      				break;
 8002472:	e01a      	b.n	80024aa <main+0x157a>


						      			default: //show error

						      			 sprintf(TxDataBuffer, "unidentified input \r\n");
 8002474:	4a7e      	ldr	r2, [pc, #504]	; (8002670 <main+0x1740>)
 8002476:	4b82      	ldr	r3, [pc, #520]	; (8002680 <main+0x1750>)
 8002478:	4614      	mov	r4, r2
 800247a:	461d      	mov	r5, r3
 800247c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800247e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002480:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002484:	6020      	str	r0, [r4, #0]
 8002486:	3404      	adds	r4, #4
 8002488:	8021      	strh	r1, [r4, #0]
						      			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800248a:	4879      	ldr	r0, [pc, #484]	; (8002670 <main+0x1740>)
 800248c:	f7fd fea8 	bl	80001e0 <strlen>
 8002490:	4603      	mov	r3, r0
 8002492:	b29a      	uxth	r2, r3
 8002494:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002498:	4975      	ldr	r1, [pc, #468]	; (8002670 <main+0x1740>)
 800249a:	4876      	ldr	r0, [pc, #472]	; (8002674 <main+0x1744>)
 800249c:	f004 ff41 	bl	8007322 <HAL_UART_Transmit>
						      			  STATE_Display = StateDisplay_MenuSine_Print;
 80024a0:	4b76      	ldr	r3, [pc, #472]	; (800267c <main+0x174c>)
 80024a2:	221e      	movs	r2, #30
 80024a4:	701a      	strb	r2, [r3, #0]
						      			 break;
 80024a6:	e000      	b.n	80024aa <main+0x157a>
						      				 break;
 80024a8:	bf00      	nop


						      				}

						      	 break;
 80024aa:	f000 bd35 	b.w	8002f18 <main+0x1fe8>

						      	//Menu 3
						      		case StateDisplay_MenuSquare_Print: //display state

						      sprintf(TxDataBuffer, "Square \r\n a. +0.1 Hz \r\n s. -0.1 Hz \r\n d. On/Off \r\n x. Back \r\n g. V High +0.1V \r\n h. High -0.1V \r\n j. V Low +0.1V \r\n k. Low -0.1V  \r\n \r\n l. duty +10  \r\n \r\n p. duty -10  \r\n");
 80024ae:	4a70      	ldr	r2, [pc, #448]	; (8002670 <main+0x1740>)
 80024b0:	4b74      	ldr	r3, [pc, #464]	; (8002684 <main+0x1754>)
 80024b2:	4610      	mov	r0, r2
 80024b4:	4619      	mov	r1, r3
 80024b6:	23ab      	movs	r3, #171	; 0xab
 80024b8:	461a      	mov	r2, r3
 80024ba:	f005 fe51 	bl	8008160 <memcpy>
						       HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80024be:	486c      	ldr	r0, [pc, #432]	; (8002670 <main+0x1740>)
 80024c0:	f7fd fe8e 	bl	80001e0 <strlen>
 80024c4:	4603      	mov	r3, r0
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024cc:	4968      	ldr	r1, [pc, #416]	; (8002670 <main+0x1740>)
 80024ce:	4869      	ldr	r0, [pc, #420]	; (8002674 <main+0x1744>)
 80024d0:	f004 ff27 	bl	8007322 <HAL_UART_Transmit>

						      	STATE_Display = StateDisplay_MenuSquare_WaitInput;
 80024d4:	4b69      	ldr	r3, [pc, #420]	; (800267c <main+0x174c>)
 80024d6:	2229      	movs	r2, #41	; 0x29
 80024d8:	701a      	strb	r2, [r3, #0]
						      	break;
 80024da:	f000 bd1d 	b.w	8002f18 <main+0x1fe8>

						      	 case StateDisplay_MenuSquare_WaitInput: //make decision state
						      	 switch (inputchar)
 80024de:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80024e2:	2b6a      	cmp	r3, #106	; 0x6a
 80024e4:	f000 8301 	beq.w	8002aea <main+0x1bba>
 80024e8:	2b6a      	cmp	r3, #106	; 0x6a
 80024ea:	dc13      	bgt.n	8002514 <main+0x15e4>
 80024ec:	2b64      	cmp	r3, #100	; 0x64
 80024ee:	d026      	beq.n	800253e <main+0x160e>
 80024f0:	2b64      	cmp	r3, #100	; 0x64
 80024f2:	dc07      	bgt.n	8002504 <main+0x15d4>
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f8:	f000 850c 	beq.w	8002f14 <main+0x1fe4>
 80024fc:	2b61      	cmp	r3, #97	; 0x61
 80024fe:	d054      	beq.n	80025aa <main+0x167a>
 8002500:	f000 bccf 	b.w	8002ea2 <main+0x1f72>
 8002504:	2b67      	cmp	r3, #103	; 0x67
 8002506:	f000 8187 	beq.w	8002818 <main+0x18e8>
 800250a:	2b68      	cmp	r3, #104	; 0x68
 800250c:	f000 824a 	beq.w	80029a4 <main+0x1a74>
 8002510:	f000 bcc7 	b.w	8002ea2 <main+0x1f72>
 8002514:	2b70      	cmp	r3, #112	; 0x70
 8002516:	f000 848a 	beq.w	8002e2e <main+0x1efe>
 800251a:	2b70      	cmp	r3, #112	; 0x70
 800251c:	dc07      	bgt.n	800252e <main+0x15fe>
 800251e:	2b6b      	cmp	r3, #107	; 0x6b
 8002520:	f000 83a6 	beq.w	8002c70 <main+0x1d40>
 8002524:	2b6c      	cmp	r3, #108	; 0x6c
 8002526:	f000 8446 	beq.w	8002db6 <main+0x1e86>
 800252a:	f000 bcba 	b.w	8002ea2 <main+0x1f72>
 800252e:	2b73      	cmp	r3, #115	; 0x73
 8002530:	f000 80d3 	beq.w	80026da <main+0x17aa>
 8002534:	2b78      	cmp	r3, #120	; 0x78
 8002536:	f000 8168 	beq.w	800280a <main+0x18da>
 800253a:	f000 bcb2 	b.w	8002ea2 <main+0x1f72>
						      		{
						      			case -1:
						      			 break;
						      			 case 'd': // on/off

						      	if (a==0)
 800253e:	4b52      	ldr	r3, [pc, #328]	; (8002688 <main+0x1758>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d114      	bne.n	8002570 <main+0x1640>
						      	 {

						      	 sprintf(TxDataBuffer, "Turned On \r\n");
 8002546:	4a4a      	ldr	r2, [pc, #296]	; (8002670 <main+0x1740>)
 8002548:	4b50      	ldr	r3, [pc, #320]	; (800268c <main+0x175c>)
 800254a:	4614      	mov	r4, r2
 800254c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800254e:	c407      	stmia	r4!, {r0, r1, r2}
 8002550:	7023      	strb	r3, [r4, #0]
						      		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002552:	4847      	ldr	r0, [pc, #284]	; (8002670 <main+0x1740>)
 8002554:	f7fd fe44 	bl	80001e0 <strlen>
 8002558:	4603      	mov	r3, r0
 800255a:	b29a      	uxth	r2, r3
 800255c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002560:	4943      	ldr	r1, [pc, #268]	; (8002670 <main+0x1740>)
 8002562:	4844      	ldr	r0, [pc, #272]	; (8002674 <main+0x1744>)
 8002564:	f004 fedd 	bl	8007322 <HAL_UART_Transmit>
						      		a=1;
 8002568:	4b47      	ldr	r3, [pc, #284]	; (8002688 <main+0x1758>)
 800256a:	2201      	movs	r2, #1
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	e017      	b.n	80025a0 <main+0x1670>

						      		 }
						      		else if (a==1)
 8002570:	4b45      	ldr	r3, [pc, #276]	; (8002688 <main+0x1758>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d113      	bne.n	80025a0 <main+0x1670>
						      			 {
						      		a=0;
 8002578:	4b43      	ldr	r3, [pc, #268]	; (8002688 <main+0x1758>)
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
						      		sprintf(TxDataBuffer, "Turned Off \r\n");
 800257e:	4a3c      	ldr	r2, [pc, #240]	; (8002670 <main+0x1740>)
 8002580:	4b43      	ldr	r3, [pc, #268]	; (8002690 <main+0x1760>)
 8002582:	4614      	mov	r4, r2
 8002584:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002586:	c407      	stmia	r4!, {r0, r1, r2}
 8002588:	8023      	strh	r3, [r4, #0]
						      		 HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800258a:	4839      	ldr	r0, [pc, #228]	; (8002670 <main+0x1740>)
 800258c:	f7fd fe28 	bl	80001e0 <strlen>
 8002590:	4603      	mov	r3, r0
 8002592:	b29a      	uxth	r2, r3
 8002594:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002598:	4935      	ldr	r1, [pc, #212]	; (8002670 <main+0x1740>)
 800259a:	4836      	ldr	r0, [pc, #216]	; (8002674 <main+0x1744>)
 800259c:	f004 fec1 	bl	8007322 <HAL_UART_Transmit>

						      		 }
						      		STATE_Display = StateDisplay_MenuSquare_Print;
 80025a0:	4b36      	ldr	r3, [pc, #216]	; (800267c <main+0x174c>)
 80025a2:	2228      	movs	r2, #40	; 0x28
 80025a4:	701a      	strb	r2, [r3, #0]

						      		break;
 80025a6:	f000 bcb6 	b.w	8002f16 <main+0x1fe6>
						      			case 'a':  // เพิ่มความถี่

						      			a=1;
 80025aa:	4b37      	ldr	r3, [pc, #220]	; (8002688 <main+0x1758>)
 80025ac:	2201      	movs	r2, #1
 80025ae:	601a      	str	r2, [r3, #0]
						      			 c=0;
 80025b0:	4b38      	ldr	r3, [pc, #224]	; (8002694 <main+0x1764>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
						      			if(F_Square <10)
 80025b6:	4b38      	ldr	r3, [pc, #224]	; (8002698 <main+0x1768>)
 80025b8:	edd3 7a00 	vldr	s15, [r3]
 80025bc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80025c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c8:	d56a      	bpl.n	80026a0 <main+0x1770>
						      			{
						      			F_Square+=0.1;
 80025ca:	4b33      	ldr	r3, [pc, #204]	; (8002698 <main+0x1768>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fd ffc2 	bl	8000558 <__aeabi_f2d>
 80025d4:	a320      	add	r3, pc, #128	; (adr r3, 8002658 <main+0x1728>)
 80025d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025da:	f7fd fe5f 	bl	800029c <__adddf3>
 80025de:	4603      	mov	r3, r0
 80025e0:	460c      	mov	r4, r1
 80025e2:	4618      	mov	r0, r3
 80025e4:	4621      	mov	r1, r4
 80025e6:	f7fe fad1 	bl	8000b8c <__aeabi_d2f>
 80025ea:	4602      	mov	r2, r0
 80025ec:	4b2a      	ldr	r3, [pc, #168]	; (8002698 <main+0x1768>)
 80025ee:	601a      	str	r2, [r3, #0]
						      			t=F_Square*10;
 80025f0:	4b29      	ldr	r3, [pc, #164]	; (8002698 <main+0x1768>)
 80025f2:	edd3 7a00 	vldr	s15, [r3]
 80025f6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80025fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002602:	ee17 2a90 	vmov	r2, s15
 8002606:	4b17      	ldr	r3, [pc, #92]	; (8002664 <main+0x1734>)
 8002608:	601a      	str	r2, [r3, #0]
						      			sprintf(TxDataBuffer," F_Square is [%d.%d] Hz \r\n" ,t/10,t%10);
 800260a:	4b16      	ldr	r3, [pc, #88]	; (8002664 <main+0x1734>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a16      	ldr	r2, [pc, #88]	; (8002668 <main+0x1738>)
 8002610:	fb82 1203 	smull	r1, r2, r2, r3
 8002614:	1092      	asrs	r2, r2, #2
 8002616:	17db      	asrs	r3, r3, #31
 8002618:	1ad0      	subs	r0, r2, r3
 800261a:	4b12      	ldr	r3, [pc, #72]	; (8002664 <main+0x1734>)
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	4b12      	ldr	r3, [pc, #72]	; (8002668 <main+0x1738>)
 8002620:	fb83 1302 	smull	r1, r3, r3, r2
 8002624:	1099      	asrs	r1, r3, #2
 8002626:	17d3      	asrs	r3, r2, #31
 8002628:	1ac9      	subs	r1, r1, r3
 800262a:	460b      	mov	r3, r1
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	440b      	add	r3, r1
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	1ad1      	subs	r1, r2, r3
 8002634:	460b      	mov	r3, r1
 8002636:	4602      	mov	r2, r0
 8002638:	4918      	ldr	r1, [pc, #96]	; (800269c <main+0x176c>)
 800263a:	480d      	ldr	r0, [pc, #52]	; (8002670 <main+0x1740>)
 800263c:	f005 fda4 	bl	8008188 <siprintf>
						      			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002640:	480b      	ldr	r0, [pc, #44]	; (8002670 <main+0x1740>)
 8002642:	f7fd fdcd 	bl	80001e0 <strlen>
 8002646:	4603      	mov	r3, r0
 8002648:	b29a      	uxth	r2, r3
 800264a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800264e:	4908      	ldr	r1, [pc, #32]	; (8002670 <main+0x1740>)
 8002650:	4808      	ldr	r0, [pc, #32]	; (8002674 <main+0x1744>)
 8002652:	f004 fe66 	bl	8007322 <HAL_UART_Transmit>
 8002656:	e03b      	b.n	80026d0 <main+0x17a0>
 8002658:	9999999a 	.word	0x9999999a
 800265c:	3fb99999 	.word	0x3fb99999
 8002660:	200001f0 	.word	0x200001f0
 8002664:	200001b4 	.word	0x200001b4
 8002668:	66666667 	.word	0x66666667
 800266c:	08009e2c 	.word	0x08009e2c
 8002670:	200000a4 	.word	0x200000a4
 8002674:	200003a0 	.word	0x200003a0
 8002678:	08009e68 	.word	0x08009e68
 800267c:	200001a4 	.word	0x200001a4
 8002680:	08009a38 	.word	0x08009a38
 8002684:	08009e84 	.word	0x08009e84
 8002688:	200001ac 	.word	0x200001ac
 800268c:	08009ae4 	.word	0x08009ae4
 8002690:	08009af4 	.word	0x08009af4
 8002694:	200001b0 	.word	0x200001b0
 8002698:	200001f4 	.word	0x200001f4
 800269c:	08009f30 	.word	0x08009f30
						      			 }
						      			 else
						      			 {
						      			sprintf(TxDataBuffer," the highest frequency 10Hz \r\n" );
 80026a0:	4ab1      	ldr	r2, [pc, #708]	; (8002968 <main+0x1a38>)
 80026a2:	4bb2      	ldr	r3, [pc, #712]	; (800296c <main+0x1a3c>)
 80026a4:	4614      	mov	r4, r2
 80026a6:	461d      	mov	r5, r3
 80026a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80026b0:	c407      	stmia	r4!, {r0, r1, r2}
 80026b2:	8023      	strh	r3, [r4, #0]
 80026b4:	3402      	adds	r4, #2
 80026b6:	0c1b      	lsrs	r3, r3, #16
 80026b8:	7023      	strb	r3, [r4, #0]
						      			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80026ba:	48ab      	ldr	r0, [pc, #684]	; (8002968 <main+0x1a38>)
 80026bc:	f7fd fd90 	bl	80001e0 <strlen>
 80026c0:	4603      	mov	r3, r0
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026c8:	49a7      	ldr	r1, [pc, #668]	; (8002968 <main+0x1a38>)
 80026ca:	48a9      	ldr	r0, [pc, #676]	; (8002970 <main+0x1a40>)
 80026cc:	f004 fe29 	bl	8007322 <HAL_UART_Transmit>
						      			}


						      			 STATE_Display = StateDisplay_MenuSquare_Print ;
 80026d0:	4ba8      	ldr	r3, [pc, #672]	; (8002974 <main+0x1a44>)
 80026d2:	2228      	movs	r2, #40	; 0x28
 80026d4:	701a      	strb	r2, [r3, #0]
						      			 break;
 80026d6:	f000 bc1e 	b.w	8002f16 <main+0x1fe6>
						      			case 's': //  ลดความถี่
						      				 c=0;
 80026da:	4ba7      	ldr	r3, [pc, #668]	; (8002978 <main+0x1a48>)
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]

						      			 a=1;
 80026e0:	4ba6      	ldr	r3, [pc, #664]	; (800297c <main+0x1a4c>)
 80026e2:	2201      	movs	r2, #1
 80026e4:	601a      	str	r2, [r3, #0]
						      			if(F_Square-0.1>0){
 80026e6:	4ba6      	ldr	r3, [pc, #664]	; (8002980 <main+0x1a50>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7fd ff34 	bl	8000558 <__aeabi_f2d>
 80026f0:	a399      	add	r3, pc, #612	; (adr r3, 8002958 <main+0x1a28>)
 80026f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f6:	f7fd fdcf 	bl	8000298 <__aeabi_dsub>
 80026fa:	4603      	mov	r3, r0
 80026fc:	460c      	mov	r4, r1
 80026fe:	4618      	mov	r0, r3
 8002700:	4621      	mov	r1, r4
 8002702:	f04f 0200 	mov.w	r2, #0
 8002706:	f04f 0300 	mov.w	r3, #0
 800270a:	f7fe fa0d 	bl	8000b28 <__aeabi_dcmpgt>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d046      	beq.n	80027a2 <main+0x1872>
						      			 F_Square=F_Square-0.1;
 8002714:	4b9a      	ldr	r3, [pc, #616]	; (8002980 <main+0x1a50>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f7fd ff1d 	bl	8000558 <__aeabi_f2d>
 800271e:	a38e      	add	r3, pc, #568	; (adr r3, 8002958 <main+0x1a28>)
 8002720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002724:	f7fd fdb8 	bl	8000298 <__aeabi_dsub>
 8002728:	4603      	mov	r3, r0
 800272a:	460c      	mov	r4, r1
 800272c:	4618      	mov	r0, r3
 800272e:	4621      	mov	r1, r4
 8002730:	f7fe fa2c 	bl	8000b8c <__aeabi_d2f>
 8002734:	4602      	mov	r2, r0
 8002736:	4b92      	ldr	r3, [pc, #584]	; (8002980 <main+0x1a50>)
 8002738:	601a      	str	r2, [r3, #0]
						      			t=F_Square*10;
 800273a:	4b91      	ldr	r3, [pc, #580]	; (8002980 <main+0x1a50>)
 800273c:	edd3 7a00 	vldr	s15, [r3]
 8002740:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002744:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002748:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800274c:	ee17 2a90 	vmov	r2, s15
 8002750:	4b8c      	ldr	r3, [pc, #560]	; (8002984 <main+0x1a54>)
 8002752:	601a      	str	r2, [r3, #0]
						      			sprintf(TxDataBuffer," F_Square is [%d.%d] Hz \r\n" ,t/10,t%10);
 8002754:	4b8b      	ldr	r3, [pc, #556]	; (8002984 <main+0x1a54>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a8b      	ldr	r2, [pc, #556]	; (8002988 <main+0x1a58>)
 800275a:	fb82 1203 	smull	r1, r2, r2, r3
 800275e:	1092      	asrs	r2, r2, #2
 8002760:	17db      	asrs	r3, r3, #31
 8002762:	1ad0      	subs	r0, r2, r3
 8002764:	4b87      	ldr	r3, [pc, #540]	; (8002984 <main+0x1a54>)
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4b87      	ldr	r3, [pc, #540]	; (8002988 <main+0x1a58>)
 800276a:	fb83 1302 	smull	r1, r3, r3, r2
 800276e:	1099      	asrs	r1, r3, #2
 8002770:	17d3      	asrs	r3, r2, #31
 8002772:	1ac9      	subs	r1, r1, r3
 8002774:	460b      	mov	r3, r1
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	1ad1      	subs	r1, r2, r3
 800277e:	460b      	mov	r3, r1
 8002780:	4602      	mov	r2, r0
 8002782:	4982      	ldr	r1, [pc, #520]	; (800298c <main+0x1a5c>)
 8002784:	4878      	ldr	r0, [pc, #480]	; (8002968 <main+0x1a38>)
 8002786:	f005 fcff 	bl	8008188 <siprintf>
						      			 HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800278a:	4877      	ldr	r0, [pc, #476]	; (8002968 <main+0x1a38>)
 800278c:	f7fd fd28 	bl	80001e0 <strlen>
 8002790:	4603      	mov	r3, r0
 8002792:	b29a      	uxth	r2, r3
 8002794:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002798:	4973      	ldr	r1, [pc, #460]	; (8002968 <main+0x1a38>)
 800279a:	4875      	ldr	r0, [pc, #468]	; (8002970 <main+0x1a40>)
 800279c:	f004 fdc1 	bl	8007322 <HAL_UART_Transmit>
 80027a0:	e02f      	b.n	8002802 <main+0x18d2>
						      			}
						      			 else if(F_Square-0.1<=0)
 80027a2:	4b77      	ldr	r3, [pc, #476]	; (8002980 <main+0x1a50>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fd fed6 	bl	8000558 <__aeabi_f2d>
 80027ac:	a36a      	add	r3, pc, #424	; (adr r3, 8002958 <main+0x1a28>)
 80027ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b2:	f7fd fd71 	bl	8000298 <__aeabi_dsub>
 80027b6:	4603      	mov	r3, r0
 80027b8:	460c      	mov	r4, r1
 80027ba:	4618      	mov	r0, r3
 80027bc:	4621      	mov	r1, r4
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	f7fe f99b 	bl	8000b00 <__aeabi_dcmple>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d018      	beq.n	8002802 <main+0x18d2>
						      			{
						      			F_Square=0;
 80027d0:	4b6b      	ldr	r3, [pc, #428]	; (8002980 <main+0x1a50>)
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
						      			sprintf(TxDataBuffer," the Lower frequency 0Hz \r\n" );
 80027d8:	4a63      	ldr	r2, [pc, #396]	; (8002968 <main+0x1a38>)
 80027da:	4b6d      	ldr	r3, [pc, #436]	; (8002990 <main+0x1a60>)
 80027dc:	4614      	mov	r4, r2
 80027de:	461d      	mov	r5, r3
 80027e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
						      			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80027ec:	485e      	ldr	r0, [pc, #376]	; (8002968 <main+0x1a38>)
 80027ee:	f7fd fcf7 	bl	80001e0 <strlen>
 80027f2:	4603      	mov	r3, r0
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027fa:	495b      	ldr	r1, [pc, #364]	; (8002968 <main+0x1a38>)
 80027fc:	485c      	ldr	r0, [pc, #368]	; (8002970 <main+0x1a40>)
 80027fe:	f004 fd90 	bl	8007322 <HAL_UART_Transmit>

						      			}

						      			STATE_Display = StateDisplay_MenuSquare_Print;
 8002802:	4b5c      	ldr	r3, [pc, #368]	; (8002974 <main+0x1a44>)
 8002804:	2228      	movs	r2, #40	; 0x28
 8002806:	701a      	strb	r2, [r3, #0]

						      			 break;
 8002808:	e385      	b.n	8002f16 <main+0x1fe6>

						      			 case 'x': // back to main manu

						      			 a=0;
 800280a:	4b5c      	ldr	r3, [pc, #368]	; (800297c <main+0x1a4c>)
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
						      			STATE_Display = StateDisplay_MenuRoot_Print;
 8002810:	4b58      	ldr	r3, [pc, #352]	; (8002974 <main+0x1a44>)
 8002812:	220a      	movs	r2, #10
 8002814:	701a      	strb	r2, [r3, #0]
						      			 break;
 8002816:	e37e      	b.n	8002f16 <main+0x1fe6>
						      			 case 'g':// +V High
						      				if (VoltHigh_Square+0.1< 3.3){
 8002818:	4b5e      	ldr	r3, [pc, #376]	; (8002994 <main+0x1a64>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f7fd fe9b 	bl	8000558 <__aeabi_f2d>
 8002822:	a34d      	add	r3, pc, #308	; (adr r3, 8002958 <main+0x1a28>)
 8002824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002828:	f7fd fd38 	bl	800029c <__adddf3>
 800282c:	4603      	mov	r3, r0
 800282e:	460c      	mov	r4, r1
 8002830:	4618      	mov	r0, r3
 8002832:	4621      	mov	r1, r4
 8002834:	a34a      	add	r3, pc, #296	; (adr r3, 8002960 <main+0x1a30>)
 8002836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283a:	f7fe f957 	bl	8000aec <__aeabi_dcmplt>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d046      	beq.n	80028d2 <main+0x19a2>
						      			VoltHigh_Square =VoltHigh_Square +0.1;
 8002844:	4b53      	ldr	r3, [pc, #332]	; (8002994 <main+0x1a64>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f7fd fe85 	bl	8000558 <__aeabi_f2d>
 800284e:	a342      	add	r3, pc, #264	; (adr r3, 8002958 <main+0x1a28>)
 8002850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002854:	f7fd fd22 	bl	800029c <__adddf3>
 8002858:	4603      	mov	r3, r0
 800285a:	460c      	mov	r4, r1
 800285c:	4618      	mov	r0, r3
 800285e:	4621      	mov	r1, r4
 8002860:	f7fe f994 	bl	8000b8c <__aeabi_d2f>
 8002864:	4602      	mov	r2, r0
 8002866:	4b4b      	ldr	r3, [pc, #300]	; (8002994 <main+0x1a64>)
 8002868:	601a      	str	r2, [r3, #0]
						      			t=VoltHigh_Square*10;
 800286a:	4b4a      	ldr	r3, [pc, #296]	; (8002994 <main+0x1a64>)
 800286c:	edd3 7a00 	vldr	s15, [r3]
 8002870:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002874:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002878:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800287c:	ee17 2a90 	vmov	r2, s15
 8002880:	4b40      	ldr	r3, [pc, #256]	; (8002984 <main+0x1a54>)
 8002882:	601a      	str	r2, [r3, #0]
						      			sprintf(TxDataBuffer,"VoltHigh_Square is [%d.%d] V \r\n" ,t/10,t%10);
 8002884:	4b3f      	ldr	r3, [pc, #252]	; (8002984 <main+0x1a54>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a3f      	ldr	r2, [pc, #252]	; (8002988 <main+0x1a58>)
 800288a:	fb82 1203 	smull	r1, r2, r2, r3
 800288e:	1092      	asrs	r2, r2, #2
 8002890:	17db      	asrs	r3, r3, #31
 8002892:	1ad0      	subs	r0, r2, r3
 8002894:	4b3b      	ldr	r3, [pc, #236]	; (8002984 <main+0x1a54>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	4b3b      	ldr	r3, [pc, #236]	; (8002988 <main+0x1a58>)
 800289a:	fb83 1302 	smull	r1, r3, r3, r2
 800289e:	1099      	asrs	r1, r3, #2
 80028a0:	17d3      	asrs	r3, r2, #31
 80028a2:	1ac9      	subs	r1, r1, r3
 80028a4:	460b      	mov	r3, r1
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	1ad1      	subs	r1, r2, r3
 80028ae:	460b      	mov	r3, r1
 80028b0:	4602      	mov	r2, r0
 80028b2:	4939      	ldr	r1, [pc, #228]	; (8002998 <main+0x1a68>)
 80028b4:	482c      	ldr	r0, [pc, #176]	; (8002968 <main+0x1a38>)
 80028b6:	f005 fc67 	bl	8008188 <siprintf>
						      			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80028ba:	482b      	ldr	r0, [pc, #172]	; (8002968 <main+0x1a38>)
 80028bc:	f7fd fc90 	bl	80001e0 <strlen>
 80028c0:	4603      	mov	r3, r0
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028c8:	4927      	ldr	r1, [pc, #156]	; (8002968 <main+0x1a38>)
 80028ca:	4829      	ldr	r0, [pc, #164]	; (8002970 <main+0x1a40>)
 80028cc:	f004 fd29 	bl	8007322 <HAL_UART_Transmit>
 80028d0:	e03e      	b.n	8002950 <main+0x1a20>
						      				}
						      			else if (VoltHigh_Square+0.1>=3.3)
 80028d2:	4b30      	ldr	r3, [pc, #192]	; (8002994 <main+0x1a64>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fd fe3e 	bl	8000558 <__aeabi_f2d>
 80028dc:	a31e      	add	r3, pc, #120	; (adr r3, 8002958 <main+0x1a28>)
 80028de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e2:	f7fd fcdb 	bl	800029c <__adddf3>
 80028e6:	4603      	mov	r3, r0
 80028e8:	460c      	mov	r4, r1
 80028ea:	4618      	mov	r0, r3
 80028ec:	4621      	mov	r1, r4
 80028ee:	a31c      	add	r3, pc, #112	; (adr r3, 8002960 <main+0x1a30>)
 80028f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f4:	f7fe f90e 	bl	8000b14 <__aeabi_dcmpge>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d028      	beq.n	8002950 <main+0x1a20>
						      			{
						      			VoltHigh_Square=3.3;
 80028fe:	4b25      	ldr	r3, [pc, #148]	; (8002994 <main+0x1a64>)
 8002900:	4a26      	ldr	r2, [pc, #152]	; (800299c <main+0x1a6c>)
 8002902:	601a      	str	r2, [r3, #0]
						      			sprintf(TxDataBuffer,"Maximum VoltHigh_Square is 3.3 V \r\n" ,t/10,t%10);
 8002904:	4b1f      	ldr	r3, [pc, #124]	; (8002984 <main+0x1a54>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a1f      	ldr	r2, [pc, #124]	; (8002988 <main+0x1a58>)
 800290a:	fb82 1203 	smull	r1, r2, r2, r3
 800290e:	1092      	asrs	r2, r2, #2
 8002910:	17db      	asrs	r3, r3, #31
 8002912:	1ad0      	subs	r0, r2, r3
 8002914:	4b1b      	ldr	r3, [pc, #108]	; (8002984 <main+0x1a54>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	4b1b      	ldr	r3, [pc, #108]	; (8002988 <main+0x1a58>)
 800291a:	fb83 1302 	smull	r1, r3, r3, r2
 800291e:	1099      	asrs	r1, r3, #2
 8002920:	17d3      	asrs	r3, r2, #31
 8002922:	1ac9      	subs	r1, r1, r3
 8002924:	460b      	mov	r3, r1
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	1ad1      	subs	r1, r2, r3
 800292e:	460b      	mov	r3, r1
 8002930:	4602      	mov	r2, r0
 8002932:	491b      	ldr	r1, [pc, #108]	; (80029a0 <main+0x1a70>)
 8002934:	480c      	ldr	r0, [pc, #48]	; (8002968 <main+0x1a38>)
 8002936:	f005 fc27 	bl	8008188 <siprintf>
						      			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800293a:	480b      	ldr	r0, [pc, #44]	; (8002968 <main+0x1a38>)
 800293c:	f7fd fc50 	bl	80001e0 <strlen>
 8002940:	4603      	mov	r3, r0
 8002942:	b29a      	uxth	r2, r3
 8002944:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002948:	4907      	ldr	r1, [pc, #28]	; (8002968 <main+0x1a38>)
 800294a:	4809      	ldr	r0, [pc, #36]	; (8002970 <main+0x1a40>)
 800294c:	f004 fce9 	bl	8007322 <HAL_UART_Transmit>
						      			}
						      			STATE_Display = StateDisplay_MenuSquare_Print;
 8002950:	4b08      	ldr	r3, [pc, #32]	; (8002974 <main+0x1a44>)
 8002952:	2228      	movs	r2, #40	; 0x28
 8002954:	701a      	strb	r2, [r3, #0]
						      		break;
 8002956:	e2de      	b.n	8002f16 <main+0x1fe6>
 8002958:	9999999a 	.word	0x9999999a
 800295c:	3fb99999 	.word	0x3fb99999
 8002960:	66666666 	.word	0x66666666
 8002964:	400a6666 	.word	0x400a6666
 8002968:	200000a4 	.word	0x200000a4
 800296c:	08009d90 	.word	0x08009d90
 8002970:	200003a0 	.word	0x200003a0
 8002974:	200001a4 	.word	0x200001a4
 8002978:	200001b0 	.word	0x200001b0
 800297c:	200001ac 	.word	0x200001ac
 8002980:	200001f4 	.word	0x200001f4
 8002984:	200001b4 	.word	0x200001b4
 8002988:	66666667 	.word	0x66666667
 800298c:	08009f30 	.word	0x08009f30
 8002990:	08009f4c 	.word	0x08009f4c
 8002994:	2000000c 	.word	0x2000000c
 8002998:	08009f68 	.word	0x08009f68
 800299c:	40533333 	.word	0x40533333
 80029a0:	08009f88 	.word	0x08009f88
						      			 case 'h':// -V High
						      				if (VoltHigh_Square-0.1>0){
 80029a4:	4ba6      	ldr	r3, [pc, #664]	; (8002c40 <main+0x1d10>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fd fdd5 	bl	8000558 <__aeabi_f2d>
 80029ae:	a3a0      	add	r3, pc, #640	; (adr r3, 8002c30 <main+0x1d00>)
 80029b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b4:	f7fd fc70 	bl	8000298 <__aeabi_dsub>
 80029b8:	4603      	mov	r3, r0
 80029ba:	460c      	mov	r4, r1
 80029bc:	4618      	mov	r0, r3
 80029be:	4621      	mov	r1, r4
 80029c0:	f04f 0200 	mov.w	r2, #0
 80029c4:	f04f 0300 	mov.w	r3, #0
 80029c8:	f7fe f8ae 	bl	8000b28 <__aeabi_dcmpgt>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d046      	beq.n	8002a60 <main+0x1b30>
						      			VoltHigh_Square =VoltHigh_Square -0.1;
 80029d2:	4b9b      	ldr	r3, [pc, #620]	; (8002c40 <main+0x1d10>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fd fdbe 	bl	8000558 <__aeabi_f2d>
 80029dc:	a394      	add	r3, pc, #592	; (adr r3, 8002c30 <main+0x1d00>)
 80029de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e2:	f7fd fc59 	bl	8000298 <__aeabi_dsub>
 80029e6:	4603      	mov	r3, r0
 80029e8:	460c      	mov	r4, r1
 80029ea:	4618      	mov	r0, r3
 80029ec:	4621      	mov	r1, r4
 80029ee:	f7fe f8cd 	bl	8000b8c <__aeabi_d2f>
 80029f2:	4602      	mov	r2, r0
 80029f4:	4b92      	ldr	r3, [pc, #584]	; (8002c40 <main+0x1d10>)
 80029f6:	601a      	str	r2, [r3, #0]
						      			t=VoltHigh_Square*10;
 80029f8:	4b91      	ldr	r3, [pc, #580]	; (8002c40 <main+0x1d10>)
 80029fa:	edd3 7a00 	vldr	s15, [r3]
 80029fe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002a02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a0a:	ee17 2a90 	vmov	r2, s15
 8002a0e:	4b8d      	ldr	r3, [pc, #564]	; (8002c44 <main+0x1d14>)
 8002a10:	601a      	str	r2, [r3, #0]
						      				sprintf(TxDataBuffer,"VoltHigh_Square is [%d.%d] V \r\n" ,t/10,t%10);
 8002a12:	4b8c      	ldr	r3, [pc, #560]	; (8002c44 <main+0x1d14>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a8c      	ldr	r2, [pc, #560]	; (8002c48 <main+0x1d18>)
 8002a18:	fb82 1203 	smull	r1, r2, r2, r3
 8002a1c:	1092      	asrs	r2, r2, #2
 8002a1e:	17db      	asrs	r3, r3, #31
 8002a20:	1ad0      	subs	r0, r2, r3
 8002a22:	4b88      	ldr	r3, [pc, #544]	; (8002c44 <main+0x1d14>)
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	4b88      	ldr	r3, [pc, #544]	; (8002c48 <main+0x1d18>)
 8002a28:	fb83 1302 	smull	r1, r3, r3, r2
 8002a2c:	1099      	asrs	r1, r3, #2
 8002a2e:	17d3      	asrs	r3, r2, #31
 8002a30:	1ac9      	subs	r1, r1, r3
 8002a32:	460b      	mov	r3, r1
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	440b      	add	r3, r1
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	1ad1      	subs	r1, r2, r3
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	4602      	mov	r2, r0
 8002a40:	4982      	ldr	r1, [pc, #520]	; (8002c4c <main+0x1d1c>)
 8002a42:	4883      	ldr	r0, [pc, #524]	; (8002c50 <main+0x1d20>)
 8002a44:	f005 fba0 	bl	8008188 <siprintf>
						      				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002a48:	4881      	ldr	r0, [pc, #516]	; (8002c50 <main+0x1d20>)
 8002a4a:	f7fd fbc9 	bl	80001e0 <strlen>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a56:	497e      	ldr	r1, [pc, #504]	; (8002c50 <main+0x1d20>)
 8002a58:	487e      	ldr	r0, [pc, #504]	; (8002c54 <main+0x1d24>)
 8002a5a:	f004 fc62 	bl	8007322 <HAL_UART_Transmit>
 8002a5e:	e040      	b.n	8002ae2 <main+0x1bb2>
						      				}
						      			else if (VoltHigh_Square-0.1<=0)
 8002a60:	4b77      	ldr	r3, [pc, #476]	; (8002c40 <main+0x1d10>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fd fd77 	bl	8000558 <__aeabi_f2d>
 8002a6a:	a371      	add	r3, pc, #452	; (adr r3, 8002c30 <main+0x1d00>)
 8002a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a70:	f7fd fc12 	bl	8000298 <__aeabi_dsub>
 8002a74:	4603      	mov	r3, r0
 8002a76:	460c      	mov	r4, r1
 8002a78:	4618      	mov	r0, r3
 8002a7a:	4621      	mov	r1, r4
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	f04f 0300 	mov.w	r3, #0
 8002a84:	f7fe f83c 	bl	8000b00 <__aeabi_dcmple>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d029      	beq.n	8002ae2 <main+0x1bb2>
						      			{
						      			VoltHigh_Square=0;
 8002a8e:	4b6c      	ldr	r3, [pc, #432]	; (8002c40 <main+0x1d10>)
 8002a90:	f04f 0200 	mov.w	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
						      			sprintf(TxDataBuffer,"Lower VoltHigh_Square is 0 V \r\n" ,t/10,t%10);
 8002a96:	4b6b      	ldr	r3, [pc, #428]	; (8002c44 <main+0x1d14>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a6b      	ldr	r2, [pc, #428]	; (8002c48 <main+0x1d18>)
 8002a9c:	fb82 1203 	smull	r1, r2, r2, r3
 8002aa0:	1092      	asrs	r2, r2, #2
 8002aa2:	17db      	asrs	r3, r3, #31
 8002aa4:	1ad0      	subs	r0, r2, r3
 8002aa6:	4b67      	ldr	r3, [pc, #412]	; (8002c44 <main+0x1d14>)
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	4b67      	ldr	r3, [pc, #412]	; (8002c48 <main+0x1d18>)
 8002aac:	fb83 1302 	smull	r1, r3, r3, r2
 8002ab0:	1099      	asrs	r1, r3, #2
 8002ab2:	17d3      	asrs	r3, r2, #31
 8002ab4:	1ac9      	subs	r1, r1, r3
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	440b      	add	r3, r1
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	1ad1      	subs	r1, r2, r3
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	4964      	ldr	r1, [pc, #400]	; (8002c58 <main+0x1d28>)
 8002ac6:	4862      	ldr	r0, [pc, #392]	; (8002c50 <main+0x1d20>)
 8002ac8:	f005 fb5e 	bl	8008188 <siprintf>
						      			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002acc:	4860      	ldr	r0, [pc, #384]	; (8002c50 <main+0x1d20>)
 8002ace:	f7fd fb87 	bl	80001e0 <strlen>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ada:	495d      	ldr	r1, [pc, #372]	; (8002c50 <main+0x1d20>)
 8002adc:	485d      	ldr	r0, [pc, #372]	; (8002c54 <main+0x1d24>)
 8002ade:	f004 fc20 	bl	8007322 <HAL_UART_Transmit>
						      			}
						      			STATE_Display = StateDisplay_MenuSquare_Print;
 8002ae2:	4b5e      	ldr	r3, [pc, #376]	; (8002c5c <main+0x1d2c>)
 8002ae4:	2228      	movs	r2, #40	; 0x28
 8002ae6:	701a      	strb	r2, [r3, #0]
						      			 break;
 8002ae8:	e215      	b.n	8002f16 <main+0x1fe6>
						      			 case 'j':// +V Low
						      				if (VoltLow_Square+0.1 <3.3){
 8002aea:	4b5d      	ldr	r3, [pc, #372]	; (8002c60 <main+0x1d30>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fd fd32 	bl	8000558 <__aeabi_f2d>
 8002af4:	a34e      	add	r3, pc, #312	; (adr r3, 8002c30 <main+0x1d00>)
 8002af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afa:	f7fd fbcf 	bl	800029c <__adddf3>
 8002afe:	4603      	mov	r3, r0
 8002b00:	460c      	mov	r4, r1
 8002b02:	4618      	mov	r0, r3
 8002b04:	4621      	mov	r1, r4
 8002b06:	a34c      	add	r3, pc, #304	; (adr r3, 8002c38 <main+0x1d08>)
 8002b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0c:	f7fd ffee 	bl	8000aec <__aeabi_dcmplt>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d046      	beq.n	8002ba4 <main+0x1c74>
						      			 VoltLow_Square =VoltLow_Square +0.1;
 8002b16:	4b52      	ldr	r3, [pc, #328]	; (8002c60 <main+0x1d30>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7fd fd1c 	bl	8000558 <__aeabi_f2d>
 8002b20:	a343      	add	r3, pc, #268	; (adr r3, 8002c30 <main+0x1d00>)
 8002b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b26:	f7fd fbb9 	bl	800029c <__adddf3>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	460c      	mov	r4, r1
 8002b2e:	4618      	mov	r0, r3
 8002b30:	4621      	mov	r1, r4
 8002b32:	f7fe f82b 	bl	8000b8c <__aeabi_d2f>
 8002b36:	4602      	mov	r2, r0
 8002b38:	4b49      	ldr	r3, [pc, #292]	; (8002c60 <main+0x1d30>)
 8002b3a:	601a      	str	r2, [r3, #0]
						      			t=VoltLow_Square*10;
 8002b3c:	4b48      	ldr	r3, [pc, #288]	; (8002c60 <main+0x1d30>)
 8002b3e:	edd3 7a00 	vldr	s15, [r3]
 8002b42:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002b46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b4e:	ee17 2a90 	vmov	r2, s15
 8002b52:	4b3c      	ldr	r3, [pc, #240]	; (8002c44 <main+0x1d14>)
 8002b54:	601a      	str	r2, [r3, #0]
						      			sprintf(TxDataBuffer,"VoltLow_Square is [%d.%d] V \r\n" ,t/10,t%10);
 8002b56:	4b3b      	ldr	r3, [pc, #236]	; (8002c44 <main+0x1d14>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a3b      	ldr	r2, [pc, #236]	; (8002c48 <main+0x1d18>)
 8002b5c:	fb82 1203 	smull	r1, r2, r2, r3
 8002b60:	1092      	asrs	r2, r2, #2
 8002b62:	17db      	asrs	r3, r3, #31
 8002b64:	1ad0      	subs	r0, r2, r3
 8002b66:	4b37      	ldr	r3, [pc, #220]	; (8002c44 <main+0x1d14>)
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	4b37      	ldr	r3, [pc, #220]	; (8002c48 <main+0x1d18>)
 8002b6c:	fb83 1302 	smull	r1, r3, r3, r2
 8002b70:	1099      	asrs	r1, r3, #2
 8002b72:	17d3      	asrs	r3, r2, #31
 8002b74:	1ac9      	subs	r1, r1, r3
 8002b76:	460b      	mov	r3, r1
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	1ad1      	subs	r1, r2, r3
 8002b80:	460b      	mov	r3, r1
 8002b82:	4602      	mov	r2, r0
 8002b84:	4937      	ldr	r1, [pc, #220]	; (8002c64 <main+0x1d34>)
 8002b86:	4832      	ldr	r0, [pc, #200]	; (8002c50 <main+0x1d20>)
 8002b88:	f005 fafe 	bl	8008188 <siprintf>
						      			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002b8c:	4830      	ldr	r0, [pc, #192]	; (8002c50 <main+0x1d20>)
 8002b8e:	f7fd fb27 	bl	80001e0 <strlen>
 8002b92:	4603      	mov	r3, r0
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b9a:	492d      	ldr	r1, [pc, #180]	; (8002c50 <main+0x1d20>)
 8002b9c:	482d      	ldr	r0, [pc, #180]	; (8002c54 <main+0x1d24>)
 8002b9e:	f004 fbc0 	bl	8007322 <HAL_UART_Transmit>
 8002ba2:	e03e      	b.n	8002c22 <main+0x1cf2>
						      				}
						      			else if (VoltLow_Square+0.1>=3.3)
 8002ba4:	4b2e      	ldr	r3, [pc, #184]	; (8002c60 <main+0x1d30>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7fd fcd5 	bl	8000558 <__aeabi_f2d>
 8002bae:	a320      	add	r3, pc, #128	; (adr r3, 8002c30 <main+0x1d00>)
 8002bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb4:	f7fd fb72 	bl	800029c <__adddf3>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	460c      	mov	r4, r1
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	4621      	mov	r1, r4
 8002bc0:	a31d      	add	r3, pc, #116	; (adr r3, 8002c38 <main+0x1d08>)
 8002bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc6:	f7fd ffa5 	bl	8000b14 <__aeabi_dcmpge>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d028      	beq.n	8002c22 <main+0x1cf2>
						      			{
						      			VoltLow_Square =3.3;
 8002bd0:	4b23      	ldr	r3, [pc, #140]	; (8002c60 <main+0x1d30>)
 8002bd2:	4a25      	ldr	r2, [pc, #148]	; (8002c68 <main+0x1d38>)
 8002bd4:	601a      	str	r2, [r3, #0]
						      			sprintf(TxDataBuffer,"Maximum VoltLow_Squareis 3.3 V \r\n" ,t/10,t%10);
 8002bd6:	4b1b      	ldr	r3, [pc, #108]	; (8002c44 <main+0x1d14>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a1b      	ldr	r2, [pc, #108]	; (8002c48 <main+0x1d18>)
 8002bdc:	fb82 1203 	smull	r1, r2, r2, r3
 8002be0:	1092      	asrs	r2, r2, #2
 8002be2:	17db      	asrs	r3, r3, #31
 8002be4:	1ad0      	subs	r0, r2, r3
 8002be6:	4b17      	ldr	r3, [pc, #92]	; (8002c44 <main+0x1d14>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	4b17      	ldr	r3, [pc, #92]	; (8002c48 <main+0x1d18>)
 8002bec:	fb83 1302 	smull	r1, r3, r3, r2
 8002bf0:	1099      	asrs	r1, r3, #2
 8002bf2:	17d3      	asrs	r3, r2, #31
 8002bf4:	1ac9      	subs	r1, r1, r3
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	1ad1      	subs	r1, r2, r3
 8002c00:	460b      	mov	r3, r1
 8002c02:	4602      	mov	r2, r0
 8002c04:	4919      	ldr	r1, [pc, #100]	; (8002c6c <main+0x1d3c>)
 8002c06:	4812      	ldr	r0, [pc, #72]	; (8002c50 <main+0x1d20>)
 8002c08:	f005 fabe 	bl	8008188 <siprintf>
						      			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002c0c:	4810      	ldr	r0, [pc, #64]	; (8002c50 <main+0x1d20>)
 8002c0e:	f7fd fae7 	bl	80001e0 <strlen>
 8002c12:	4603      	mov	r3, r0
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c1a:	490d      	ldr	r1, [pc, #52]	; (8002c50 <main+0x1d20>)
 8002c1c:	480d      	ldr	r0, [pc, #52]	; (8002c54 <main+0x1d24>)
 8002c1e:	f004 fb80 	bl	8007322 <HAL_UART_Transmit>
						      			 }
						      			STATE_Display = StateDisplay_MenuSquare_Print;
 8002c22:	4b0e      	ldr	r3, [pc, #56]	; (8002c5c <main+0x1d2c>)
 8002c24:	2228      	movs	r2, #40	; 0x28
 8002c26:	701a      	strb	r2, [r3, #0]
						      			break;
 8002c28:	e175      	b.n	8002f16 <main+0x1fe6>
 8002c2a:	bf00      	nop
 8002c2c:	f3af 8000 	nop.w
 8002c30:	9999999a 	.word	0x9999999a
 8002c34:	3fb99999 	.word	0x3fb99999
 8002c38:	66666666 	.word	0x66666666
 8002c3c:	400a6666 	.word	0x400a6666
 8002c40:	2000000c 	.word	0x2000000c
 8002c44:	200001b4 	.word	0x200001b4
 8002c48:	66666667 	.word	0x66666667
 8002c4c:	08009f68 	.word	0x08009f68
 8002c50:	200000a4 	.word	0x200000a4
 8002c54:	200003a0 	.word	0x200003a0
 8002c58:	08009fac 	.word	0x08009fac
 8002c5c:	200001a4 	.word	0x200001a4
 8002c60:	200001f8 	.word	0x200001f8
 8002c64:	08009fcc 	.word	0x08009fcc
 8002c68:	40533333 	.word	0x40533333
 8002c6c:	08009fec 	.word	0x08009fec
						      			 case 'k':// -V Low
						      				if (VoltLow_Square -0.1 >0){
 8002c70:	4b9b      	ldr	r3, [pc, #620]	; (8002ee0 <main+0x1fb0>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7fd fc6f 	bl	8000558 <__aeabi_f2d>
 8002c7a:	a397      	add	r3, pc, #604	; (adr r3, 8002ed8 <main+0x1fa8>)
 8002c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c80:	f7fd fb0a 	bl	8000298 <__aeabi_dsub>
 8002c84:	4603      	mov	r3, r0
 8002c86:	460c      	mov	r4, r1
 8002c88:	4618      	mov	r0, r3
 8002c8a:	4621      	mov	r1, r4
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	f7fd ff48 	bl	8000b28 <__aeabi_dcmpgt>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d046      	beq.n	8002d2c <main+0x1dfc>
						      			 VoltLow_Square =VoltLow_Square -0.1;
 8002c9e:	4b90      	ldr	r3, [pc, #576]	; (8002ee0 <main+0x1fb0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fd fc58 	bl	8000558 <__aeabi_f2d>
 8002ca8:	a38b      	add	r3, pc, #556	; (adr r3, 8002ed8 <main+0x1fa8>)
 8002caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cae:	f7fd faf3 	bl	8000298 <__aeabi_dsub>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	460c      	mov	r4, r1
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	4621      	mov	r1, r4
 8002cba:	f7fd ff67 	bl	8000b8c <__aeabi_d2f>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	4b87      	ldr	r3, [pc, #540]	; (8002ee0 <main+0x1fb0>)
 8002cc2:	601a      	str	r2, [r3, #0]
						      			t=VoltLow_Square*10;
 8002cc4:	4b86      	ldr	r3, [pc, #536]	; (8002ee0 <main+0x1fb0>)
 8002cc6:	edd3 7a00 	vldr	s15, [r3]
 8002cca:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002cce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cd6:	ee17 2a90 	vmov	r2, s15
 8002cda:	4b82      	ldr	r3, [pc, #520]	; (8002ee4 <main+0x1fb4>)
 8002cdc:	601a      	str	r2, [r3, #0]
						      			sprintf(TxDataBuffer,"VoltLow_Square is [%d.%d] V \r\n" ,t/10,t%10);
 8002cde:	4b81      	ldr	r3, [pc, #516]	; (8002ee4 <main+0x1fb4>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a81      	ldr	r2, [pc, #516]	; (8002ee8 <main+0x1fb8>)
 8002ce4:	fb82 1203 	smull	r1, r2, r2, r3
 8002ce8:	1092      	asrs	r2, r2, #2
 8002cea:	17db      	asrs	r3, r3, #31
 8002cec:	1ad0      	subs	r0, r2, r3
 8002cee:	4b7d      	ldr	r3, [pc, #500]	; (8002ee4 <main+0x1fb4>)
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	4b7d      	ldr	r3, [pc, #500]	; (8002ee8 <main+0x1fb8>)
 8002cf4:	fb83 1302 	smull	r1, r3, r3, r2
 8002cf8:	1099      	asrs	r1, r3, #2
 8002cfa:	17d3      	asrs	r3, r2, #31
 8002cfc:	1ac9      	subs	r1, r1, r3
 8002cfe:	460b      	mov	r3, r1
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	1ad1      	subs	r1, r2, r3
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	4977      	ldr	r1, [pc, #476]	; (8002eec <main+0x1fbc>)
 8002d0e:	4878      	ldr	r0, [pc, #480]	; (8002ef0 <main+0x1fc0>)
 8002d10:	f005 fa3a 	bl	8008188 <siprintf>
						      			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002d14:	4876      	ldr	r0, [pc, #472]	; (8002ef0 <main+0x1fc0>)
 8002d16:	f7fd fa63 	bl	80001e0 <strlen>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d22:	4973      	ldr	r1, [pc, #460]	; (8002ef0 <main+0x1fc0>)
 8002d24:	4873      	ldr	r0, [pc, #460]	; (8002ef4 <main+0x1fc4>)
 8002d26:	f004 fafc 	bl	8007322 <HAL_UART_Transmit>
 8002d2a:	e040      	b.n	8002dae <main+0x1e7e>
						      				}
						      			 else if (VoltLow_Square -0.1 <=0)
 8002d2c:	4b6c      	ldr	r3, [pc, #432]	; (8002ee0 <main+0x1fb0>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fd fc11 	bl	8000558 <__aeabi_f2d>
 8002d36:	a368      	add	r3, pc, #416	; (adr r3, 8002ed8 <main+0x1fa8>)
 8002d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3c:	f7fd faac 	bl	8000298 <__aeabi_dsub>
 8002d40:	4603      	mov	r3, r0
 8002d42:	460c      	mov	r4, r1
 8002d44:	4618      	mov	r0, r3
 8002d46:	4621      	mov	r1, r4
 8002d48:	f04f 0200 	mov.w	r2, #0
 8002d4c:	f04f 0300 	mov.w	r3, #0
 8002d50:	f7fd fed6 	bl	8000b00 <__aeabi_dcmple>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d029      	beq.n	8002dae <main+0x1e7e>
						      			{
						      			VoltLow_Square=0;
 8002d5a:	4b61      	ldr	r3, [pc, #388]	; (8002ee0 <main+0x1fb0>)
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]
						      			sprintf(TxDataBuffer,"Lower VoltLow_Square is 0 V \r\n" ,t/10,t%10);
 8002d62:	4b60      	ldr	r3, [pc, #384]	; (8002ee4 <main+0x1fb4>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a60      	ldr	r2, [pc, #384]	; (8002ee8 <main+0x1fb8>)
 8002d68:	fb82 1203 	smull	r1, r2, r2, r3
 8002d6c:	1092      	asrs	r2, r2, #2
 8002d6e:	17db      	asrs	r3, r3, #31
 8002d70:	1ad0      	subs	r0, r2, r3
 8002d72:	4b5c      	ldr	r3, [pc, #368]	; (8002ee4 <main+0x1fb4>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	4b5c      	ldr	r3, [pc, #368]	; (8002ee8 <main+0x1fb8>)
 8002d78:	fb83 1302 	smull	r1, r3, r3, r2
 8002d7c:	1099      	asrs	r1, r3, #2
 8002d7e:	17d3      	asrs	r3, r2, #31
 8002d80:	1ac9      	subs	r1, r1, r3
 8002d82:	460b      	mov	r3, r1
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	440b      	add	r3, r1
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	1ad1      	subs	r1, r2, r3
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	4602      	mov	r2, r0
 8002d90:	4959      	ldr	r1, [pc, #356]	; (8002ef8 <main+0x1fc8>)
 8002d92:	4857      	ldr	r0, [pc, #348]	; (8002ef0 <main+0x1fc0>)
 8002d94:	f005 f9f8 	bl	8008188 <siprintf>
						      			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002d98:	4855      	ldr	r0, [pc, #340]	; (8002ef0 <main+0x1fc0>)
 8002d9a:	f7fd fa21 	bl	80001e0 <strlen>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002da6:	4952      	ldr	r1, [pc, #328]	; (8002ef0 <main+0x1fc0>)
 8002da8:	4852      	ldr	r0, [pc, #328]	; (8002ef4 <main+0x1fc4>)
 8002daa:	f004 faba 	bl	8007322 <HAL_UART_Transmit>
						      			}
						      			STATE_Display = StateDisplay_MenuSquare_Print;
 8002dae:	4b53      	ldr	r3, [pc, #332]	; (8002efc <main+0x1fcc>)
 8002db0:	2228      	movs	r2, #40	; 0x28
 8002db2:	701a      	strb	r2, [r3, #0]
						      			break;
 8002db4:	e0af      	b.n	8002f16 <main+0x1fe6>
						      			 case'l':

						      				 if(duty+10 <100){
 8002db6:	4b52      	ldr	r3, [pc, #328]	; (8002f00 <main+0x1fd0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	330a      	adds	r3, #10
 8002dbc:	2b63      	cmp	r3, #99	; 0x63
 8002dbe:	dc17      	bgt.n	8002df0 <main+0x1ec0>
						      				 duty=duty+10;
 8002dc0:	4b4f      	ldr	r3, [pc, #316]	; (8002f00 <main+0x1fd0>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	330a      	adds	r3, #10
 8002dc6:	4a4e      	ldr	r2, [pc, #312]	; (8002f00 <main+0x1fd0>)
 8002dc8:	6013      	str	r3, [r2, #0]
						      				sprintf(TxDataBuffer," duty is %d \r\n",duty);
 8002dca:	4b4d      	ldr	r3, [pc, #308]	; (8002f00 <main+0x1fd0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	494c      	ldr	r1, [pc, #304]	; (8002f04 <main+0x1fd4>)
 8002dd2:	4847      	ldr	r0, [pc, #284]	; (8002ef0 <main+0x1fc0>)
 8002dd4:	f005 f9d8 	bl	8008188 <siprintf>
						      				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002dd8:	4845      	ldr	r0, [pc, #276]	; (8002ef0 <main+0x1fc0>)
 8002dda:	f7fd fa01 	bl	80001e0 <strlen>
 8002dde:	4603      	mov	r3, r0
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002de6:	4942      	ldr	r1, [pc, #264]	; (8002ef0 <main+0x1fc0>)
 8002de8:	4842      	ldr	r0, [pc, #264]	; (8002ef4 <main+0x1fc4>)
 8002dea:	f004 fa9a 	bl	8007322 <HAL_UART_Transmit>
 8002dee:	e01a      	b.n	8002e26 <main+0x1ef6>
						      				 }else if(duty +10  >= 100){
 8002df0:	4b43      	ldr	r3, [pc, #268]	; (8002f00 <main+0x1fd0>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	330a      	adds	r3, #10
 8002df6:	2b63      	cmp	r3, #99	; 0x63
 8002df8:	dd15      	ble.n	8002e26 <main+0x1ef6>
						      				duty=100;
 8002dfa:	4b41      	ldr	r3, [pc, #260]	; (8002f00 <main+0x1fd0>)
 8002dfc:	2264      	movs	r2, #100	; 0x64
 8002dfe:	601a      	str	r2, [r3, #0]
						      				sprintf(TxDataBuffer,"Maximum duty 100 \r\n");
 8002e00:	4a3b      	ldr	r2, [pc, #236]	; (8002ef0 <main+0x1fc0>)
 8002e02:	4b41      	ldr	r3, [pc, #260]	; (8002f08 <main+0x1fd8>)
 8002e04:	4614      	mov	r4, r2
 8002e06:	461d      	mov	r5, r3
 8002e08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e0c:	682b      	ldr	r3, [r5, #0]
 8002e0e:	6023      	str	r3, [r4, #0]
						      				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002e10:	4837      	ldr	r0, [pc, #220]	; (8002ef0 <main+0x1fc0>)
 8002e12:	f7fd f9e5 	bl	80001e0 <strlen>
 8002e16:	4603      	mov	r3, r0
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e1e:	4934      	ldr	r1, [pc, #208]	; (8002ef0 <main+0x1fc0>)
 8002e20:	4834      	ldr	r0, [pc, #208]	; (8002ef4 <main+0x1fc4>)
 8002e22:	f004 fa7e 	bl	8007322 <HAL_UART_Transmit>
						      				 }
						      				STATE_Display = StateDisplay_MenuSquare_Print;
 8002e26:	4b35      	ldr	r3, [pc, #212]	; (8002efc <main+0x1fcc>)
 8002e28:	2228      	movs	r2, #40	; 0x28
 8002e2a:	701a      	strb	r2, [r3, #0]
						      				break;
 8002e2c:	e073      	b.n	8002f16 <main+0x1fe6>
						      			case'p':
						      				if(duty-10>0){
 8002e2e:	4b34      	ldr	r3, [pc, #208]	; (8002f00 <main+0x1fd0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	3b0a      	subs	r3, #10
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	dd17      	ble.n	8002e68 <main+0x1f38>
						      			 duty=duty-10;
 8002e38:	4b31      	ldr	r3, [pc, #196]	; (8002f00 <main+0x1fd0>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	3b0a      	subs	r3, #10
 8002e3e:	4a30      	ldr	r2, [pc, #192]	; (8002f00 <main+0x1fd0>)
 8002e40:	6013      	str	r3, [r2, #0]
						      			sprintf(TxDataBuffer," duty is %d \r\n",duty);
 8002e42:	4b2f      	ldr	r3, [pc, #188]	; (8002f00 <main+0x1fd0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	461a      	mov	r2, r3
 8002e48:	492e      	ldr	r1, [pc, #184]	; (8002f04 <main+0x1fd4>)
 8002e4a:	4829      	ldr	r0, [pc, #164]	; (8002ef0 <main+0x1fc0>)
 8002e4c:	f005 f99c 	bl	8008188 <siprintf>
						      			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002e50:	4827      	ldr	r0, [pc, #156]	; (8002ef0 <main+0x1fc0>)
 8002e52:	f7fd f9c5 	bl	80001e0 <strlen>
 8002e56:	4603      	mov	r3, r0
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e5e:	4924      	ldr	r1, [pc, #144]	; (8002ef0 <main+0x1fc0>)
 8002e60:	4824      	ldr	r0, [pc, #144]	; (8002ef4 <main+0x1fc4>)
 8002e62:	f004 fa5e 	bl	8007322 <HAL_UART_Transmit>
 8002e66:	e018      	b.n	8002e9a <main+0x1f6a>
						      				}
						      			else if(duty -10 <= 0){
 8002e68:	4b25      	ldr	r3, [pc, #148]	; (8002f00 <main+0x1fd0>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3b0a      	subs	r3, #10
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	dc13      	bgt.n	8002e9a <main+0x1f6a>
						      			duty=0;
 8002e72:	4b23      	ldr	r3, [pc, #140]	; (8002f00 <main+0x1fd0>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
						      			sprintf(TxDataBuffer,"Lower duty 0 \r\n");
 8002e78:	4a1d      	ldr	r2, [pc, #116]	; (8002ef0 <main+0x1fc0>)
 8002e7a:	4b24      	ldr	r3, [pc, #144]	; (8002f0c <main+0x1fdc>)
 8002e7c:	4614      	mov	r4, r2
 8002e7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
						      			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002e84:	481a      	ldr	r0, [pc, #104]	; (8002ef0 <main+0x1fc0>)
 8002e86:	f7fd f9ab 	bl	80001e0 <strlen>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e92:	4917      	ldr	r1, [pc, #92]	; (8002ef0 <main+0x1fc0>)
 8002e94:	4817      	ldr	r0, [pc, #92]	; (8002ef4 <main+0x1fc4>)
 8002e96:	f004 fa44 	bl	8007322 <HAL_UART_Transmit>
						      			}
						      				STATE_Display = StateDisplay_MenuSquare_Print;
 8002e9a:	4b18      	ldr	r3, [pc, #96]	; (8002efc <main+0x1fcc>)
 8002e9c:	2228      	movs	r2, #40	; 0x28
 8002e9e:	701a      	strb	r2, [r3, #0]
						      				break;
 8002ea0:	e039      	b.n	8002f16 <main+0x1fe6>


						      			default: //show error

						      			 sprintf(TxDataBuffer, "unidentified input \r\n");
 8002ea2:	4a13      	ldr	r2, [pc, #76]	; (8002ef0 <main+0x1fc0>)
 8002ea4:	4b1a      	ldr	r3, [pc, #104]	; (8002f10 <main+0x1fe0>)
 8002ea6:	4614      	mov	r4, r2
 8002ea8:	461d      	mov	r5, r3
 8002eaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002eac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002eae:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002eb2:	6020      	str	r0, [r4, #0]
 8002eb4:	3404      	adds	r4, #4
 8002eb6:	8021      	strh	r1, [r4, #0]
						      			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002eb8:	480d      	ldr	r0, [pc, #52]	; (8002ef0 <main+0x1fc0>)
 8002eba:	f7fd f991 	bl	80001e0 <strlen>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ec6:	490a      	ldr	r1, [pc, #40]	; (8002ef0 <main+0x1fc0>)
 8002ec8:	480a      	ldr	r0, [pc, #40]	; (8002ef4 <main+0x1fc4>)
 8002eca:	f004 fa2a 	bl	8007322 <HAL_UART_Transmit>
						      			 STATE_Display = StateDisplay_MenuSquare_Print;
 8002ece:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <main+0x1fcc>)
 8002ed0:	2228      	movs	r2, #40	; 0x28
 8002ed2:	701a      	strb	r2, [r3, #0]
						      			break;
 8002ed4:	e01f      	b.n	8002f16 <main+0x1fe6>
 8002ed6:	bf00      	nop
 8002ed8:	9999999a 	.word	0x9999999a
 8002edc:	3fb99999 	.word	0x3fb99999
 8002ee0:	200001f8 	.word	0x200001f8
 8002ee4:	200001b4 	.word	0x200001b4
 8002ee8:	66666667 	.word	0x66666667
 8002eec:	08009fcc 	.word	0x08009fcc
 8002ef0:	200000a4 	.word	0x200000a4
 8002ef4:	200003a0 	.word	0x200003a0
 8002ef8:	0800a010 	.word	0x0800a010
 8002efc:	200001a4 	.word	0x200001a4
 8002f00:	20000010 	.word	0x20000010
 8002f04:	0800a030 	.word	0x0800a030
 8002f08:	0800a040 	.word	0x0800a040
 8002f0c:	0800a054 	.word	0x0800a054
 8002f10:	08009a38 	.word	0x08009a38
						      			 break;
 8002f14:	bf00      	nop

						      		}
						      	 break;
 8002f16:	bf00      	nop


						    }

			// เเสดงกราฟ
			  if (micros() - timestamp >= 100)
 8002f18:	f000 ff5c 	bl	8003dd4 <micros>
 8002f1c:	460a      	mov	r2, r1
 8002f1e:	4601      	mov	r1, r0
 8002f20:	4b91      	ldr	r3, [pc, #580]	; (8003168 <main+0x2238>)
 8002f22:	e9d3 5600 	ldrd	r5, r6, [r3]
 8002f26:	460b      	mov	r3, r1
 8002f28:	4614      	mov	r4, r2
 8002f2a:	1b5b      	subs	r3, r3, r5
 8002f2c:	eb64 0406 	sbc.w	r4, r4, r6
 8002f30:	2c00      	cmp	r4, #0
 8002f32:	bf08      	it	eq
 8002f34:	2b64      	cmpeq	r3, #100	; 0x64
 8002f36:	f0c0 8465 	bcc.w	8003804 <main+0x28d4>
					{
				  timestamp = micros();
 8002f3a:	f000 ff4b 	bl	8003dd4 <micros>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	460c      	mov	r4, r1
 8002f42:	4a89      	ldr	r2, [pc, #548]	; (8003168 <main+0x2238>)
 8002f44:	e9c2 3400 	strd	r3, r4, [r2]
				  			if(a == 1)
 8002f48:	4b88      	ldr	r3, [pc, #544]	; (800316c <main+0x223c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	f040 8435 	bne.w	80037bc <main+0x288c>
				  			{

				   if(mode == 1)
 8002f52:	4b87      	ldr	r3, [pc, #540]	; (8003170 <main+0x2240>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	f040 81da 	bne.w	8003310 <main+0x23e0>
				  				{

					   Amplitude_sawtooth = ((VoltHigh_sawtooth-VoltLow_sawtooth)/3.3)*4095;
 8002f5c:	4b85      	ldr	r3, [pc, #532]	; (8003174 <main+0x2244>)
 8002f5e:	ed93 7a00 	vldr	s14, [r3]
 8002f62:	4b85      	ldr	r3, [pc, #532]	; (8003178 <main+0x2248>)
 8002f64:	edd3 7a00 	vldr	s15, [r3]
 8002f68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f6c:	ee17 0a90 	vmov	r0, s15
 8002f70:	f7fd faf2 	bl	8000558 <__aeabi_f2d>
 8002f74:	a376      	add	r3, pc, #472	; (adr r3, 8003150 <main+0x2220>)
 8002f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7a:	f7fd fc6f 	bl	800085c <__aeabi_ddiv>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	460c      	mov	r4, r1
 8002f82:	4618      	mov	r0, r3
 8002f84:	4621      	mov	r1, r4
 8002f86:	a374      	add	r3, pc, #464	; (adr r3, 8003158 <main+0x2228>)
 8002f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8c:	f7fd fb3c 	bl	8000608 <__aeabi_dmul>
 8002f90:	4603      	mov	r3, r0
 8002f92:	460c      	mov	r4, r1
 8002f94:	4618      	mov	r0, r3
 8002f96:	4621      	mov	r1, r4
 8002f98:	f7fd fdf8 	bl	8000b8c <__aeabi_d2f>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4b77      	ldr	r3, [pc, #476]	; (800317c <main+0x224c>)
 8002fa0:	601a      	str	r2, [r3, #0]

				  					if(F_sawtooth == 0 )
 8002fa2:	4b77      	ldr	r3, [pc, #476]	; (8003180 <main+0x2250>)
 8002fa4:	edd3 7a00 	vldr	s15, [r3]
 8002fa8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fb0:	d10b      	bne.n	8002fca <main+0x209a>
				  					{

				  						NormalizedataOut = dataOut;
 8002fb2:	4b74      	ldr	r3, [pc, #464]	; (8003184 <main+0x2254>)
 8002fb4:	edd3 7a00 	vldr	s15, [r3]
 8002fb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fbc:	ee17 3a90 	vmov	r3, s15
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	4b71      	ldr	r3, [pc, #452]	; (8003188 <main+0x2258>)
 8002fc4:	801a      	strh	r2, [r3, #0]
 8002fc6:	f000 bc07 	b.w	80037d8 <main+0x28a8>

				  					}
				  					else
				  					{
				  						if(Status_sawtooth == 0)
 8002fca:	4b70      	ldr	r3, [pc, #448]	; (800318c <main+0x225c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f040 80de 	bne.w	8003190 <main+0x2260>
				  						{
				  							dataOut += (Amplitude_sawtooth / (1/F_sawtooth))*0.0001 ;
 8002fd4:	4b6b      	ldr	r3, [pc, #428]	; (8003184 <main+0x2254>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7fd fabd 	bl	8000558 <__aeabi_f2d>
 8002fde:	4604      	mov	r4, r0
 8002fe0:	460d      	mov	r5, r1
 8002fe2:	4b66      	ldr	r3, [pc, #408]	; (800317c <main+0x224c>)
 8002fe4:	ed93 7a00 	vldr	s14, [r3]
 8002fe8:	4b65      	ldr	r3, [pc, #404]	; (8003180 <main+0x2250>)
 8002fea:	edd3 6a00 	vldr	s13, [r3]
 8002fee:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002ff2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002ff6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002ffa:	ee16 0a90 	vmov	r0, s13
 8002ffe:	f7fd faab 	bl	8000558 <__aeabi_f2d>
 8003002:	a357      	add	r3, pc, #348	; (adr r3, 8003160 <main+0x2230>)
 8003004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003008:	f7fd fafe 	bl	8000608 <__aeabi_dmul>
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	4620      	mov	r0, r4
 8003012:	4629      	mov	r1, r5
 8003014:	f7fd f942 	bl	800029c <__adddf3>
 8003018:	4603      	mov	r3, r0
 800301a:	460c      	mov	r4, r1
 800301c:	4618      	mov	r0, r3
 800301e:	4621      	mov	r1, r4
 8003020:	f7fd fdb4 	bl	8000b8c <__aeabi_d2f>
 8003024:	4602      	mov	r2, r0
 8003026:	4b57      	ldr	r3, [pc, #348]	; (8003184 <main+0x2254>)
 8003028:	601a      	str	r2, [r3, #0]
				  							if(dataOut >= ((VoltHigh_sawtooth/3.3)*4095.0))
 800302a:	4b56      	ldr	r3, [pc, #344]	; (8003184 <main+0x2254>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f7fd fa92 	bl	8000558 <__aeabi_f2d>
 8003034:	4604      	mov	r4, r0
 8003036:	460d      	mov	r5, r1
 8003038:	4b4e      	ldr	r3, [pc, #312]	; (8003174 <main+0x2244>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4618      	mov	r0, r3
 800303e:	f7fd fa8b 	bl	8000558 <__aeabi_f2d>
 8003042:	a343      	add	r3, pc, #268	; (adr r3, 8003150 <main+0x2220>)
 8003044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003048:	f7fd fc08 	bl	800085c <__aeabi_ddiv>
 800304c:	4602      	mov	r2, r0
 800304e:	460b      	mov	r3, r1
 8003050:	4610      	mov	r0, r2
 8003052:	4619      	mov	r1, r3
 8003054:	a340      	add	r3, pc, #256	; (adr r3, 8003158 <main+0x2228>)
 8003056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305a:	f7fd fad5 	bl	8000608 <__aeabi_dmul>
 800305e:	4602      	mov	r2, r0
 8003060:	460b      	mov	r3, r1
 8003062:	4620      	mov	r0, r4
 8003064:	4629      	mov	r1, r5
 8003066:	f7fd fd55 	bl	8000b14 <__aeabi_dcmpge>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d061      	beq.n	8003134 <main+0x2204>
				  							{
				  								dataOut = ((VoltHigh_sawtooth/3.3)*4095.0);
 8003070:	4b40      	ldr	r3, [pc, #256]	; (8003174 <main+0x2244>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f7fd fa6f 	bl	8000558 <__aeabi_f2d>
 800307a:	a335      	add	r3, pc, #212	; (adr r3, 8003150 <main+0x2220>)
 800307c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003080:	f7fd fbec 	bl	800085c <__aeabi_ddiv>
 8003084:	4603      	mov	r3, r0
 8003086:	460c      	mov	r4, r1
 8003088:	4618      	mov	r0, r3
 800308a:	4621      	mov	r1, r4
 800308c:	a332      	add	r3, pc, #200	; (adr r3, 8003158 <main+0x2228>)
 800308e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003092:	f7fd fab9 	bl	8000608 <__aeabi_dmul>
 8003096:	4603      	mov	r3, r0
 8003098:	460c      	mov	r4, r1
 800309a:	4618      	mov	r0, r3
 800309c:	4621      	mov	r1, r4
 800309e:	f7fd fd75 	bl	8000b8c <__aeabi_d2f>
 80030a2:	4602      	mov	r2, r0
 80030a4:	4b37      	ldr	r3, [pc, #220]	; (8003184 <main+0x2254>)
 80030a6:	601a      	str	r2, [r3, #0]
				  								NormalizedataOut = dataOut;
 80030a8:	4b36      	ldr	r3, [pc, #216]	; (8003184 <main+0x2254>)
 80030aa:	edd3 7a00 	vldr	s15, [r3]
 80030ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030b2:	ee17 3a90 	vmov	r3, s15
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	4b33      	ldr	r3, [pc, #204]	; (8003188 <main+0x2258>)
 80030ba:	801a      	strh	r2, [r3, #0]
				  								dataOut = ((VoltLow_sawtooth/3.3)*4095.0) - ((Amplitude_sawtooth / (1/F_sawtooth))*0.0001 );
 80030bc:	4b2e      	ldr	r3, [pc, #184]	; (8003178 <main+0x2248>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fd fa49 	bl	8000558 <__aeabi_f2d>
 80030c6:	a322      	add	r3, pc, #136	; (adr r3, 8003150 <main+0x2220>)
 80030c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030cc:	f7fd fbc6 	bl	800085c <__aeabi_ddiv>
 80030d0:	4603      	mov	r3, r0
 80030d2:	460c      	mov	r4, r1
 80030d4:	4618      	mov	r0, r3
 80030d6:	4621      	mov	r1, r4
 80030d8:	a31f      	add	r3, pc, #124	; (adr r3, 8003158 <main+0x2228>)
 80030da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030de:	f7fd fa93 	bl	8000608 <__aeabi_dmul>
 80030e2:	4603      	mov	r3, r0
 80030e4:	460c      	mov	r4, r1
 80030e6:	4625      	mov	r5, r4
 80030e8:	461c      	mov	r4, r3
 80030ea:	4b24      	ldr	r3, [pc, #144]	; (800317c <main+0x224c>)
 80030ec:	ed93 7a00 	vldr	s14, [r3]
 80030f0:	4b23      	ldr	r3, [pc, #140]	; (8003180 <main+0x2250>)
 80030f2:	edd3 6a00 	vldr	s13, [r3]
 80030f6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80030fa:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80030fe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003102:	ee16 0a90 	vmov	r0, s13
 8003106:	f7fd fa27 	bl	8000558 <__aeabi_f2d>
 800310a:	a315      	add	r3, pc, #84	; (adr r3, 8003160 <main+0x2230>)
 800310c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003110:	f7fd fa7a 	bl	8000608 <__aeabi_dmul>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4620      	mov	r0, r4
 800311a:	4629      	mov	r1, r5
 800311c:	f7fd f8bc 	bl	8000298 <__aeabi_dsub>
 8003120:	4603      	mov	r3, r0
 8003122:	460c      	mov	r4, r1
 8003124:	4618      	mov	r0, r3
 8003126:	4621      	mov	r1, r4
 8003128:	f7fd fd30 	bl	8000b8c <__aeabi_d2f>
 800312c:	4602      	mov	r2, r0
 800312e:	4b15      	ldr	r3, [pc, #84]	; (8003184 <main+0x2254>)
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	e351      	b.n	80037d8 <main+0x28a8>
				  							}
				  							else
				  							{
				  								NormalizedataOut = dataOut;
 8003134:	4b13      	ldr	r3, [pc, #76]	; (8003184 <main+0x2254>)
 8003136:	edd3 7a00 	vldr	s15, [r3]
 800313a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800313e:	ee17 3a90 	vmov	r3, s15
 8003142:	b29a      	uxth	r2, r3
 8003144:	4b10      	ldr	r3, [pc, #64]	; (8003188 <main+0x2258>)
 8003146:	801a      	strh	r2, [r3, #0]
 8003148:	e346      	b.n	80037d8 <main+0x28a8>
 800314a:	bf00      	nop
 800314c:	f3af 8000 	nop.w
 8003150:	66666666 	.word	0x66666666
 8003154:	400a6666 	.word	0x400a6666
 8003158:	00000000 	.word	0x00000000
 800315c:	40affe00 	.word	0x40affe00
 8003160:	eb1c432d 	.word	0xeb1c432d
 8003164:	3f1a36e2 	.word	0x3f1a36e2
 8003168:	20000208 	.word	0x20000208
 800316c:	200001ac 	.word	0x200001ac
 8003170:	200001b8 	.word	0x200001b8
 8003174:	20000004 	.word	0x20000004
 8003178:	200001e4 	.word	0x200001e4
 800317c:	200001e0 	.word	0x200001e0
 8003180:	200001d8 	.word	0x200001d8
 8003184:	200001d0 	.word	0x200001d0
 8003188:	200001d4 	.word	0x200001d4
 800318c:	200001dc 	.word	0x200001dc
				  							}
				  						}
				  						else if(Status_sawtooth == 1)
 8003190:	4b89      	ldr	r3, [pc, #548]	; (80033b8 <main+0x2488>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b01      	cmp	r3, #1
 8003196:	f040 831f 	bne.w	80037d8 <main+0x28a8>
				  						{
				  							dataOut -= (Amplitude_sawtooth / (1/F_sawtooth))*0.0001;
 800319a:	4b88      	ldr	r3, [pc, #544]	; (80033bc <main+0x248c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fd f9da 	bl	8000558 <__aeabi_f2d>
 80031a4:	4604      	mov	r4, r0
 80031a6:	460d      	mov	r5, r1
 80031a8:	4b85      	ldr	r3, [pc, #532]	; (80033c0 <main+0x2490>)
 80031aa:	ed93 7a00 	vldr	s14, [r3]
 80031ae:	4b85      	ldr	r3, [pc, #532]	; (80033c4 <main+0x2494>)
 80031b0:	edd3 6a00 	vldr	s13, [r3]
 80031b4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80031b8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80031bc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80031c0:	ee16 0a90 	vmov	r0, s13
 80031c4:	f7fd f9c8 	bl	8000558 <__aeabi_f2d>
 80031c8:	a375      	add	r3, pc, #468	; (adr r3, 80033a0 <main+0x2470>)
 80031ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ce:	f7fd fa1b 	bl	8000608 <__aeabi_dmul>
 80031d2:	4602      	mov	r2, r0
 80031d4:	460b      	mov	r3, r1
 80031d6:	4620      	mov	r0, r4
 80031d8:	4629      	mov	r1, r5
 80031da:	f7fd f85d 	bl	8000298 <__aeabi_dsub>
 80031de:	4603      	mov	r3, r0
 80031e0:	460c      	mov	r4, r1
 80031e2:	4618      	mov	r0, r3
 80031e4:	4621      	mov	r1, r4
 80031e6:	f7fd fcd1 	bl	8000b8c <__aeabi_d2f>
 80031ea:	4602      	mov	r2, r0
 80031ec:	4b73      	ldr	r3, [pc, #460]	; (80033bc <main+0x248c>)
 80031ee:	601a      	str	r2, [r3, #0]
				  							if(dataOut <= ((VoltLow_sawtooth/3.3)*4095.0))
 80031f0:	4b72      	ldr	r3, [pc, #456]	; (80033bc <main+0x248c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7fd f9af 	bl	8000558 <__aeabi_f2d>
 80031fa:	4604      	mov	r4, r0
 80031fc:	460d      	mov	r5, r1
 80031fe:	4b72      	ldr	r3, [pc, #456]	; (80033c8 <main+0x2498>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f7fd f9a8 	bl	8000558 <__aeabi_f2d>
 8003208:	a367      	add	r3, pc, #412	; (adr r3, 80033a8 <main+0x2478>)
 800320a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800320e:	f7fd fb25 	bl	800085c <__aeabi_ddiv>
 8003212:	4602      	mov	r2, r0
 8003214:	460b      	mov	r3, r1
 8003216:	4610      	mov	r0, r2
 8003218:	4619      	mov	r1, r3
 800321a:	a365      	add	r3, pc, #404	; (adr r3, 80033b0 <main+0x2480>)
 800321c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003220:	f7fd f9f2 	bl	8000608 <__aeabi_dmul>
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	4620      	mov	r0, r4
 800322a:	4629      	mov	r1, r5
 800322c:	f7fd fc68 	bl	8000b00 <__aeabi_dcmple>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d061      	beq.n	80032fa <main+0x23ca>
				  							{
				  								dataOut = ((VoltLow_sawtooth/3.3)*4095.0);
 8003236:	4b64      	ldr	r3, [pc, #400]	; (80033c8 <main+0x2498>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7fd f98c 	bl	8000558 <__aeabi_f2d>
 8003240:	a359      	add	r3, pc, #356	; (adr r3, 80033a8 <main+0x2478>)
 8003242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003246:	f7fd fb09 	bl	800085c <__aeabi_ddiv>
 800324a:	4603      	mov	r3, r0
 800324c:	460c      	mov	r4, r1
 800324e:	4618      	mov	r0, r3
 8003250:	4621      	mov	r1, r4
 8003252:	a357      	add	r3, pc, #348	; (adr r3, 80033b0 <main+0x2480>)
 8003254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003258:	f7fd f9d6 	bl	8000608 <__aeabi_dmul>
 800325c:	4603      	mov	r3, r0
 800325e:	460c      	mov	r4, r1
 8003260:	4618      	mov	r0, r3
 8003262:	4621      	mov	r1, r4
 8003264:	f7fd fc92 	bl	8000b8c <__aeabi_d2f>
 8003268:	4602      	mov	r2, r0
 800326a:	4b54      	ldr	r3, [pc, #336]	; (80033bc <main+0x248c>)
 800326c:	601a      	str	r2, [r3, #0]
				  								NormalizedataOut = dataOut;
 800326e:	4b53      	ldr	r3, [pc, #332]	; (80033bc <main+0x248c>)
 8003270:	edd3 7a00 	vldr	s15, [r3]
 8003274:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003278:	ee17 3a90 	vmov	r3, s15
 800327c:	b29a      	uxth	r2, r3
 800327e:	4b53      	ldr	r3, [pc, #332]	; (80033cc <main+0x249c>)
 8003280:	801a      	strh	r2, [r3, #0]
				  								dataOut = ((VoltHigh_sawtooth/3.3)*4095.0) + ((Amplitude_sawtooth/ (1/F_sawtooth))*0.0001 );
 8003282:	4b53      	ldr	r3, [pc, #332]	; (80033d0 <main+0x24a0>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f7fd f966 	bl	8000558 <__aeabi_f2d>
 800328c:	a346      	add	r3, pc, #280	; (adr r3, 80033a8 <main+0x2478>)
 800328e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003292:	f7fd fae3 	bl	800085c <__aeabi_ddiv>
 8003296:	4603      	mov	r3, r0
 8003298:	460c      	mov	r4, r1
 800329a:	4618      	mov	r0, r3
 800329c:	4621      	mov	r1, r4
 800329e:	a344      	add	r3, pc, #272	; (adr r3, 80033b0 <main+0x2480>)
 80032a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a4:	f7fd f9b0 	bl	8000608 <__aeabi_dmul>
 80032a8:	4603      	mov	r3, r0
 80032aa:	460c      	mov	r4, r1
 80032ac:	4625      	mov	r5, r4
 80032ae:	461c      	mov	r4, r3
 80032b0:	4b43      	ldr	r3, [pc, #268]	; (80033c0 <main+0x2490>)
 80032b2:	ed93 7a00 	vldr	s14, [r3]
 80032b6:	4b43      	ldr	r3, [pc, #268]	; (80033c4 <main+0x2494>)
 80032b8:	edd3 6a00 	vldr	s13, [r3]
 80032bc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80032c0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80032c4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80032c8:	ee16 0a90 	vmov	r0, s13
 80032cc:	f7fd f944 	bl	8000558 <__aeabi_f2d>
 80032d0:	a333      	add	r3, pc, #204	; (adr r3, 80033a0 <main+0x2470>)
 80032d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d6:	f7fd f997 	bl	8000608 <__aeabi_dmul>
 80032da:	4602      	mov	r2, r0
 80032dc:	460b      	mov	r3, r1
 80032de:	4620      	mov	r0, r4
 80032e0:	4629      	mov	r1, r5
 80032e2:	f7fc ffdb 	bl	800029c <__adddf3>
 80032e6:	4603      	mov	r3, r0
 80032e8:	460c      	mov	r4, r1
 80032ea:	4618      	mov	r0, r3
 80032ec:	4621      	mov	r1, r4
 80032ee:	f7fd fc4d 	bl	8000b8c <__aeabi_d2f>
 80032f2:	4602      	mov	r2, r0
 80032f4:	4b31      	ldr	r3, [pc, #196]	; (80033bc <main+0x248c>)
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	e26e      	b.n	80037d8 <main+0x28a8>
				  							}
				  							else
				  							{
				  								NormalizedataOut = dataOut;
 80032fa:	4b30      	ldr	r3, [pc, #192]	; (80033bc <main+0x248c>)
 80032fc:	edd3 7a00 	vldr	s15, [r3]
 8003300:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003304:	ee17 3a90 	vmov	r3, s15
 8003308:	b29a      	uxth	r2, r3
 800330a:	4b30      	ldr	r3, [pc, #192]	; (80033cc <main+0x249c>)
 800330c:	801a      	strh	r2, [r3, #0]
 800330e:	e263      	b.n	80037d8 <main+0x28a8>
				  						}
				  					}
				  				}


				   else if(mode == 2)
 8003310:	4b30      	ldr	r3, [pc, #192]	; (80033d4 <main+0x24a4>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b02      	cmp	r3, #2
 8003316:	f040 80f6 	bne.w	8003506 <main+0x25d6>
				  				{

					   Amplitude_sin = (((VoltHigh_sin - VoltLow_sin)/3.3)*4095.0)/2.0;
 800331a:	4b2f      	ldr	r3, [pc, #188]	; (80033d8 <main+0x24a8>)
 800331c:	ed93 7a00 	vldr	s14, [r3]
 8003320:	4b2e      	ldr	r3, [pc, #184]	; (80033dc <main+0x24ac>)
 8003322:	edd3 7a00 	vldr	s15, [r3]
 8003326:	ee77 7a67 	vsub.f32	s15, s14, s15
 800332a:	ee17 0a90 	vmov	r0, s15
 800332e:	f7fd f913 	bl	8000558 <__aeabi_f2d>
 8003332:	a31d      	add	r3, pc, #116	; (adr r3, 80033a8 <main+0x2478>)
 8003334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003338:	f7fd fa90 	bl	800085c <__aeabi_ddiv>
 800333c:	4603      	mov	r3, r0
 800333e:	460c      	mov	r4, r1
 8003340:	4618      	mov	r0, r3
 8003342:	4621      	mov	r1, r4
 8003344:	a31a      	add	r3, pc, #104	; (adr r3, 80033b0 <main+0x2480>)
 8003346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334a:	f7fd f95d 	bl	8000608 <__aeabi_dmul>
 800334e:	4603      	mov	r3, r0
 8003350:	460c      	mov	r4, r1
 8003352:	4618      	mov	r0, r3
 8003354:	4621      	mov	r1, r4
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800335e:	f7fd fa7d 	bl	800085c <__aeabi_ddiv>
 8003362:	4603      	mov	r3, r0
 8003364:	460c      	mov	r4, r1
 8003366:	4618      	mov	r0, r3
 8003368:	4621      	mov	r1, r4
 800336a:	f7fd fc0f 	bl	8000b8c <__aeabi_d2f>
 800336e:	4602      	mov	r2, r0
 8003370:	4b1b      	ldr	r3, [pc, #108]	; (80033e0 <main+0x24b0>)
 8003372:	601a      	str	r2, [r3, #0]

					   					if(F_sin == 0)
 8003374:	4b1b      	ldr	r3, [pc, #108]	; (80033e4 <main+0x24b4>)
 8003376:	edd3 7a00 	vldr	s15, [r3]
 800337a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800337e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003382:	d131      	bne.n	80033e8 <main+0x24b8>
					   					{

					   						NormalizedataOut = dataOut;
 8003384:	4b0d      	ldr	r3, [pc, #52]	; (80033bc <main+0x248c>)
 8003386:	edd3 7a00 	vldr	s15, [r3]
 800338a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800338e:	ee17 3a90 	vmov	r3, s15
 8003392:	b29a      	uxth	r2, r3
 8003394:	4b0d      	ldr	r3, [pc, #52]	; (80033cc <main+0x249c>)
 8003396:	801a      	strh	r2, [r3, #0]
 8003398:	e21e      	b.n	80037d8 <main+0x28a8>
 800339a:	bf00      	nop
 800339c:	f3af 8000 	nop.w
 80033a0:	eb1c432d 	.word	0xeb1c432d
 80033a4:	3f1a36e2 	.word	0x3f1a36e2
 80033a8:	66666666 	.word	0x66666666
 80033ac:	400a6666 	.word	0x400a6666
 80033b0:	00000000 	.word	0x00000000
 80033b4:	40affe00 	.word	0x40affe00
 80033b8:	200001dc 	.word	0x200001dc
 80033bc:	200001d0 	.word	0x200001d0
 80033c0:	200001e0 	.word	0x200001e0
 80033c4:	200001d8 	.word	0x200001d8
 80033c8:	200001e4 	.word	0x200001e4
 80033cc:	200001d4 	.word	0x200001d4
 80033d0:	20000004 	.word	0x20000004
 80033d4:	200001b8 	.word	0x200001b8
 80033d8:	20000008 	.word	0x20000008
 80033dc:	200001f0 	.word	0x200001f0
 80033e0:	200001ec 	.word	0x200001ec
 80033e4:	200001e8 	.word	0x200001e8
					   					}
					   					else
					   					{
					   						dataOut = Amplitude_sin*sin(2*M_PI*F_sin*((micros() - timestampsin)/1000000.0));
 80033e8:	4ba5      	ldr	r3, [pc, #660]	; (8003680 <main+0x2750>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7fd f8b3 	bl	8000558 <__aeabi_f2d>
 80033f2:	4605      	mov	r5, r0
 80033f4:	460e      	mov	r6, r1
 80033f6:	4ba3      	ldr	r3, [pc, #652]	; (8003684 <main+0x2754>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fd f8ac 	bl	8000558 <__aeabi_f2d>
 8003400:	a395      	add	r3, pc, #596	; (adr r3, 8003658 <main+0x2728>)
 8003402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003406:	f7fd f8ff 	bl	8000608 <__aeabi_dmul>
 800340a:	4603      	mov	r3, r0
 800340c:	460c      	mov	r4, r1
 800340e:	4698      	mov	r8, r3
 8003410:	46a1      	mov	r9, r4
 8003412:	f000 fcdf 	bl	8003dd4 <micros>
 8003416:	460a      	mov	r2, r1
 8003418:	4601      	mov	r1, r0
 800341a:	4b9b      	ldr	r3, [pc, #620]	; (8003688 <main+0x2758>)
 800341c:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8003420:	460b      	mov	r3, r1
 8003422:	4614      	mov	r4, r2
 8003424:	ebb3 030b 	subs.w	r3, r3, fp
 8003428:	eb64 040c 	sbc.w	r4, r4, ip
 800342c:	4618      	mov	r0, r3
 800342e:	4621      	mov	r1, r4
 8003430:	f7fd f8b4 	bl	800059c <__aeabi_ul2d>
 8003434:	a38a      	add	r3, pc, #552	; (adr r3, 8003660 <main+0x2730>)
 8003436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343a:	f7fd fa0f 	bl	800085c <__aeabi_ddiv>
 800343e:	4603      	mov	r3, r0
 8003440:	460c      	mov	r4, r1
 8003442:	461a      	mov	r2, r3
 8003444:	4623      	mov	r3, r4
 8003446:	4640      	mov	r0, r8
 8003448:	4649      	mov	r1, r9
 800344a:	f7fd f8dd 	bl	8000608 <__aeabi_dmul>
 800344e:	4603      	mov	r3, r0
 8003450:	460c      	mov	r4, r1
 8003452:	ec44 3b17 	vmov	d7, r3, r4
 8003456:	eeb0 0a47 	vmov.f32	s0, s14
 800345a:	eef0 0a67 	vmov.f32	s1, s15
 800345e:	f005 fa8f 	bl	8008980 <sin>
 8003462:	ec54 3b10 	vmov	r3, r4, d0
 8003466:	461a      	mov	r2, r3
 8003468:	4623      	mov	r3, r4
 800346a:	4628      	mov	r0, r5
 800346c:	4631      	mov	r1, r6
 800346e:	f7fd f8cb 	bl	8000608 <__aeabi_dmul>
 8003472:	4603      	mov	r3, r0
 8003474:	460c      	mov	r4, r1
 8003476:	4618      	mov	r0, r3
 8003478:	4621      	mov	r1, r4
 800347a:	f7fd fb87 	bl	8000b8c <__aeabi_d2f>
 800347e:	4602      	mov	r2, r0
 8003480:	4b82      	ldr	r3, [pc, #520]	; (800368c <main+0x275c>)
 8003482:	601a      	str	r2, [r3, #0]
					   						dataOut += (Amplitude_sin+((VoltLow_sin)/3.3)*4095.0); // shilf graft
 8003484:	4b81      	ldr	r3, [pc, #516]	; (800368c <main+0x275c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f7fd f865 	bl	8000558 <__aeabi_f2d>
 800348e:	4604      	mov	r4, r0
 8003490:	460d      	mov	r5, r1
 8003492:	4b7b      	ldr	r3, [pc, #492]	; (8003680 <main+0x2750>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f7fd f85e 	bl	8000558 <__aeabi_f2d>
 800349c:	4680      	mov	r8, r0
 800349e:	4689      	mov	r9, r1
 80034a0:	4b7b      	ldr	r3, [pc, #492]	; (8003690 <main+0x2760>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7fd f857 	bl	8000558 <__aeabi_f2d>
 80034aa:	a36f      	add	r3, pc, #444	; (adr r3, 8003668 <main+0x2738>)
 80034ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b0:	f7fd f9d4 	bl	800085c <__aeabi_ddiv>
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	4610      	mov	r0, r2
 80034ba:	4619      	mov	r1, r3
 80034bc:	a36c      	add	r3, pc, #432	; (adr r3, 8003670 <main+0x2740>)
 80034be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c2:	f7fd f8a1 	bl	8000608 <__aeabi_dmul>
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4640      	mov	r0, r8
 80034cc:	4649      	mov	r1, r9
 80034ce:	f7fc fee5 	bl	800029c <__adddf3>
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	4620      	mov	r0, r4
 80034d8:	4629      	mov	r1, r5
 80034da:	f7fc fedf 	bl	800029c <__adddf3>
 80034de:	4603      	mov	r3, r0
 80034e0:	460c      	mov	r4, r1
 80034e2:	4618      	mov	r0, r3
 80034e4:	4621      	mov	r1, r4
 80034e6:	f7fd fb51 	bl	8000b8c <__aeabi_d2f>
 80034ea:	4602      	mov	r2, r0
 80034ec:	4b67      	ldr	r3, [pc, #412]	; (800368c <main+0x275c>)
 80034ee:	601a      	str	r2, [r3, #0]
					   						NormalizedataOut = dataOut;
 80034f0:	4b66      	ldr	r3, [pc, #408]	; (800368c <main+0x275c>)
 80034f2:	edd3 7a00 	vldr	s15, [r3]
 80034f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034fa:	ee17 3a90 	vmov	r3, s15
 80034fe:	b29a      	uxth	r2, r3
 8003500:	4b64      	ldr	r3, [pc, #400]	; (8003694 <main+0x2764>)
 8003502:	801a      	strh	r2, [r3, #0]
 8003504:	e168      	b.n	80037d8 <main+0x28a8>
					   					}

				  				}
				   else if(mode == 3)
 8003506:	4b64      	ldr	r3, [pc, #400]	; (8003698 <main+0x2768>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2b03      	cmp	r3, #3
 800350c:	f040 8164 	bne.w	80037d8 <main+0x28a8>
				  				  				{
					   time = time+1;
 8003510:	4b62      	ldr	r3, [pc, #392]	; (800369c <main+0x276c>)
 8003512:	edd3 7a00 	vldr	s15, [r3]
 8003516:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800351a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800351e:	4b5f      	ldr	r3, [pc, #380]	; (800369c <main+0x276c>)
 8003520:	edc3 7a00 	vstr	s15, [r3]

					   if(F_Square ==0)
 8003524:	4b5e      	ldr	r3, [pc, #376]	; (80036a0 <main+0x2770>)
 8003526:	edd3 7a00 	vldr	s15, [r3]
 800352a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800352e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003532:	d10a      	bne.n	800354a <main+0x261a>
					   {
						   NormalizedataOut = dataOut;
 8003534:	4b55      	ldr	r3, [pc, #340]	; (800368c <main+0x275c>)
 8003536:	edd3 7a00 	vldr	s15, [r3]
 800353a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800353e:	ee17 3a90 	vmov	r3, s15
 8003542:	b29a      	uxth	r2, r3
 8003544:	4b53      	ldr	r3, [pc, #332]	; (8003694 <main+0x2764>)
 8003546:	801a      	strh	r2, [r3, #0]
 8003548:	e146      	b.n	80037d8 <main+0x28a8>
					   }
					   else
					   {
						   r=duty/100.0*(1/F_Square);
 800354a:	4b56      	ldr	r3, [pc, #344]	; (80036a4 <main+0x2774>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f7fc fff0 	bl	8000534 <__aeabi_i2d>
 8003554:	f04f 0200 	mov.w	r2, #0
 8003558:	4b53      	ldr	r3, [pc, #332]	; (80036a8 <main+0x2778>)
 800355a:	f7fd f97f 	bl	800085c <__aeabi_ddiv>
 800355e:	4603      	mov	r3, r0
 8003560:	460c      	mov	r4, r1
 8003562:	4625      	mov	r5, r4
 8003564:	461c      	mov	r4, r3
 8003566:	4b4e      	ldr	r3, [pc, #312]	; (80036a0 <main+0x2770>)
 8003568:	edd3 7a00 	vldr	s15, [r3]
 800356c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003570:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003574:	ee16 0a90 	vmov	r0, s13
 8003578:	f7fc ffee 	bl	8000558 <__aeabi_f2d>
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	4620      	mov	r0, r4
 8003582:	4629      	mov	r1, r5
 8003584:	f7fd f840 	bl	8000608 <__aeabi_dmul>
 8003588:	4603      	mov	r3, r0
 800358a:	460c      	mov	r4, r1
 800358c:	4618      	mov	r0, r3
 800358e:	4621      	mov	r1, r4
 8003590:	f7fd fafc 	bl	8000b8c <__aeabi_d2f>
 8003594:	4602      	mov	r2, r0
 8003596:	4b45      	ldr	r3, [pc, #276]	; (80036ac <main+0x277c>)
 8003598:	601a      	str	r2, [r3, #0]
					   if(time*0.0001<=(duty/100.0*(1/F_Square)))
 800359a:	4b40      	ldr	r3, [pc, #256]	; (800369c <main+0x276c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fc ffda 	bl	8000558 <__aeabi_f2d>
 80035a4:	a334      	add	r3, pc, #208	; (adr r3, 8003678 <main+0x2748>)
 80035a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035aa:	f7fd f82d 	bl	8000608 <__aeabi_dmul>
 80035ae:	4603      	mov	r3, r0
 80035b0:	460c      	mov	r4, r1
 80035b2:	4625      	mov	r5, r4
 80035b4:	461c      	mov	r4, r3
 80035b6:	4b3b      	ldr	r3, [pc, #236]	; (80036a4 <main+0x2774>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fc ffba 	bl	8000534 <__aeabi_i2d>
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	4b38      	ldr	r3, [pc, #224]	; (80036a8 <main+0x2778>)
 80035c6:	f7fd f949 	bl	800085c <__aeabi_ddiv>
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	4690      	mov	r8, r2
 80035d0:	4699      	mov	r9, r3
 80035d2:	4b33      	ldr	r3, [pc, #204]	; (80036a0 <main+0x2770>)
 80035d4:	edd3 7a00 	vldr	s15, [r3]
 80035d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035dc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80035e0:	ee16 0a90 	vmov	r0, s13
 80035e4:	f7fc ffb8 	bl	8000558 <__aeabi_f2d>
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	4640      	mov	r0, r8
 80035ee:	4649      	mov	r1, r9
 80035f0:	f7fd f80a 	bl	8000608 <__aeabi_dmul>
 80035f4:	4602      	mov	r2, r0
 80035f6:	460b      	mov	r3, r1
 80035f8:	4620      	mov	r0, r4
 80035fa:	4629      	mov	r1, r5
 80035fc:	f7fd fa80 	bl	8000b00 <__aeabi_dcmple>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d056      	beq.n	80036b4 <main+0x2784>
					   {

						   dataOut=(VoltHigh_Square)/3.3*4095.0;
 8003606:	4b2a      	ldr	r3, [pc, #168]	; (80036b0 <main+0x2780>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f7fc ffa4 	bl	8000558 <__aeabi_f2d>
 8003610:	a315      	add	r3, pc, #84	; (adr r3, 8003668 <main+0x2738>)
 8003612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003616:	f7fd f921 	bl	800085c <__aeabi_ddiv>
 800361a:	4603      	mov	r3, r0
 800361c:	460c      	mov	r4, r1
 800361e:	4618      	mov	r0, r3
 8003620:	4621      	mov	r1, r4
 8003622:	a313      	add	r3, pc, #76	; (adr r3, 8003670 <main+0x2740>)
 8003624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003628:	f7fc ffee 	bl	8000608 <__aeabi_dmul>
 800362c:	4603      	mov	r3, r0
 800362e:	460c      	mov	r4, r1
 8003630:	4618      	mov	r0, r3
 8003632:	4621      	mov	r1, r4
 8003634:	f7fd faaa 	bl	8000b8c <__aeabi_d2f>
 8003638:	4602      	mov	r2, r0
 800363a:	4b14      	ldr	r3, [pc, #80]	; (800368c <main+0x275c>)
 800363c:	601a      	str	r2, [r3, #0]
						   NormalizedataOut =dataOut;
 800363e:	4b13      	ldr	r3, [pc, #76]	; (800368c <main+0x275c>)
 8003640:	edd3 7a00 	vldr	s15, [r3]
 8003644:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003648:	ee17 3a90 	vmov	r3, s15
 800364c:	b29a      	uxth	r2, r3
 800364e:	4b11      	ldr	r3, [pc, #68]	; (8003694 <main+0x2764>)
 8003650:	801a      	strh	r2, [r3, #0]
 8003652:	e0c1      	b.n	80037d8 <main+0x28a8>
 8003654:	f3af 8000 	nop.w
 8003658:	54442d18 	.word	0x54442d18
 800365c:	401921fb 	.word	0x401921fb
 8003660:	00000000 	.word	0x00000000
 8003664:	412e8480 	.word	0x412e8480
 8003668:	66666666 	.word	0x66666666
 800366c:	400a6666 	.word	0x400a6666
 8003670:	00000000 	.word	0x00000000
 8003674:	40affe00 	.word	0x40affe00
 8003678:	eb1c432d 	.word	0xeb1c432d
 800367c:	3f1a36e2 	.word	0x3f1a36e2
 8003680:	200001ec 	.word	0x200001ec
 8003684:	200001e8 	.word	0x200001e8
 8003688:	20000200 	.word	0x20000200
 800368c:	200001d0 	.word	0x200001d0
 8003690:	200001f0 	.word	0x200001f0
 8003694:	200001d4 	.word	0x200001d4
 8003698:	200001b8 	.word	0x200001b8
 800369c:	200001a8 	.word	0x200001a8
 80036a0:	200001f4 	.word	0x200001f4
 80036a4:	20000010 	.word	0x20000010
 80036a8:	40590000 	.word	0x40590000
 80036ac:	200001bc 	.word	0x200001bc
 80036b0:	2000000c 	.word	0x2000000c
					   }
					   else if(time*0.0001>=(duty/100.0*(1/F_Square)) && time*0.0001<= 1/F_Square)
 80036b4:	4b66      	ldr	r3, [pc, #408]	; (8003850 <main+0x2920>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7fc ff4d 	bl	8000558 <__aeabi_f2d>
 80036be:	a35c      	add	r3, pc, #368	; (adr r3, 8003830 <main+0x2900>)
 80036c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c4:	f7fc ffa0 	bl	8000608 <__aeabi_dmul>
 80036c8:	4603      	mov	r3, r0
 80036ca:	460c      	mov	r4, r1
 80036cc:	4625      	mov	r5, r4
 80036ce:	461c      	mov	r4, r3
 80036d0:	4b60      	ldr	r3, [pc, #384]	; (8003854 <main+0x2924>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7fc ff2d 	bl	8000534 <__aeabi_i2d>
 80036da:	f04f 0200 	mov.w	r2, #0
 80036de:	4b5e      	ldr	r3, [pc, #376]	; (8003858 <main+0x2928>)
 80036e0:	f7fd f8bc 	bl	800085c <__aeabi_ddiv>
 80036e4:	4602      	mov	r2, r0
 80036e6:	460b      	mov	r3, r1
 80036e8:	4690      	mov	r8, r2
 80036ea:	4699      	mov	r9, r3
 80036ec:	4b5b      	ldr	r3, [pc, #364]	; (800385c <main+0x292c>)
 80036ee:	edd3 7a00 	vldr	s15, [r3]
 80036f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80036fa:	ee16 0a90 	vmov	r0, s13
 80036fe:	f7fc ff2b 	bl	8000558 <__aeabi_f2d>
 8003702:	4602      	mov	r2, r0
 8003704:	460b      	mov	r3, r1
 8003706:	4640      	mov	r0, r8
 8003708:	4649      	mov	r1, r9
 800370a:	f7fc ff7d 	bl	8000608 <__aeabi_dmul>
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	4620      	mov	r0, r4
 8003714:	4629      	mov	r1, r5
 8003716:	f7fd f9fd 	bl	8000b14 <__aeabi_dcmpge>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d048      	beq.n	80037b2 <main+0x2882>
 8003720:	4b4b      	ldr	r3, [pc, #300]	; (8003850 <main+0x2920>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f7fc ff17 	bl	8000558 <__aeabi_f2d>
 800372a:	a341      	add	r3, pc, #260	; (adr r3, 8003830 <main+0x2900>)
 800372c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003730:	f7fc ff6a 	bl	8000608 <__aeabi_dmul>
 8003734:	4603      	mov	r3, r0
 8003736:	460c      	mov	r4, r1
 8003738:	4625      	mov	r5, r4
 800373a:	461c      	mov	r4, r3
 800373c:	4b47      	ldr	r3, [pc, #284]	; (800385c <main+0x292c>)
 800373e:	edd3 7a00 	vldr	s15, [r3]
 8003742:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003746:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800374a:	ee16 0a90 	vmov	r0, s13
 800374e:	f7fc ff03 	bl	8000558 <__aeabi_f2d>
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	4620      	mov	r0, r4
 8003758:	4629      	mov	r1, r5
 800375a:	f7fd f9d1 	bl	8000b00 <__aeabi_dcmple>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d026      	beq.n	80037b2 <main+0x2882>
					   {

						   dataOut=(VoltLow_Square)/3.3*4095.0;
 8003764:	4b3e      	ldr	r3, [pc, #248]	; (8003860 <main+0x2930>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f7fc fef5 	bl	8000558 <__aeabi_f2d>
 800376e:	a332      	add	r3, pc, #200	; (adr r3, 8003838 <main+0x2908>)
 8003770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003774:	f7fd f872 	bl	800085c <__aeabi_ddiv>
 8003778:	4603      	mov	r3, r0
 800377a:	460c      	mov	r4, r1
 800377c:	4618      	mov	r0, r3
 800377e:	4621      	mov	r1, r4
 8003780:	a32f      	add	r3, pc, #188	; (adr r3, 8003840 <main+0x2910>)
 8003782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003786:	f7fc ff3f 	bl	8000608 <__aeabi_dmul>
 800378a:	4603      	mov	r3, r0
 800378c:	460c      	mov	r4, r1
 800378e:	4618      	mov	r0, r3
 8003790:	4621      	mov	r1, r4
 8003792:	f7fd f9fb 	bl	8000b8c <__aeabi_d2f>
 8003796:	4602      	mov	r2, r0
 8003798:	4b32      	ldr	r3, [pc, #200]	; (8003864 <main+0x2934>)
 800379a:	601a      	str	r2, [r3, #0]
						   NormalizedataOut =dataOut;
 800379c:	4b31      	ldr	r3, [pc, #196]	; (8003864 <main+0x2934>)
 800379e:	edd3 7a00 	vldr	s15, [r3]
 80037a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037a6:	ee17 3a90 	vmov	r3, s15
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	4b2e      	ldr	r3, [pc, #184]	; (8003868 <main+0x2938>)
 80037ae:	801a      	strh	r2, [r3, #0]
 80037b0:	e012      	b.n	80037d8 <main+0x28a8>
					   }
					   else
					   {
						   time=0;
 80037b2:	4b27      	ldr	r3, [pc, #156]	; (8003850 <main+0x2920>)
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	e00d      	b.n	80037d8 <main+0x28a8>

				  				  				}
				  			}
				   else
				   			{
				   				dataOut = 0;
 80037bc:	4b29      	ldr	r3, [pc, #164]	; (8003864 <main+0x2934>)
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
				   				NormalizedataOut = dataOut;
 80037c4:	4b27      	ldr	r3, [pc, #156]	; (8003864 <main+0x2934>)
 80037c6:	edd3 7a00 	vldr	s15, [r3]
 80037ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037ce:	ee17 3a90 	vmov	r3, s15
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	4b24      	ldr	r3, [pc, #144]	; (8003868 <main+0x2938>)
 80037d6:	801a      	strh	r2, [r3, #0]
				   			}




				  			if (hspi3.State == HAL_SPI_STATE_READY
 80037d8:	4b24      	ldr	r3, [pc, #144]	; (800386c <main+0x293c>)
 80037da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d10f      	bne.n	8003804 <main+0x28d4>
				  								&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)
 80037e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80037e8:	4821      	ldr	r0, [pc, #132]	; (8003870 <main+0x2940>)
 80037ea:	f002 f96b 	bl	8005ac4 <HAL_GPIO_ReadPin>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d107      	bne.n	8003804 <main+0x28d4>
				  										== GPIO_PIN_SET)
				  						{
				  							MCP4922SetOutput(DACConfig,NormalizedataOut );
 80037f4:	4b1f      	ldr	r3, [pc, #124]	; (8003874 <main+0x2944>)
 80037f6:	781a      	ldrb	r2, [r3, #0]
 80037f8:	4b1b      	ldr	r3, [pc, #108]	; (8003868 <main+0x2938>)
 80037fa:	881b      	ldrh	r3, [r3, #0]
 80037fc:	4619      	mov	r1, r3
 80037fe:	4610      	mov	r0, r2
 8003800:	f000 fa8a 	bl	8003d18 <MCP4922SetOutput>
				  						}


					}
			  VADCin = (ADCin)*(3.3/4095.0);
 8003804:	4b1c      	ldr	r3, [pc, #112]	; (8003878 <main+0x2948>)
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f7fc fe93 	bl	8000534 <__aeabi_i2d>
 800380e:	a30e      	add	r3, pc, #56	; (adr r3, 8003848 <main+0x2918>)
 8003810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003814:	f7fc fef8 	bl	8000608 <__aeabi_dmul>
 8003818:	4603      	mov	r3, r0
 800381a:	460c      	mov	r4, r1
 800381c:	4618      	mov	r0, r3
 800381e:	4621      	mov	r1, r4
 8003820:	f7fd f9b4 	bl	8000b8c <__aeabi_d2f>
 8003824:	4602      	mov	r2, r0
 8003826:	4b15      	ldr	r3, [pc, #84]	; (800387c <main+0x294c>)
 8003828:	601a      	str	r2, [r3, #0]
	{
 800382a:	f7fd bbc2 	b.w	8000fb2 <main+0x82>
 800382e:	bf00      	nop
 8003830:	eb1c432d 	.word	0xeb1c432d
 8003834:	3f1a36e2 	.word	0x3f1a36e2
 8003838:	66666666 	.word	0x66666666
 800383c:	400a6666 	.word	0x400a6666
 8003840:	00000000 	.word	0x00000000
 8003844:	40affe00 	.word	0x40affe00
 8003848:	e734d9b4 	.word	0xe734d9b4
 800384c:	3f4a680c 	.word	0x3f4a680c
 8003850:	200001a8 	.word	0x200001a8
 8003854:	20000010 	.word	0x20000010
 8003858:	40590000 	.word	0x40590000
 800385c:	200001f4 	.word	0x200001f4
 8003860:	200001f8 	.word	0x200001f8
 8003864:	200001d0 	.word	0x200001d0
 8003868:	200001d4 	.word	0x200001d4
 800386c:	20000260 	.word	0x20000260
 8003870:	40020400 	.word	0x40020400
 8003874:	20000000 	.word	0x20000000
 8003878:	200001c0 	.word	0x200001c0
 800387c:	200001c4 	.word	0x200001c4

08003880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b094      	sub	sp, #80	; 0x50
 8003884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003886:	f107 0320 	add.w	r3, r7, #32
 800388a:	2230      	movs	r2, #48	; 0x30
 800388c:	2100      	movs	r1, #0
 800388e:	4618      	mov	r0, r3
 8003890:	f004 fc71 	bl	8008176 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003894:	f107 030c 	add.w	r3, r7, #12
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	605a      	str	r2, [r3, #4]
 800389e:	609a      	str	r2, [r3, #8]
 80038a0:	60da      	str	r2, [r3, #12]
 80038a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80038a4:	2300      	movs	r3, #0
 80038a6:	60bb      	str	r3, [r7, #8]
 80038a8:	4b27      	ldr	r3, [pc, #156]	; (8003948 <SystemClock_Config+0xc8>)
 80038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ac:	4a26      	ldr	r2, [pc, #152]	; (8003948 <SystemClock_Config+0xc8>)
 80038ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b2:	6413      	str	r3, [r2, #64]	; 0x40
 80038b4:	4b24      	ldr	r3, [pc, #144]	; (8003948 <SystemClock_Config+0xc8>)
 80038b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038bc:	60bb      	str	r3, [r7, #8]
 80038be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80038c0:	2300      	movs	r3, #0
 80038c2:	607b      	str	r3, [r7, #4]
 80038c4:	4b21      	ldr	r3, [pc, #132]	; (800394c <SystemClock_Config+0xcc>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a20      	ldr	r2, [pc, #128]	; (800394c <SystemClock_Config+0xcc>)
 80038ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038ce:	6013      	str	r3, [r2, #0]
 80038d0:	4b1e      	ldr	r3, [pc, #120]	; (800394c <SystemClock_Config+0xcc>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80038d8:	607b      	str	r3, [r7, #4]
 80038da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80038dc:	2302      	movs	r3, #2
 80038de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80038e0:	2301      	movs	r3, #1
 80038e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80038e4:	2310      	movs	r3, #16
 80038e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038e8:	2302      	movs	r3, #2
 80038ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80038ec:	2300      	movs	r3, #0
 80038ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80038f0:	2308      	movs	r3, #8
 80038f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80038f4:	2364      	movs	r3, #100	; 0x64
 80038f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80038f8:	2302      	movs	r3, #2
 80038fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80038fc:	2304      	movs	r3, #4
 80038fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003900:	f107 0320 	add.w	r3, r7, #32
 8003904:	4618      	mov	r0, r3
 8003906:	f002 f90f 	bl	8005b28 <HAL_RCC_OscConfig>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003910:	f000 faac 	bl	8003e6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003914:	230f      	movs	r3, #15
 8003916:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003918:	2302      	movs	r3, #2
 800391a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800391c:	2300      	movs	r3, #0
 800391e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003924:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003926:	2300      	movs	r3, #0
 8003928:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800392a:	f107 030c 	add.w	r3, r7, #12
 800392e:	2103      	movs	r1, #3
 8003930:	4618      	mov	r0, r3
 8003932:	f002 fb69 	bl	8006008 <HAL_RCC_ClockConfig>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800393c:	f000 fa96 	bl	8003e6c <Error_Handler>
  }
}
 8003940:	bf00      	nop
 8003942:	3750      	adds	r7, #80	; 0x50
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40023800 	.word	0x40023800
 800394c:	40007000 	.word	0x40007000

08003950 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003956:	463b      	mov	r3, r7
 8003958:	2200      	movs	r2, #0
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	605a      	str	r2, [r3, #4]
 800395e:	609a      	str	r2, [r3, #8]
 8003960:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003962:	4b22      	ldr	r3, [pc, #136]	; (80039ec <MX_ADC1_Init+0x9c>)
 8003964:	4a22      	ldr	r2, [pc, #136]	; (80039f0 <MX_ADC1_Init+0xa0>)
 8003966:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003968:	4b20      	ldr	r3, [pc, #128]	; (80039ec <MX_ADC1_Init+0x9c>)
 800396a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800396e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003970:	4b1e      	ldr	r3, [pc, #120]	; (80039ec <MX_ADC1_Init+0x9c>)
 8003972:	2200      	movs	r2, #0
 8003974:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003976:	4b1d      	ldr	r3, [pc, #116]	; (80039ec <MX_ADC1_Init+0x9c>)
 8003978:	2201      	movs	r2, #1
 800397a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800397c:	4b1b      	ldr	r3, [pc, #108]	; (80039ec <MX_ADC1_Init+0x9c>)
 800397e:	2200      	movs	r2, #0
 8003980:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003982:	4b1a      	ldr	r3, [pc, #104]	; (80039ec <MX_ADC1_Init+0x9c>)
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800398a:	4b18      	ldr	r3, [pc, #96]	; (80039ec <MX_ADC1_Init+0x9c>)
 800398c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003990:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8003992:	4b16      	ldr	r3, [pc, #88]	; (80039ec <MX_ADC1_Init+0x9c>)
 8003994:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003998:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800399a:	4b14      	ldr	r3, [pc, #80]	; (80039ec <MX_ADC1_Init+0x9c>)
 800399c:	2200      	movs	r2, #0
 800399e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80039a0:	4b12      	ldr	r3, [pc, #72]	; (80039ec <MX_ADC1_Init+0x9c>)
 80039a2:	2201      	movs	r2, #1
 80039a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80039a6:	4b11      	ldr	r3, [pc, #68]	; (80039ec <MX_ADC1_Init+0x9c>)
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80039ae:	4b0f      	ldr	r3, [pc, #60]	; (80039ec <MX_ADC1_Init+0x9c>)
 80039b0:	2201      	movs	r2, #1
 80039b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80039b4:	480d      	ldr	r0, [pc, #52]	; (80039ec <MX_ADC1_Init+0x9c>)
 80039b6:	f000 fd27 	bl	8004408 <HAL_ADC_Init>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80039c0:	f000 fa54 	bl	8003e6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80039c4:	2300      	movs	r3, #0
 80039c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80039c8:	2301      	movs	r3, #1
 80039ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80039cc:	2300      	movs	r3, #0
 80039ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039d0:	463b      	mov	r3, r7
 80039d2:	4619      	mov	r1, r3
 80039d4:	4805      	ldr	r0, [pc, #20]	; (80039ec <MX_ADC1_Init+0x9c>)
 80039d6:	f000 ff97 	bl	8004908 <HAL_ADC_ConfigChannel>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80039e0:	f000 fa44 	bl	8003e6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80039e4:	bf00      	nop
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	200002b8 	.word	0x200002b8
 80039f0:	40012000 	.word	0x40012000

080039f4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80039f8:	4b18      	ldr	r3, [pc, #96]	; (8003a5c <MX_SPI3_Init+0x68>)
 80039fa:	4a19      	ldr	r2, [pc, #100]	; (8003a60 <MX_SPI3_Init+0x6c>)
 80039fc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80039fe:	4b17      	ldr	r3, [pc, #92]	; (8003a5c <MX_SPI3_Init+0x68>)
 8003a00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a04:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003a06:	4b15      	ldr	r3, [pc, #84]	; (8003a5c <MX_SPI3_Init+0x68>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8003a0c:	4b13      	ldr	r3, [pc, #76]	; (8003a5c <MX_SPI3_Init+0x68>)
 8003a0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a12:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a14:	4b11      	ldr	r3, [pc, #68]	; (8003a5c <MX_SPI3_Init+0x68>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a1a:	4b10      	ldr	r3, [pc, #64]	; (8003a5c <MX_SPI3_Init+0x68>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003a20:	4b0e      	ldr	r3, [pc, #56]	; (8003a5c <MX_SPI3_Init+0x68>)
 8003a22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a26:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003a28:	4b0c      	ldr	r3, [pc, #48]	; (8003a5c <MX_SPI3_Init+0x68>)
 8003a2a:	2208      	movs	r2, #8
 8003a2c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a2e:	4b0b      	ldr	r3, [pc, #44]	; (8003a5c <MX_SPI3_Init+0x68>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a34:	4b09      	ldr	r3, [pc, #36]	; (8003a5c <MX_SPI3_Init+0x68>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a3a:	4b08      	ldr	r3, [pc, #32]	; (8003a5c <MX_SPI3_Init+0x68>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003a40:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <MX_SPI3_Init+0x68>)
 8003a42:	220a      	movs	r2, #10
 8003a44:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003a46:	4805      	ldr	r0, [pc, #20]	; (8003a5c <MX_SPI3_Init+0x68>)
 8003a48:	f002 fcd0 	bl	80063ec <HAL_SPI_Init>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8003a52:	f000 fa0b 	bl	8003e6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003a56:	bf00      	nop
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	20000260 	.word	0x20000260
 8003a60:	40003c00 	.word	0x40003c00

08003a64 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a6a:	f107 0308 	add.w	r3, r7, #8
 8003a6e:	2200      	movs	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	605a      	str	r2, [r3, #4]
 8003a74:	609a      	str	r2, [r3, #8]
 8003a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a78:	463b      	mov	r3, r7
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003a80:	4b1c      	ldr	r3, [pc, #112]	; (8003af4 <MX_TIM3_Init+0x90>)
 8003a82:	4a1d      	ldr	r2, [pc, #116]	; (8003af8 <MX_TIM3_Init+0x94>)
 8003a84:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8003a86:	4b1b      	ldr	r3, [pc, #108]	; (8003af4 <MX_TIM3_Init+0x90>)
 8003a88:	2263      	movs	r2, #99	; 0x63
 8003a8a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a8c:	4b19      	ldr	r3, [pc, #100]	; (8003af4 <MX_TIM3_Init+0x90>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8003a92:	4b18      	ldr	r3, [pc, #96]	; (8003af4 <MX_TIM3_Init+0x90>)
 8003a94:	2264      	movs	r2, #100	; 0x64
 8003a96:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a98:	4b16      	ldr	r3, [pc, #88]	; (8003af4 <MX_TIM3_Init+0x90>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a9e:	4b15      	ldr	r3, [pc, #84]	; (8003af4 <MX_TIM3_Init+0x90>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003aa4:	4813      	ldr	r0, [pc, #76]	; (8003af4 <MX_TIM3_Init+0x90>)
 8003aa6:	f002 fff9 	bl	8006a9c <HAL_TIM_Base_Init>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8003ab0:	f000 f9dc 	bl	8003e6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ab8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003aba:	f107 0308 	add.w	r3, r7, #8
 8003abe:	4619      	mov	r1, r3
 8003ac0:	480c      	ldr	r0, [pc, #48]	; (8003af4 <MX_TIM3_Init+0x90>)
 8003ac2:	f003 f966 	bl	8006d92 <HAL_TIM_ConfigClockSource>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8003acc:	f000 f9ce 	bl	8003e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003ad0:	2320      	movs	r3, #32
 8003ad2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003ad8:	463b      	mov	r3, r7
 8003ada:	4619      	mov	r1, r3
 8003adc:	4805      	ldr	r0, [pc, #20]	; (8003af4 <MX_TIM3_Init+0x90>)
 8003ade:	f003 fb51 	bl	8007184 <HAL_TIMEx_MasterConfigSynchronization>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8003ae8:	f000 f9c0 	bl	8003e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003aec:	bf00      	nop
 8003aee:	3718      	adds	r7, #24
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	20000220 	.word	0x20000220
 8003af8:	40000400 	.word	0x40000400

08003afc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003b00:	4b0e      	ldr	r3, [pc, #56]	; (8003b3c <MX_TIM11_Init+0x40>)
 8003b02:	4a0f      	ldr	r2, [pc, #60]	; (8003b40 <MX_TIM11_Init+0x44>)
 8003b04:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8003b06:	4b0d      	ldr	r3, [pc, #52]	; (8003b3c <MX_TIM11_Init+0x40>)
 8003b08:	2263      	movs	r2, #99	; 0x63
 8003b0a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b0c:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <MX_TIM11_Init+0x40>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8003b12:	4b0a      	ldr	r3, [pc, #40]	; (8003b3c <MX_TIM11_Init+0x40>)
 8003b14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b18:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b1a:	4b08      	ldr	r3, [pc, #32]	; (8003b3c <MX_TIM11_Init+0x40>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b20:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <MX_TIM11_Init+0x40>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003b26:	4805      	ldr	r0, [pc, #20]	; (8003b3c <MX_TIM11_Init+0x40>)
 8003b28:	f002 ffb8 	bl	8006a9c <HAL_TIM_Base_Init>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8003b32:	f000 f99b 	bl	8003e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003b36:	bf00      	nop
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	20000300 	.word	0x20000300
 8003b40:	40014800 	.word	0x40014800

08003b44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b48:	4b11      	ldr	r3, [pc, #68]	; (8003b90 <MX_USART2_UART_Init+0x4c>)
 8003b4a:	4a12      	ldr	r2, [pc, #72]	; (8003b94 <MX_USART2_UART_Init+0x50>)
 8003b4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003b4e:	4b10      	ldr	r3, [pc, #64]	; (8003b90 <MX_USART2_UART_Init+0x4c>)
 8003b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b56:	4b0e      	ldr	r3, [pc, #56]	; (8003b90 <MX_USART2_UART_Init+0x4c>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b5c:	4b0c      	ldr	r3, [pc, #48]	; (8003b90 <MX_USART2_UART_Init+0x4c>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b62:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <MX_USART2_UART_Init+0x4c>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b68:	4b09      	ldr	r3, [pc, #36]	; (8003b90 <MX_USART2_UART_Init+0x4c>)
 8003b6a:	220c      	movs	r2, #12
 8003b6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b6e:	4b08      	ldr	r3, [pc, #32]	; (8003b90 <MX_USART2_UART_Init+0x4c>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b74:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <MX_USART2_UART_Init+0x4c>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b7a:	4805      	ldr	r0, [pc, #20]	; (8003b90 <MX_USART2_UART_Init+0x4c>)
 8003b7c:	f003 fb84 	bl	8007288 <HAL_UART_Init>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003b86:	f000 f971 	bl	8003e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003b8a:	bf00      	nop
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	200003a0 	.word	0x200003a0
 8003b94:	40004400 	.word	0x40004400

08003b98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	607b      	str	r3, [r7, #4]
 8003ba2:	4b0c      	ldr	r3, [pc, #48]	; (8003bd4 <MX_DMA_Init+0x3c>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	4a0b      	ldr	r2, [pc, #44]	; (8003bd4 <MX_DMA_Init+0x3c>)
 8003ba8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003bac:	6313      	str	r3, [r2, #48]	; 0x30
 8003bae:	4b09      	ldr	r3, [pc, #36]	; (8003bd4 <MX_DMA_Init+0x3c>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bb6:	607b      	str	r3, [r7, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003bba:	2200      	movs	r2, #0
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	2038      	movs	r0, #56	; 0x38
 8003bc0:	f001 fa37 	bl	8005032 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003bc4:	2038      	movs	r0, #56	; 0x38
 8003bc6:	f001 fa50 	bl	800506a <HAL_NVIC_EnableIRQ>

}
 8003bca:	bf00      	nop
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40023800 	.word	0x40023800

08003bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b08a      	sub	sp, #40	; 0x28
 8003bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bde:	f107 0314 	add.w	r3, r7, #20
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	605a      	str	r2, [r3, #4]
 8003be8:	609a      	str	r2, [r3, #8]
 8003bea:	60da      	str	r2, [r3, #12]
 8003bec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bee:	2300      	movs	r3, #0
 8003bf0:	613b      	str	r3, [r7, #16]
 8003bf2:	4b44      	ldr	r3, [pc, #272]	; (8003d04 <MX_GPIO_Init+0x12c>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	4a43      	ldr	r2, [pc, #268]	; (8003d04 <MX_GPIO_Init+0x12c>)
 8003bf8:	f043 0304 	orr.w	r3, r3, #4
 8003bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bfe:	4b41      	ldr	r3, [pc, #260]	; (8003d04 <MX_GPIO_Init+0x12c>)
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	f003 0304 	and.w	r3, r3, #4
 8003c06:	613b      	str	r3, [r7, #16]
 8003c08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	4b3d      	ldr	r3, [pc, #244]	; (8003d04 <MX_GPIO_Init+0x12c>)
 8003c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c12:	4a3c      	ldr	r2, [pc, #240]	; (8003d04 <MX_GPIO_Init+0x12c>)
 8003c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c18:	6313      	str	r3, [r2, #48]	; 0x30
 8003c1a:	4b3a      	ldr	r3, [pc, #232]	; (8003d04 <MX_GPIO_Init+0x12c>)
 8003c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c26:	2300      	movs	r3, #0
 8003c28:	60bb      	str	r3, [r7, #8]
 8003c2a:	4b36      	ldr	r3, [pc, #216]	; (8003d04 <MX_GPIO_Init+0x12c>)
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2e:	4a35      	ldr	r2, [pc, #212]	; (8003d04 <MX_GPIO_Init+0x12c>)
 8003c30:	f043 0301 	orr.w	r3, r3, #1
 8003c34:	6313      	str	r3, [r2, #48]	; 0x30
 8003c36:	4b33      	ldr	r3, [pc, #204]	; (8003d04 <MX_GPIO_Init+0x12c>)
 8003c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	60bb      	str	r3, [r7, #8]
 8003c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c42:	2300      	movs	r3, #0
 8003c44:	607b      	str	r3, [r7, #4]
 8003c46:	4b2f      	ldr	r3, [pc, #188]	; (8003d04 <MX_GPIO_Init+0x12c>)
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4a:	4a2e      	ldr	r2, [pc, #184]	; (8003d04 <MX_GPIO_Init+0x12c>)
 8003c4c:	f043 0302 	orr.w	r3, r3, #2
 8003c50:	6313      	str	r3, [r2, #48]	; 0x30
 8003c52:	4b2c      	ldr	r3, [pc, #176]	; (8003d04 <MX_GPIO_Init+0x12c>)
 8003c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	607b      	str	r3, [r7, #4]
 8003c5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003c5e:	2200      	movs	r2, #0
 8003c60:	2120      	movs	r1, #32
 8003c62:	4829      	ldr	r0, [pc, #164]	; (8003d08 <MX_GPIO_Init+0x130>)
 8003c64:	f001 ff46 	bl	8005af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003c6e:	4827      	ldr	r0, [pc, #156]	; (8003d0c <MX_GPIO_Init+0x134>)
 8003c70:	f001 ff40 	bl	8005af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_SET);
 8003c74:	2201      	movs	r2, #1
 8003c76:	2180      	movs	r1, #128	; 0x80
 8003c78:	4825      	ldr	r0, [pc, #148]	; (8003d10 <MX_GPIO_Init+0x138>)
 8003c7a:	f001 ff3b 	bl	8005af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_SET);
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c84:	4820      	ldr	r0, [pc, #128]	; (8003d08 <MX_GPIO_Init+0x130>)
 8003c86:	f001 ff35 	bl	8005af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003c8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003c90:	4b20      	ldr	r3, [pc, #128]	; (8003d14 <MX_GPIO_Init+0x13c>)
 8003c92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c94:	2300      	movs	r3, #0
 8003c96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003c98:	f107 0314 	add.w	r3, r7, #20
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	481c      	ldr	r0, [pc, #112]	; (8003d10 <MX_GPIO_Init+0x138>)
 8003ca0:	f001 fd8e 	bl	80057c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LOAD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LOAD_Pin;
 8003ca4:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003ca8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003caa:	2301      	movs	r3, #1
 8003cac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cb6:	f107 0314 	add.w	r3, r7, #20
 8003cba:	4619      	mov	r1, r3
 8003cbc:	4812      	ldr	r0, [pc, #72]	; (8003d08 <MX_GPIO_Init+0x130>)
 8003cbe:	f001 fd7f 	bl	80057c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 8003cc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 8003cd4:	f107 0314 	add.w	r3, r7, #20
 8003cd8:	4619      	mov	r1, r3
 8003cda:	480c      	ldr	r0, [pc, #48]	; (8003d0c <MX_GPIO_Init+0x134>)
 8003cdc:	f001 fd70 	bl	80057c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 8003ce0:	2380      	movs	r3, #128	; 0x80
 8003ce2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cec:	2300      	movs	r3, #0
 8003cee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 8003cf0:	f107 0314 	add.w	r3, r7, #20
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	4806      	ldr	r0, [pc, #24]	; (8003d10 <MX_GPIO_Init+0x138>)
 8003cf8:	f001 fd62 	bl	80057c0 <HAL_GPIO_Init>

}
 8003cfc:	bf00      	nop
 8003cfe:	3728      	adds	r7, #40	; 0x28
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40023800 	.word	0x40023800
 8003d08:	40020000 	.word	0x40020000
 8003d0c:	40020400 	.word	0x40020400
 8003d10:	40020800 	.word	0x40020800
 8003d14:	10210000 	.word	0x10210000

08003d18 <MCP4922SetOutput>:

/* USER CODE BEGIN 4 */
void MCP4922SetOutput(uint8_t Config, uint16_t DACOutput)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	4603      	mov	r3, r0
 8003d20:	460a      	mov	r2, r1
 8003d22:	71fb      	strb	r3, [r7, #7]
 8003d24:	4613      	mov	r3, r2
 8003d26:	80bb      	strh	r3, [r7, #4]
	uint32_t OutputPacket = (DACOutput & 0x0fff) | ((Config & 0xf) << 12);
 8003d28:	88bb      	ldrh	r3, [r7, #4]
 8003d2a:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8003d2e:	79fb      	ldrb	r3, [r7, #7]
 8003d30:	031b      	lsls	r3, r3, #12
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	4313      	orrs	r3, r2
 8003d36:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d3e:	4807      	ldr	r0, [pc, #28]	; (8003d5c <MCP4922SetOutput+0x44>)
 8003d40:	f001 fed8 	bl	8005af4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, &OutputPacket, 1);
 8003d44:	f107 030c 	add.w	r3, r7, #12
 8003d48:	2201      	movs	r2, #1
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	4804      	ldr	r0, [pc, #16]	; (8003d60 <MCP4922SetOutput+0x48>)
 8003d4e:	f002 fbb1 	bl	80064b4 <HAL_SPI_Transmit_IT>
}
 8003d52:	bf00      	nop
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	40020400 	.word	0x40020400
 8003d60:	20000260 	.word	0x20000260

08003d64 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a06      	ldr	r2, [pc, #24]	; (8003d88 <HAL_SPI_TxCpltCallback+0x24>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d105      	bne.n	8003d80 <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8003d74:	2201      	movs	r2, #1
 8003d76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d7a:	4804      	ldr	r0, [pc, #16]	; (8003d8c <HAL_SPI_TxCpltCallback+0x28>)
 8003d7c:	f001 feba 	bl	8005af4 <HAL_GPIO_WritePin>
	}
}
 8003d80:	bf00      	nop
 8003d82:	3708      	adds	r7, #8
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	20000260 	.word	0x20000260
 8003d8c:	40020400 	.word	0x40020400

08003d90 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d90:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
	if (htim == &htim11)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a0b      	ldr	r2, [pc, #44]	; (8003dcc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d10d      	bne.n	8003dbe <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		_micro += 65535;
 8003da2:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003da4:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8003da8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003dac:	f04f 0200 	mov.w	r2, #0
 8003db0:	eb1b 0301 	adds.w	r3, fp, r1
 8003db4:	eb4c 0402 	adc.w	r4, ip, r2
 8003db8:	4a05      	ldr	r2, [pc, #20]	; (8003dd0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003dba:	e9c2 3400 	strd	r3, r4, [r2]
	}
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	20000300 	.word	0x20000300
 8003dd0:	200001c8 	.word	0x200001c8

08003dd4 <micros>:

inline uint64_t micros()
{
 8003dd4:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8003dd8:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 8003dda:	4b09      	ldr	r3, [pc, #36]	; (8003e00 <micros+0x2c>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de0:	4619      	mov	r1, r3
 8003de2:	f04f 0200 	mov.w	r2, #0
 8003de6:	4b07      	ldr	r3, [pc, #28]	; (8003e04 <micros+0x30>)
 8003de8:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8003dec:	eb1b 0301 	adds.w	r3, fp, r1
 8003df0:	eb4c 0402 	adc.w	r4, ip, r2
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	4621      	mov	r1, r4
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8003dfe:	4770      	bx	lr
 8003e00:	20000300 	.word	0x20000300
 8003e04:	200001c8 	.word	0x200001c8

08003e08 <UARTRecieveIT>:

int16_t UARTRecieveIT()
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 8003e0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e12:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 8003e14:	4b12      	ldr	r3, [pc, #72]	; (8003e60 <UARTRecieveIT+0x58>)
 8003e16:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e18:	461a      	mov	r2, r3
 8003e1a:	4b11      	ldr	r3, [pc, #68]	; (8003e60 <UARTRecieveIT+0x58>)
 8003e1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	461a      	mov	r2, r3
 8003e24:	4b0f      	ldr	r3, [pc, #60]	; (8003e64 <UARTRecieveIT+0x5c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d010      	beq.n	8003e4e <UARTRecieveIT+0x46>
	{
		data=RxDataBuffer[dataPos];
 8003e2c:	4b0d      	ldr	r3, [pc, #52]	; (8003e64 <UARTRecieveIT+0x5c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a0d      	ldr	r2, [pc, #52]	; (8003e68 <UARTRecieveIT+0x60>)
 8003e32:	5cd3      	ldrb	r3, [r2, r3]
 8003e34:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 8003e36:	4b0b      	ldr	r3, [pc, #44]	; (8003e64 <UARTRecieveIT+0x5c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	4a08      	ldr	r2, [pc, #32]	; (8003e60 <UARTRecieveIT+0x58>)
 8003e3e:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8003e40:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e44:	fb02 f201 	mul.w	r2, r2, r1
 8003e48:	1a9b      	subs	r3, r3, r2
 8003e4a:	4a06      	ldr	r2, [pc, #24]	; (8003e64 <UARTRecieveIT+0x5c>)
 8003e4c:	6013      	str	r3, [r2, #0]
	}
	return data;
 8003e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	200003a0 	.word	0x200003a0
 8003e64:	20000210 	.word	0x20000210
 8003e68:	20000124 	.word	0x20000124

08003e6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e70:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003e72:	e7fe      	b.n	8003e72 <Error_Handler+0x6>

08003e74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	607b      	str	r3, [r7, #4]
 8003e7e:	4b10      	ldr	r3, [pc, #64]	; (8003ec0 <HAL_MspInit+0x4c>)
 8003e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e82:	4a0f      	ldr	r2, [pc, #60]	; (8003ec0 <HAL_MspInit+0x4c>)
 8003e84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e88:	6453      	str	r3, [r2, #68]	; 0x44
 8003e8a:	4b0d      	ldr	r3, [pc, #52]	; (8003ec0 <HAL_MspInit+0x4c>)
 8003e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e92:	607b      	str	r3, [r7, #4]
 8003e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e96:	2300      	movs	r3, #0
 8003e98:	603b      	str	r3, [r7, #0]
 8003e9a:	4b09      	ldr	r3, [pc, #36]	; (8003ec0 <HAL_MspInit+0x4c>)
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	4a08      	ldr	r2, [pc, #32]	; (8003ec0 <HAL_MspInit+0x4c>)
 8003ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ea6:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <HAL_MspInit+0x4c>)
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eae:	603b      	str	r3, [r7, #0]
 8003eb0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003eb2:	2007      	movs	r0, #7
 8003eb4:	f001 f8b2 	bl	800501c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003eb8:	bf00      	nop
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40023800 	.word	0x40023800

08003ec4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b08a      	sub	sp, #40	; 0x28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ecc:	f107 0314 	add.w	r3, r7, #20
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	605a      	str	r2, [r3, #4]
 8003ed6:	609a      	str	r2, [r3, #8]
 8003ed8:	60da      	str	r2, [r3, #12]
 8003eda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a33      	ldr	r2, [pc, #204]	; (8003fb0 <HAL_ADC_MspInit+0xec>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d15f      	bne.n	8003fa6 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	613b      	str	r3, [r7, #16]
 8003eea:	4b32      	ldr	r3, [pc, #200]	; (8003fb4 <HAL_ADC_MspInit+0xf0>)
 8003eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eee:	4a31      	ldr	r2, [pc, #196]	; (8003fb4 <HAL_ADC_MspInit+0xf0>)
 8003ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ef6:	4b2f      	ldr	r3, [pc, #188]	; (8003fb4 <HAL_ADC_MspInit+0xf0>)
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efe:	613b      	str	r3, [r7, #16]
 8003f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f02:	2300      	movs	r3, #0
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	4b2b      	ldr	r3, [pc, #172]	; (8003fb4 <HAL_ADC_MspInit+0xf0>)
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0a:	4a2a      	ldr	r2, [pc, #168]	; (8003fb4 <HAL_ADC_MspInit+0xf0>)
 8003f0c:	f043 0301 	orr.w	r3, r3, #1
 8003f10:	6313      	str	r3, [r2, #48]	; 0x30
 8003f12:	4b28      	ldr	r3, [pc, #160]	; (8003fb4 <HAL_ADC_MspInit+0xf0>)
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	60fb      	str	r3, [r7, #12]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f22:	2303      	movs	r3, #3
 8003f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f26:	2300      	movs	r3, #0
 8003f28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f2a:	f107 0314 	add.w	r3, r7, #20
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4821      	ldr	r0, [pc, #132]	; (8003fb8 <HAL_ADC_MspInit+0xf4>)
 8003f32:	f001 fc45 	bl	80057c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003f36:	4b21      	ldr	r3, [pc, #132]	; (8003fbc <HAL_ADC_MspInit+0xf8>)
 8003f38:	4a21      	ldr	r2, [pc, #132]	; (8003fc0 <HAL_ADC_MspInit+0xfc>)
 8003f3a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003f3c:	4b1f      	ldr	r3, [pc, #124]	; (8003fbc <HAL_ADC_MspInit+0xf8>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f42:	4b1e      	ldr	r3, [pc, #120]	; (8003fbc <HAL_ADC_MspInit+0xf8>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f48:	4b1c      	ldr	r3, [pc, #112]	; (8003fbc <HAL_ADC_MspInit+0xf8>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003f4e:	4b1b      	ldr	r3, [pc, #108]	; (8003fbc <HAL_ADC_MspInit+0xf8>)
 8003f50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f54:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003f56:	4b19      	ldr	r3, [pc, #100]	; (8003fbc <HAL_ADC_MspInit+0xf8>)
 8003f58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f5c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003f5e:	4b17      	ldr	r3, [pc, #92]	; (8003fbc <HAL_ADC_MspInit+0xf8>)
 8003f60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f64:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003f66:	4b15      	ldr	r3, [pc, #84]	; (8003fbc <HAL_ADC_MspInit+0xf8>)
 8003f68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f6c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003f6e:	4b13      	ldr	r3, [pc, #76]	; (8003fbc <HAL_ADC_MspInit+0xf8>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f74:	4b11      	ldr	r3, [pc, #68]	; (8003fbc <HAL_ADC_MspInit+0xf8>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003f7a:	4810      	ldr	r0, [pc, #64]	; (8003fbc <HAL_ADC_MspInit+0xf8>)
 8003f7c:	f001 f890 	bl	80050a0 <HAL_DMA_Init>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003f86:	f7ff ff71 	bl	8003e6c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a0b      	ldr	r2, [pc, #44]	; (8003fbc <HAL_ADC_MspInit+0xf8>)
 8003f8e:	639a      	str	r2, [r3, #56]	; 0x38
 8003f90:	4a0a      	ldr	r2, [pc, #40]	; (8003fbc <HAL_ADC_MspInit+0xf8>)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003f96:	2200      	movs	r2, #0
 8003f98:	2100      	movs	r1, #0
 8003f9a:	2012      	movs	r0, #18
 8003f9c:	f001 f849 	bl	8005032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003fa0:	2012      	movs	r0, #18
 8003fa2:	f001 f862 	bl	800506a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003fa6:	bf00      	nop
 8003fa8:	3728      	adds	r7, #40	; 0x28
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	40012000 	.word	0x40012000
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	40020000 	.word	0x40020000
 8003fbc:	20000340 	.word	0x20000340
 8003fc0:	40026410 	.word	0x40026410

08003fc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b08a      	sub	sp, #40	; 0x28
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fcc:	f107 0314 	add.w	r3, r7, #20
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	605a      	str	r2, [r3, #4]
 8003fd6:	609a      	str	r2, [r3, #8]
 8003fd8:	60da      	str	r2, [r3, #12]
 8003fda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a1d      	ldr	r2, [pc, #116]	; (8004058 <HAL_SPI_MspInit+0x94>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d133      	bne.n	800404e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	613b      	str	r3, [r7, #16]
 8003fea:	4b1c      	ldr	r3, [pc, #112]	; (800405c <HAL_SPI_MspInit+0x98>)
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	4a1b      	ldr	r2, [pc, #108]	; (800405c <HAL_SPI_MspInit+0x98>)
 8003ff0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ff6:	4b19      	ldr	r3, [pc, #100]	; (800405c <HAL_SPI_MspInit+0x98>)
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ffe:	613b      	str	r3, [r7, #16]
 8004000:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004002:	2300      	movs	r3, #0
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	4b15      	ldr	r3, [pc, #84]	; (800405c <HAL_SPI_MspInit+0x98>)
 8004008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400a:	4a14      	ldr	r2, [pc, #80]	; (800405c <HAL_SPI_MspInit+0x98>)
 800400c:	f043 0302 	orr.w	r3, r3, #2
 8004010:	6313      	str	r3, [r2, #48]	; 0x30
 8004012:	4b12      	ldr	r3, [pc, #72]	; (800405c <HAL_SPI_MspInit+0x98>)
 8004014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800401e:	2338      	movs	r3, #56	; 0x38
 8004020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004022:	2302      	movs	r3, #2
 8004024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004026:	2300      	movs	r3, #0
 8004028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800402a:	2303      	movs	r3, #3
 800402c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800402e:	2306      	movs	r3, #6
 8004030:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004032:	f107 0314 	add.w	r3, r7, #20
 8004036:	4619      	mov	r1, r3
 8004038:	4809      	ldr	r0, [pc, #36]	; (8004060 <HAL_SPI_MspInit+0x9c>)
 800403a:	f001 fbc1 	bl	80057c0 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800403e:	2200      	movs	r2, #0
 8004040:	2100      	movs	r1, #0
 8004042:	2033      	movs	r0, #51	; 0x33
 8004044:	f000 fff5 	bl	8005032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8004048:	2033      	movs	r0, #51	; 0x33
 800404a:	f001 f80e 	bl	800506a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800404e:	bf00      	nop
 8004050:	3728      	adds	r7, #40	; 0x28
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	40003c00 	.word	0x40003c00
 800405c:	40023800 	.word	0x40023800
 8004060:	40020400 	.word	0x40020400

08004064 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a18      	ldr	r2, [pc, #96]	; (80040d4 <HAL_TIM_Base_MspInit+0x70>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d10e      	bne.n	8004094 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004076:	2300      	movs	r3, #0
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	4b17      	ldr	r3, [pc, #92]	; (80040d8 <HAL_TIM_Base_MspInit+0x74>)
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	4a16      	ldr	r2, [pc, #88]	; (80040d8 <HAL_TIM_Base_MspInit+0x74>)
 8004080:	f043 0302 	orr.w	r3, r3, #2
 8004084:	6413      	str	r3, [r2, #64]	; 0x40
 8004086:	4b14      	ldr	r3, [pc, #80]	; (80040d8 <HAL_TIM_Base_MspInit+0x74>)
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8004092:	e01a      	b.n	80040ca <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM11)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a10      	ldr	r2, [pc, #64]	; (80040dc <HAL_TIM_Base_MspInit+0x78>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d115      	bne.n	80040ca <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800409e:	2300      	movs	r3, #0
 80040a0:	60bb      	str	r3, [r7, #8]
 80040a2:	4b0d      	ldr	r3, [pc, #52]	; (80040d8 <HAL_TIM_Base_MspInit+0x74>)
 80040a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a6:	4a0c      	ldr	r2, [pc, #48]	; (80040d8 <HAL_TIM_Base_MspInit+0x74>)
 80040a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040ac:	6453      	str	r3, [r2, #68]	; 0x44
 80040ae:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <HAL_TIM_Base_MspInit+0x74>)
 80040b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040b6:	60bb      	str	r3, [r7, #8]
 80040b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80040ba:	2200      	movs	r2, #0
 80040bc:	2100      	movs	r1, #0
 80040be:	201a      	movs	r0, #26
 80040c0:	f000 ffb7 	bl	8005032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80040c4:	201a      	movs	r0, #26
 80040c6:	f000 ffd0 	bl	800506a <HAL_NVIC_EnableIRQ>
}
 80040ca:	bf00      	nop
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	40000400 	.word	0x40000400
 80040d8:	40023800 	.word	0x40023800
 80040dc:	40014800 	.word	0x40014800

080040e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08a      	sub	sp, #40	; 0x28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040e8:	f107 0314 	add.w	r3, r7, #20
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	605a      	str	r2, [r3, #4]
 80040f2:	609a      	str	r2, [r3, #8]
 80040f4:	60da      	str	r2, [r3, #12]
 80040f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a1d      	ldr	r2, [pc, #116]	; (8004174 <HAL_UART_MspInit+0x94>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d133      	bne.n	800416a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004102:	2300      	movs	r3, #0
 8004104:	613b      	str	r3, [r7, #16]
 8004106:	4b1c      	ldr	r3, [pc, #112]	; (8004178 <HAL_UART_MspInit+0x98>)
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	4a1b      	ldr	r2, [pc, #108]	; (8004178 <HAL_UART_MspInit+0x98>)
 800410c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004110:	6413      	str	r3, [r2, #64]	; 0x40
 8004112:	4b19      	ldr	r3, [pc, #100]	; (8004178 <HAL_UART_MspInit+0x98>)
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411a:	613b      	str	r3, [r7, #16]
 800411c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800411e:	2300      	movs	r3, #0
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	4b15      	ldr	r3, [pc, #84]	; (8004178 <HAL_UART_MspInit+0x98>)
 8004124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004126:	4a14      	ldr	r2, [pc, #80]	; (8004178 <HAL_UART_MspInit+0x98>)
 8004128:	f043 0301 	orr.w	r3, r3, #1
 800412c:	6313      	str	r3, [r2, #48]	; 0x30
 800412e:	4b12      	ldr	r3, [pc, #72]	; (8004178 <HAL_UART_MspInit+0x98>)
 8004130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800413a:	230c      	movs	r3, #12
 800413c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800413e:	2302      	movs	r3, #2
 8004140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004142:	2300      	movs	r3, #0
 8004144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004146:	2303      	movs	r3, #3
 8004148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800414a:	2307      	movs	r3, #7
 800414c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800414e:	f107 0314 	add.w	r3, r7, #20
 8004152:	4619      	mov	r1, r3
 8004154:	4809      	ldr	r0, [pc, #36]	; (800417c <HAL_UART_MspInit+0x9c>)
 8004156:	f001 fb33 	bl	80057c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800415a:	2200      	movs	r2, #0
 800415c:	2100      	movs	r1, #0
 800415e:	2026      	movs	r0, #38	; 0x26
 8004160:	f000 ff67 	bl	8005032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004164:	2026      	movs	r0, #38	; 0x26
 8004166:	f000 ff80 	bl	800506a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800416a:	bf00      	nop
 800416c:	3728      	adds	r7, #40	; 0x28
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40004400 	.word	0x40004400
 8004178:	40023800 	.word	0x40023800
 800417c:	40020000 	.word	0x40020000

08004180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004184:	e7fe      	b.n	8004184 <NMI_Handler+0x4>

08004186 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004186:	b480      	push	{r7}
 8004188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800418a:	e7fe      	b.n	800418a <HardFault_Handler+0x4>

0800418c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004190:	e7fe      	b.n	8004190 <MemManage_Handler+0x4>

08004192 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004192:	b480      	push	{r7}
 8004194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004196:	e7fe      	b.n	8004196 <BusFault_Handler+0x4>

08004198 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800419c:	e7fe      	b.n	800419c <UsageFault_Handler+0x4>

0800419e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800419e:	b480      	push	{r7}
 80041a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041a2:	bf00      	nop
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041b0:	bf00      	nop
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041ba:	b480      	push	{r7}
 80041bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041be:	bf00      	nop
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041cc:	f000 f8fc 	bl	80043c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041d0:	bf00      	nop
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80041d8:	4802      	ldr	r0, [pc, #8]	; (80041e4 <ADC_IRQHandler+0x10>)
 80041da:	f000 f958 	bl	800448e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80041de:	bf00      	nop
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	200002b8 	.word	0x200002b8

080041e8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80041ec:	4802      	ldr	r0, [pc, #8]	; (80041f8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80041ee:	f002 fcc8 	bl	8006b82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80041f2:	bf00      	nop
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	20000300 	.word	0x20000300

080041fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004200:	4802      	ldr	r0, [pc, #8]	; (800420c <USART2_IRQHandler+0x10>)
 8004202:	f003 f97d 	bl	8007500 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004206:	bf00      	nop
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	200003a0 	.word	0x200003a0

08004210 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8004214:	4802      	ldr	r0, [pc, #8]	; (8004220 <SPI3_IRQHandler+0x10>)
 8004216:	f002 f9cf 	bl	80065b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800421a:	bf00      	nop
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	20000260 	.word	0x20000260

08004224 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004228:	4802      	ldr	r0, [pc, #8]	; (8004234 <DMA2_Stream0_IRQHandler+0x10>)
 800422a:	f001 f861 	bl	80052f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800422e:	bf00      	nop
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	20000340 	.word	0x20000340

08004238 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004240:	4a14      	ldr	r2, [pc, #80]	; (8004294 <_sbrk+0x5c>)
 8004242:	4b15      	ldr	r3, [pc, #84]	; (8004298 <_sbrk+0x60>)
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800424c:	4b13      	ldr	r3, [pc, #76]	; (800429c <_sbrk+0x64>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d102      	bne.n	800425a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004254:	4b11      	ldr	r3, [pc, #68]	; (800429c <_sbrk+0x64>)
 8004256:	4a12      	ldr	r2, [pc, #72]	; (80042a0 <_sbrk+0x68>)
 8004258:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800425a:	4b10      	ldr	r3, [pc, #64]	; (800429c <_sbrk+0x64>)
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4413      	add	r3, r2
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	429a      	cmp	r2, r3
 8004266:	d207      	bcs.n	8004278 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004268:	f003 ff50 	bl	800810c <__errno>
 800426c:	4602      	mov	r2, r0
 800426e:	230c      	movs	r3, #12
 8004270:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8004272:	f04f 33ff 	mov.w	r3, #4294967295
 8004276:	e009      	b.n	800428c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004278:	4b08      	ldr	r3, [pc, #32]	; (800429c <_sbrk+0x64>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800427e:	4b07      	ldr	r3, [pc, #28]	; (800429c <_sbrk+0x64>)
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4413      	add	r3, r2
 8004286:	4a05      	ldr	r2, [pc, #20]	; (800429c <_sbrk+0x64>)
 8004288:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800428a:	68fb      	ldr	r3, [r7, #12]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	20020000 	.word	0x20020000
 8004298:	00000400 	.word	0x00000400
 800429c:	20000214 	.word	0x20000214
 80042a0:	200003e8 	.word	0x200003e8

080042a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80042a8:	4b08      	ldr	r3, [pc, #32]	; (80042cc <SystemInit+0x28>)
 80042aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ae:	4a07      	ldr	r2, [pc, #28]	; (80042cc <SystemInit+0x28>)
 80042b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80042b8:	4b04      	ldr	r3, [pc, #16]	; (80042cc <SystemInit+0x28>)
 80042ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80042be:	609a      	str	r2, [r3, #8]
#endif
}
 80042c0:	bf00      	nop
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	e000ed00 	.word	0xe000ed00

080042d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80042d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004308 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80042d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80042d6:	e003      	b.n	80042e0 <LoopCopyDataInit>

080042d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80042d8:	4b0c      	ldr	r3, [pc, #48]	; (800430c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80042da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80042dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80042de:	3104      	adds	r1, #4

080042e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80042e0:	480b      	ldr	r0, [pc, #44]	; (8004310 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80042e2:	4b0c      	ldr	r3, [pc, #48]	; (8004314 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80042e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80042e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80042e8:	d3f6      	bcc.n	80042d8 <CopyDataInit>
  ldr  r2, =_sbss
 80042ea:	4a0b      	ldr	r2, [pc, #44]	; (8004318 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80042ec:	e002      	b.n	80042f4 <LoopFillZerobss>

080042ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80042ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80042f0:	f842 3b04 	str.w	r3, [r2], #4

080042f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80042f4:	4b09      	ldr	r3, [pc, #36]	; (800431c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80042f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80042f8:	d3f9      	bcc.n	80042ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80042fa:	f7ff ffd3 	bl	80042a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80042fe:	f003 ff0b 	bl	8008118 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004302:	f7fc fe15 	bl	8000f30 <main>
  bx  lr    
 8004306:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004308:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800430c:	0800a2d8 	.word	0x0800a2d8
  ldr  r0, =_sdata
 8004310:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004314:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8004318:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 800431c:	200003e8 	.word	0x200003e8

08004320 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004320:	e7fe      	b.n	8004320 <DMA1_Stream0_IRQHandler>
	...

08004324 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004328:	4b0e      	ldr	r3, [pc, #56]	; (8004364 <HAL_Init+0x40>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a0d      	ldr	r2, [pc, #52]	; (8004364 <HAL_Init+0x40>)
 800432e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004332:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004334:	4b0b      	ldr	r3, [pc, #44]	; (8004364 <HAL_Init+0x40>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a0a      	ldr	r2, [pc, #40]	; (8004364 <HAL_Init+0x40>)
 800433a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800433e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004340:	4b08      	ldr	r3, [pc, #32]	; (8004364 <HAL_Init+0x40>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a07      	ldr	r2, [pc, #28]	; (8004364 <HAL_Init+0x40>)
 8004346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800434a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800434c:	2003      	movs	r0, #3
 800434e:	f000 fe65 	bl	800501c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004352:	2000      	movs	r0, #0
 8004354:	f000 f808 	bl	8004368 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004358:	f7ff fd8c 	bl	8003e74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	40023c00 	.word	0x40023c00

08004368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004370:	4b12      	ldr	r3, [pc, #72]	; (80043bc <HAL_InitTick+0x54>)
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	4b12      	ldr	r3, [pc, #72]	; (80043c0 <HAL_InitTick+0x58>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	4619      	mov	r1, r3
 800437a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800437e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004382:	fbb2 f3f3 	udiv	r3, r2, r3
 8004386:	4618      	mov	r0, r3
 8004388:	f000 fe7d 	bl	8005086 <HAL_SYSTICK_Config>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e00e      	b.n	80043b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b0f      	cmp	r3, #15
 800439a:	d80a      	bhi.n	80043b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800439c:	2200      	movs	r2, #0
 800439e:	6879      	ldr	r1, [r7, #4]
 80043a0:	f04f 30ff 	mov.w	r0, #4294967295
 80043a4:	f000 fe45 	bl	8005032 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043a8:	4a06      	ldr	r2, [pc, #24]	; (80043c4 <HAL_InitTick+0x5c>)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
 80043b0:	e000      	b.n	80043b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	20000014 	.word	0x20000014
 80043c0:	2000001c 	.word	0x2000001c
 80043c4:	20000018 	.word	0x20000018

080043c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043cc:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <HAL_IncTick+0x20>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	461a      	mov	r2, r3
 80043d2:	4b06      	ldr	r3, [pc, #24]	; (80043ec <HAL_IncTick+0x24>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4413      	add	r3, r2
 80043d8:	4a04      	ldr	r2, [pc, #16]	; (80043ec <HAL_IncTick+0x24>)
 80043da:	6013      	str	r3, [r2, #0]
}
 80043dc:	bf00      	nop
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	2000001c 	.word	0x2000001c
 80043ec:	200003e0 	.word	0x200003e0

080043f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  return uwTick;
 80043f4:	4b03      	ldr	r3, [pc, #12]	; (8004404 <HAL_GetTick+0x14>)
 80043f6:	681b      	ldr	r3, [r3, #0]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	200003e0 	.word	0x200003e0

08004408 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004410:	2300      	movs	r3, #0
 8004412:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e033      	b.n	8004486 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	2b00      	cmp	r3, #0
 8004424:	d109      	bne.n	800443a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7ff fd4c 	bl	8003ec4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	f003 0310 	and.w	r3, r3, #16
 8004442:	2b00      	cmp	r3, #0
 8004444:	d118      	bne.n	8004478 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800444e:	f023 0302 	bic.w	r3, r3, #2
 8004452:	f043 0202 	orr.w	r2, r3, #2
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 fb86 	bl	8004b6c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	f023 0303 	bic.w	r3, r3, #3
 800446e:	f043 0201 	orr.w	r2, r3, #1
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	641a      	str	r2, [r3, #64]	; 0x40
 8004476:	e001      	b.n	800447c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004484:	7bfb      	ldrb	r3, [r7, #15]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b084      	sub	sp, #16
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004496:	2300      	movs	r3, #0
 8004498:	60fb      	str	r3, [r7, #12]
 800449a:	2300      	movs	r3, #0
 800449c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	bf0c      	ite	eq
 80044ac:	2301      	moveq	r3, #1
 80044ae:	2300      	movne	r3, #0
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f003 0320 	and.w	r3, r3, #32
 80044be:	2b20      	cmp	r3, #32
 80044c0:	bf0c      	ite	eq
 80044c2:	2301      	moveq	r3, #1
 80044c4:	2300      	movne	r3, #0
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d049      	beq.n	8004564 <HAL_ADC_IRQHandler+0xd6>
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d046      	beq.n	8004564 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	f003 0310 	and.w	r3, r3, #16
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d105      	bne.n	80044ee <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d12b      	bne.n	8004554 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004500:	2b00      	cmp	r3, #0
 8004502:	d127      	bne.n	8004554 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800450e:	2b00      	cmp	r3, #0
 8004510:	d006      	beq.n	8004520 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800451c:	2b00      	cmp	r3, #0
 800451e:	d119      	bne.n	8004554 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0220 	bic.w	r2, r2, #32
 800452e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004534:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004540:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d105      	bne.n	8004554 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454c:	f043 0201 	orr.w	r2, r3, #1
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f9af 	bl	80048b8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f06f 0212 	mvn.w	r2, #18
 8004562:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0304 	and.w	r3, r3, #4
 800456e:	2b04      	cmp	r3, #4
 8004570:	bf0c      	ite	eq
 8004572:	2301      	moveq	r3, #1
 8004574:	2300      	movne	r3, #0
 8004576:	b2db      	uxtb	r3, r3
 8004578:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004584:	2b80      	cmp	r3, #128	; 0x80
 8004586:	bf0c      	ite	eq
 8004588:	2301      	moveq	r3, #1
 800458a:	2300      	movne	r3, #0
 800458c:	b2db      	uxtb	r3, r3
 800458e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d057      	beq.n	8004646 <HAL_ADC_IRQHandler+0x1b8>
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d054      	beq.n	8004646 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a0:	f003 0310 	and.w	r3, r3, #16
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d105      	bne.n	80045b4 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d139      	bne.n	8004636 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d006      	beq.n	80045de <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d12b      	bne.n	8004636 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d124      	bne.n	8004636 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d11d      	bne.n	8004636 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d119      	bne.n	8004636 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004610:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004626:	2b00      	cmp	r3, #0
 8004628:	d105      	bne.n	8004636 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	f043 0201 	orr.w	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 fc16 	bl	8004e68 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f06f 020c 	mvn.w	r2, #12
 8004644:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b01      	cmp	r3, #1
 8004652:	bf0c      	ite	eq
 8004654:	2301      	moveq	r3, #1
 8004656:	2300      	movne	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004666:	2b40      	cmp	r3, #64	; 0x40
 8004668:	bf0c      	ite	eq
 800466a:	2301      	moveq	r3, #1
 800466c:	2300      	movne	r3, #0
 800466e:	b2db      	uxtb	r3, r3
 8004670:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d017      	beq.n	80046a8 <HAL_ADC_IRQHandler+0x21a>
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d014      	beq.n	80046a8 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b01      	cmp	r3, #1
 800468a:	d10d      	bne.n	80046a8 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004690:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f921 	bl	80048e0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f06f 0201 	mvn.w	r2, #1
 80046a6:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b20      	cmp	r3, #32
 80046b4:	bf0c      	ite	eq
 80046b6:	2301      	moveq	r3, #1
 80046b8:	2300      	movne	r3, #0
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046cc:	bf0c      	ite	eq
 80046ce:	2301      	moveq	r3, #1
 80046d0:	2300      	movne	r3, #0
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d015      	beq.n	8004708 <HAL_ADC_IRQHandler+0x27a>
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d012      	beq.n	8004708 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e6:	f043 0202 	orr.w	r2, r3, #2
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f06f 0220 	mvn.w	r2, #32
 80046f6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f8fb 	bl	80048f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f06f 0220 	mvn.w	r2, #32
 8004706:	601a      	str	r2, [r3, #0]
  }
}
 8004708:	bf00      	nop
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800471c:	2300      	movs	r3, #0
 800471e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004726:	2b01      	cmp	r3, #1
 8004728:	d101      	bne.n	800472e <HAL_ADC_Start_DMA+0x1e>
 800472a:	2302      	movs	r3, #2
 800472c:	e0b1      	b.n	8004892 <HAL_ADC_Start_DMA+0x182>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	2b01      	cmp	r3, #1
 8004742:	d018      	beq.n	8004776 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689a      	ldr	r2, [r3, #8]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0201 	orr.w	r2, r2, #1
 8004752:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004754:	4b51      	ldr	r3, [pc, #324]	; (800489c <HAL_ADC_Start_DMA+0x18c>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a51      	ldr	r2, [pc, #324]	; (80048a0 <HAL_ADC_Start_DMA+0x190>)
 800475a:	fba2 2303 	umull	r2, r3, r2, r3
 800475e:	0c9a      	lsrs	r2, r3, #18
 8004760:	4613      	mov	r3, r2
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	4413      	add	r3, r2
 8004766:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004768:	e002      	b.n	8004770 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	3b01      	subs	r3, #1
 800476e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1f9      	bne.n	800476a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	2b01      	cmp	r3, #1
 8004782:	f040 8085 	bne.w	8004890 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800478e:	f023 0301 	bic.w	r3, r3, #1
 8004792:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d007      	beq.n	80047b8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80047b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047c4:	d106      	bne.n	80047d4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ca:	f023 0206 	bic.w	r2, r3, #6
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	645a      	str	r2, [r3, #68]	; 0x44
 80047d2:	e002      	b.n	80047da <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80047e2:	4b30      	ldr	r3, [pc, #192]	; (80048a4 <HAL_ADC_Start_DMA+0x194>)
 80047e4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ea:	4a2f      	ldr	r2, [pc, #188]	; (80048a8 <HAL_ADC_Start_DMA+0x198>)
 80047ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f2:	4a2e      	ldr	r2, [pc, #184]	; (80048ac <HAL_ADC_Start_DMA+0x19c>)
 80047f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fa:	4a2d      	ldr	r2, [pc, #180]	; (80048b0 <HAL_ADC_Start_DMA+0x1a0>)
 80047fc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004806:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004816:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689a      	ldr	r2, [r3, #8]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004826:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	334c      	adds	r3, #76	; 0x4c
 8004832:	4619      	mov	r1, r3
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f000 fce0 	bl	80051fc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f003 031f 	and.w	r3, r3, #31
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10f      	bne.n	8004868 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d11c      	bne.n	8004890 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004864:	609a      	str	r2, [r3, #8]
 8004866:	e013      	b.n	8004890 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a11      	ldr	r2, [pc, #68]	; (80048b4 <HAL_ADC_Start_DMA+0x1a4>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d10e      	bne.n	8004890 <HAL_ADC_Start_DMA+0x180>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d107      	bne.n	8004890 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689a      	ldr	r2, [r3, #8]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800488e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3718      	adds	r7, #24
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	20000014 	.word	0x20000014
 80048a0:	431bde83 	.word	0x431bde83
 80048a4:	40012300 	.word	0x40012300
 80048a8:	08004d65 	.word	0x08004d65
 80048ac:	08004e1f 	.word	0x08004e1f
 80048b0:	08004e3b 	.word	0x08004e3b
 80048b4:	40012000 	.word	0x40012000

080048b8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004912:	2300      	movs	r3, #0
 8004914:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800491c:	2b01      	cmp	r3, #1
 800491e:	d101      	bne.n	8004924 <HAL_ADC_ConfigChannel+0x1c>
 8004920:	2302      	movs	r3, #2
 8004922:	e113      	b.n	8004b4c <HAL_ADC_ConfigChannel+0x244>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b09      	cmp	r3, #9
 8004932:	d925      	bls.n	8004980 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68d9      	ldr	r1, [r3, #12]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	b29b      	uxth	r3, r3
 8004940:	461a      	mov	r2, r3
 8004942:	4613      	mov	r3, r2
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	4413      	add	r3, r2
 8004948:	3b1e      	subs	r3, #30
 800494a:	2207      	movs	r2, #7
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	43da      	mvns	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	400a      	ands	r2, r1
 8004958:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68d9      	ldr	r1, [r3, #12]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	b29b      	uxth	r3, r3
 800496a:	4618      	mov	r0, r3
 800496c:	4603      	mov	r3, r0
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	4403      	add	r3, r0
 8004972:	3b1e      	subs	r3, #30
 8004974:	409a      	lsls	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	60da      	str	r2, [r3, #12]
 800497e:	e022      	b.n	80049c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6919      	ldr	r1, [r3, #16]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	b29b      	uxth	r3, r3
 800498c:	461a      	mov	r2, r3
 800498e:	4613      	mov	r3, r2
 8004990:	005b      	lsls	r3, r3, #1
 8004992:	4413      	add	r3, r2
 8004994:	2207      	movs	r2, #7
 8004996:	fa02 f303 	lsl.w	r3, r2, r3
 800499a:	43da      	mvns	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	400a      	ands	r2, r1
 80049a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6919      	ldr	r1, [r3, #16]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	689a      	ldr	r2, [r3, #8]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	4618      	mov	r0, r3
 80049b6:	4603      	mov	r3, r0
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	4403      	add	r3, r0
 80049bc:	409a      	lsls	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	2b06      	cmp	r3, #6
 80049cc:	d824      	bhi.n	8004a18 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	4613      	mov	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	3b05      	subs	r3, #5
 80049e0:	221f      	movs	r2, #31
 80049e2:	fa02 f303 	lsl.w	r3, r2, r3
 80049e6:	43da      	mvns	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	400a      	ands	r2, r1
 80049ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	4618      	mov	r0, r3
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	4613      	mov	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	3b05      	subs	r3, #5
 8004a0a:	fa00 f203 	lsl.w	r2, r0, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	635a      	str	r2, [r3, #52]	; 0x34
 8004a16:	e04c      	b.n	8004ab2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	2b0c      	cmp	r3, #12
 8004a1e:	d824      	bhi.n	8004a6a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	3b23      	subs	r3, #35	; 0x23
 8004a32:	221f      	movs	r2, #31
 8004a34:	fa02 f303 	lsl.w	r3, r2, r3
 8004a38:	43da      	mvns	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	400a      	ands	r2, r1
 8004a40:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	4618      	mov	r0, r3
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	4613      	mov	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	3b23      	subs	r3, #35	; 0x23
 8004a5c:	fa00 f203 	lsl.w	r2, r0, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	631a      	str	r2, [r3, #48]	; 0x30
 8004a68:	e023      	b.n	8004ab2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	4613      	mov	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	3b41      	subs	r3, #65	; 0x41
 8004a7c:	221f      	movs	r2, #31
 8004a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a82:	43da      	mvns	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	400a      	ands	r2, r1
 8004a8a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	4618      	mov	r0, r3
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	3b41      	subs	r3, #65	; 0x41
 8004aa6:	fa00 f203 	lsl.w	r2, r0, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ab2:	4b29      	ldr	r3, [pc, #164]	; (8004b58 <HAL_ADC_ConfigChannel+0x250>)
 8004ab4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a28      	ldr	r2, [pc, #160]	; (8004b5c <HAL_ADC_ConfigChannel+0x254>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d10f      	bne.n	8004ae0 <HAL_ADC_ConfigChannel+0x1d8>
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b12      	cmp	r3, #18
 8004ac6:	d10b      	bne.n	8004ae0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a1d      	ldr	r2, [pc, #116]	; (8004b5c <HAL_ADC_ConfigChannel+0x254>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d12b      	bne.n	8004b42 <HAL_ADC_ConfigChannel+0x23a>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a1c      	ldr	r2, [pc, #112]	; (8004b60 <HAL_ADC_ConfigChannel+0x258>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d003      	beq.n	8004afc <HAL_ADC_ConfigChannel+0x1f4>
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2b11      	cmp	r3, #17
 8004afa:	d122      	bne.n	8004b42 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a11      	ldr	r2, [pc, #68]	; (8004b60 <HAL_ADC_ConfigChannel+0x258>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d111      	bne.n	8004b42 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004b1e:	4b11      	ldr	r3, [pc, #68]	; (8004b64 <HAL_ADC_ConfigChannel+0x25c>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a11      	ldr	r2, [pc, #68]	; (8004b68 <HAL_ADC_ConfigChannel+0x260>)
 8004b24:	fba2 2303 	umull	r2, r3, r2, r3
 8004b28:	0c9a      	lsrs	r2, r3, #18
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004b34:	e002      	b.n	8004b3c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1f9      	bne.n	8004b36 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3714      	adds	r7, #20
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	40012300 	.word	0x40012300
 8004b5c:	40012000 	.word	0x40012000
 8004b60:	10000012 	.word	0x10000012
 8004b64:	20000014 	.word	0x20000014
 8004b68:	431bde83 	.word	0x431bde83

08004b6c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b74:	4b79      	ldr	r3, [pc, #484]	; (8004d5c <ADC_Init+0x1f0>)
 8004b76:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ba0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6859      	ldr	r1, [r3, #4]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	021a      	lsls	r2, r3, #8
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004bc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6859      	ldr	r1, [r3, #4]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689a      	ldr	r2, [r3, #8]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004be6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6899      	ldr	r1, [r3, #8]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfe:	4a58      	ldr	r2, [pc, #352]	; (8004d60 <ADC_Init+0x1f4>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d022      	beq.n	8004c4a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689a      	ldr	r2, [r3, #8]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6899      	ldr	r1, [r3, #8]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6899      	ldr	r1, [r3, #8]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	609a      	str	r2, [r3, #8]
 8004c48:	e00f      	b.n	8004c6a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689a      	ldr	r2, [r3, #8]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c68:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	689a      	ldr	r2, [r3, #8]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 0202 	bic.w	r2, r2, #2
 8004c78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	6899      	ldr	r1, [r3, #8]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	7e1b      	ldrb	r3, [r3, #24]
 8004c84:	005a      	lsls	r2, r3, #1
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d01b      	beq.n	8004cd0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ca6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004cb6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	6859      	ldr	r1, [r3, #4]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	035a      	lsls	r2, r3, #13
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	605a      	str	r2, [r3, #4]
 8004cce:	e007      	b.n	8004ce0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cde:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004cee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	051a      	lsls	r2, r3, #20
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004d14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6899      	ldr	r1, [r3, #8]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d22:	025a      	lsls	r2, r3, #9
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689a      	ldr	r2, [r3, #8]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6899      	ldr	r1, [r3, #8]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	029a      	lsls	r2, r3, #10
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	609a      	str	r2, [r3, #8]
}
 8004d50:	bf00      	nop
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	40012300 	.word	0x40012300
 8004d60:	0f000001 	.word	0x0f000001

08004d64 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d70:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d13c      	bne.n	8004df8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d12b      	bne.n	8004df0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d127      	bne.n	8004df0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d006      	beq.n	8004dbc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d119      	bne.n	8004df0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685a      	ldr	r2, [r3, #4]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 0220 	bic.w	r2, r2, #32
 8004dca:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ddc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d105      	bne.n	8004df0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de8:	f043 0201 	orr.w	r2, r3, #1
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f7ff fd61 	bl	80048b8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004df6:	e00e      	b.n	8004e16 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfc:	f003 0310 	and.w	r3, r3, #16
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d003      	beq.n	8004e0c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f7ff fd75 	bl	80048f4 <HAL_ADC_ErrorCallback>
}
 8004e0a:	e004      	b.n	8004e16 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	4798      	blx	r3
}
 8004e16:	bf00      	nop
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b084      	sub	sp, #16
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f7ff fd4d 	bl	80048cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e32:	bf00      	nop
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b084      	sub	sp, #16
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e46:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2240      	movs	r2, #64	; 0x40
 8004e4c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e52:	f043 0204 	orr.w	r2, r3, #4
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f7ff fd4a 	bl	80048f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e60:	bf00      	nop
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f003 0307 	and.w	r3, r3, #7
 8004e8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e8c:	4b0c      	ldr	r3, [pc, #48]	; (8004ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e98:	4013      	ands	r3, r2
 8004e9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ea4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004eae:	4a04      	ldr	r2, [pc, #16]	; (8004ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	60d3      	str	r3, [r2, #12]
}
 8004eb4:	bf00      	nop
 8004eb6:	3714      	adds	r7, #20
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	e000ed00 	.word	0xe000ed00

08004ec4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ec8:	4b04      	ldr	r3, [pc, #16]	; (8004edc <__NVIC_GetPriorityGrouping+0x18>)
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	0a1b      	lsrs	r3, r3, #8
 8004ece:	f003 0307 	and.w	r3, r3, #7
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	e000ed00 	.word	0xe000ed00

08004ee0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	db0b      	blt.n	8004f0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ef2:	79fb      	ldrb	r3, [r7, #7]
 8004ef4:	f003 021f 	and.w	r2, r3, #31
 8004ef8:	4907      	ldr	r1, [pc, #28]	; (8004f18 <__NVIC_EnableIRQ+0x38>)
 8004efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004efe:	095b      	lsrs	r3, r3, #5
 8004f00:	2001      	movs	r0, #1
 8004f02:	fa00 f202 	lsl.w	r2, r0, r2
 8004f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f0a:	bf00      	nop
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	e000e100 	.word	0xe000e100

08004f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	4603      	mov	r3, r0
 8004f24:	6039      	str	r1, [r7, #0]
 8004f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	db0a      	blt.n	8004f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	b2da      	uxtb	r2, r3
 8004f34:	490c      	ldr	r1, [pc, #48]	; (8004f68 <__NVIC_SetPriority+0x4c>)
 8004f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f3a:	0112      	lsls	r2, r2, #4
 8004f3c:	b2d2      	uxtb	r2, r2
 8004f3e:	440b      	add	r3, r1
 8004f40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f44:	e00a      	b.n	8004f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	b2da      	uxtb	r2, r3
 8004f4a:	4908      	ldr	r1, [pc, #32]	; (8004f6c <__NVIC_SetPriority+0x50>)
 8004f4c:	79fb      	ldrb	r3, [r7, #7]
 8004f4e:	f003 030f 	and.w	r3, r3, #15
 8004f52:	3b04      	subs	r3, #4
 8004f54:	0112      	lsls	r2, r2, #4
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	440b      	add	r3, r1
 8004f5a:	761a      	strb	r2, [r3, #24]
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	e000e100 	.word	0xe000e100
 8004f6c:	e000ed00 	.word	0xe000ed00

08004f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b089      	sub	sp, #36	; 0x24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f003 0307 	and.w	r3, r3, #7
 8004f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	f1c3 0307 	rsb	r3, r3, #7
 8004f8a:	2b04      	cmp	r3, #4
 8004f8c:	bf28      	it	cs
 8004f8e:	2304      	movcs	r3, #4
 8004f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	3304      	adds	r3, #4
 8004f96:	2b06      	cmp	r3, #6
 8004f98:	d902      	bls.n	8004fa0 <NVIC_EncodePriority+0x30>
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	3b03      	subs	r3, #3
 8004f9e:	e000      	b.n	8004fa2 <NVIC_EncodePriority+0x32>
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	fa02 f303 	lsl.w	r3, r2, r3
 8004fae:	43da      	mvns	r2, r3
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	401a      	ands	r2, r3
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc2:	43d9      	mvns	r1, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fc8:	4313      	orrs	r3, r2
         );
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3724      	adds	r7, #36	; 0x24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
	...

08004fd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fe8:	d301      	bcc.n	8004fee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fea:	2301      	movs	r3, #1
 8004fec:	e00f      	b.n	800500e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fee:	4a0a      	ldr	r2, [pc, #40]	; (8005018 <SysTick_Config+0x40>)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ff6:	210f      	movs	r1, #15
 8004ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ffc:	f7ff ff8e 	bl	8004f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005000:	4b05      	ldr	r3, [pc, #20]	; (8005018 <SysTick_Config+0x40>)
 8005002:	2200      	movs	r2, #0
 8005004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005006:	4b04      	ldr	r3, [pc, #16]	; (8005018 <SysTick_Config+0x40>)
 8005008:	2207      	movs	r2, #7
 800500a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	e000e010 	.word	0xe000e010

0800501c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f7ff ff29 	bl	8004e7c <__NVIC_SetPriorityGrouping>
}
 800502a:	bf00      	nop
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005032:	b580      	push	{r7, lr}
 8005034:	b086      	sub	sp, #24
 8005036:	af00      	add	r7, sp, #0
 8005038:	4603      	mov	r3, r0
 800503a:	60b9      	str	r1, [r7, #8]
 800503c:	607a      	str	r2, [r7, #4]
 800503e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005040:	2300      	movs	r3, #0
 8005042:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005044:	f7ff ff3e 	bl	8004ec4 <__NVIC_GetPriorityGrouping>
 8005048:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	68b9      	ldr	r1, [r7, #8]
 800504e:	6978      	ldr	r0, [r7, #20]
 8005050:	f7ff ff8e 	bl	8004f70 <NVIC_EncodePriority>
 8005054:	4602      	mov	r2, r0
 8005056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800505a:	4611      	mov	r1, r2
 800505c:	4618      	mov	r0, r3
 800505e:	f7ff ff5d 	bl	8004f1c <__NVIC_SetPriority>
}
 8005062:	bf00      	nop
 8005064:	3718      	adds	r7, #24
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b082      	sub	sp, #8
 800506e:	af00      	add	r7, sp, #0
 8005070:	4603      	mov	r3, r0
 8005072:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005078:	4618      	mov	r0, r3
 800507a:	f7ff ff31 	bl	8004ee0 <__NVIC_EnableIRQ>
}
 800507e:	bf00      	nop
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b082      	sub	sp, #8
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7ff ffa2 	bl	8004fd8 <SysTick_Config>
 8005094:	4603      	mov	r3, r0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
	...

080050a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80050a8:	2300      	movs	r3, #0
 80050aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80050ac:	f7ff f9a0 	bl	80043f0 <HAL_GetTick>
 80050b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e099      	b.n	80051f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f022 0201 	bic.w	r2, r2, #1
 80050da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050dc:	e00f      	b.n	80050fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050de:	f7ff f987 	bl	80043f0 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b05      	cmp	r3, #5
 80050ea:	d908      	bls.n	80050fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2220      	movs	r2, #32
 80050f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2203      	movs	r2, #3
 80050f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e078      	b.n	80051f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1e8      	bne.n	80050de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	4b38      	ldr	r3, [pc, #224]	; (80051f8 <HAL_DMA_Init+0x158>)
 8005118:	4013      	ands	r3, r2
 800511a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800512a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005136:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005142:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	4313      	orrs	r3, r2
 800514e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005154:	2b04      	cmp	r3, #4
 8005156:	d107      	bne.n	8005168 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005160:	4313      	orrs	r3, r2
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	4313      	orrs	r3, r2
 8005166:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f023 0307 	bic.w	r3, r3, #7
 800517e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	4313      	orrs	r3, r2
 8005188:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518e:	2b04      	cmp	r3, #4
 8005190:	d117      	bne.n	80051c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	4313      	orrs	r3, r2
 800519a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00e      	beq.n	80051c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 fa91 	bl	80056cc <DMA_CheckFifoParam>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d008      	beq.n	80051c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2240      	movs	r2, #64	; 0x40
 80051b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80051be:	2301      	movs	r3, #1
 80051c0:	e016      	b.n	80051f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fa48 	bl	8005660 <DMA_CalcBaseAndBitshift>
 80051d0:	4603      	mov	r3, r0
 80051d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051d8:	223f      	movs	r2, #63	; 0x3f
 80051da:	409a      	lsls	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	f010803f 	.word	0xf010803f

080051fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
 8005208:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800520a:	2300      	movs	r3, #0
 800520c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005212:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800521a:	2b01      	cmp	r3, #1
 800521c:	d101      	bne.n	8005222 <HAL_DMA_Start_IT+0x26>
 800521e:	2302      	movs	r3, #2
 8005220:	e040      	b.n	80052a4 <HAL_DMA_Start_IT+0xa8>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b01      	cmp	r3, #1
 8005234:	d12f      	bne.n	8005296 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2202      	movs	r2, #2
 800523a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	68b9      	ldr	r1, [r7, #8]
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f000 f9da 	bl	8005604 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005254:	223f      	movs	r2, #63	; 0x3f
 8005256:	409a      	lsls	r2, r3
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f042 0216 	orr.w	r2, r2, #22
 800526a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005270:	2b00      	cmp	r3, #0
 8005272:	d007      	beq.n	8005284 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f042 0208 	orr.w	r2, r2, #8
 8005282:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f042 0201 	orr.w	r2, r2, #1
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	e005      	b.n	80052a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800529e:	2302      	movs	r3, #2
 80052a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80052a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3718      	adds	r7, #24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d004      	beq.n	80052ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2280      	movs	r2, #128	; 0x80
 80052c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e00c      	b.n	80052e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2205      	movs	r2, #5
 80052ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 0201 	bic.w	r2, r2, #1
 80052e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80052fc:	4b92      	ldr	r3, [pc, #584]	; (8005548 <HAL_DMA_IRQHandler+0x258>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a92      	ldr	r2, [pc, #584]	; (800554c <HAL_DMA_IRQHandler+0x25c>)
 8005302:	fba2 2303 	umull	r2, r3, r2, r3
 8005306:	0a9b      	lsrs	r3, r3, #10
 8005308:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800530e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800531a:	2208      	movs	r2, #8
 800531c:	409a      	lsls	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	4013      	ands	r3, r2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d01a      	beq.n	800535c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0304 	and.w	r3, r3, #4
 8005330:	2b00      	cmp	r3, #0
 8005332:	d013      	beq.n	800535c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f022 0204 	bic.w	r2, r2, #4
 8005342:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005348:	2208      	movs	r2, #8
 800534a:	409a      	lsls	r2, r3
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005354:	f043 0201 	orr.w	r2, r3, #1
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005360:	2201      	movs	r2, #1
 8005362:	409a      	lsls	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4013      	ands	r3, r2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d012      	beq.n	8005392 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00b      	beq.n	8005392 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800537e:	2201      	movs	r2, #1
 8005380:	409a      	lsls	r2, r3
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800538a:	f043 0202 	orr.w	r2, r3, #2
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005396:	2204      	movs	r2, #4
 8005398:	409a      	lsls	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	4013      	ands	r3, r2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d012      	beq.n	80053c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00b      	beq.n	80053c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053b4:	2204      	movs	r2, #4
 80053b6:	409a      	lsls	r2, r3
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c0:	f043 0204 	orr.w	r2, r3, #4
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053cc:	2210      	movs	r2, #16
 80053ce:	409a      	lsls	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	4013      	ands	r3, r2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d043      	beq.n	8005460 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0308 	and.w	r3, r3, #8
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d03c      	beq.n	8005460 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ea:	2210      	movs	r2, #16
 80053ec:	409a      	lsls	r2, r3
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d018      	beq.n	8005432 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d108      	bne.n	8005420 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005412:	2b00      	cmp	r3, #0
 8005414:	d024      	beq.n	8005460 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	4798      	blx	r3
 800541e:	e01f      	b.n	8005460 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005424:	2b00      	cmp	r3, #0
 8005426:	d01b      	beq.n	8005460 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	4798      	blx	r3
 8005430:	e016      	b.n	8005460 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543c:	2b00      	cmp	r3, #0
 800543e:	d107      	bne.n	8005450 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0208 	bic.w	r2, r2, #8
 800544e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005454:	2b00      	cmp	r3, #0
 8005456:	d003      	beq.n	8005460 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005464:	2220      	movs	r2, #32
 8005466:	409a      	lsls	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	4013      	ands	r3, r2
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 808e 	beq.w	800558e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0310 	and.w	r3, r3, #16
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 8086 	beq.w	800558e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005486:	2220      	movs	r2, #32
 8005488:	409a      	lsls	r2, r3
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b05      	cmp	r3, #5
 8005498:	d136      	bne.n	8005508 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 0216 	bic.w	r2, r2, #22
 80054a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	695a      	ldr	r2, [r3, #20]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d103      	bne.n	80054ca <HAL_DMA_IRQHandler+0x1da>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d007      	beq.n	80054da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f022 0208 	bic.w	r2, r2, #8
 80054d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054de:	223f      	movs	r2, #63	; 0x3f
 80054e0:	409a      	lsls	r2, r3
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d07d      	beq.n	80055fa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	4798      	blx	r3
        }
        return;
 8005506:	e078      	b.n	80055fa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d01c      	beq.n	8005550 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d108      	bne.n	8005536 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005528:	2b00      	cmp	r3, #0
 800552a:	d030      	beq.n	800558e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	4798      	blx	r3
 8005534:	e02b      	b.n	800558e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800553a:	2b00      	cmp	r3, #0
 800553c:	d027      	beq.n	800558e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	4798      	blx	r3
 8005546:	e022      	b.n	800558e <HAL_DMA_IRQHandler+0x29e>
 8005548:	20000014 	.word	0x20000014
 800554c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10f      	bne.n	800557e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 0210 	bic.w	r2, r2, #16
 800556c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005592:	2b00      	cmp	r3, #0
 8005594:	d032      	beq.n	80055fc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d022      	beq.n	80055e8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2205      	movs	r2, #5
 80055a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 0201 	bic.w	r2, r2, #1
 80055b8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	3301      	adds	r3, #1
 80055be:	60bb      	str	r3, [r7, #8]
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d307      	bcc.n	80055d6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1f2      	bne.n	80055ba <HAL_DMA_IRQHandler+0x2ca>
 80055d4:	e000      	b.n	80055d8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80055d6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d005      	beq.n	80055fc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	4798      	blx	r3
 80055f8:	e000      	b.n	80055fc <HAL_DMA_IRQHandler+0x30c>
        return;
 80055fa:	bf00      	nop
    }
  }
}
 80055fc:	3718      	adds	r7, #24
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop

08005604 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
 8005610:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005620:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	683a      	ldr	r2, [r7, #0]
 8005628:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	2b40      	cmp	r3, #64	; 0x40
 8005630:	d108      	bne.n	8005644 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005642:	e007      	b.n	8005654 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	60da      	str	r2, [r3, #12]
}
 8005654:	bf00      	nop
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	b2db      	uxtb	r3, r3
 800566e:	3b10      	subs	r3, #16
 8005670:	4a14      	ldr	r2, [pc, #80]	; (80056c4 <DMA_CalcBaseAndBitshift+0x64>)
 8005672:	fba2 2303 	umull	r2, r3, r2, r3
 8005676:	091b      	lsrs	r3, r3, #4
 8005678:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800567a:	4a13      	ldr	r2, [pc, #76]	; (80056c8 <DMA_CalcBaseAndBitshift+0x68>)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4413      	add	r3, r2
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	461a      	mov	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2b03      	cmp	r3, #3
 800568c:	d909      	bls.n	80056a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005696:	f023 0303 	bic.w	r3, r3, #3
 800569a:	1d1a      	adds	r2, r3, #4
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	659a      	str	r2, [r3, #88]	; 0x58
 80056a0:	e007      	b.n	80056b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80056aa:	f023 0303 	bic.w	r3, r3, #3
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	aaaaaaab 	.word	0xaaaaaaab
 80056c8:	0800a0b0 	.word	0x0800a0b0

080056cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056d4:	2300      	movs	r3, #0
 80056d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d11f      	bne.n	8005726 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	2b03      	cmp	r3, #3
 80056ea:	d855      	bhi.n	8005798 <DMA_CheckFifoParam+0xcc>
 80056ec:	a201      	add	r2, pc, #4	; (adr r2, 80056f4 <DMA_CheckFifoParam+0x28>)
 80056ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f2:	bf00      	nop
 80056f4:	08005705 	.word	0x08005705
 80056f8:	08005717 	.word	0x08005717
 80056fc:	08005705 	.word	0x08005705
 8005700:	08005799 	.word	0x08005799
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005708:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d045      	beq.n	800579c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005714:	e042      	b.n	800579c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800571e:	d13f      	bne.n	80057a0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005724:	e03c      	b.n	80057a0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800572e:	d121      	bne.n	8005774 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2b03      	cmp	r3, #3
 8005734:	d836      	bhi.n	80057a4 <DMA_CheckFifoParam+0xd8>
 8005736:	a201      	add	r2, pc, #4	; (adr r2, 800573c <DMA_CheckFifoParam+0x70>)
 8005738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573c:	0800574d 	.word	0x0800574d
 8005740:	08005753 	.word	0x08005753
 8005744:	0800574d 	.word	0x0800574d
 8005748:	08005765 	.word	0x08005765
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	73fb      	strb	r3, [r7, #15]
      break;
 8005750:	e02f      	b.n	80057b2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005756:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d024      	beq.n	80057a8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005762:	e021      	b.n	80057a8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005768:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800576c:	d11e      	bne.n	80057ac <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005772:	e01b      	b.n	80057ac <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	2b02      	cmp	r3, #2
 8005778:	d902      	bls.n	8005780 <DMA_CheckFifoParam+0xb4>
 800577a:	2b03      	cmp	r3, #3
 800577c:	d003      	beq.n	8005786 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800577e:	e018      	b.n	80057b2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	73fb      	strb	r3, [r7, #15]
      break;
 8005784:	e015      	b.n	80057b2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00e      	beq.n	80057b0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	73fb      	strb	r3, [r7, #15]
      break;
 8005796:	e00b      	b.n	80057b0 <DMA_CheckFifoParam+0xe4>
      break;
 8005798:	bf00      	nop
 800579a:	e00a      	b.n	80057b2 <DMA_CheckFifoParam+0xe6>
      break;
 800579c:	bf00      	nop
 800579e:	e008      	b.n	80057b2 <DMA_CheckFifoParam+0xe6>
      break;
 80057a0:	bf00      	nop
 80057a2:	e006      	b.n	80057b2 <DMA_CheckFifoParam+0xe6>
      break;
 80057a4:	bf00      	nop
 80057a6:	e004      	b.n	80057b2 <DMA_CheckFifoParam+0xe6>
      break;
 80057a8:	bf00      	nop
 80057aa:	e002      	b.n	80057b2 <DMA_CheckFifoParam+0xe6>
      break;   
 80057ac:	bf00      	nop
 80057ae:	e000      	b.n	80057b2 <DMA_CheckFifoParam+0xe6>
      break;
 80057b0:	bf00      	nop
    }
  } 
  
  return status; 
 80057b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3714      	adds	r7, #20
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b089      	sub	sp, #36	; 0x24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80057ca:	2300      	movs	r3, #0
 80057cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80057ce:	2300      	movs	r3, #0
 80057d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80057d2:	2300      	movs	r3, #0
 80057d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057d6:	2300      	movs	r3, #0
 80057d8:	61fb      	str	r3, [r7, #28]
 80057da:	e159      	b.n	8005a90 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80057dc:	2201      	movs	r2, #1
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	fa02 f303 	lsl.w	r3, r2, r3
 80057e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	4013      	ands	r3, r2
 80057ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	f040 8148 	bne.w	8005a8a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d00b      	beq.n	800581a <HAL_GPIO_Init+0x5a>
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	2b02      	cmp	r3, #2
 8005808:	d007      	beq.n	800581a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800580e:	2b11      	cmp	r3, #17
 8005810:	d003      	beq.n	800581a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	2b12      	cmp	r3, #18
 8005818:	d130      	bne.n	800587c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	005b      	lsls	r3, r3, #1
 8005824:	2203      	movs	r2, #3
 8005826:	fa02 f303 	lsl.w	r3, r2, r3
 800582a:	43db      	mvns	r3, r3
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	4013      	ands	r3, r2
 8005830:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	68da      	ldr	r2, [r3, #12]
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	005b      	lsls	r3, r3, #1
 800583a:	fa02 f303 	lsl.w	r3, r2, r3
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	4313      	orrs	r3, r2
 8005842:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	69ba      	ldr	r2, [r7, #24]
 8005848:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005850:	2201      	movs	r2, #1
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	fa02 f303 	lsl.w	r3, r2, r3
 8005858:	43db      	mvns	r3, r3
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	4013      	ands	r3, r2
 800585e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	091b      	lsrs	r3, r3, #4
 8005866:	f003 0201 	and.w	r2, r3, #1
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	fa02 f303 	lsl.w	r3, r2, r3
 8005870:	69ba      	ldr	r2, [r7, #24]
 8005872:	4313      	orrs	r3, r2
 8005874:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	2203      	movs	r2, #3
 8005888:	fa02 f303 	lsl.w	r3, r2, r3
 800588c:	43db      	mvns	r3, r3
 800588e:	69ba      	ldr	r2, [r7, #24]
 8005890:	4013      	ands	r3, r2
 8005892:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	689a      	ldr	r2, [r3, #8]
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	005b      	lsls	r3, r3, #1
 800589c:	fa02 f303 	lsl.w	r3, r2, r3
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d003      	beq.n	80058bc <HAL_GPIO_Init+0xfc>
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	2b12      	cmp	r3, #18
 80058ba:	d123      	bne.n	8005904 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	08da      	lsrs	r2, r3, #3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	3208      	adds	r2, #8
 80058c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	f003 0307 	and.w	r3, r3, #7
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	220f      	movs	r2, #15
 80058d4:	fa02 f303 	lsl.w	r3, r2, r3
 80058d8:	43db      	mvns	r3, r3
 80058da:	69ba      	ldr	r2, [r7, #24]
 80058dc:	4013      	ands	r3, r2
 80058de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	691a      	ldr	r2, [r3, #16]
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	f003 0307 	and.w	r3, r3, #7
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	fa02 f303 	lsl.w	r3, r2, r3
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	08da      	lsrs	r2, r3, #3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	3208      	adds	r2, #8
 80058fe:	69b9      	ldr	r1, [r7, #24]
 8005900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	005b      	lsls	r3, r3, #1
 800590e:	2203      	movs	r2, #3
 8005910:	fa02 f303 	lsl.w	r3, r2, r3
 8005914:	43db      	mvns	r3, r3
 8005916:	69ba      	ldr	r2, [r7, #24]
 8005918:	4013      	ands	r3, r2
 800591a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	f003 0203 	and.w	r2, r3, #3
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	005b      	lsls	r3, r3, #1
 8005928:	fa02 f303 	lsl.w	r3, r2, r3
 800592c:	69ba      	ldr	r2, [r7, #24]
 800592e:	4313      	orrs	r3, r2
 8005930:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 80a2 	beq.w	8005a8a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005946:	2300      	movs	r3, #0
 8005948:	60fb      	str	r3, [r7, #12]
 800594a:	4b56      	ldr	r3, [pc, #344]	; (8005aa4 <HAL_GPIO_Init+0x2e4>)
 800594c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800594e:	4a55      	ldr	r2, [pc, #340]	; (8005aa4 <HAL_GPIO_Init+0x2e4>)
 8005950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005954:	6453      	str	r3, [r2, #68]	; 0x44
 8005956:	4b53      	ldr	r3, [pc, #332]	; (8005aa4 <HAL_GPIO_Init+0x2e4>)
 8005958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800595a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800595e:	60fb      	str	r3, [r7, #12]
 8005960:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005962:	4a51      	ldr	r2, [pc, #324]	; (8005aa8 <HAL_GPIO_Init+0x2e8>)
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	089b      	lsrs	r3, r3, #2
 8005968:	3302      	adds	r3, #2
 800596a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800596e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	f003 0303 	and.w	r3, r3, #3
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	220f      	movs	r2, #15
 800597a:	fa02 f303 	lsl.w	r3, r2, r3
 800597e:	43db      	mvns	r3, r3
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	4013      	ands	r3, r2
 8005984:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a48      	ldr	r2, [pc, #288]	; (8005aac <HAL_GPIO_Init+0x2ec>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d019      	beq.n	80059c2 <HAL_GPIO_Init+0x202>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a47      	ldr	r2, [pc, #284]	; (8005ab0 <HAL_GPIO_Init+0x2f0>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d013      	beq.n	80059be <HAL_GPIO_Init+0x1fe>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a46      	ldr	r2, [pc, #280]	; (8005ab4 <HAL_GPIO_Init+0x2f4>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d00d      	beq.n	80059ba <HAL_GPIO_Init+0x1fa>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a45      	ldr	r2, [pc, #276]	; (8005ab8 <HAL_GPIO_Init+0x2f8>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d007      	beq.n	80059b6 <HAL_GPIO_Init+0x1f6>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a44      	ldr	r2, [pc, #272]	; (8005abc <HAL_GPIO_Init+0x2fc>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d101      	bne.n	80059b2 <HAL_GPIO_Init+0x1f2>
 80059ae:	2304      	movs	r3, #4
 80059b0:	e008      	b.n	80059c4 <HAL_GPIO_Init+0x204>
 80059b2:	2307      	movs	r3, #7
 80059b4:	e006      	b.n	80059c4 <HAL_GPIO_Init+0x204>
 80059b6:	2303      	movs	r3, #3
 80059b8:	e004      	b.n	80059c4 <HAL_GPIO_Init+0x204>
 80059ba:	2302      	movs	r3, #2
 80059bc:	e002      	b.n	80059c4 <HAL_GPIO_Init+0x204>
 80059be:	2301      	movs	r3, #1
 80059c0:	e000      	b.n	80059c4 <HAL_GPIO_Init+0x204>
 80059c2:	2300      	movs	r3, #0
 80059c4:	69fa      	ldr	r2, [r7, #28]
 80059c6:	f002 0203 	and.w	r2, r2, #3
 80059ca:	0092      	lsls	r2, r2, #2
 80059cc:	4093      	lsls	r3, r2
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80059d4:	4934      	ldr	r1, [pc, #208]	; (8005aa8 <HAL_GPIO_Init+0x2e8>)
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	089b      	lsrs	r3, r3, #2
 80059da:	3302      	adds	r3, #2
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80059e2:	4b37      	ldr	r3, [pc, #220]	; (8005ac0 <HAL_GPIO_Init+0x300>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	43db      	mvns	r3, r3
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	4013      	ands	r3, r2
 80059f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d003      	beq.n	8005a06 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a06:	4a2e      	ldr	r2, [pc, #184]	; (8005ac0 <HAL_GPIO_Init+0x300>)
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005a0c:	4b2c      	ldr	r3, [pc, #176]	; (8005ac0 <HAL_GPIO_Init+0x300>)
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	43db      	mvns	r3, r3
 8005a16:	69ba      	ldr	r2, [r7, #24]
 8005a18:	4013      	ands	r3, r2
 8005a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d003      	beq.n	8005a30 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a30:	4a23      	ldr	r2, [pc, #140]	; (8005ac0 <HAL_GPIO_Init+0x300>)
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a36:	4b22      	ldr	r3, [pc, #136]	; (8005ac0 <HAL_GPIO_Init+0x300>)
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	43db      	mvns	r3, r3
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	4013      	ands	r3, r2
 8005a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005a52:	69ba      	ldr	r2, [r7, #24]
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a5a:	4a19      	ldr	r2, [pc, #100]	; (8005ac0 <HAL_GPIO_Init+0x300>)
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a60:	4b17      	ldr	r3, [pc, #92]	; (8005ac0 <HAL_GPIO_Init+0x300>)
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	43db      	mvns	r3, r3
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a84:	4a0e      	ldr	r2, [pc, #56]	; (8005ac0 <HAL_GPIO_Init+0x300>)
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	61fb      	str	r3, [r7, #28]
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	2b0f      	cmp	r3, #15
 8005a94:	f67f aea2 	bls.w	80057dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005a98:	bf00      	nop
 8005a9a:	3724      	adds	r7, #36	; 0x24
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	40023800 	.word	0x40023800
 8005aa8:	40013800 	.word	0x40013800
 8005aac:	40020000 	.word	0x40020000
 8005ab0:	40020400 	.word	0x40020400
 8005ab4:	40020800 	.word	0x40020800
 8005ab8:	40020c00 	.word	0x40020c00
 8005abc:	40021000 	.word	0x40021000
 8005ac0:	40013c00 	.word	0x40013c00

08005ac4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	460b      	mov	r3, r1
 8005ace:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	691a      	ldr	r2, [r3, #16]
 8005ad4:	887b      	ldrh	r3, [r7, #2]
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d002      	beq.n	8005ae2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005adc:	2301      	movs	r3, #1
 8005ade:	73fb      	strb	r3, [r7, #15]
 8005ae0:	e001      	b.n	8005ae6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3714      	adds	r7, #20
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	460b      	mov	r3, r1
 8005afe:	807b      	strh	r3, [r7, #2]
 8005b00:	4613      	mov	r3, r2
 8005b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b04:	787b      	ldrb	r3, [r7, #1]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b0a:	887a      	ldrh	r2, [r7, #2]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b10:	e003      	b.n	8005b1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b12:	887b      	ldrh	r3, [r7, #2]
 8005b14:	041a      	lsls	r2, r3, #16
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	619a      	str	r2, [r3, #24]
}
 8005b1a:	bf00      	nop
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
	...

08005b28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d101      	bne.n	8005b3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e25b      	b.n	8005ff2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d075      	beq.n	8005c32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b46:	4ba3      	ldr	r3, [pc, #652]	; (8005dd4 <HAL_RCC_OscConfig+0x2ac>)
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f003 030c 	and.w	r3, r3, #12
 8005b4e:	2b04      	cmp	r3, #4
 8005b50:	d00c      	beq.n	8005b6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b52:	4ba0      	ldr	r3, [pc, #640]	; (8005dd4 <HAL_RCC_OscConfig+0x2ac>)
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b5a:	2b08      	cmp	r3, #8
 8005b5c:	d112      	bne.n	8005b84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b5e:	4b9d      	ldr	r3, [pc, #628]	; (8005dd4 <HAL_RCC_OscConfig+0x2ac>)
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b6a:	d10b      	bne.n	8005b84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b6c:	4b99      	ldr	r3, [pc, #612]	; (8005dd4 <HAL_RCC_OscConfig+0x2ac>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d05b      	beq.n	8005c30 <HAL_RCC_OscConfig+0x108>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d157      	bne.n	8005c30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e236      	b.n	8005ff2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b8c:	d106      	bne.n	8005b9c <HAL_RCC_OscConfig+0x74>
 8005b8e:	4b91      	ldr	r3, [pc, #580]	; (8005dd4 <HAL_RCC_OscConfig+0x2ac>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a90      	ldr	r2, [pc, #576]	; (8005dd4 <HAL_RCC_OscConfig+0x2ac>)
 8005b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b98:	6013      	str	r3, [r2, #0]
 8005b9a:	e01d      	b.n	8005bd8 <HAL_RCC_OscConfig+0xb0>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ba4:	d10c      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x98>
 8005ba6:	4b8b      	ldr	r3, [pc, #556]	; (8005dd4 <HAL_RCC_OscConfig+0x2ac>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a8a      	ldr	r2, [pc, #552]	; (8005dd4 <HAL_RCC_OscConfig+0x2ac>)
 8005bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bb0:	6013      	str	r3, [r2, #0]
 8005bb2:	4b88      	ldr	r3, [pc, #544]	; (8005dd4 <HAL_RCC_OscConfig+0x2ac>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a87      	ldr	r2, [pc, #540]	; (8005dd4 <HAL_RCC_OscConfig+0x2ac>)
 8005bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bbc:	6013      	str	r3, [r2, #0]
 8005bbe:	e00b      	b.n	8005bd8 <HAL_RCC_OscConfig+0xb0>
 8005bc0:	4b84      	ldr	r3, [pc, #528]	; (8005dd4 <HAL_RCC_OscConfig+0x2ac>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a83      	ldr	r2, [pc, #524]	; (8005dd4 <HAL_RCC_OscConfig+0x2ac>)
 8005bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bca:	6013      	str	r3, [r2, #0]
 8005bcc:	4b81      	ldr	r3, [pc, #516]	; (8005dd4 <HAL_RCC_OscConfig+0x2ac>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a80      	ldr	r2, [pc, #512]	; (8005dd4 <HAL_RCC_OscConfig+0x2ac>)
 8005bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d013      	beq.n	8005c08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005be0:	f7fe fc06 	bl	80043f0 <HAL_GetTick>
 8005be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005be6:	e008      	b.n	8005bfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005be8:	f7fe fc02 	bl	80043f0 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	2b64      	cmp	r3, #100	; 0x64
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e1fb      	b.n	8005ff2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bfa:	4b76      	ldr	r3, [pc, #472]	; (8005dd4 <HAL_RCC_OscConfig+0x2ac>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d0f0      	beq.n	8005be8 <HAL_RCC_OscConfig+0xc0>
 8005c06:	e014      	b.n	8005c32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c08:	f7fe fbf2 	bl	80043f0 <HAL_GetTick>
 8005c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c0e:	e008      	b.n	8005c22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c10:	f7fe fbee 	bl	80043f0 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	2b64      	cmp	r3, #100	; 0x64
 8005c1c:	d901      	bls.n	8005c22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e1e7      	b.n	8005ff2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c22:	4b6c      	ldr	r3, [pc, #432]	; (8005dd4 <HAL_RCC_OscConfig+0x2ac>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1f0      	bne.n	8005c10 <HAL_RCC_OscConfig+0xe8>
 8005c2e:	e000      	b.n	8005c32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d063      	beq.n	8005d06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c3e:	4b65      	ldr	r3, [pc, #404]	; (8005dd4 <HAL_RCC_OscConfig+0x2ac>)
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f003 030c 	and.w	r3, r3, #12
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00b      	beq.n	8005c62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c4a:	4b62      	ldr	r3, [pc, #392]	; (8005dd4 <HAL_RCC_OscConfig+0x2ac>)
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c52:	2b08      	cmp	r3, #8
 8005c54:	d11c      	bne.n	8005c90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c56:	4b5f      	ldr	r3, [pc, #380]	; (8005dd4 <HAL_RCC_OscConfig+0x2ac>)
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d116      	bne.n	8005c90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c62:	4b5c      	ldr	r3, [pc, #368]	; (8005dd4 <HAL_RCC_OscConfig+0x2ac>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d005      	beq.n	8005c7a <HAL_RCC_OscConfig+0x152>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d001      	beq.n	8005c7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e1bb      	b.n	8005ff2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c7a:	4b56      	ldr	r3, [pc, #344]	; (8005dd4 <HAL_RCC_OscConfig+0x2ac>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	00db      	lsls	r3, r3, #3
 8005c88:	4952      	ldr	r1, [pc, #328]	; (8005dd4 <HAL_RCC_OscConfig+0x2ac>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c8e:	e03a      	b.n	8005d06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d020      	beq.n	8005cda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c98:	4b4f      	ldr	r3, [pc, #316]	; (8005dd8 <HAL_RCC_OscConfig+0x2b0>)
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c9e:	f7fe fba7 	bl	80043f0 <HAL_GetTick>
 8005ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ca4:	e008      	b.n	8005cb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ca6:	f7fe fba3 	bl	80043f0 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d901      	bls.n	8005cb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e19c      	b.n	8005ff2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cb8:	4b46      	ldr	r3, [pc, #280]	; (8005dd4 <HAL_RCC_OscConfig+0x2ac>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0302 	and.w	r3, r3, #2
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d0f0      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cc4:	4b43      	ldr	r3, [pc, #268]	; (8005dd4 <HAL_RCC_OscConfig+0x2ac>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	4940      	ldr	r1, [pc, #256]	; (8005dd4 <HAL_RCC_OscConfig+0x2ac>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	600b      	str	r3, [r1, #0]
 8005cd8:	e015      	b.n	8005d06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cda:	4b3f      	ldr	r3, [pc, #252]	; (8005dd8 <HAL_RCC_OscConfig+0x2b0>)
 8005cdc:	2200      	movs	r2, #0
 8005cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce0:	f7fe fb86 	bl	80043f0 <HAL_GetTick>
 8005ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ce6:	e008      	b.n	8005cfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ce8:	f7fe fb82 	bl	80043f0 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d901      	bls.n	8005cfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e17b      	b.n	8005ff2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cfa:	4b36      	ldr	r3, [pc, #216]	; (8005dd4 <HAL_RCC_OscConfig+0x2ac>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0302 	and.w	r3, r3, #2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1f0      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0308 	and.w	r3, r3, #8
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d030      	beq.n	8005d74 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d016      	beq.n	8005d48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d1a:	4b30      	ldr	r3, [pc, #192]	; (8005ddc <HAL_RCC_OscConfig+0x2b4>)
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d20:	f7fe fb66 	bl	80043f0 <HAL_GetTick>
 8005d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d26:	e008      	b.n	8005d3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d28:	f7fe fb62 	bl	80043f0 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d901      	bls.n	8005d3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e15b      	b.n	8005ff2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d3a:	4b26      	ldr	r3, [pc, #152]	; (8005dd4 <HAL_RCC_OscConfig+0x2ac>)
 8005d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d0f0      	beq.n	8005d28 <HAL_RCC_OscConfig+0x200>
 8005d46:	e015      	b.n	8005d74 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d48:	4b24      	ldr	r3, [pc, #144]	; (8005ddc <HAL_RCC_OscConfig+0x2b4>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d4e:	f7fe fb4f 	bl	80043f0 <HAL_GetTick>
 8005d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d54:	e008      	b.n	8005d68 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d56:	f7fe fb4b 	bl	80043f0 <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d901      	bls.n	8005d68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e144      	b.n	8005ff2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d68:	4b1a      	ldr	r3, [pc, #104]	; (8005dd4 <HAL_RCC_OscConfig+0x2ac>)
 8005d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d6c:	f003 0302 	and.w	r3, r3, #2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1f0      	bne.n	8005d56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0304 	and.w	r3, r3, #4
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 80a0 	beq.w	8005ec2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d82:	2300      	movs	r3, #0
 8005d84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d86:	4b13      	ldr	r3, [pc, #76]	; (8005dd4 <HAL_RCC_OscConfig+0x2ac>)
 8005d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10f      	bne.n	8005db2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d92:	2300      	movs	r3, #0
 8005d94:	60bb      	str	r3, [r7, #8]
 8005d96:	4b0f      	ldr	r3, [pc, #60]	; (8005dd4 <HAL_RCC_OscConfig+0x2ac>)
 8005d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9a:	4a0e      	ldr	r2, [pc, #56]	; (8005dd4 <HAL_RCC_OscConfig+0x2ac>)
 8005d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005da0:	6413      	str	r3, [r2, #64]	; 0x40
 8005da2:	4b0c      	ldr	r3, [pc, #48]	; (8005dd4 <HAL_RCC_OscConfig+0x2ac>)
 8005da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005daa:	60bb      	str	r3, [r7, #8]
 8005dac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dae:	2301      	movs	r3, #1
 8005db0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005db2:	4b0b      	ldr	r3, [pc, #44]	; (8005de0 <HAL_RCC_OscConfig+0x2b8>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d121      	bne.n	8005e02 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005dbe:	4b08      	ldr	r3, [pc, #32]	; (8005de0 <HAL_RCC_OscConfig+0x2b8>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a07      	ldr	r2, [pc, #28]	; (8005de0 <HAL_RCC_OscConfig+0x2b8>)
 8005dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dca:	f7fe fb11 	bl	80043f0 <HAL_GetTick>
 8005dce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dd0:	e011      	b.n	8005df6 <HAL_RCC_OscConfig+0x2ce>
 8005dd2:	bf00      	nop
 8005dd4:	40023800 	.word	0x40023800
 8005dd8:	42470000 	.word	0x42470000
 8005ddc:	42470e80 	.word	0x42470e80
 8005de0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005de4:	f7fe fb04 	bl	80043f0 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d901      	bls.n	8005df6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e0fd      	b.n	8005ff2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005df6:	4b81      	ldr	r3, [pc, #516]	; (8005ffc <HAL_RCC_OscConfig+0x4d4>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d0f0      	beq.n	8005de4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d106      	bne.n	8005e18 <HAL_RCC_OscConfig+0x2f0>
 8005e0a:	4b7d      	ldr	r3, [pc, #500]	; (8006000 <HAL_RCC_OscConfig+0x4d8>)
 8005e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e0e:	4a7c      	ldr	r2, [pc, #496]	; (8006000 <HAL_RCC_OscConfig+0x4d8>)
 8005e10:	f043 0301 	orr.w	r3, r3, #1
 8005e14:	6713      	str	r3, [r2, #112]	; 0x70
 8005e16:	e01c      	b.n	8005e52 <HAL_RCC_OscConfig+0x32a>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	2b05      	cmp	r3, #5
 8005e1e:	d10c      	bne.n	8005e3a <HAL_RCC_OscConfig+0x312>
 8005e20:	4b77      	ldr	r3, [pc, #476]	; (8006000 <HAL_RCC_OscConfig+0x4d8>)
 8005e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e24:	4a76      	ldr	r2, [pc, #472]	; (8006000 <HAL_RCC_OscConfig+0x4d8>)
 8005e26:	f043 0304 	orr.w	r3, r3, #4
 8005e2a:	6713      	str	r3, [r2, #112]	; 0x70
 8005e2c:	4b74      	ldr	r3, [pc, #464]	; (8006000 <HAL_RCC_OscConfig+0x4d8>)
 8005e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e30:	4a73      	ldr	r2, [pc, #460]	; (8006000 <HAL_RCC_OscConfig+0x4d8>)
 8005e32:	f043 0301 	orr.w	r3, r3, #1
 8005e36:	6713      	str	r3, [r2, #112]	; 0x70
 8005e38:	e00b      	b.n	8005e52 <HAL_RCC_OscConfig+0x32a>
 8005e3a:	4b71      	ldr	r3, [pc, #452]	; (8006000 <HAL_RCC_OscConfig+0x4d8>)
 8005e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e3e:	4a70      	ldr	r2, [pc, #448]	; (8006000 <HAL_RCC_OscConfig+0x4d8>)
 8005e40:	f023 0301 	bic.w	r3, r3, #1
 8005e44:	6713      	str	r3, [r2, #112]	; 0x70
 8005e46:	4b6e      	ldr	r3, [pc, #440]	; (8006000 <HAL_RCC_OscConfig+0x4d8>)
 8005e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4a:	4a6d      	ldr	r2, [pc, #436]	; (8006000 <HAL_RCC_OscConfig+0x4d8>)
 8005e4c:	f023 0304 	bic.w	r3, r3, #4
 8005e50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d015      	beq.n	8005e86 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e5a:	f7fe fac9 	bl	80043f0 <HAL_GetTick>
 8005e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e60:	e00a      	b.n	8005e78 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e62:	f7fe fac5 	bl	80043f0 <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d901      	bls.n	8005e78 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e0bc      	b.n	8005ff2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e78:	4b61      	ldr	r3, [pc, #388]	; (8006000 <HAL_RCC_OscConfig+0x4d8>)
 8005e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e7c:	f003 0302 	and.w	r3, r3, #2
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d0ee      	beq.n	8005e62 <HAL_RCC_OscConfig+0x33a>
 8005e84:	e014      	b.n	8005eb0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e86:	f7fe fab3 	bl	80043f0 <HAL_GetTick>
 8005e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e8c:	e00a      	b.n	8005ea4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e8e:	f7fe faaf 	bl	80043f0 <HAL_GetTick>
 8005e92:	4602      	mov	r2, r0
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d901      	bls.n	8005ea4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e0a6      	b.n	8005ff2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ea4:	4b56      	ldr	r3, [pc, #344]	; (8006000 <HAL_RCC_OscConfig+0x4d8>)
 8005ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea8:	f003 0302 	and.w	r3, r3, #2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1ee      	bne.n	8005e8e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005eb0:	7dfb      	ldrb	r3, [r7, #23]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d105      	bne.n	8005ec2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eb6:	4b52      	ldr	r3, [pc, #328]	; (8006000 <HAL_RCC_OscConfig+0x4d8>)
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eba:	4a51      	ldr	r2, [pc, #324]	; (8006000 <HAL_RCC_OscConfig+0x4d8>)
 8005ebc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ec0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f000 8092 	beq.w	8005ff0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ecc:	4b4c      	ldr	r3, [pc, #304]	; (8006000 <HAL_RCC_OscConfig+0x4d8>)
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f003 030c 	and.w	r3, r3, #12
 8005ed4:	2b08      	cmp	r3, #8
 8005ed6:	d05c      	beq.n	8005f92 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d141      	bne.n	8005f64 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ee0:	4b48      	ldr	r3, [pc, #288]	; (8006004 <HAL_RCC_OscConfig+0x4dc>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee6:	f7fe fa83 	bl	80043f0 <HAL_GetTick>
 8005eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eec:	e008      	b.n	8005f00 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005eee:	f7fe fa7f 	bl	80043f0 <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d901      	bls.n	8005f00 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e078      	b.n	8005ff2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f00:	4b3f      	ldr	r3, [pc, #252]	; (8006000 <HAL_RCC_OscConfig+0x4d8>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1f0      	bne.n	8005eee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	69da      	ldr	r2, [r3, #28]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a1b      	ldr	r3, [r3, #32]
 8005f14:	431a      	orrs	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1a:	019b      	lsls	r3, r3, #6
 8005f1c:	431a      	orrs	r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f22:	085b      	lsrs	r3, r3, #1
 8005f24:	3b01      	subs	r3, #1
 8005f26:	041b      	lsls	r3, r3, #16
 8005f28:	431a      	orrs	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2e:	061b      	lsls	r3, r3, #24
 8005f30:	4933      	ldr	r1, [pc, #204]	; (8006000 <HAL_RCC_OscConfig+0x4d8>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f36:	4b33      	ldr	r3, [pc, #204]	; (8006004 <HAL_RCC_OscConfig+0x4dc>)
 8005f38:	2201      	movs	r2, #1
 8005f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f3c:	f7fe fa58 	bl	80043f0 <HAL_GetTick>
 8005f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f42:	e008      	b.n	8005f56 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f44:	f7fe fa54 	bl	80043f0 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d901      	bls.n	8005f56 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e04d      	b.n	8005ff2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f56:	4b2a      	ldr	r3, [pc, #168]	; (8006000 <HAL_RCC_OscConfig+0x4d8>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d0f0      	beq.n	8005f44 <HAL_RCC_OscConfig+0x41c>
 8005f62:	e045      	b.n	8005ff0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f64:	4b27      	ldr	r3, [pc, #156]	; (8006004 <HAL_RCC_OscConfig+0x4dc>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f6a:	f7fe fa41 	bl	80043f0 <HAL_GetTick>
 8005f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f70:	e008      	b.n	8005f84 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f72:	f7fe fa3d 	bl	80043f0 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d901      	bls.n	8005f84 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e036      	b.n	8005ff2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f84:	4b1e      	ldr	r3, [pc, #120]	; (8006000 <HAL_RCC_OscConfig+0x4d8>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1f0      	bne.n	8005f72 <HAL_RCC_OscConfig+0x44a>
 8005f90:	e02e      	b.n	8005ff0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d101      	bne.n	8005f9e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e029      	b.n	8005ff2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f9e:	4b18      	ldr	r3, [pc, #96]	; (8006000 <HAL_RCC_OscConfig+0x4d8>)
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d11c      	bne.n	8005fec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d115      	bne.n	8005fec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d10d      	bne.n	8005fec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d106      	bne.n	8005fec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d001      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e000      	b.n	8005ff2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3718      	adds	r7, #24
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	40007000 	.word	0x40007000
 8006000:	40023800 	.word	0x40023800
 8006004:	42470060 	.word	0x42470060

08006008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d101      	bne.n	800601c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e0cc      	b.n	80061b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800601c:	4b68      	ldr	r3, [pc, #416]	; (80061c0 <HAL_RCC_ClockConfig+0x1b8>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 030f 	and.w	r3, r3, #15
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	429a      	cmp	r2, r3
 8006028:	d90c      	bls.n	8006044 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800602a:	4b65      	ldr	r3, [pc, #404]	; (80061c0 <HAL_RCC_ClockConfig+0x1b8>)
 800602c:	683a      	ldr	r2, [r7, #0]
 800602e:	b2d2      	uxtb	r2, r2
 8006030:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006032:	4b63      	ldr	r3, [pc, #396]	; (80061c0 <HAL_RCC_ClockConfig+0x1b8>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 030f 	and.w	r3, r3, #15
 800603a:	683a      	ldr	r2, [r7, #0]
 800603c:	429a      	cmp	r2, r3
 800603e:	d001      	beq.n	8006044 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e0b8      	b.n	80061b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0302 	and.w	r3, r3, #2
 800604c:	2b00      	cmp	r3, #0
 800604e:	d020      	beq.n	8006092 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0304 	and.w	r3, r3, #4
 8006058:	2b00      	cmp	r3, #0
 800605a:	d005      	beq.n	8006068 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800605c:	4b59      	ldr	r3, [pc, #356]	; (80061c4 <HAL_RCC_ClockConfig+0x1bc>)
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	4a58      	ldr	r2, [pc, #352]	; (80061c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006062:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006066:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0308 	and.w	r3, r3, #8
 8006070:	2b00      	cmp	r3, #0
 8006072:	d005      	beq.n	8006080 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006074:	4b53      	ldr	r3, [pc, #332]	; (80061c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	4a52      	ldr	r2, [pc, #328]	; (80061c4 <HAL_RCC_ClockConfig+0x1bc>)
 800607a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800607e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006080:	4b50      	ldr	r3, [pc, #320]	; (80061c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	494d      	ldr	r1, [pc, #308]	; (80061c4 <HAL_RCC_ClockConfig+0x1bc>)
 800608e:	4313      	orrs	r3, r2
 8006090:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0301 	and.w	r3, r3, #1
 800609a:	2b00      	cmp	r3, #0
 800609c:	d044      	beq.n	8006128 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d107      	bne.n	80060b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060a6:	4b47      	ldr	r3, [pc, #284]	; (80061c4 <HAL_RCC_ClockConfig+0x1bc>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d119      	bne.n	80060e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e07f      	b.n	80061b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d003      	beq.n	80060c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060c2:	2b03      	cmp	r3, #3
 80060c4:	d107      	bne.n	80060d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060c6:	4b3f      	ldr	r3, [pc, #252]	; (80061c4 <HAL_RCC_ClockConfig+0x1bc>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d109      	bne.n	80060e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e06f      	b.n	80061b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060d6:	4b3b      	ldr	r3, [pc, #236]	; (80061c4 <HAL_RCC_ClockConfig+0x1bc>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e067      	b.n	80061b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060e6:	4b37      	ldr	r3, [pc, #220]	; (80061c4 <HAL_RCC_ClockConfig+0x1bc>)
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f023 0203 	bic.w	r2, r3, #3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	4934      	ldr	r1, [pc, #208]	; (80061c4 <HAL_RCC_ClockConfig+0x1bc>)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060f8:	f7fe f97a 	bl	80043f0 <HAL_GetTick>
 80060fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060fe:	e00a      	b.n	8006116 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006100:	f7fe f976 	bl	80043f0 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	f241 3288 	movw	r2, #5000	; 0x1388
 800610e:	4293      	cmp	r3, r2
 8006110:	d901      	bls.n	8006116 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e04f      	b.n	80061b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006116:	4b2b      	ldr	r3, [pc, #172]	; (80061c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f003 020c 	and.w	r2, r3, #12
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	429a      	cmp	r2, r3
 8006126:	d1eb      	bne.n	8006100 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006128:	4b25      	ldr	r3, [pc, #148]	; (80061c0 <HAL_RCC_ClockConfig+0x1b8>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 030f 	and.w	r3, r3, #15
 8006130:	683a      	ldr	r2, [r7, #0]
 8006132:	429a      	cmp	r2, r3
 8006134:	d20c      	bcs.n	8006150 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006136:	4b22      	ldr	r3, [pc, #136]	; (80061c0 <HAL_RCC_ClockConfig+0x1b8>)
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	b2d2      	uxtb	r2, r2
 800613c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800613e:	4b20      	ldr	r3, [pc, #128]	; (80061c0 <HAL_RCC_ClockConfig+0x1b8>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 030f 	and.w	r3, r3, #15
 8006146:	683a      	ldr	r2, [r7, #0]
 8006148:	429a      	cmp	r2, r3
 800614a:	d001      	beq.n	8006150 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e032      	b.n	80061b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0304 	and.w	r3, r3, #4
 8006158:	2b00      	cmp	r3, #0
 800615a:	d008      	beq.n	800616e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800615c:	4b19      	ldr	r3, [pc, #100]	; (80061c4 <HAL_RCC_ClockConfig+0x1bc>)
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	4916      	ldr	r1, [pc, #88]	; (80061c4 <HAL_RCC_ClockConfig+0x1bc>)
 800616a:	4313      	orrs	r3, r2
 800616c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0308 	and.w	r3, r3, #8
 8006176:	2b00      	cmp	r3, #0
 8006178:	d009      	beq.n	800618e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800617a:	4b12      	ldr	r3, [pc, #72]	; (80061c4 <HAL_RCC_ClockConfig+0x1bc>)
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	00db      	lsls	r3, r3, #3
 8006188:	490e      	ldr	r1, [pc, #56]	; (80061c4 <HAL_RCC_ClockConfig+0x1bc>)
 800618a:	4313      	orrs	r3, r2
 800618c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800618e:	f000 f821 	bl	80061d4 <HAL_RCC_GetSysClockFreq>
 8006192:	4601      	mov	r1, r0
 8006194:	4b0b      	ldr	r3, [pc, #44]	; (80061c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	091b      	lsrs	r3, r3, #4
 800619a:	f003 030f 	and.w	r3, r3, #15
 800619e:	4a0a      	ldr	r2, [pc, #40]	; (80061c8 <HAL_RCC_ClockConfig+0x1c0>)
 80061a0:	5cd3      	ldrb	r3, [r2, r3]
 80061a2:	fa21 f303 	lsr.w	r3, r1, r3
 80061a6:	4a09      	ldr	r2, [pc, #36]	; (80061cc <HAL_RCC_ClockConfig+0x1c4>)
 80061a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80061aa:	4b09      	ldr	r3, [pc, #36]	; (80061d0 <HAL_RCC_ClockConfig+0x1c8>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fe f8da 	bl	8004368 <HAL_InitTick>

  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	40023c00 	.word	0x40023c00
 80061c4:	40023800 	.word	0x40023800
 80061c8:	0800a098 	.word	0x0800a098
 80061cc:	20000014 	.word	0x20000014
 80061d0:	20000018 	.word	0x20000018

080061d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80061da:	2300      	movs	r3, #0
 80061dc:	607b      	str	r3, [r7, #4]
 80061de:	2300      	movs	r3, #0
 80061e0:	60fb      	str	r3, [r7, #12]
 80061e2:	2300      	movs	r3, #0
 80061e4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80061e6:	2300      	movs	r3, #0
 80061e8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061ea:	4b63      	ldr	r3, [pc, #396]	; (8006378 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	f003 030c 	and.w	r3, r3, #12
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d007      	beq.n	8006206 <HAL_RCC_GetSysClockFreq+0x32>
 80061f6:	2b08      	cmp	r3, #8
 80061f8:	d008      	beq.n	800620c <HAL_RCC_GetSysClockFreq+0x38>
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f040 80b4 	bne.w	8006368 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006200:	4b5e      	ldr	r3, [pc, #376]	; (800637c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006202:	60bb      	str	r3, [r7, #8]
       break;
 8006204:	e0b3      	b.n	800636e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006206:	4b5e      	ldr	r3, [pc, #376]	; (8006380 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006208:	60bb      	str	r3, [r7, #8]
      break;
 800620a:	e0b0      	b.n	800636e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800620c:	4b5a      	ldr	r3, [pc, #360]	; (8006378 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006214:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006216:	4b58      	ldr	r3, [pc, #352]	; (8006378 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d04a      	beq.n	80062b8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006222:	4b55      	ldr	r3, [pc, #340]	; (8006378 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	099b      	lsrs	r3, r3, #6
 8006228:	f04f 0400 	mov.w	r4, #0
 800622c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006230:	f04f 0200 	mov.w	r2, #0
 8006234:	ea03 0501 	and.w	r5, r3, r1
 8006238:	ea04 0602 	and.w	r6, r4, r2
 800623c:	4629      	mov	r1, r5
 800623e:	4632      	mov	r2, r6
 8006240:	f04f 0300 	mov.w	r3, #0
 8006244:	f04f 0400 	mov.w	r4, #0
 8006248:	0154      	lsls	r4, r2, #5
 800624a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800624e:	014b      	lsls	r3, r1, #5
 8006250:	4619      	mov	r1, r3
 8006252:	4622      	mov	r2, r4
 8006254:	1b49      	subs	r1, r1, r5
 8006256:	eb62 0206 	sbc.w	r2, r2, r6
 800625a:	f04f 0300 	mov.w	r3, #0
 800625e:	f04f 0400 	mov.w	r4, #0
 8006262:	0194      	lsls	r4, r2, #6
 8006264:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006268:	018b      	lsls	r3, r1, #6
 800626a:	1a5b      	subs	r3, r3, r1
 800626c:	eb64 0402 	sbc.w	r4, r4, r2
 8006270:	f04f 0100 	mov.w	r1, #0
 8006274:	f04f 0200 	mov.w	r2, #0
 8006278:	00e2      	lsls	r2, r4, #3
 800627a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800627e:	00d9      	lsls	r1, r3, #3
 8006280:	460b      	mov	r3, r1
 8006282:	4614      	mov	r4, r2
 8006284:	195b      	adds	r3, r3, r5
 8006286:	eb44 0406 	adc.w	r4, r4, r6
 800628a:	f04f 0100 	mov.w	r1, #0
 800628e:	f04f 0200 	mov.w	r2, #0
 8006292:	0262      	lsls	r2, r4, #9
 8006294:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006298:	0259      	lsls	r1, r3, #9
 800629a:	460b      	mov	r3, r1
 800629c:	4614      	mov	r4, r2
 800629e:	4618      	mov	r0, r3
 80062a0:	4621      	mov	r1, r4
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f04f 0400 	mov.w	r4, #0
 80062a8:	461a      	mov	r2, r3
 80062aa:	4623      	mov	r3, r4
 80062ac:	f7fa fcbe 	bl	8000c2c <__aeabi_uldivmod>
 80062b0:	4603      	mov	r3, r0
 80062b2:	460c      	mov	r4, r1
 80062b4:	60fb      	str	r3, [r7, #12]
 80062b6:	e049      	b.n	800634c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062b8:	4b2f      	ldr	r3, [pc, #188]	; (8006378 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	099b      	lsrs	r3, r3, #6
 80062be:	f04f 0400 	mov.w	r4, #0
 80062c2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80062c6:	f04f 0200 	mov.w	r2, #0
 80062ca:	ea03 0501 	and.w	r5, r3, r1
 80062ce:	ea04 0602 	and.w	r6, r4, r2
 80062d2:	4629      	mov	r1, r5
 80062d4:	4632      	mov	r2, r6
 80062d6:	f04f 0300 	mov.w	r3, #0
 80062da:	f04f 0400 	mov.w	r4, #0
 80062de:	0154      	lsls	r4, r2, #5
 80062e0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80062e4:	014b      	lsls	r3, r1, #5
 80062e6:	4619      	mov	r1, r3
 80062e8:	4622      	mov	r2, r4
 80062ea:	1b49      	subs	r1, r1, r5
 80062ec:	eb62 0206 	sbc.w	r2, r2, r6
 80062f0:	f04f 0300 	mov.w	r3, #0
 80062f4:	f04f 0400 	mov.w	r4, #0
 80062f8:	0194      	lsls	r4, r2, #6
 80062fa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80062fe:	018b      	lsls	r3, r1, #6
 8006300:	1a5b      	subs	r3, r3, r1
 8006302:	eb64 0402 	sbc.w	r4, r4, r2
 8006306:	f04f 0100 	mov.w	r1, #0
 800630a:	f04f 0200 	mov.w	r2, #0
 800630e:	00e2      	lsls	r2, r4, #3
 8006310:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006314:	00d9      	lsls	r1, r3, #3
 8006316:	460b      	mov	r3, r1
 8006318:	4614      	mov	r4, r2
 800631a:	195b      	adds	r3, r3, r5
 800631c:	eb44 0406 	adc.w	r4, r4, r6
 8006320:	f04f 0100 	mov.w	r1, #0
 8006324:	f04f 0200 	mov.w	r2, #0
 8006328:	02a2      	lsls	r2, r4, #10
 800632a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800632e:	0299      	lsls	r1, r3, #10
 8006330:	460b      	mov	r3, r1
 8006332:	4614      	mov	r4, r2
 8006334:	4618      	mov	r0, r3
 8006336:	4621      	mov	r1, r4
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f04f 0400 	mov.w	r4, #0
 800633e:	461a      	mov	r2, r3
 8006340:	4623      	mov	r3, r4
 8006342:	f7fa fc73 	bl	8000c2c <__aeabi_uldivmod>
 8006346:	4603      	mov	r3, r0
 8006348:	460c      	mov	r4, r1
 800634a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800634c:	4b0a      	ldr	r3, [pc, #40]	; (8006378 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	0c1b      	lsrs	r3, r3, #16
 8006352:	f003 0303 	and.w	r3, r3, #3
 8006356:	3301      	adds	r3, #1
 8006358:	005b      	lsls	r3, r3, #1
 800635a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	fbb2 f3f3 	udiv	r3, r2, r3
 8006364:	60bb      	str	r3, [r7, #8]
      break;
 8006366:	e002      	b.n	800636e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006368:	4b04      	ldr	r3, [pc, #16]	; (800637c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800636a:	60bb      	str	r3, [r7, #8]
      break;
 800636c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800636e:	68bb      	ldr	r3, [r7, #8]
}
 8006370:	4618      	mov	r0, r3
 8006372:	3714      	adds	r7, #20
 8006374:	46bd      	mov	sp, r7
 8006376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006378:	40023800 	.word	0x40023800
 800637c:	00f42400 	.word	0x00f42400
 8006380:	007a1200 	.word	0x007a1200

08006384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006384:	b480      	push	{r7}
 8006386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006388:	4b03      	ldr	r3, [pc, #12]	; (8006398 <HAL_RCC_GetHCLKFreq+0x14>)
 800638a:	681b      	ldr	r3, [r3, #0]
}
 800638c:	4618      	mov	r0, r3
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	20000014 	.word	0x20000014

0800639c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80063a0:	f7ff fff0 	bl	8006384 <HAL_RCC_GetHCLKFreq>
 80063a4:	4601      	mov	r1, r0
 80063a6:	4b05      	ldr	r3, [pc, #20]	; (80063bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	0a9b      	lsrs	r3, r3, #10
 80063ac:	f003 0307 	and.w	r3, r3, #7
 80063b0:	4a03      	ldr	r2, [pc, #12]	; (80063c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063b2:	5cd3      	ldrb	r3, [r2, r3]
 80063b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	40023800 	.word	0x40023800
 80063c0:	0800a0a8 	.word	0x0800a0a8

080063c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80063c8:	f7ff ffdc 	bl	8006384 <HAL_RCC_GetHCLKFreq>
 80063cc:	4601      	mov	r1, r0
 80063ce:	4b05      	ldr	r3, [pc, #20]	; (80063e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	0b5b      	lsrs	r3, r3, #13
 80063d4:	f003 0307 	and.w	r3, r3, #7
 80063d8:	4a03      	ldr	r2, [pc, #12]	; (80063e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063da:	5cd3      	ldrb	r3, [r2, r3]
 80063dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	40023800 	.word	0x40023800
 80063e8:	0800a0a8 	.word	0x0800a0a8

080063ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d101      	bne.n	80063fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e056      	b.n	80064ac <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b00      	cmp	r3, #0
 800640e:	d106      	bne.n	800641e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f7fd fdd3 	bl	8003fc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2202      	movs	r2, #2
 8006422:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006434:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	431a      	orrs	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	431a      	orrs	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	431a      	orrs	r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	431a      	orrs	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800645a:	431a      	orrs	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	69db      	ldr	r3, [r3, #28]
 8006460:	431a      	orrs	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	ea42 0103 	orr.w	r1, r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	0c1b      	lsrs	r3, r3, #16
 800647c:	f003 0104 	and.w	r1, r3, #4
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	430a      	orrs	r2, r1
 800648a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	69da      	ldr	r2, [r3, #28]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800649a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3708      	adds	r7, #8
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b087      	sub	sp, #28
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	4613      	mov	r3, r2
 80064c0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d101      	bne.n	80064d4 <HAL_SPI_Transmit_IT+0x20>
 80064d0:	2302      	movs	r3, #2
 80064d2:	e067      	b.n	80065a4 <HAL_SPI_Transmit_IT+0xf0>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d002      	beq.n	80064e8 <HAL_SPI_Transmit_IT+0x34>
 80064e2:	88fb      	ldrh	r3, [r7, #6]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d102      	bne.n	80064ee <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80064ec:	e055      	b.n	800659a <HAL_SPI_Transmit_IT+0xe6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d002      	beq.n	8006500 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80064fa:	2302      	movs	r3, #2
 80064fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80064fe:	e04c      	b.n	800659a <HAL_SPI_Transmit_IT+0xe6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2203      	movs	r2, #3
 8006504:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	88fa      	ldrh	r2, [r7, #6]
 8006518:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	88fa      	ldrh	r2, [r7, #6]
 800651e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d003      	beq.n	8006548 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	4a1b      	ldr	r2, [pc, #108]	; (80065b0 <HAL_SPI_Transmit_IT+0xfc>)
 8006544:	645a      	str	r2, [r3, #68]	; 0x44
 8006546:	e002      	b.n	800654e <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	4a1a      	ldr	r2, [pc, #104]	; (80065b4 <HAL_SPI_Transmit_IT+0x100>)
 800654c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006556:	d107      	bne.n	8006568 <HAL_SPI_Transmit_IT+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006566:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	685a      	ldr	r2, [r3, #4]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8006576:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006582:	2b40      	cmp	r3, #64	; 0x40
 8006584:	d008      	beq.n	8006598 <HAL_SPI_Transmit_IT+0xe4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006594:	601a      	str	r2, [r3, #0]
 8006596:	e000      	b.n	800659a <HAL_SPI_Transmit_IT+0xe6>
  }

error :
 8006598:	bf00      	nop
  __HAL_UNLOCK(hspi);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80065a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	371c      	adds	r7, #28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr
 80065b0:	0800683b 	.word	0x0800683b
 80065b4:	080067f5 	.word	0x080067f5

080065b8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b088      	sub	sp, #32
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	099b      	lsrs	r3, r3, #6
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10f      	bne.n	80065fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00a      	beq.n	80065fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	099b      	lsrs	r3, r3, #6
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d004      	beq.n	80065fc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	4798      	blx	r3
    return;
 80065fa:	e0d8      	b.n	80067ae <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	085b      	lsrs	r3, r3, #1
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00a      	beq.n	800661e <HAL_SPI_IRQHandler+0x66>
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	09db      	lsrs	r3, r3, #7
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	2b00      	cmp	r3, #0
 8006612:	d004      	beq.n	800661e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	4798      	blx	r3
    return;
 800661c:	e0c7      	b.n	80067ae <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	095b      	lsrs	r3, r3, #5
 8006622:	f003 0301 	and.w	r3, r3, #1
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10c      	bne.n	8006644 <HAL_SPI_IRQHandler+0x8c>
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	099b      	lsrs	r3, r3, #6
 800662e:	f003 0301 	and.w	r3, r3, #1
 8006632:	2b00      	cmp	r3, #0
 8006634:	d106      	bne.n	8006644 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	0a1b      	lsrs	r3, r3, #8
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b00      	cmp	r3, #0
 8006640:	f000 80b5 	beq.w	80067ae <HAL_SPI_IRQHandler+0x1f6>
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	095b      	lsrs	r3, r3, #5
 8006648:	f003 0301 	and.w	r3, r3, #1
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 80ae 	beq.w	80067ae <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	099b      	lsrs	r3, r3, #6
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d023      	beq.n	80066a6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b03      	cmp	r3, #3
 8006668:	d011      	beq.n	800668e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800666e:	f043 0204 	orr.w	r2, r3, #4
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006676:	2300      	movs	r3, #0
 8006678:	617b      	str	r3, [r7, #20]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	617b      	str	r3, [r7, #20]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	617b      	str	r3, [r7, #20]
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	e00b      	b.n	80066a6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800668e:	2300      	movs	r3, #0
 8006690:	613b      	str	r3, [r7, #16]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	613b      	str	r3, [r7, #16]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	613b      	str	r3, [r7, #16]
 80066a2:	693b      	ldr	r3, [r7, #16]
        return;
 80066a4:	e083      	b.n	80067ae <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	095b      	lsrs	r3, r3, #5
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d014      	beq.n	80066dc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066b6:	f043 0201 	orr.w	r2, r3, #1
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80066be:	2300      	movs	r3, #0
 80066c0:	60fb      	str	r3, [r7, #12]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	60fb      	str	r3, [r7, #12]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066d8:	601a      	str	r2, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	0a1b      	lsrs	r3, r3, #8
 80066e0:	f003 0301 	and.w	r3, r3, #1
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00c      	beq.n	8006702 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ec:	f043 0208 	orr.w	r2, r3, #8
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80066f4:	2300      	movs	r3, #0
 80066f6:	60bb      	str	r3, [r7, #8]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	60bb      	str	r3, [r7, #8]
 8006700:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006706:	2b00      	cmp	r3, #0
 8006708:	d050      	beq.n	80067ac <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	685a      	ldr	r2, [r3, #4]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006718:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b00      	cmp	r3, #0
 800672a:	d104      	bne.n	8006736 <HAL_SPI_IRQHandler+0x17e>
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	f003 0301 	and.w	r3, r3, #1
 8006732:	2b00      	cmp	r3, #0
 8006734:	d034      	beq.n	80067a0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f022 0203 	bic.w	r2, r2, #3
 8006744:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800674a:	2b00      	cmp	r3, #0
 800674c:	d011      	beq.n	8006772 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006752:	4a18      	ldr	r2, [pc, #96]	; (80067b4 <HAL_SPI_IRQHandler+0x1fc>)
 8006754:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800675a:	4618      	mov	r0, r3
 800675c:	f7fe fda6 	bl	80052ac <HAL_DMA_Abort_IT>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d005      	beq.n	8006772 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800676a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006776:	2b00      	cmp	r3, #0
 8006778:	d016      	beq.n	80067a8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800677e:	4a0d      	ldr	r2, [pc, #52]	; (80067b4 <HAL_SPI_IRQHandler+0x1fc>)
 8006780:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006786:	4618      	mov	r0, r3
 8006788:	f7fe fd90 	bl	80052ac <HAL_DMA_Abort_IT>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00a      	beq.n	80067a8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006796:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800679e:	e003      	b.n	80067a8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f809 	bl	80067b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80067a6:	e000      	b.n	80067aa <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80067a8:	bf00      	nop
    return;
 80067aa:	bf00      	nop
 80067ac:	bf00      	nop
  }
}
 80067ae:	3720      	adds	r7, #32
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	080067cd 	.word	0x080067cd

080067b8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80067c0:	bf00      	nop
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f7ff ffe6 	bl	80067b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80067ec:	bf00      	nop
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	330c      	adds	r3, #12
 8006806:	7812      	ldrb	r2, [r2, #0]
 8006808:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680e:	1c5a      	adds	r2, r3, #1
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006818:	b29b      	uxth	r3, r3
 800681a:	3b01      	subs	r3, #1
 800681c:	b29a      	uxth	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006826:	b29b      	uxth	r3, r3
 8006828:	2b00      	cmp	r3, #0
 800682a:	d102      	bne.n	8006832 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 f8d3 	bl	80069d8 <SPI_CloseTx_ISR>
  }
}
 8006832:	bf00      	nop
 8006834:	3708      	adds	r7, #8
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b082      	sub	sp, #8
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006846:	881a      	ldrh	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006852:	1c9a      	adds	r2, r3, #2
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800685c:	b29b      	uxth	r3, r3
 800685e:	3b01      	subs	r3, #1
 8006860:	b29a      	uxth	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800686a:	b29b      	uxth	r3, r3
 800686c:	2b00      	cmp	r3, #0
 800686e:	d102      	bne.n	8006876 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 f8b1 	bl	80069d8 <SPI_CloseTx_ISR>
  }
}
 8006876:	bf00      	nop
 8006878:	3708      	adds	r7, #8
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b084      	sub	sp, #16
 8006882:	af00      	add	r7, sp, #0
 8006884:	60f8      	str	r0, [r7, #12]
 8006886:	60b9      	str	r1, [r7, #8]
 8006888:	603b      	str	r3, [r7, #0]
 800688a:	4613      	mov	r3, r2
 800688c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800688e:	e04c      	b.n	800692a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006896:	d048      	beq.n	800692a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006898:	f7fd fdaa 	bl	80043f0 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d902      	bls.n	80068ae <SPI_WaitFlagStateUntilTimeout+0x30>
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d13d      	bne.n	800692a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	685a      	ldr	r2, [r3, #4]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80068bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068c6:	d111      	bne.n	80068ec <SPI_WaitFlagStateUntilTimeout+0x6e>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068d0:	d004      	beq.n	80068dc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068da:	d107      	bne.n	80068ec <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068f4:	d10f      	bne.n	8006916 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006904:	601a      	str	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006914:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e00f      	b.n	800694a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	689a      	ldr	r2, [r3, #8]
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	4013      	ands	r3, r2
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	429a      	cmp	r2, r3
 8006938:	bf0c      	ite	eq
 800693a:	2301      	moveq	r3, #1
 800693c:	2300      	movne	r3, #0
 800693e:	b2db      	uxtb	r3, r3
 8006940:	461a      	mov	r2, r3
 8006942:	79fb      	ldrb	r3, [r7, #7]
 8006944:	429a      	cmp	r2, r3
 8006946:	d1a3      	bne.n	8006890 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
	...

08006954 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b088      	sub	sp, #32
 8006958:	af02      	add	r7, sp, #8
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006960:	4b1b      	ldr	r3, [pc, #108]	; (80069d0 <SPI_EndRxTxTransaction+0x7c>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a1b      	ldr	r2, [pc, #108]	; (80069d4 <SPI_EndRxTxTransaction+0x80>)
 8006966:	fba2 2303 	umull	r2, r3, r2, r3
 800696a:	0d5b      	lsrs	r3, r3, #21
 800696c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006970:	fb02 f303 	mul.w	r3, r2, r3
 8006974:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800697e:	d112      	bne.n	80069a6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	9300      	str	r3, [sp, #0]
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	2200      	movs	r2, #0
 8006988:	2180      	movs	r1, #128	; 0x80
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	f7ff ff77 	bl	800687e <SPI_WaitFlagStateUntilTimeout>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d016      	beq.n	80069c4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800699a:	f043 0220 	orr.w	r2, r3, #32
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e00f      	b.n	80069c6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00a      	beq.n	80069c2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	3b01      	subs	r3, #1
 80069b0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069bc:	2b80      	cmp	r3, #128	; 0x80
 80069be:	d0f2      	beq.n	80069a6 <SPI_EndRxTxTransaction+0x52>
 80069c0:	e000      	b.n	80069c4 <SPI_EndRxTxTransaction+0x70>
        break;
 80069c2:	bf00      	nop
  }

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3718      	adds	r7, #24
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	20000014 	.word	0x20000014
 80069d4:	165e9f81 	.word	0x165e9f81

080069d8 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b086      	sub	sp, #24
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80069e0:	4b2c      	ldr	r3, [pc, #176]	; (8006a94 <SPI_CloseTx_ISR+0xbc>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a2c      	ldr	r2, [pc, #176]	; (8006a98 <SPI_CloseTx_ISR+0xc0>)
 80069e6:	fba2 2303 	umull	r2, r3, r2, r3
 80069ea:	0a5b      	lsrs	r3, r3, #9
 80069ec:	2264      	movs	r2, #100	; 0x64
 80069ee:	fb02 f303 	mul.w	r3, r2, r3
 80069f2:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069f4:	f7fd fcfc 	bl	80043f0 <HAL_GetTick>
 80069f8:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d106      	bne.n	8006a0e <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a04:	f043 0220 	orr.w	r2, r3, #32
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006a0c:	e009      	b.n	8006a22 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	3b01      	subs	r3, #1
 8006a12:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f003 0302 	and.w	r3, r3, #2
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d0eb      	beq.n	80069fa <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	685a      	ldr	r2, [r3, #4]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a30:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	2164      	movs	r1, #100	; 0x64
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f7ff ff8c 	bl	8006954 <SPI_EndRxTxTransaction>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d005      	beq.n	8006a4e <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a46:	f043 0220 	orr.w	r2, r3, #32
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10a      	bne.n	8006a6c <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a56:	2300      	movs	r3, #0
 8006a58:	60fb      	str	r3, [r7, #12]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	60fb      	str	r3, [r7, #12]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	60fb      	str	r3, [r7, #12]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d003      	beq.n	8006a84 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f7ff fe9b 	bl	80067b8 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8006a82:	e002      	b.n	8006a8a <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f7fd f96d 	bl	8003d64 <HAL_SPI_TxCpltCallback>
}
 8006a8a:	bf00      	nop
 8006a8c:	3718      	adds	r7, #24
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	20000014 	.word	0x20000014
 8006a98:	057619f1 	.word	0x057619f1

08006a9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d101      	bne.n	8006aae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e01d      	b.n	8006aea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d106      	bne.n	8006ac8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7fd face 	bl	8004064 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2202      	movs	r2, #2
 8006acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	3304      	adds	r3, #4
 8006ad8:	4619      	mov	r1, r3
 8006ada:	4610      	mov	r0, r2
 8006adc:	f000 fa38 	bl	8006f50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3708      	adds	r7, #8
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006af2:	b480      	push	{r7}
 8006af4:	b085      	sub	sp, #20
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2202      	movs	r2, #2
 8006afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f003 0307 	and.w	r3, r3, #7
 8006b0c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2b06      	cmp	r3, #6
 8006b12:	d007      	beq.n	8006b24 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f042 0201 	orr.w	r2, r2, #1
 8006b22:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3714      	adds	r7, #20
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b085      	sub	sp, #20
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68da      	ldr	r2, [r3, #12]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f042 0201 	orr.w	r2, r2, #1
 8006b50:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f003 0307 	and.w	r3, r3, #7
 8006b5c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2b06      	cmp	r3, #6
 8006b62:	d007      	beq.n	8006b74 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f042 0201 	orr.w	r2, r2, #1
 8006b72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b082      	sub	sp, #8
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	f003 0302 	and.w	r3, r3, #2
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d122      	bne.n	8006bde <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	f003 0302 	and.w	r3, r3, #2
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d11b      	bne.n	8006bde <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f06f 0202 	mvn.w	r2, #2
 8006bae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	f003 0303 	and.w	r3, r3, #3
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d003      	beq.n	8006bcc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 f9a5 	bl	8006f14 <HAL_TIM_IC_CaptureCallback>
 8006bca:	e005      	b.n	8006bd8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 f997 	bl	8006f00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f9a8 	bl	8006f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	f003 0304 	and.w	r3, r3, #4
 8006be8:	2b04      	cmp	r3, #4
 8006bea:	d122      	bne.n	8006c32 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	f003 0304 	and.w	r3, r3, #4
 8006bf6:	2b04      	cmp	r3, #4
 8006bf8:	d11b      	bne.n	8006c32 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f06f 0204 	mvn.w	r2, #4
 8006c02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2202      	movs	r2, #2
 8006c08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d003      	beq.n	8006c20 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f97b 	bl	8006f14 <HAL_TIM_IC_CaptureCallback>
 8006c1e:	e005      	b.n	8006c2c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f96d 	bl	8006f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 f97e 	bl	8006f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	f003 0308 	and.w	r3, r3, #8
 8006c3c:	2b08      	cmp	r3, #8
 8006c3e:	d122      	bne.n	8006c86 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	f003 0308 	and.w	r3, r3, #8
 8006c4a:	2b08      	cmp	r3, #8
 8006c4c:	d11b      	bne.n	8006c86 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f06f 0208 	mvn.w	r2, #8
 8006c56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2204      	movs	r2, #4
 8006c5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	69db      	ldr	r3, [r3, #28]
 8006c64:	f003 0303 	and.w	r3, r3, #3
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d003      	beq.n	8006c74 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f951 	bl	8006f14 <HAL_TIM_IC_CaptureCallback>
 8006c72:	e005      	b.n	8006c80 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f943 	bl	8006f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f954 	bl	8006f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	f003 0310 	and.w	r3, r3, #16
 8006c90:	2b10      	cmp	r3, #16
 8006c92:	d122      	bne.n	8006cda <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	f003 0310 	and.w	r3, r3, #16
 8006c9e:	2b10      	cmp	r3, #16
 8006ca0:	d11b      	bne.n	8006cda <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f06f 0210 	mvn.w	r2, #16
 8006caa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2208      	movs	r2, #8
 8006cb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	69db      	ldr	r3, [r3, #28]
 8006cb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d003      	beq.n	8006cc8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 f927 	bl	8006f14 <HAL_TIM_IC_CaptureCallback>
 8006cc6:	e005      	b.n	8006cd4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 f919 	bl	8006f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f92a 	bl	8006f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	f003 0301 	and.w	r3, r3, #1
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d10e      	bne.n	8006d06 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d107      	bne.n	8006d06 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f06f 0201 	mvn.w	r2, #1
 8006cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f7fd f845 	bl	8003d90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d10:	2b80      	cmp	r3, #128	; 0x80
 8006d12:	d10e      	bne.n	8006d32 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d1e:	2b80      	cmp	r3, #128	; 0x80
 8006d20:	d107      	bne.n	8006d32 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 faa1 	bl	8007274 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d3c:	2b40      	cmp	r3, #64	; 0x40
 8006d3e:	d10e      	bne.n	8006d5e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d4a:	2b40      	cmp	r3, #64	; 0x40
 8006d4c:	d107      	bne.n	8006d5e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 f8ef 	bl	8006f3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	f003 0320 	and.w	r3, r3, #32
 8006d68:	2b20      	cmp	r3, #32
 8006d6a:	d10e      	bne.n	8006d8a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	f003 0320 	and.w	r3, r3, #32
 8006d76:	2b20      	cmp	r3, #32
 8006d78:	d107      	bne.n	8006d8a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f06f 0220 	mvn.w	r2, #32
 8006d82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 fa6b 	bl	8007260 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d8a:	bf00      	nop
 8006d8c:	3708      	adds	r7, #8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b084      	sub	sp, #16
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d101      	bne.n	8006daa <HAL_TIM_ConfigClockSource+0x18>
 8006da6:	2302      	movs	r3, #2
 8006da8:	e0a6      	b.n	8006ef8 <HAL_TIM_ConfigClockSource+0x166>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2202      	movs	r2, #2
 8006db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006dc8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dd0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b40      	cmp	r3, #64	; 0x40
 8006de0:	d067      	beq.n	8006eb2 <HAL_TIM_ConfigClockSource+0x120>
 8006de2:	2b40      	cmp	r3, #64	; 0x40
 8006de4:	d80b      	bhi.n	8006dfe <HAL_TIM_ConfigClockSource+0x6c>
 8006de6:	2b10      	cmp	r3, #16
 8006de8:	d073      	beq.n	8006ed2 <HAL_TIM_ConfigClockSource+0x140>
 8006dea:	2b10      	cmp	r3, #16
 8006dec:	d802      	bhi.n	8006df4 <HAL_TIM_ConfigClockSource+0x62>
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d06f      	beq.n	8006ed2 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006df2:	e078      	b.n	8006ee6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006df4:	2b20      	cmp	r3, #32
 8006df6:	d06c      	beq.n	8006ed2 <HAL_TIM_ConfigClockSource+0x140>
 8006df8:	2b30      	cmp	r3, #48	; 0x30
 8006dfa:	d06a      	beq.n	8006ed2 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006dfc:	e073      	b.n	8006ee6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006dfe:	2b70      	cmp	r3, #112	; 0x70
 8006e00:	d00d      	beq.n	8006e1e <HAL_TIM_ConfigClockSource+0x8c>
 8006e02:	2b70      	cmp	r3, #112	; 0x70
 8006e04:	d804      	bhi.n	8006e10 <HAL_TIM_ConfigClockSource+0x7e>
 8006e06:	2b50      	cmp	r3, #80	; 0x50
 8006e08:	d033      	beq.n	8006e72 <HAL_TIM_ConfigClockSource+0xe0>
 8006e0a:	2b60      	cmp	r3, #96	; 0x60
 8006e0c:	d041      	beq.n	8006e92 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006e0e:	e06a      	b.n	8006ee6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006e10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e14:	d066      	beq.n	8006ee4 <HAL_TIM_ConfigClockSource+0x152>
 8006e16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e1a:	d017      	beq.n	8006e4c <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006e1c:	e063      	b.n	8006ee6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6818      	ldr	r0, [r3, #0]
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	6899      	ldr	r1, [r3, #8]
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	685a      	ldr	r2, [r3, #4]
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	f000 f989 	bl	8007144 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e40:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	609a      	str	r2, [r3, #8]
      break;
 8006e4a:	e04c      	b.n	8006ee6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6818      	ldr	r0, [r3, #0]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	6899      	ldr	r1, [r3, #8]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	685a      	ldr	r2, [r3, #4]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	f000 f972 	bl	8007144 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689a      	ldr	r2, [r3, #8]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e6e:	609a      	str	r2, [r3, #8]
      break;
 8006e70:	e039      	b.n	8006ee6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6818      	ldr	r0, [r3, #0]
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	6859      	ldr	r1, [r3, #4]
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	f000 f8e6 	bl	8007050 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2150      	movs	r1, #80	; 0x50
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 f93f 	bl	800710e <TIM_ITRx_SetConfig>
      break;
 8006e90:	e029      	b.n	8006ee6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6818      	ldr	r0, [r3, #0]
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	6859      	ldr	r1, [r3, #4]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	f000 f905 	bl	80070ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2160      	movs	r1, #96	; 0x60
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 f92f 	bl	800710e <TIM_ITRx_SetConfig>
      break;
 8006eb0:	e019      	b.n	8006ee6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6818      	ldr	r0, [r3, #0]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	6859      	ldr	r1, [r3, #4]
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	f000 f8c6 	bl	8007050 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2140      	movs	r1, #64	; 0x40
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 f91f 	bl	800710e <TIM_ITRx_SetConfig>
      break;
 8006ed0:	e009      	b.n	8006ee6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4619      	mov	r1, r3
 8006edc:	4610      	mov	r0, r2
 8006ede:	f000 f916 	bl	800710e <TIM_ITRx_SetConfig>
      break;
 8006ee2:	e000      	b.n	8006ee6 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006ee4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a34      	ldr	r2, [pc, #208]	; (8007034 <TIM_Base_SetConfig+0xe4>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d00f      	beq.n	8006f88 <TIM_Base_SetConfig+0x38>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f6e:	d00b      	beq.n	8006f88 <TIM_Base_SetConfig+0x38>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a31      	ldr	r2, [pc, #196]	; (8007038 <TIM_Base_SetConfig+0xe8>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d007      	beq.n	8006f88 <TIM_Base_SetConfig+0x38>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a30      	ldr	r2, [pc, #192]	; (800703c <TIM_Base_SetConfig+0xec>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d003      	beq.n	8006f88 <TIM_Base_SetConfig+0x38>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a2f      	ldr	r2, [pc, #188]	; (8007040 <TIM_Base_SetConfig+0xf0>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d108      	bne.n	8006f9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a25      	ldr	r2, [pc, #148]	; (8007034 <TIM_Base_SetConfig+0xe4>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d01b      	beq.n	8006fda <TIM_Base_SetConfig+0x8a>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fa8:	d017      	beq.n	8006fda <TIM_Base_SetConfig+0x8a>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a22      	ldr	r2, [pc, #136]	; (8007038 <TIM_Base_SetConfig+0xe8>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d013      	beq.n	8006fda <TIM_Base_SetConfig+0x8a>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a21      	ldr	r2, [pc, #132]	; (800703c <TIM_Base_SetConfig+0xec>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d00f      	beq.n	8006fda <TIM_Base_SetConfig+0x8a>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a20      	ldr	r2, [pc, #128]	; (8007040 <TIM_Base_SetConfig+0xf0>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d00b      	beq.n	8006fda <TIM_Base_SetConfig+0x8a>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a1f      	ldr	r2, [pc, #124]	; (8007044 <TIM_Base_SetConfig+0xf4>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d007      	beq.n	8006fda <TIM_Base_SetConfig+0x8a>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a1e      	ldr	r2, [pc, #120]	; (8007048 <TIM_Base_SetConfig+0xf8>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d003      	beq.n	8006fda <TIM_Base_SetConfig+0x8a>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a1d      	ldr	r2, [pc, #116]	; (800704c <TIM_Base_SetConfig+0xfc>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d108      	bne.n	8006fec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	689a      	ldr	r2, [r3, #8]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a08      	ldr	r2, [pc, #32]	; (8007034 <TIM_Base_SetConfig+0xe4>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d103      	bne.n	8007020 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	691a      	ldr	r2, [r3, #16]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	615a      	str	r2, [r3, #20]
}
 8007026:	bf00      	nop
 8007028:	3714      	adds	r7, #20
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	40010000 	.word	0x40010000
 8007038:	40000400 	.word	0x40000400
 800703c:	40000800 	.word	0x40000800
 8007040:	40000c00 	.word	0x40000c00
 8007044:	40014000 	.word	0x40014000
 8007048:	40014400 	.word	0x40014400
 800704c:	40014800 	.word	0x40014800

08007050 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007050:	b480      	push	{r7}
 8007052:	b087      	sub	sp, #28
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6a1b      	ldr	r3, [r3, #32]
 8007060:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	f023 0201 	bic.w	r2, r3, #1
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800707a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	011b      	lsls	r3, r3, #4
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	4313      	orrs	r3, r2
 8007084:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	f023 030a 	bic.w	r3, r3, #10
 800708c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	4313      	orrs	r3, r2
 8007094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	621a      	str	r2, [r3, #32]
}
 80070a2:	bf00      	nop
 80070a4:	371c      	adds	r7, #28
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr

080070ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070ae:	b480      	push	{r7}
 80070b0:	b087      	sub	sp, #28
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	60f8      	str	r0, [r7, #12]
 80070b6:	60b9      	str	r1, [r7, #8]
 80070b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	f023 0210 	bic.w	r2, r3, #16
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	699b      	ldr	r3, [r3, #24]
 80070ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6a1b      	ldr	r3, [r3, #32]
 80070d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	031b      	lsls	r3, r3, #12
 80070de:	697a      	ldr	r2, [r7, #20]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80070ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	011b      	lsls	r3, r3, #4
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	697a      	ldr	r2, [r7, #20]
 80070fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	621a      	str	r2, [r3, #32]
}
 8007102:	bf00      	nop
 8007104:	371c      	adds	r7, #28
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr

0800710e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800710e:	b480      	push	{r7}
 8007110:	b085      	sub	sp, #20
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
 8007116:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007124:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007126:	683a      	ldr	r2, [r7, #0]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	4313      	orrs	r3, r2
 800712c:	f043 0307 	orr.w	r3, r3, #7
 8007130:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	609a      	str	r2, [r3, #8]
}
 8007138:	bf00      	nop
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007144:	b480      	push	{r7}
 8007146:	b087      	sub	sp, #28
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
 8007150:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800715e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	021a      	lsls	r2, r3, #8
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	431a      	orrs	r2, r3
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	4313      	orrs	r3, r2
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	4313      	orrs	r3, r2
 8007170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	609a      	str	r2, [r3, #8]
}
 8007178:	bf00      	nop
 800717a:	371c      	adds	r7, #28
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007194:	2b01      	cmp	r3, #1
 8007196:	d101      	bne.n	800719c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007198:	2302      	movs	r3, #2
 800719a:	e050      	b.n	800723e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2202      	movs	r2, #2
 80071a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a1c      	ldr	r2, [pc, #112]	; (800724c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d018      	beq.n	8007212 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071e8:	d013      	beq.n	8007212 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a18      	ldr	r2, [pc, #96]	; (8007250 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d00e      	beq.n	8007212 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a16      	ldr	r2, [pc, #88]	; (8007254 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d009      	beq.n	8007212 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a15      	ldr	r2, [pc, #84]	; (8007258 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d004      	beq.n	8007212 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a13      	ldr	r2, [pc, #76]	; (800725c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d10c      	bne.n	800722c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007218:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	4313      	orrs	r3, r2
 8007222:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68ba      	ldr	r2, [r7, #8]
 800722a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3714      	adds	r7, #20
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	40010000 	.word	0x40010000
 8007250:	40000400 	.word	0x40000400
 8007254:	40000800 	.word	0x40000800
 8007258:	40000c00 	.word	0x40000c00
 800725c:	40014000 	.word	0x40014000

08007260 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007268:	bf00      	nop
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800727c:	bf00      	nop
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d101      	bne.n	800729a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e03f      	b.n	800731a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d106      	bne.n	80072b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f7fc ff16 	bl	80040e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2224      	movs	r2, #36	; 0x24
 80072b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68da      	ldr	r2, [r3, #12]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fba1 	bl	8007a14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	691a      	ldr	r2, [r3, #16]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	695a      	ldr	r2, [r3, #20]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68da      	ldr	r2, [r3, #12]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007300:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2220      	movs	r2, #32
 800730c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2220      	movs	r2, #32
 8007314:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3708      	adds	r7, #8
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b088      	sub	sp, #32
 8007326:	af02      	add	r7, sp, #8
 8007328:	60f8      	str	r0, [r7, #12]
 800732a:	60b9      	str	r1, [r7, #8]
 800732c:	603b      	str	r3, [r7, #0]
 800732e:	4613      	mov	r3, r2
 8007330:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007332:	2300      	movs	r3, #0
 8007334:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b20      	cmp	r3, #32
 8007340:	f040 8083 	bne.w	800744a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d002      	beq.n	8007350 <HAL_UART_Transmit+0x2e>
 800734a:	88fb      	ldrh	r3, [r7, #6]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d101      	bne.n	8007354 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	e07b      	b.n	800744c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800735a:	2b01      	cmp	r3, #1
 800735c:	d101      	bne.n	8007362 <HAL_UART_Transmit+0x40>
 800735e:	2302      	movs	r3, #2
 8007360:	e074      	b.n	800744c <HAL_UART_Transmit+0x12a>
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2201      	movs	r2, #1
 8007366:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2221      	movs	r2, #33	; 0x21
 8007374:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007378:	f7fd f83a 	bl	80043f0 <HAL_GetTick>
 800737c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	88fa      	ldrh	r2, [r7, #6]
 8007382:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	88fa      	ldrh	r2, [r7, #6]
 8007388:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2200      	movs	r2, #0
 800738e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8007392:	e042      	b.n	800741a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007398:	b29b      	uxth	r3, r3
 800739a:	3b01      	subs	r3, #1
 800739c:	b29a      	uxth	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073aa:	d122      	bne.n	80073f2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	9300      	str	r3, [sp, #0]
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	2200      	movs	r2, #0
 80073b4:	2180      	movs	r1, #128	; 0x80
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f000 f9c0 	bl	800773c <UART_WaitOnFlagUntilTimeout>
 80073bc:	4603      	mov	r3, r0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d001      	beq.n	80073c6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80073c2:	2303      	movs	r3, #3
 80073c4:	e042      	b.n	800744c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	881b      	ldrh	r3, [r3, #0]
 80073ce:	461a      	mov	r2, r3
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073d8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d103      	bne.n	80073ea <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	3302      	adds	r3, #2
 80073e6:	60bb      	str	r3, [r7, #8]
 80073e8:	e017      	b.n	800741a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	3301      	adds	r3, #1
 80073ee:	60bb      	str	r3, [r7, #8]
 80073f0:	e013      	b.n	800741a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	9300      	str	r3, [sp, #0]
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	2200      	movs	r2, #0
 80073fa:	2180      	movs	r1, #128	; 0x80
 80073fc:	68f8      	ldr	r0, [r7, #12]
 80073fe:	f000 f99d 	bl	800773c <UART_WaitOnFlagUntilTimeout>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d001      	beq.n	800740c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	e01f      	b.n	800744c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	1c5a      	adds	r2, r3, #1
 8007410:	60ba      	str	r2, [r7, #8]
 8007412:	781a      	ldrb	r2, [r3, #0]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800741e:	b29b      	uxth	r3, r3
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1b7      	bne.n	8007394 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	2200      	movs	r2, #0
 800742c:	2140      	movs	r1, #64	; 0x40
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f000 f984 	bl	800773c <UART_WaitOnFlagUntilTimeout>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d001      	beq.n	800743e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e006      	b.n	800744c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2220      	movs	r2, #32
 8007442:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007446:	2300      	movs	r3, #0
 8007448:	e000      	b.n	800744c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800744a:	2302      	movs	r3, #2
  }
}
 800744c:	4618      	mov	r0, r3
 800744e:	3718      	adds	r7, #24
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	4613      	mov	r3, r2
 8007460:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b20      	cmp	r3, #32
 800746c:	d140      	bne.n	80074f0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d002      	beq.n	800747a <HAL_UART_Receive_IT+0x26>
 8007474:	88fb      	ldrh	r3, [r7, #6]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d101      	bne.n	800747e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e039      	b.n	80074f2 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007484:	2b01      	cmp	r3, #1
 8007486:	d101      	bne.n	800748c <HAL_UART_Receive_IT+0x38>
 8007488:	2302      	movs	r3, #2
 800748a:	e032      	b.n	80074f2 <HAL_UART_Receive_IT+0x9e>
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	68ba      	ldr	r2, [r7, #8]
 8007498:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	88fa      	ldrh	r2, [r7, #6]
 800749e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	88fa      	ldrh	r2, [r7, #6]
 80074a4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2200      	movs	r2, #0
 80074aa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2222      	movs	r2, #34	; 0x22
 80074b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68da      	ldr	r2, [r3, #12]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074ca:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	695a      	ldr	r2, [r3, #20]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f042 0201 	orr.w	r2, r2, #1
 80074da:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68da      	ldr	r2, [r3, #12]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f042 0220 	orr.w	r2, r2, #32
 80074ea:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80074ec:	2300      	movs	r3, #0
 80074ee:	e000      	b.n	80074f2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80074f0:	2302      	movs	r3, #2
  }
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3714      	adds	r7, #20
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
	...

08007500 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b088      	sub	sp, #32
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007520:	2300      	movs	r3, #0
 8007522:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007524:	2300      	movs	r3, #0
 8007526:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	f003 030f 	and.w	r3, r3, #15
 800752e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d10d      	bne.n	8007552 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	f003 0320 	and.w	r3, r3, #32
 800753c:	2b00      	cmp	r3, #0
 800753e:	d008      	beq.n	8007552 <HAL_UART_IRQHandler+0x52>
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	f003 0320 	and.w	r3, r3, #32
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f9e0 	bl	8007910 <UART_Receive_IT>
      return;
 8007550:	e0d1      	b.n	80076f6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	2b00      	cmp	r3, #0
 8007556:	f000 80b0 	beq.w	80076ba <HAL_UART_IRQHandler+0x1ba>
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	f003 0301 	and.w	r3, r3, #1
 8007560:	2b00      	cmp	r3, #0
 8007562:	d105      	bne.n	8007570 <HAL_UART_IRQHandler+0x70>
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800756a:	2b00      	cmp	r3, #0
 800756c:	f000 80a5 	beq.w	80076ba <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	f003 0301 	and.w	r3, r3, #1
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00a      	beq.n	8007590 <HAL_UART_IRQHandler+0x90>
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007580:	2b00      	cmp	r3, #0
 8007582:	d005      	beq.n	8007590 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007588:	f043 0201 	orr.w	r2, r3, #1
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	f003 0304 	and.w	r3, r3, #4
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00a      	beq.n	80075b0 <HAL_UART_IRQHandler+0xb0>
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	f003 0301 	and.w	r3, r3, #1
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d005      	beq.n	80075b0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075a8:	f043 0202 	orr.w	r2, r3, #2
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	f003 0302 	and.w	r3, r3, #2
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00a      	beq.n	80075d0 <HAL_UART_IRQHandler+0xd0>
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	f003 0301 	and.w	r3, r3, #1
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d005      	beq.n	80075d0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075c8:	f043 0204 	orr.w	r2, r3, #4
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	f003 0308 	and.w	r3, r3, #8
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00f      	beq.n	80075fa <HAL_UART_IRQHandler+0xfa>
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	f003 0320 	and.w	r3, r3, #32
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d104      	bne.n	80075ee <HAL_UART_IRQHandler+0xee>
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	f003 0301 	and.w	r3, r3, #1
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d005      	beq.n	80075fa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075f2:	f043 0208 	orr.w	r2, r3, #8
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d078      	beq.n	80076f4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	f003 0320 	and.w	r3, r3, #32
 8007608:	2b00      	cmp	r3, #0
 800760a:	d007      	beq.n	800761c <HAL_UART_IRQHandler+0x11c>
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	f003 0320 	and.w	r3, r3, #32
 8007612:	2b00      	cmp	r3, #0
 8007614:	d002      	beq.n	800761c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f97a 	bl	8007910 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	695b      	ldr	r3, [r3, #20]
 8007622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007626:	2b40      	cmp	r3, #64	; 0x40
 8007628:	bf0c      	ite	eq
 800762a:	2301      	moveq	r3, #1
 800762c:	2300      	movne	r3, #0
 800762e:	b2db      	uxtb	r3, r3
 8007630:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007636:	f003 0308 	and.w	r3, r3, #8
 800763a:	2b00      	cmp	r3, #0
 800763c:	d102      	bne.n	8007644 <HAL_UART_IRQHandler+0x144>
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d031      	beq.n	80076a8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f8c3 	bl	80077d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	695b      	ldr	r3, [r3, #20]
 8007650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007654:	2b40      	cmp	r3, #64	; 0x40
 8007656:	d123      	bne.n	80076a0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	695a      	ldr	r2, [r3, #20]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007666:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800766c:	2b00      	cmp	r3, #0
 800766e:	d013      	beq.n	8007698 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007674:	4a21      	ldr	r2, [pc, #132]	; (80076fc <HAL_UART_IRQHandler+0x1fc>)
 8007676:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800767c:	4618      	mov	r0, r3
 800767e:	f7fd fe15 	bl	80052ac <HAL_DMA_Abort_IT>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d016      	beq.n	80076b6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800768c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007692:	4610      	mov	r0, r2
 8007694:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007696:	e00e      	b.n	80076b6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 f845 	bl	8007728 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800769e:	e00a      	b.n	80076b6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 f841 	bl	8007728 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076a6:	e006      	b.n	80076b6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 f83d 	bl	8007728 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80076b4:	e01e      	b.n	80076f4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076b6:	bf00      	nop
    return;
 80076b8:	e01c      	b.n	80076f4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d008      	beq.n	80076d6 <HAL_UART_IRQHandler+0x1d6>
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d003      	beq.n	80076d6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f8b0 	bl	8007834 <UART_Transmit_IT>
    return;
 80076d4:	e00f      	b.n	80076f6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d00a      	beq.n	80076f6 <HAL_UART_IRQHandler+0x1f6>
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d005      	beq.n	80076f6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 f8f8 	bl	80078e0 <UART_EndTransmit_IT>
    return;
 80076f0:	bf00      	nop
 80076f2:	e000      	b.n	80076f6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80076f4:	bf00      	nop
  }
}
 80076f6:	3720      	adds	r7, #32
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	0800780d 	.word	0x0800780d

08007700 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800771c:	bf00      	nop
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007730:	bf00      	nop
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	603b      	str	r3, [r7, #0]
 8007748:	4613      	mov	r3, r2
 800774a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800774c:	e02c      	b.n	80077a8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007754:	d028      	beq.n	80077a8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d007      	beq.n	800776c <UART_WaitOnFlagUntilTimeout+0x30>
 800775c:	f7fc fe48 	bl	80043f0 <HAL_GetTick>
 8007760:	4602      	mov	r2, r0
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	1ad3      	subs	r3, r2, r3
 8007766:	69ba      	ldr	r2, [r7, #24]
 8007768:	429a      	cmp	r2, r3
 800776a:	d21d      	bcs.n	80077a8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68da      	ldr	r2, [r3, #12]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800777a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	695a      	ldr	r2, [r3, #20]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f022 0201 	bic.w	r2, r2, #1
 800778a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2220      	movs	r2, #32
 8007790:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2220      	movs	r2, #32
 8007798:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2200      	movs	r2, #0
 80077a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80077a4:	2303      	movs	r3, #3
 80077a6:	e00f      	b.n	80077c8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	4013      	ands	r3, r2
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	bf0c      	ite	eq
 80077b8:	2301      	moveq	r3, #1
 80077ba:	2300      	movne	r3, #0
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	461a      	mov	r2, r3
 80077c0:	79fb      	ldrb	r3, [r7, #7]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d0c3      	beq.n	800774e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	68da      	ldr	r2, [r3, #12]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80077e6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	695a      	ldr	r2, [r3, #20]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f022 0201 	bic.w	r2, r2, #1
 80077f6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2220      	movs	r2, #32
 80077fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007818:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2200      	movs	r2, #0
 8007824:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f7ff ff7e 	bl	8007728 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800782c:	bf00      	nop
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007842:	b2db      	uxtb	r3, r3
 8007844:	2b21      	cmp	r3, #33	; 0x21
 8007846:	d144      	bne.n	80078d2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007850:	d11a      	bne.n	8007888 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a1b      	ldr	r3, [r3, #32]
 8007856:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	881b      	ldrh	r3, [r3, #0]
 800785c:	461a      	mov	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007866:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d105      	bne.n	800787c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a1b      	ldr	r3, [r3, #32]
 8007874:	1c9a      	adds	r2, r3, #2
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	621a      	str	r2, [r3, #32]
 800787a:	e00e      	b.n	800789a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a1b      	ldr	r3, [r3, #32]
 8007880:	1c5a      	adds	r2, r3, #1
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	621a      	str	r2, [r3, #32]
 8007886:	e008      	b.n	800789a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a1b      	ldr	r3, [r3, #32]
 800788c:	1c59      	adds	r1, r3, #1
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	6211      	str	r1, [r2, #32]
 8007892:	781a      	ldrb	r2, [r3, #0]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800789e:	b29b      	uxth	r3, r3
 80078a0:	3b01      	subs	r3, #1
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	4619      	mov	r1, r3
 80078a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d10f      	bne.n	80078ce <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68da      	ldr	r2, [r3, #12]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68da      	ldr	r2, [r3, #12]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80078ce:	2300      	movs	r3, #0
 80078d0:	e000      	b.n	80078d4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80078d2:	2302      	movs	r3, #2
  }
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	68da      	ldr	r2, [r3, #12]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2220      	movs	r2, #32
 80078fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f7ff fefd 	bl	8007700 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	3708      	adds	r7, #8
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800791e:	b2db      	uxtb	r3, r3
 8007920:	2b22      	cmp	r3, #34	; 0x22
 8007922:	d171      	bne.n	8007a08 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800792c:	d123      	bne.n	8007976 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007932:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d10e      	bne.n	800795a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	b29b      	uxth	r3, r3
 8007944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007948:	b29a      	uxth	r2, r3
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007952:	1c9a      	adds	r2, r3, #2
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	629a      	str	r2, [r3, #40]	; 0x28
 8007958:	e029      	b.n	80079ae <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	b29b      	uxth	r3, r3
 8007962:	b2db      	uxtb	r3, r3
 8007964:	b29a      	uxth	r2, r3
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800796e:	1c5a      	adds	r2, r3, #1
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	629a      	str	r2, [r3, #40]	; 0x28
 8007974:	e01b      	b.n	80079ae <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10a      	bne.n	8007994 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	6858      	ldr	r0, [r3, #4]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007988:	1c59      	adds	r1, r3, #1
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	6291      	str	r1, [r2, #40]	; 0x28
 800798e:	b2c2      	uxtb	r2, r0
 8007990:	701a      	strb	r2, [r3, #0]
 8007992:	e00c      	b.n	80079ae <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	b2da      	uxtb	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a0:	1c58      	adds	r0, r3, #1
 80079a2:	6879      	ldr	r1, [r7, #4]
 80079a4:	6288      	str	r0, [r1, #40]	; 0x28
 80079a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80079aa:	b2d2      	uxtb	r2, r2
 80079ac:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	3b01      	subs	r3, #1
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	4619      	mov	r1, r3
 80079bc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d120      	bne.n	8007a04 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	68da      	ldr	r2, [r3, #12]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f022 0220 	bic.w	r2, r2, #32
 80079d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68da      	ldr	r2, [r3, #12]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	695a      	ldr	r2, [r3, #20]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f022 0201 	bic.w	r2, r2, #1
 80079f0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2220      	movs	r2, #32
 80079f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f7ff fe8a 	bl	8007714 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007a00:	2300      	movs	r3, #0
 8007a02:	e002      	b.n	8007a0a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007a04:	2300      	movs	r3, #0
 8007a06:	e000      	b.n	8007a0a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007a08:	2302      	movs	r3, #2
  }
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
	...

08007a14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a18:	b085      	sub	sp, #20
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	68da      	ldr	r2, [r3, #12]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	430a      	orrs	r2, r1
 8007a32:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	689a      	ldr	r2, [r3, #8]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	691b      	ldr	r3, [r3, #16]
 8007a3c:	431a      	orrs	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	695b      	ldr	r3, [r3, #20]
 8007a42:	431a      	orrs	r2, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	69db      	ldr	r3, [r3, #28]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007a56:	f023 030c 	bic.w	r3, r3, #12
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	6812      	ldr	r2, [r2, #0]
 8007a5e:	68f9      	ldr	r1, [r7, #12]
 8007a60:	430b      	orrs	r3, r1
 8007a62:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	699a      	ldr	r2, [r3, #24]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	430a      	orrs	r2, r1
 8007a78:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	69db      	ldr	r3, [r3, #28]
 8007a7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a82:	f040 818b 	bne.w	8007d9c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4ac1      	ldr	r2, [pc, #772]	; (8007d90 <UART_SetConfig+0x37c>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d005      	beq.n	8007a9c <UART_SetConfig+0x88>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4abf      	ldr	r2, [pc, #764]	; (8007d94 <UART_SetConfig+0x380>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	f040 80bd 	bne.w	8007c16 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a9c:	f7fe fc92 	bl	80063c4 <HAL_RCC_GetPCLK2Freq>
 8007aa0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	461d      	mov	r5, r3
 8007aa6:	f04f 0600 	mov.w	r6, #0
 8007aaa:	46a8      	mov	r8, r5
 8007aac:	46b1      	mov	r9, r6
 8007aae:	eb18 0308 	adds.w	r3, r8, r8
 8007ab2:	eb49 0409 	adc.w	r4, r9, r9
 8007ab6:	4698      	mov	r8, r3
 8007ab8:	46a1      	mov	r9, r4
 8007aba:	eb18 0805 	adds.w	r8, r8, r5
 8007abe:	eb49 0906 	adc.w	r9, r9, r6
 8007ac2:	f04f 0100 	mov.w	r1, #0
 8007ac6:	f04f 0200 	mov.w	r2, #0
 8007aca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007ace:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007ad2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007ad6:	4688      	mov	r8, r1
 8007ad8:	4691      	mov	r9, r2
 8007ada:	eb18 0005 	adds.w	r0, r8, r5
 8007ade:	eb49 0106 	adc.w	r1, r9, r6
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	461d      	mov	r5, r3
 8007ae8:	f04f 0600 	mov.w	r6, #0
 8007aec:	196b      	adds	r3, r5, r5
 8007aee:	eb46 0406 	adc.w	r4, r6, r6
 8007af2:	461a      	mov	r2, r3
 8007af4:	4623      	mov	r3, r4
 8007af6:	f7f9 f899 	bl	8000c2c <__aeabi_uldivmod>
 8007afa:	4603      	mov	r3, r0
 8007afc:	460c      	mov	r4, r1
 8007afe:	461a      	mov	r2, r3
 8007b00:	4ba5      	ldr	r3, [pc, #660]	; (8007d98 <UART_SetConfig+0x384>)
 8007b02:	fba3 2302 	umull	r2, r3, r3, r2
 8007b06:	095b      	lsrs	r3, r3, #5
 8007b08:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	461d      	mov	r5, r3
 8007b10:	f04f 0600 	mov.w	r6, #0
 8007b14:	46a9      	mov	r9, r5
 8007b16:	46b2      	mov	sl, r6
 8007b18:	eb19 0309 	adds.w	r3, r9, r9
 8007b1c:	eb4a 040a 	adc.w	r4, sl, sl
 8007b20:	4699      	mov	r9, r3
 8007b22:	46a2      	mov	sl, r4
 8007b24:	eb19 0905 	adds.w	r9, r9, r5
 8007b28:	eb4a 0a06 	adc.w	sl, sl, r6
 8007b2c:	f04f 0100 	mov.w	r1, #0
 8007b30:	f04f 0200 	mov.w	r2, #0
 8007b34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b40:	4689      	mov	r9, r1
 8007b42:	4692      	mov	sl, r2
 8007b44:	eb19 0005 	adds.w	r0, r9, r5
 8007b48:	eb4a 0106 	adc.w	r1, sl, r6
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	461d      	mov	r5, r3
 8007b52:	f04f 0600 	mov.w	r6, #0
 8007b56:	196b      	adds	r3, r5, r5
 8007b58:	eb46 0406 	adc.w	r4, r6, r6
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	4623      	mov	r3, r4
 8007b60:	f7f9 f864 	bl	8000c2c <__aeabi_uldivmod>
 8007b64:	4603      	mov	r3, r0
 8007b66:	460c      	mov	r4, r1
 8007b68:	461a      	mov	r2, r3
 8007b6a:	4b8b      	ldr	r3, [pc, #556]	; (8007d98 <UART_SetConfig+0x384>)
 8007b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8007b70:	095b      	lsrs	r3, r3, #5
 8007b72:	2164      	movs	r1, #100	; 0x64
 8007b74:	fb01 f303 	mul.w	r3, r1, r3
 8007b78:	1ad3      	subs	r3, r2, r3
 8007b7a:	00db      	lsls	r3, r3, #3
 8007b7c:	3332      	adds	r3, #50	; 0x32
 8007b7e:	4a86      	ldr	r2, [pc, #536]	; (8007d98 <UART_SetConfig+0x384>)
 8007b80:	fba2 2303 	umull	r2, r3, r2, r3
 8007b84:	095b      	lsrs	r3, r3, #5
 8007b86:	005b      	lsls	r3, r3, #1
 8007b88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007b8c:	4498      	add	r8, r3
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	461d      	mov	r5, r3
 8007b92:	f04f 0600 	mov.w	r6, #0
 8007b96:	46a9      	mov	r9, r5
 8007b98:	46b2      	mov	sl, r6
 8007b9a:	eb19 0309 	adds.w	r3, r9, r9
 8007b9e:	eb4a 040a 	adc.w	r4, sl, sl
 8007ba2:	4699      	mov	r9, r3
 8007ba4:	46a2      	mov	sl, r4
 8007ba6:	eb19 0905 	adds.w	r9, r9, r5
 8007baa:	eb4a 0a06 	adc.w	sl, sl, r6
 8007bae:	f04f 0100 	mov.w	r1, #0
 8007bb2:	f04f 0200 	mov.w	r2, #0
 8007bb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007bba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007bbe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007bc2:	4689      	mov	r9, r1
 8007bc4:	4692      	mov	sl, r2
 8007bc6:	eb19 0005 	adds.w	r0, r9, r5
 8007bca:	eb4a 0106 	adc.w	r1, sl, r6
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	461d      	mov	r5, r3
 8007bd4:	f04f 0600 	mov.w	r6, #0
 8007bd8:	196b      	adds	r3, r5, r5
 8007bda:	eb46 0406 	adc.w	r4, r6, r6
 8007bde:	461a      	mov	r2, r3
 8007be0:	4623      	mov	r3, r4
 8007be2:	f7f9 f823 	bl	8000c2c <__aeabi_uldivmod>
 8007be6:	4603      	mov	r3, r0
 8007be8:	460c      	mov	r4, r1
 8007bea:	461a      	mov	r2, r3
 8007bec:	4b6a      	ldr	r3, [pc, #424]	; (8007d98 <UART_SetConfig+0x384>)
 8007bee:	fba3 1302 	umull	r1, r3, r3, r2
 8007bf2:	095b      	lsrs	r3, r3, #5
 8007bf4:	2164      	movs	r1, #100	; 0x64
 8007bf6:	fb01 f303 	mul.w	r3, r1, r3
 8007bfa:	1ad3      	subs	r3, r2, r3
 8007bfc:	00db      	lsls	r3, r3, #3
 8007bfe:	3332      	adds	r3, #50	; 0x32
 8007c00:	4a65      	ldr	r2, [pc, #404]	; (8007d98 <UART_SetConfig+0x384>)
 8007c02:	fba2 2303 	umull	r2, r3, r2, r3
 8007c06:	095b      	lsrs	r3, r3, #5
 8007c08:	f003 0207 	and.w	r2, r3, #7
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4442      	add	r2, r8
 8007c12:	609a      	str	r2, [r3, #8]
 8007c14:	e26f      	b.n	80080f6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c16:	f7fe fbc1 	bl	800639c <HAL_RCC_GetPCLK1Freq>
 8007c1a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	461d      	mov	r5, r3
 8007c20:	f04f 0600 	mov.w	r6, #0
 8007c24:	46a8      	mov	r8, r5
 8007c26:	46b1      	mov	r9, r6
 8007c28:	eb18 0308 	adds.w	r3, r8, r8
 8007c2c:	eb49 0409 	adc.w	r4, r9, r9
 8007c30:	4698      	mov	r8, r3
 8007c32:	46a1      	mov	r9, r4
 8007c34:	eb18 0805 	adds.w	r8, r8, r5
 8007c38:	eb49 0906 	adc.w	r9, r9, r6
 8007c3c:	f04f 0100 	mov.w	r1, #0
 8007c40:	f04f 0200 	mov.w	r2, #0
 8007c44:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007c48:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007c4c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007c50:	4688      	mov	r8, r1
 8007c52:	4691      	mov	r9, r2
 8007c54:	eb18 0005 	adds.w	r0, r8, r5
 8007c58:	eb49 0106 	adc.w	r1, r9, r6
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	461d      	mov	r5, r3
 8007c62:	f04f 0600 	mov.w	r6, #0
 8007c66:	196b      	adds	r3, r5, r5
 8007c68:	eb46 0406 	adc.w	r4, r6, r6
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	4623      	mov	r3, r4
 8007c70:	f7f8 ffdc 	bl	8000c2c <__aeabi_uldivmod>
 8007c74:	4603      	mov	r3, r0
 8007c76:	460c      	mov	r4, r1
 8007c78:	461a      	mov	r2, r3
 8007c7a:	4b47      	ldr	r3, [pc, #284]	; (8007d98 <UART_SetConfig+0x384>)
 8007c7c:	fba3 2302 	umull	r2, r3, r3, r2
 8007c80:	095b      	lsrs	r3, r3, #5
 8007c82:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	461d      	mov	r5, r3
 8007c8a:	f04f 0600 	mov.w	r6, #0
 8007c8e:	46a9      	mov	r9, r5
 8007c90:	46b2      	mov	sl, r6
 8007c92:	eb19 0309 	adds.w	r3, r9, r9
 8007c96:	eb4a 040a 	adc.w	r4, sl, sl
 8007c9a:	4699      	mov	r9, r3
 8007c9c:	46a2      	mov	sl, r4
 8007c9e:	eb19 0905 	adds.w	r9, r9, r5
 8007ca2:	eb4a 0a06 	adc.w	sl, sl, r6
 8007ca6:	f04f 0100 	mov.w	r1, #0
 8007caa:	f04f 0200 	mov.w	r2, #0
 8007cae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007cb2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007cb6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007cba:	4689      	mov	r9, r1
 8007cbc:	4692      	mov	sl, r2
 8007cbe:	eb19 0005 	adds.w	r0, r9, r5
 8007cc2:	eb4a 0106 	adc.w	r1, sl, r6
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	461d      	mov	r5, r3
 8007ccc:	f04f 0600 	mov.w	r6, #0
 8007cd0:	196b      	adds	r3, r5, r5
 8007cd2:	eb46 0406 	adc.w	r4, r6, r6
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	4623      	mov	r3, r4
 8007cda:	f7f8 ffa7 	bl	8000c2c <__aeabi_uldivmod>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	460c      	mov	r4, r1
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	4b2c      	ldr	r3, [pc, #176]	; (8007d98 <UART_SetConfig+0x384>)
 8007ce6:	fba3 1302 	umull	r1, r3, r3, r2
 8007cea:	095b      	lsrs	r3, r3, #5
 8007cec:	2164      	movs	r1, #100	; 0x64
 8007cee:	fb01 f303 	mul.w	r3, r1, r3
 8007cf2:	1ad3      	subs	r3, r2, r3
 8007cf4:	00db      	lsls	r3, r3, #3
 8007cf6:	3332      	adds	r3, #50	; 0x32
 8007cf8:	4a27      	ldr	r2, [pc, #156]	; (8007d98 <UART_SetConfig+0x384>)
 8007cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8007cfe:	095b      	lsrs	r3, r3, #5
 8007d00:	005b      	lsls	r3, r3, #1
 8007d02:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007d06:	4498      	add	r8, r3
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	461d      	mov	r5, r3
 8007d0c:	f04f 0600 	mov.w	r6, #0
 8007d10:	46a9      	mov	r9, r5
 8007d12:	46b2      	mov	sl, r6
 8007d14:	eb19 0309 	adds.w	r3, r9, r9
 8007d18:	eb4a 040a 	adc.w	r4, sl, sl
 8007d1c:	4699      	mov	r9, r3
 8007d1e:	46a2      	mov	sl, r4
 8007d20:	eb19 0905 	adds.w	r9, r9, r5
 8007d24:	eb4a 0a06 	adc.w	sl, sl, r6
 8007d28:	f04f 0100 	mov.w	r1, #0
 8007d2c:	f04f 0200 	mov.w	r2, #0
 8007d30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007d38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007d3c:	4689      	mov	r9, r1
 8007d3e:	4692      	mov	sl, r2
 8007d40:	eb19 0005 	adds.w	r0, r9, r5
 8007d44:	eb4a 0106 	adc.w	r1, sl, r6
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	461d      	mov	r5, r3
 8007d4e:	f04f 0600 	mov.w	r6, #0
 8007d52:	196b      	adds	r3, r5, r5
 8007d54:	eb46 0406 	adc.w	r4, r6, r6
 8007d58:	461a      	mov	r2, r3
 8007d5a:	4623      	mov	r3, r4
 8007d5c:	f7f8 ff66 	bl	8000c2c <__aeabi_uldivmod>
 8007d60:	4603      	mov	r3, r0
 8007d62:	460c      	mov	r4, r1
 8007d64:	461a      	mov	r2, r3
 8007d66:	4b0c      	ldr	r3, [pc, #48]	; (8007d98 <UART_SetConfig+0x384>)
 8007d68:	fba3 1302 	umull	r1, r3, r3, r2
 8007d6c:	095b      	lsrs	r3, r3, #5
 8007d6e:	2164      	movs	r1, #100	; 0x64
 8007d70:	fb01 f303 	mul.w	r3, r1, r3
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	00db      	lsls	r3, r3, #3
 8007d78:	3332      	adds	r3, #50	; 0x32
 8007d7a:	4a07      	ldr	r2, [pc, #28]	; (8007d98 <UART_SetConfig+0x384>)
 8007d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d80:	095b      	lsrs	r3, r3, #5
 8007d82:	f003 0207 	and.w	r2, r3, #7
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4442      	add	r2, r8
 8007d8c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007d8e:	e1b2      	b.n	80080f6 <UART_SetConfig+0x6e2>
 8007d90:	40011000 	.word	0x40011000
 8007d94:	40011400 	.word	0x40011400
 8007d98:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4ad7      	ldr	r2, [pc, #860]	; (8008100 <UART_SetConfig+0x6ec>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d005      	beq.n	8007db2 <UART_SetConfig+0x39e>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4ad6      	ldr	r2, [pc, #856]	; (8008104 <UART_SetConfig+0x6f0>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	f040 80d1 	bne.w	8007f54 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007db2:	f7fe fb07 	bl	80063c4 <HAL_RCC_GetPCLK2Freq>
 8007db6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	469a      	mov	sl, r3
 8007dbc:	f04f 0b00 	mov.w	fp, #0
 8007dc0:	46d0      	mov	r8, sl
 8007dc2:	46d9      	mov	r9, fp
 8007dc4:	eb18 0308 	adds.w	r3, r8, r8
 8007dc8:	eb49 0409 	adc.w	r4, r9, r9
 8007dcc:	4698      	mov	r8, r3
 8007dce:	46a1      	mov	r9, r4
 8007dd0:	eb18 080a 	adds.w	r8, r8, sl
 8007dd4:	eb49 090b 	adc.w	r9, r9, fp
 8007dd8:	f04f 0100 	mov.w	r1, #0
 8007ddc:	f04f 0200 	mov.w	r2, #0
 8007de0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007de4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007de8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007dec:	4688      	mov	r8, r1
 8007dee:	4691      	mov	r9, r2
 8007df0:	eb1a 0508 	adds.w	r5, sl, r8
 8007df4:	eb4b 0609 	adc.w	r6, fp, r9
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	f04f 0200 	mov.w	r2, #0
 8007e02:	f04f 0300 	mov.w	r3, #0
 8007e06:	f04f 0400 	mov.w	r4, #0
 8007e0a:	0094      	lsls	r4, r2, #2
 8007e0c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007e10:	008b      	lsls	r3, r1, #2
 8007e12:	461a      	mov	r2, r3
 8007e14:	4623      	mov	r3, r4
 8007e16:	4628      	mov	r0, r5
 8007e18:	4631      	mov	r1, r6
 8007e1a:	f7f8 ff07 	bl	8000c2c <__aeabi_uldivmod>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	460c      	mov	r4, r1
 8007e22:	461a      	mov	r2, r3
 8007e24:	4bb8      	ldr	r3, [pc, #736]	; (8008108 <UART_SetConfig+0x6f4>)
 8007e26:	fba3 2302 	umull	r2, r3, r3, r2
 8007e2a:	095b      	lsrs	r3, r3, #5
 8007e2c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	469b      	mov	fp, r3
 8007e34:	f04f 0c00 	mov.w	ip, #0
 8007e38:	46d9      	mov	r9, fp
 8007e3a:	46e2      	mov	sl, ip
 8007e3c:	eb19 0309 	adds.w	r3, r9, r9
 8007e40:	eb4a 040a 	adc.w	r4, sl, sl
 8007e44:	4699      	mov	r9, r3
 8007e46:	46a2      	mov	sl, r4
 8007e48:	eb19 090b 	adds.w	r9, r9, fp
 8007e4c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007e50:	f04f 0100 	mov.w	r1, #0
 8007e54:	f04f 0200 	mov.w	r2, #0
 8007e58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007e60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007e64:	4689      	mov	r9, r1
 8007e66:	4692      	mov	sl, r2
 8007e68:	eb1b 0509 	adds.w	r5, fp, r9
 8007e6c:	eb4c 060a 	adc.w	r6, ip, sl
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	4619      	mov	r1, r3
 8007e76:	f04f 0200 	mov.w	r2, #0
 8007e7a:	f04f 0300 	mov.w	r3, #0
 8007e7e:	f04f 0400 	mov.w	r4, #0
 8007e82:	0094      	lsls	r4, r2, #2
 8007e84:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007e88:	008b      	lsls	r3, r1, #2
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	4623      	mov	r3, r4
 8007e8e:	4628      	mov	r0, r5
 8007e90:	4631      	mov	r1, r6
 8007e92:	f7f8 fecb 	bl	8000c2c <__aeabi_uldivmod>
 8007e96:	4603      	mov	r3, r0
 8007e98:	460c      	mov	r4, r1
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	4b9a      	ldr	r3, [pc, #616]	; (8008108 <UART_SetConfig+0x6f4>)
 8007e9e:	fba3 1302 	umull	r1, r3, r3, r2
 8007ea2:	095b      	lsrs	r3, r3, #5
 8007ea4:	2164      	movs	r1, #100	; 0x64
 8007ea6:	fb01 f303 	mul.w	r3, r1, r3
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	011b      	lsls	r3, r3, #4
 8007eae:	3332      	adds	r3, #50	; 0x32
 8007eb0:	4a95      	ldr	r2, [pc, #596]	; (8008108 <UART_SetConfig+0x6f4>)
 8007eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007eb6:	095b      	lsrs	r3, r3, #5
 8007eb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ebc:	4498      	add	r8, r3
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	469b      	mov	fp, r3
 8007ec2:	f04f 0c00 	mov.w	ip, #0
 8007ec6:	46d9      	mov	r9, fp
 8007ec8:	46e2      	mov	sl, ip
 8007eca:	eb19 0309 	adds.w	r3, r9, r9
 8007ece:	eb4a 040a 	adc.w	r4, sl, sl
 8007ed2:	4699      	mov	r9, r3
 8007ed4:	46a2      	mov	sl, r4
 8007ed6:	eb19 090b 	adds.w	r9, r9, fp
 8007eda:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007ede:	f04f 0100 	mov.w	r1, #0
 8007ee2:	f04f 0200 	mov.w	r2, #0
 8007ee6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007eea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007eee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007ef2:	4689      	mov	r9, r1
 8007ef4:	4692      	mov	sl, r2
 8007ef6:	eb1b 0509 	adds.w	r5, fp, r9
 8007efa:	eb4c 060a 	adc.w	r6, ip, sl
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	4619      	mov	r1, r3
 8007f04:	f04f 0200 	mov.w	r2, #0
 8007f08:	f04f 0300 	mov.w	r3, #0
 8007f0c:	f04f 0400 	mov.w	r4, #0
 8007f10:	0094      	lsls	r4, r2, #2
 8007f12:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007f16:	008b      	lsls	r3, r1, #2
 8007f18:	461a      	mov	r2, r3
 8007f1a:	4623      	mov	r3, r4
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	4631      	mov	r1, r6
 8007f20:	f7f8 fe84 	bl	8000c2c <__aeabi_uldivmod>
 8007f24:	4603      	mov	r3, r0
 8007f26:	460c      	mov	r4, r1
 8007f28:	461a      	mov	r2, r3
 8007f2a:	4b77      	ldr	r3, [pc, #476]	; (8008108 <UART_SetConfig+0x6f4>)
 8007f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8007f30:	095b      	lsrs	r3, r3, #5
 8007f32:	2164      	movs	r1, #100	; 0x64
 8007f34:	fb01 f303 	mul.w	r3, r1, r3
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	011b      	lsls	r3, r3, #4
 8007f3c:	3332      	adds	r3, #50	; 0x32
 8007f3e:	4a72      	ldr	r2, [pc, #456]	; (8008108 <UART_SetConfig+0x6f4>)
 8007f40:	fba2 2303 	umull	r2, r3, r2, r3
 8007f44:	095b      	lsrs	r3, r3, #5
 8007f46:	f003 020f 	and.w	r2, r3, #15
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4442      	add	r2, r8
 8007f50:	609a      	str	r2, [r3, #8]
 8007f52:	e0d0      	b.n	80080f6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f54:	f7fe fa22 	bl	800639c <HAL_RCC_GetPCLK1Freq>
 8007f58:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	469a      	mov	sl, r3
 8007f5e:	f04f 0b00 	mov.w	fp, #0
 8007f62:	46d0      	mov	r8, sl
 8007f64:	46d9      	mov	r9, fp
 8007f66:	eb18 0308 	adds.w	r3, r8, r8
 8007f6a:	eb49 0409 	adc.w	r4, r9, r9
 8007f6e:	4698      	mov	r8, r3
 8007f70:	46a1      	mov	r9, r4
 8007f72:	eb18 080a 	adds.w	r8, r8, sl
 8007f76:	eb49 090b 	adc.w	r9, r9, fp
 8007f7a:	f04f 0100 	mov.w	r1, #0
 8007f7e:	f04f 0200 	mov.w	r2, #0
 8007f82:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007f86:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007f8a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007f8e:	4688      	mov	r8, r1
 8007f90:	4691      	mov	r9, r2
 8007f92:	eb1a 0508 	adds.w	r5, sl, r8
 8007f96:	eb4b 0609 	adc.w	r6, fp, r9
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	f04f 0200 	mov.w	r2, #0
 8007fa4:	f04f 0300 	mov.w	r3, #0
 8007fa8:	f04f 0400 	mov.w	r4, #0
 8007fac:	0094      	lsls	r4, r2, #2
 8007fae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007fb2:	008b      	lsls	r3, r1, #2
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	4623      	mov	r3, r4
 8007fb8:	4628      	mov	r0, r5
 8007fba:	4631      	mov	r1, r6
 8007fbc:	f7f8 fe36 	bl	8000c2c <__aeabi_uldivmod>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	460c      	mov	r4, r1
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	4b50      	ldr	r3, [pc, #320]	; (8008108 <UART_SetConfig+0x6f4>)
 8007fc8:	fba3 2302 	umull	r2, r3, r3, r2
 8007fcc:	095b      	lsrs	r3, r3, #5
 8007fce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	469b      	mov	fp, r3
 8007fd6:	f04f 0c00 	mov.w	ip, #0
 8007fda:	46d9      	mov	r9, fp
 8007fdc:	46e2      	mov	sl, ip
 8007fde:	eb19 0309 	adds.w	r3, r9, r9
 8007fe2:	eb4a 040a 	adc.w	r4, sl, sl
 8007fe6:	4699      	mov	r9, r3
 8007fe8:	46a2      	mov	sl, r4
 8007fea:	eb19 090b 	adds.w	r9, r9, fp
 8007fee:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007ff2:	f04f 0100 	mov.w	r1, #0
 8007ff6:	f04f 0200 	mov.w	r2, #0
 8007ffa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ffe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008002:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008006:	4689      	mov	r9, r1
 8008008:	4692      	mov	sl, r2
 800800a:	eb1b 0509 	adds.w	r5, fp, r9
 800800e:	eb4c 060a 	adc.w	r6, ip, sl
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	4619      	mov	r1, r3
 8008018:	f04f 0200 	mov.w	r2, #0
 800801c:	f04f 0300 	mov.w	r3, #0
 8008020:	f04f 0400 	mov.w	r4, #0
 8008024:	0094      	lsls	r4, r2, #2
 8008026:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800802a:	008b      	lsls	r3, r1, #2
 800802c:	461a      	mov	r2, r3
 800802e:	4623      	mov	r3, r4
 8008030:	4628      	mov	r0, r5
 8008032:	4631      	mov	r1, r6
 8008034:	f7f8 fdfa 	bl	8000c2c <__aeabi_uldivmod>
 8008038:	4603      	mov	r3, r0
 800803a:	460c      	mov	r4, r1
 800803c:	461a      	mov	r2, r3
 800803e:	4b32      	ldr	r3, [pc, #200]	; (8008108 <UART_SetConfig+0x6f4>)
 8008040:	fba3 1302 	umull	r1, r3, r3, r2
 8008044:	095b      	lsrs	r3, r3, #5
 8008046:	2164      	movs	r1, #100	; 0x64
 8008048:	fb01 f303 	mul.w	r3, r1, r3
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	011b      	lsls	r3, r3, #4
 8008050:	3332      	adds	r3, #50	; 0x32
 8008052:	4a2d      	ldr	r2, [pc, #180]	; (8008108 <UART_SetConfig+0x6f4>)
 8008054:	fba2 2303 	umull	r2, r3, r2, r3
 8008058:	095b      	lsrs	r3, r3, #5
 800805a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800805e:	4498      	add	r8, r3
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	469b      	mov	fp, r3
 8008064:	f04f 0c00 	mov.w	ip, #0
 8008068:	46d9      	mov	r9, fp
 800806a:	46e2      	mov	sl, ip
 800806c:	eb19 0309 	adds.w	r3, r9, r9
 8008070:	eb4a 040a 	adc.w	r4, sl, sl
 8008074:	4699      	mov	r9, r3
 8008076:	46a2      	mov	sl, r4
 8008078:	eb19 090b 	adds.w	r9, r9, fp
 800807c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008080:	f04f 0100 	mov.w	r1, #0
 8008084:	f04f 0200 	mov.w	r2, #0
 8008088:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800808c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008090:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008094:	4689      	mov	r9, r1
 8008096:	4692      	mov	sl, r2
 8008098:	eb1b 0509 	adds.w	r5, fp, r9
 800809c:	eb4c 060a 	adc.w	r6, ip, sl
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	4619      	mov	r1, r3
 80080a6:	f04f 0200 	mov.w	r2, #0
 80080aa:	f04f 0300 	mov.w	r3, #0
 80080ae:	f04f 0400 	mov.w	r4, #0
 80080b2:	0094      	lsls	r4, r2, #2
 80080b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80080b8:	008b      	lsls	r3, r1, #2
 80080ba:	461a      	mov	r2, r3
 80080bc:	4623      	mov	r3, r4
 80080be:	4628      	mov	r0, r5
 80080c0:	4631      	mov	r1, r6
 80080c2:	f7f8 fdb3 	bl	8000c2c <__aeabi_uldivmod>
 80080c6:	4603      	mov	r3, r0
 80080c8:	460c      	mov	r4, r1
 80080ca:	461a      	mov	r2, r3
 80080cc:	4b0e      	ldr	r3, [pc, #56]	; (8008108 <UART_SetConfig+0x6f4>)
 80080ce:	fba3 1302 	umull	r1, r3, r3, r2
 80080d2:	095b      	lsrs	r3, r3, #5
 80080d4:	2164      	movs	r1, #100	; 0x64
 80080d6:	fb01 f303 	mul.w	r3, r1, r3
 80080da:	1ad3      	subs	r3, r2, r3
 80080dc:	011b      	lsls	r3, r3, #4
 80080de:	3332      	adds	r3, #50	; 0x32
 80080e0:	4a09      	ldr	r2, [pc, #36]	; (8008108 <UART_SetConfig+0x6f4>)
 80080e2:	fba2 2303 	umull	r2, r3, r2, r3
 80080e6:	095b      	lsrs	r3, r3, #5
 80080e8:	f003 020f 	and.w	r2, r3, #15
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4442      	add	r2, r8
 80080f2:	609a      	str	r2, [r3, #8]
}
 80080f4:	e7ff      	b.n	80080f6 <UART_SetConfig+0x6e2>
 80080f6:	bf00      	nop
 80080f8:	3714      	adds	r7, #20
 80080fa:	46bd      	mov	sp, r7
 80080fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008100:	40011000 	.word	0x40011000
 8008104:	40011400 	.word	0x40011400
 8008108:	51eb851f 	.word	0x51eb851f

0800810c <__errno>:
 800810c:	4b01      	ldr	r3, [pc, #4]	; (8008114 <__errno+0x8>)
 800810e:	6818      	ldr	r0, [r3, #0]
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	20000020 	.word	0x20000020

08008118 <__libc_init_array>:
 8008118:	b570      	push	{r4, r5, r6, lr}
 800811a:	4e0d      	ldr	r6, [pc, #52]	; (8008150 <__libc_init_array+0x38>)
 800811c:	4c0d      	ldr	r4, [pc, #52]	; (8008154 <__libc_init_array+0x3c>)
 800811e:	1ba4      	subs	r4, r4, r6
 8008120:	10a4      	asrs	r4, r4, #2
 8008122:	2500      	movs	r5, #0
 8008124:	42a5      	cmp	r5, r4
 8008126:	d109      	bne.n	800813c <__libc_init_array+0x24>
 8008128:	4e0b      	ldr	r6, [pc, #44]	; (8008158 <__libc_init_array+0x40>)
 800812a:	4c0c      	ldr	r4, [pc, #48]	; (800815c <__libc_init_array+0x44>)
 800812c:	f001 fc3a 	bl	80099a4 <_init>
 8008130:	1ba4      	subs	r4, r4, r6
 8008132:	10a4      	asrs	r4, r4, #2
 8008134:	2500      	movs	r5, #0
 8008136:	42a5      	cmp	r5, r4
 8008138:	d105      	bne.n	8008146 <__libc_init_array+0x2e>
 800813a:	bd70      	pop	{r4, r5, r6, pc}
 800813c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008140:	4798      	blx	r3
 8008142:	3501      	adds	r5, #1
 8008144:	e7ee      	b.n	8008124 <__libc_init_array+0xc>
 8008146:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800814a:	4798      	blx	r3
 800814c:	3501      	adds	r5, #1
 800814e:	e7f2      	b.n	8008136 <__libc_init_array+0x1e>
 8008150:	0800a2d0 	.word	0x0800a2d0
 8008154:	0800a2d0 	.word	0x0800a2d0
 8008158:	0800a2d0 	.word	0x0800a2d0
 800815c:	0800a2d4 	.word	0x0800a2d4

08008160 <memcpy>:
 8008160:	b510      	push	{r4, lr}
 8008162:	1e43      	subs	r3, r0, #1
 8008164:	440a      	add	r2, r1
 8008166:	4291      	cmp	r1, r2
 8008168:	d100      	bne.n	800816c <memcpy+0xc>
 800816a:	bd10      	pop	{r4, pc}
 800816c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008170:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008174:	e7f7      	b.n	8008166 <memcpy+0x6>

08008176 <memset>:
 8008176:	4402      	add	r2, r0
 8008178:	4603      	mov	r3, r0
 800817a:	4293      	cmp	r3, r2
 800817c:	d100      	bne.n	8008180 <memset+0xa>
 800817e:	4770      	bx	lr
 8008180:	f803 1b01 	strb.w	r1, [r3], #1
 8008184:	e7f9      	b.n	800817a <memset+0x4>
	...

08008188 <siprintf>:
 8008188:	b40e      	push	{r1, r2, r3}
 800818a:	b500      	push	{lr}
 800818c:	b09c      	sub	sp, #112	; 0x70
 800818e:	ab1d      	add	r3, sp, #116	; 0x74
 8008190:	9002      	str	r0, [sp, #8]
 8008192:	9006      	str	r0, [sp, #24]
 8008194:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008198:	4809      	ldr	r0, [pc, #36]	; (80081c0 <siprintf+0x38>)
 800819a:	9107      	str	r1, [sp, #28]
 800819c:	9104      	str	r1, [sp, #16]
 800819e:	4909      	ldr	r1, [pc, #36]	; (80081c4 <siprintf+0x3c>)
 80081a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80081a4:	9105      	str	r1, [sp, #20]
 80081a6:	6800      	ldr	r0, [r0, #0]
 80081a8:	9301      	str	r3, [sp, #4]
 80081aa:	a902      	add	r1, sp, #8
 80081ac:	f000 f866 	bl	800827c <_svfiprintf_r>
 80081b0:	9b02      	ldr	r3, [sp, #8]
 80081b2:	2200      	movs	r2, #0
 80081b4:	701a      	strb	r2, [r3, #0]
 80081b6:	b01c      	add	sp, #112	; 0x70
 80081b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80081bc:	b003      	add	sp, #12
 80081be:	4770      	bx	lr
 80081c0:	20000020 	.word	0x20000020
 80081c4:	ffff0208 	.word	0xffff0208

080081c8 <__ssputs_r>:
 80081c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081cc:	688e      	ldr	r6, [r1, #8]
 80081ce:	429e      	cmp	r6, r3
 80081d0:	4682      	mov	sl, r0
 80081d2:	460c      	mov	r4, r1
 80081d4:	4690      	mov	r8, r2
 80081d6:	4699      	mov	r9, r3
 80081d8:	d837      	bhi.n	800824a <__ssputs_r+0x82>
 80081da:	898a      	ldrh	r2, [r1, #12]
 80081dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80081e0:	d031      	beq.n	8008246 <__ssputs_r+0x7e>
 80081e2:	6825      	ldr	r5, [r4, #0]
 80081e4:	6909      	ldr	r1, [r1, #16]
 80081e6:	1a6f      	subs	r7, r5, r1
 80081e8:	6965      	ldr	r5, [r4, #20]
 80081ea:	2302      	movs	r3, #2
 80081ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80081f0:	fb95 f5f3 	sdiv	r5, r5, r3
 80081f4:	f109 0301 	add.w	r3, r9, #1
 80081f8:	443b      	add	r3, r7
 80081fa:	429d      	cmp	r5, r3
 80081fc:	bf38      	it	cc
 80081fe:	461d      	movcc	r5, r3
 8008200:	0553      	lsls	r3, r2, #21
 8008202:	d530      	bpl.n	8008266 <__ssputs_r+0x9e>
 8008204:	4629      	mov	r1, r5
 8008206:	f000 fb21 	bl	800884c <_malloc_r>
 800820a:	4606      	mov	r6, r0
 800820c:	b950      	cbnz	r0, 8008224 <__ssputs_r+0x5c>
 800820e:	230c      	movs	r3, #12
 8008210:	f8ca 3000 	str.w	r3, [sl]
 8008214:	89a3      	ldrh	r3, [r4, #12]
 8008216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800821a:	81a3      	strh	r3, [r4, #12]
 800821c:	f04f 30ff 	mov.w	r0, #4294967295
 8008220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008224:	463a      	mov	r2, r7
 8008226:	6921      	ldr	r1, [r4, #16]
 8008228:	f7ff ff9a 	bl	8008160 <memcpy>
 800822c:	89a3      	ldrh	r3, [r4, #12]
 800822e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008236:	81a3      	strh	r3, [r4, #12]
 8008238:	6126      	str	r6, [r4, #16]
 800823a:	6165      	str	r5, [r4, #20]
 800823c:	443e      	add	r6, r7
 800823e:	1bed      	subs	r5, r5, r7
 8008240:	6026      	str	r6, [r4, #0]
 8008242:	60a5      	str	r5, [r4, #8]
 8008244:	464e      	mov	r6, r9
 8008246:	454e      	cmp	r6, r9
 8008248:	d900      	bls.n	800824c <__ssputs_r+0x84>
 800824a:	464e      	mov	r6, r9
 800824c:	4632      	mov	r2, r6
 800824e:	4641      	mov	r1, r8
 8008250:	6820      	ldr	r0, [r4, #0]
 8008252:	f000 fa93 	bl	800877c <memmove>
 8008256:	68a3      	ldr	r3, [r4, #8]
 8008258:	1b9b      	subs	r3, r3, r6
 800825a:	60a3      	str	r3, [r4, #8]
 800825c:	6823      	ldr	r3, [r4, #0]
 800825e:	441e      	add	r6, r3
 8008260:	6026      	str	r6, [r4, #0]
 8008262:	2000      	movs	r0, #0
 8008264:	e7dc      	b.n	8008220 <__ssputs_r+0x58>
 8008266:	462a      	mov	r2, r5
 8008268:	f000 fb4a 	bl	8008900 <_realloc_r>
 800826c:	4606      	mov	r6, r0
 800826e:	2800      	cmp	r0, #0
 8008270:	d1e2      	bne.n	8008238 <__ssputs_r+0x70>
 8008272:	6921      	ldr	r1, [r4, #16]
 8008274:	4650      	mov	r0, sl
 8008276:	f000 fa9b 	bl	80087b0 <_free_r>
 800827a:	e7c8      	b.n	800820e <__ssputs_r+0x46>

0800827c <_svfiprintf_r>:
 800827c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008280:	461d      	mov	r5, r3
 8008282:	898b      	ldrh	r3, [r1, #12]
 8008284:	061f      	lsls	r7, r3, #24
 8008286:	b09d      	sub	sp, #116	; 0x74
 8008288:	4680      	mov	r8, r0
 800828a:	460c      	mov	r4, r1
 800828c:	4616      	mov	r6, r2
 800828e:	d50f      	bpl.n	80082b0 <_svfiprintf_r+0x34>
 8008290:	690b      	ldr	r3, [r1, #16]
 8008292:	b96b      	cbnz	r3, 80082b0 <_svfiprintf_r+0x34>
 8008294:	2140      	movs	r1, #64	; 0x40
 8008296:	f000 fad9 	bl	800884c <_malloc_r>
 800829a:	6020      	str	r0, [r4, #0]
 800829c:	6120      	str	r0, [r4, #16]
 800829e:	b928      	cbnz	r0, 80082ac <_svfiprintf_r+0x30>
 80082a0:	230c      	movs	r3, #12
 80082a2:	f8c8 3000 	str.w	r3, [r8]
 80082a6:	f04f 30ff 	mov.w	r0, #4294967295
 80082aa:	e0c8      	b.n	800843e <_svfiprintf_r+0x1c2>
 80082ac:	2340      	movs	r3, #64	; 0x40
 80082ae:	6163      	str	r3, [r4, #20]
 80082b0:	2300      	movs	r3, #0
 80082b2:	9309      	str	r3, [sp, #36]	; 0x24
 80082b4:	2320      	movs	r3, #32
 80082b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082ba:	2330      	movs	r3, #48	; 0x30
 80082bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082c0:	9503      	str	r5, [sp, #12]
 80082c2:	f04f 0b01 	mov.w	fp, #1
 80082c6:	4637      	mov	r7, r6
 80082c8:	463d      	mov	r5, r7
 80082ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80082ce:	b10b      	cbz	r3, 80082d4 <_svfiprintf_r+0x58>
 80082d0:	2b25      	cmp	r3, #37	; 0x25
 80082d2:	d13e      	bne.n	8008352 <_svfiprintf_r+0xd6>
 80082d4:	ebb7 0a06 	subs.w	sl, r7, r6
 80082d8:	d00b      	beq.n	80082f2 <_svfiprintf_r+0x76>
 80082da:	4653      	mov	r3, sl
 80082dc:	4632      	mov	r2, r6
 80082de:	4621      	mov	r1, r4
 80082e0:	4640      	mov	r0, r8
 80082e2:	f7ff ff71 	bl	80081c8 <__ssputs_r>
 80082e6:	3001      	adds	r0, #1
 80082e8:	f000 80a4 	beq.w	8008434 <_svfiprintf_r+0x1b8>
 80082ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082ee:	4453      	add	r3, sl
 80082f0:	9309      	str	r3, [sp, #36]	; 0x24
 80082f2:	783b      	ldrb	r3, [r7, #0]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f000 809d 	beq.w	8008434 <_svfiprintf_r+0x1b8>
 80082fa:	2300      	movs	r3, #0
 80082fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008300:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008304:	9304      	str	r3, [sp, #16]
 8008306:	9307      	str	r3, [sp, #28]
 8008308:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800830c:	931a      	str	r3, [sp, #104]	; 0x68
 800830e:	462f      	mov	r7, r5
 8008310:	2205      	movs	r2, #5
 8008312:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008316:	4850      	ldr	r0, [pc, #320]	; (8008458 <_svfiprintf_r+0x1dc>)
 8008318:	f7f7 ff6a 	bl	80001f0 <memchr>
 800831c:	9b04      	ldr	r3, [sp, #16]
 800831e:	b9d0      	cbnz	r0, 8008356 <_svfiprintf_r+0xda>
 8008320:	06d9      	lsls	r1, r3, #27
 8008322:	bf44      	itt	mi
 8008324:	2220      	movmi	r2, #32
 8008326:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800832a:	071a      	lsls	r2, r3, #28
 800832c:	bf44      	itt	mi
 800832e:	222b      	movmi	r2, #43	; 0x2b
 8008330:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008334:	782a      	ldrb	r2, [r5, #0]
 8008336:	2a2a      	cmp	r2, #42	; 0x2a
 8008338:	d015      	beq.n	8008366 <_svfiprintf_r+0xea>
 800833a:	9a07      	ldr	r2, [sp, #28]
 800833c:	462f      	mov	r7, r5
 800833e:	2000      	movs	r0, #0
 8008340:	250a      	movs	r5, #10
 8008342:	4639      	mov	r1, r7
 8008344:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008348:	3b30      	subs	r3, #48	; 0x30
 800834a:	2b09      	cmp	r3, #9
 800834c:	d94d      	bls.n	80083ea <_svfiprintf_r+0x16e>
 800834e:	b1b8      	cbz	r0, 8008380 <_svfiprintf_r+0x104>
 8008350:	e00f      	b.n	8008372 <_svfiprintf_r+0xf6>
 8008352:	462f      	mov	r7, r5
 8008354:	e7b8      	b.n	80082c8 <_svfiprintf_r+0x4c>
 8008356:	4a40      	ldr	r2, [pc, #256]	; (8008458 <_svfiprintf_r+0x1dc>)
 8008358:	1a80      	subs	r0, r0, r2
 800835a:	fa0b f000 	lsl.w	r0, fp, r0
 800835e:	4318      	orrs	r0, r3
 8008360:	9004      	str	r0, [sp, #16]
 8008362:	463d      	mov	r5, r7
 8008364:	e7d3      	b.n	800830e <_svfiprintf_r+0x92>
 8008366:	9a03      	ldr	r2, [sp, #12]
 8008368:	1d11      	adds	r1, r2, #4
 800836a:	6812      	ldr	r2, [r2, #0]
 800836c:	9103      	str	r1, [sp, #12]
 800836e:	2a00      	cmp	r2, #0
 8008370:	db01      	blt.n	8008376 <_svfiprintf_r+0xfa>
 8008372:	9207      	str	r2, [sp, #28]
 8008374:	e004      	b.n	8008380 <_svfiprintf_r+0x104>
 8008376:	4252      	negs	r2, r2
 8008378:	f043 0302 	orr.w	r3, r3, #2
 800837c:	9207      	str	r2, [sp, #28]
 800837e:	9304      	str	r3, [sp, #16]
 8008380:	783b      	ldrb	r3, [r7, #0]
 8008382:	2b2e      	cmp	r3, #46	; 0x2e
 8008384:	d10c      	bne.n	80083a0 <_svfiprintf_r+0x124>
 8008386:	787b      	ldrb	r3, [r7, #1]
 8008388:	2b2a      	cmp	r3, #42	; 0x2a
 800838a:	d133      	bne.n	80083f4 <_svfiprintf_r+0x178>
 800838c:	9b03      	ldr	r3, [sp, #12]
 800838e:	1d1a      	adds	r2, r3, #4
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	9203      	str	r2, [sp, #12]
 8008394:	2b00      	cmp	r3, #0
 8008396:	bfb8      	it	lt
 8008398:	f04f 33ff 	movlt.w	r3, #4294967295
 800839c:	3702      	adds	r7, #2
 800839e:	9305      	str	r3, [sp, #20]
 80083a0:	4d2e      	ldr	r5, [pc, #184]	; (800845c <_svfiprintf_r+0x1e0>)
 80083a2:	7839      	ldrb	r1, [r7, #0]
 80083a4:	2203      	movs	r2, #3
 80083a6:	4628      	mov	r0, r5
 80083a8:	f7f7 ff22 	bl	80001f0 <memchr>
 80083ac:	b138      	cbz	r0, 80083be <_svfiprintf_r+0x142>
 80083ae:	2340      	movs	r3, #64	; 0x40
 80083b0:	1b40      	subs	r0, r0, r5
 80083b2:	fa03 f000 	lsl.w	r0, r3, r0
 80083b6:	9b04      	ldr	r3, [sp, #16]
 80083b8:	4303      	orrs	r3, r0
 80083ba:	3701      	adds	r7, #1
 80083bc:	9304      	str	r3, [sp, #16]
 80083be:	7839      	ldrb	r1, [r7, #0]
 80083c0:	4827      	ldr	r0, [pc, #156]	; (8008460 <_svfiprintf_r+0x1e4>)
 80083c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083c6:	2206      	movs	r2, #6
 80083c8:	1c7e      	adds	r6, r7, #1
 80083ca:	f7f7 ff11 	bl	80001f0 <memchr>
 80083ce:	2800      	cmp	r0, #0
 80083d0:	d038      	beq.n	8008444 <_svfiprintf_r+0x1c8>
 80083d2:	4b24      	ldr	r3, [pc, #144]	; (8008464 <_svfiprintf_r+0x1e8>)
 80083d4:	bb13      	cbnz	r3, 800841c <_svfiprintf_r+0x1a0>
 80083d6:	9b03      	ldr	r3, [sp, #12]
 80083d8:	3307      	adds	r3, #7
 80083da:	f023 0307 	bic.w	r3, r3, #7
 80083de:	3308      	adds	r3, #8
 80083e0:	9303      	str	r3, [sp, #12]
 80083e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083e4:	444b      	add	r3, r9
 80083e6:	9309      	str	r3, [sp, #36]	; 0x24
 80083e8:	e76d      	b.n	80082c6 <_svfiprintf_r+0x4a>
 80083ea:	fb05 3202 	mla	r2, r5, r2, r3
 80083ee:	2001      	movs	r0, #1
 80083f0:	460f      	mov	r7, r1
 80083f2:	e7a6      	b.n	8008342 <_svfiprintf_r+0xc6>
 80083f4:	2300      	movs	r3, #0
 80083f6:	3701      	adds	r7, #1
 80083f8:	9305      	str	r3, [sp, #20]
 80083fa:	4619      	mov	r1, r3
 80083fc:	250a      	movs	r5, #10
 80083fe:	4638      	mov	r0, r7
 8008400:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008404:	3a30      	subs	r2, #48	; 0x30
 8008406:	2a09      	cmp	r2, #9
 8008408:	d903      	bls.n	8008412 <_svfiprintf_r+0x196>
 800840a:	2b00      	cmp	r3, #0
 800840c:	d0c8      	beq.n	80083a0 <_svfiprintf_r+0x124>
 800840e:	9105      	str	r1, [sp, #20]
 8008410:	e7c6      	b.n	80083a0 <_svfiprintf_r+0x124>
 8008412:	fb05 2101 	mla	r1, r5, r1, r2
 8008416:	2301      	movs	r3, #1
 8008418:	4607      	mov	r7, r0
 800841a:	e7f0      	b.n	80083fe <_svfiprintf_r+0x182>
 800841c:	ab03      	add	r3, sp, #12
 800841e:	9300      	str	r3, [sp, #0]
 8008420:	4622      	mov	r2, r4
 8008422:	4b11      	ldr	r3, [pc, #68]	; (8008468 <_svfiprintf_r+0x1ec>)
 8008424:	a904      	add	r1, sp, #16
 8008426:	4640      	mov	r0, r8
 8008428:	f3af 8000 	nop.w
 800842c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008430:	4681      	mov	r9, r0
 8008432:	d1d6      	bne.n	80083e2 <_svfiprintf_r+0x166>
 8008434:	89a3      	ldrh	r3, [r4, #12]
 8008436:	065b      	lsls	r3, r3, #25
 8008438:	f53f af35 	bmi.w	80082a6 <_svfiprintf_r+0x2a>
 800843c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800843e:	b01d      	add	sp, #116	; 0x74
 8008440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008444:	ab03      	add	r3, sp, #12
 8008446:	9300      	str	r3, [sp, #0]
 8008448:	4622      	mov	r2, r4
 800844a:	4b07      	ldr	r3, [pc, #28]	; (8008468 <_svfiprintf_r+0x1ec>)
 800844c:	a904      	add	r1, sp, #16
 800844e:	4640      	mov	r0, r8
 8008450:	f000 f882 	bl	8008558 <_printf_i>
 8008454:	e7ea      	b.n	800842c <_svfiprintf_r+0x1b0>
 8008456:	bf00      	nop
 8008458:	0800a0b8 	.word	0x0800a0b8
 800845c:	0800a0be 	.word	0x0800a0be
 8008460:	0800a0c2 	.word	0x0800a0c2
 8008464:	00000000 	.word	0x00000000
 8008468:	080081c9 	.word	0x080081c9

0800846c <_printf_common>:
 800846c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008470:	4691      	mov	r9, r2
 8008472:	461f      	mov	r7, r3
 8008474:	688a      	ldr	r2, [r1, #8]
 8008476:	690b      	ldr	r3, [r1, #16]
 8008478:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800847c:	4293      	cmp	r3, r2
 800847e:	bfb8      	it	lt
 8008480:	4613      	movlt	r3, r2
 8008482:	f8c9 3000 	str.w	r3, [r9]
 8008486:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800848a:	4606      	mov	r6, r0
 800848c:	460c      	mov	r4, r1
 800848e:	b112      	cbz	r2, 8008496 <_printf_common+0x2a>
 8008490:	3301      	adds	r3, #1
 8008492:	f8c9 3000 	str.w	r3, [r9]
 8008496:	6823      	ldr	r3, [r4, #0]
 8008498:	0699      	lsls	r1, r3, #26
 800849a:	bf42      	ittt	mi
 800849c:	f8d9 3000 	ldrmi.w	r3, [r9]
 80084a0:	3302      	addmi	r3, #2
 80084a2:	f8c9 3000 	strmi.w	r3, [r9]
 80084a6:	6825      	ldr	r5, [r4, #0]
 80084a8:	f015 0506 	ands.w	r5, r5, #6
 80084ac:	d107      	bne.n	80084be <_printf_common+0x52>
 80084ae:	f104 0a19 	add.w	sl, r4, #25
 80084b2:	68e3      	ldr	r3, [r4, #12]
 80084b4:	f8d9 2000 	ldr.w	r2, [r9]
 80084b8:	1a9b      	subs	r3, r3, r2
 80084ba:	42ab      	cmp	r3, r5
 80084bc:	dc28      	bgt.n	8008510 <_printf_common+0xa4>
 80084be:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80084c2:	6822      	ldr	r2, [r4, #0]
 80084c4:	3300      	adds	r3, #0
 80084c6:	bf18      	it	ne
 80084c8:	2301      	movne	r3, #1
 80084ca:	0692      	lsls	r2, r2, #26
 80084cc:	d42d      	bmi.n	800852a <_printf_common+0xbe>
 80084ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084d2:	4639      	mov	r1, r7
 80084d4:	4630      	mov	r0, r6
 80084d6:	47c0      	blx	r8
 80084d8:	3001      	adds	r0, #1
 80084da:	d020      	beq.n	800851e <_printf_common+0xb2>
 80084dc:	6823      	ldr	r3, [r4, #0]
 80084de:	68e5      	ldr	r5, [r4, #12]
 80084e0:	f8d9 2000 	ldr.w	r2, [r9]
 80084e4:	f003 0306 	and.w	r3, r3, #6
 80084e8:	2b04      	cmp	r3, #4
 80084ea:	bf08      	it	eq
 80084ec:	1aad      	subeq	r5, r5, r2
 80084ee:	68a3      	ldr	r3, [r4, #8]
 80084f0:	6922      	ldr	r2, [r4, #16]
 80084f2:	bf0c      	ite	eq
 80084f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084f8:	2500      	movne	r5, #0
 80084fa:	4293      	cmp	r3, r2
 80084fc:	bfc4      	itt	gt
 80084fe:	1a9b      	subgt	r3, r3, r2
 8008500:	18ed      	addgt	r5, r5, r3
 8008502:	f04f 0900 	mov.w	r9, #0
 8008506:	341a      	adds	r4, #26
 8008508:	454d      	cmp	r5, r9
 800850a:	d11a      	bne.n	8008542 <_printf_common+0xd6>
 800850c:	2000      	movs	r0, #0
 800850e:	e008      	b.n	8008522 <_printf_common+0xb6>
 8008510:	2301      	movs	r3, #1
 8008512:	4652      	mov	r2, sl
 8008514:	4639      	mov	r1, r7
 8008516:	4630      	mov	r0, r6
 8008518:	47c0      	blx	r8
 800851a:	3001      	adds	r0, #1
 800851c:	d103      	bne.n	8008526 <_printf_common+0xba>
 800851e:	f04f 30ff 	mov.w	r0, #4294967295
 8008522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008526:	3501      	adds	r5, #1
 8008528:	e7c3      	b.n	80084b2 <_printf_common+0x46>
 800852a:	18e1      	adds	r1, r4, r3
 800852c:	1c5a      	adds	r2, r3, #1
 800852e:	2030      	movs	r0, #48	; 0x30
 8008530:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008534:	4422      	add	r2, r4
 8008536:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800853a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800853e:	3302      	adds	r3, #2
 8008540:	e7c5      	b.n	80084ce <_printf_common+0x62>
 8008542:	2301      	movs	r3, #1
 8008544:	4622      	mov	r2, r4
 8008546:	4639      	mov	r1, r7
 8008548:	4630      	mov	r0, r6
 800854a:	47c0      	blx	r8
 800854c:	3001      	adds	r0, #1
 800854e:	d0e6      	beq.n	800851e <_printf_common+0xb2>
 8008550:	f109 0901 	add.w	r9, r9, #1
 8008554:	e7d8      	b.n	8008508 <_printf_common+0x9c>
	...

08008558 <_printf_i>:
 8008558:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800855c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008560:	460c      	mov	r4, r1
 8008562:	7e09      	ldrb	r1, [r1, #24]
 8008564:	b085      	sub	sp, #20
 8008566:	296e      	cmp	r1, #110	; 0x6e
 8008568:	4617      	mov	r7, r2
 800856a:	4606      	mov	r6, r0
 800856c:	4698      	mov	r8, r3
 800856e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008570:	f000 80b3 	beq.w	80086da <_printf_i+0x182>
 8008574:	d822      	bhi.n	80085bc <_printf_i+0x64>
 8008576:	2963      	cmp	r1, #99	; 0x63
 8008578:	d036      	beq.n	80085e8 <_printf_i+0x90>
 800857a:	d80a      	bhi.n	8008592 <_printf_i+0x3a>
 800857c:	2900      	cmp	r1, #0
 800857e:	f000 80b9 	beq.w	80086f4 <_printf_i+0x19c>
 8008582:	2958      	cmp	r1, #88	; 0x58
 8008584:	f000 8083 	beq.w	800868e <_printf_i+0x136>
 8008588:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800858c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008590:	e032      	b.n	80085f8 <_printf_i+0xa0>
 8008592:	2964      	cmp	r1, #100	; 0x64
 8008594:	d001      	beq.n	800859a <_printf_i+0x42>
 8008596:	2969      	cmp	r1, #105	; 0x69
 8008598:	d1f6      	bne.n	8008588 <_printf_i+0x30>
 800859a:	6820      	ldr	r0, [r4, #0]
 800859c:	6813      	ldr	r3, [r2, #0]
 800859e:	0605      	lsls	r5, r0, #24
 80085a0:	f103 0104 	add.w	r1, r3, #4
 80085a4:	d52a      	bpl.n	80085fc <_printf_i+0xa4>
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	6011      	str	r1, [r2, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	da03      	bge.n	80085b6 <_printf_i+0x5e>
 80085ae:	222d      	movs	r2, #45	; 0x2d
 80085b0:	425b      	negs	r3, r3
 80085b2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80085b6:	486f      	ldr	r0, [pc, #444]	; (8008774 <_printf_i+0x21c>)
 80085b8:	220a      	movs	r2, #10
 80085ba:	e039      	b.n	8008630 <_printf_i+0xd8>
 80085bc:	2973      	cmp	r1, #115	; 0x73
 80085be:	f000 809d 	beq.w	80086fc <_printf_i+0x1a4>
 80085c2:	d808      	bhi.n	80085d6 <_printf_i+0x7e>
 80085c4:	296f      	cmp	r1, #111	; 0x6f
 80085c6:	d020      	beq.n	800860a <_printf_i+0xb2>
 80085c8:	2970      	cmp	r1, #112	; 0x70
 80085ca:	d1dd      	bne.n	8008588 <_printf_i+0x30>
 80085cc:	6823      	ldr	r3, [r4, #0]
 80085ce:	f043 0320 	orr.w	r3, r3, #32
 80085d2:	6023      	str	r3, [r4, #0]
 80085d4:	e003      	b.n	80085de <_printf_i+0x86>
 80085d6:	2975      	cmp	r1, #117	; 0x75
 80085d8:	d017      	beq.n	800860a <_printf_i+0xb2>
 80085da:	2978      	cmp	r1, #120	; 0x78
 80085dc:	d1d4      	bne.n	8008588 <_printf_i+0x30>
 80085de:	2378      	movs	r3, #120	; 0x78
 80085e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085e4:	4864      	ldr	r0, [pc, #400]	; (8008778 <_printf_i+0x220>)
 80085e6:	e055      	b.n	8008694 <_printf_i+0x13c>
 80085e8:	6813      	ldr	r3, [r2, #0]
 80085ea:	1d19      	adds	r1, r3, #4
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	6011      	str	r1, [r2, #0]
 80085f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80085f8:	2301      	movs	r3, #1
 80085fa:	e08c      	b.n	8008716 <_printf_i+0x1be>
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	6011      	str	r1, [r2, #0]
 8008600:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008604:	bf18      	it	ne
 8008606:	b21b      	sxthne	r3, r3
 8008608:	e7cf      	b.n	80085aa <_printf_i+0x52>
 800860a:	6813      	ldr	r3, [r2, #0]
 800860c:	6825      	ldr	r5, [r4, #0]
 800860e:	1d18      	adds	r0, r3, #4
 8008610:	6010      	str	r0, [r2, #0]
 8008612:	0628      	lsls	r0, r5, #24
 8008614:	d501      	bpl.n	800861a <_printf_i+0xc2>
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	e002      	b.n	8008620 <_printf_i+0xc8>
 800861a:	0668      	lsls	r0, r5, #25
 800861c:	d5fb      	bpl.n	8008616 <_printf_i+0xbe>
 800861e:	881b      	ldrh	r3, [r3, #0]
 8008620:	4854      	ldr	r0, [pc, #336]	; (8008774 <_printf_i+0x21c>)
 8008622:	296f      	cmp	r1, #111	; 0x6f
 8008624:	bf14      	ite	ne
 8008626:	220a      	movne	r2, #10
 8008628:	2208      	moveq	r2, #8
 800862a:	2100      	movs	r1, #0
 800862c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008630:	6865      	ldr	r5, [r4, #4]
 8008632:	60a5      	str	r5, [r4, #8]
 8008634:	2d00      	cmp	r5, #0
 8008636:	f2c0 8095 	blt.w	8008764 <_printf_i+0x20c>
 800863a:	6821      	ldr	r1, [r4, #0]
 800863c:	f021 0104 	bic.w	r1, r1, #4
 8008640:	6021      	str	r1, [r4, #0]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d13d      	bne.n	80086c2 <_printf_i+0x16a>
 8008646:	2d00      	cmp	r5, #0
 8008648:	f040 808e 	bne.w	8008768 <_printf_i+0x210>
 800864c:	4665      	mov	r5, ip
 800864e:	2a08      	cmp	r2, #8
 8008650:	d10b      	bne.n	800866a <_printf_i+0x112>
 8008652:	6823      	ldr	r3, [r4, #0]
 8008654:	07db      	lsls	r3, r3, #31
 8008656:	d508      	bpl.n	800866a <_printf_i+0x112>
 8008658:	6923      	ldr	r3, [r4, #16]
 800865a:	6862      	ldr	r2, [r4, #4]
 800865c:	429a      	cmp	r2, r3
 800865e:	bfde      	ittt	le
 8008660:	2330      	movle	r3, #48	; 0x30
 8008662:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008666:	f105 35ff 	addle.w	r5, r5, #4294967295
 800866a:	ebac 0305 	sub.w	r3, ip, r5
 800866e:	6123      	str	r3, [r4, #16]
 8008670:	f8cd 8000 	str.w	r8, [sp]
 8008674:	463b      	mov	r3, r7
 8008676:	aa03      	add	r2, sp, #12
 8008678:	4621      	mov	r1, r4
 800867a:	4630      	mov	r0, r6
 800867c:	f7ff fef6 	bl	800846c <_printf_common>
 8008680:	3001      	adds	r0, #1
 8008682:	d14d      	bne.n	8008720 <_printf_i+0x1c8>
 8008684:	f04f 30ff 	mov.w	r0, #4294967295
 8008688:	b005      	add	sp, #20
 800868a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800868e:	4839      	ldr	r0, [pc, #228]	; (8008774 <_printf_i+0x21c>)
 8008690:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008694:	6813      	ldr	r3, [r2, #0]
 8008696:	6821      	ldr	r1, [r4, #0]
 8008698:	1d1d      	adds	r5, r3, #4
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	6015      	str	r5, [r2, #0]
 800869e:	060a      	lsls	r2, r1, #24
 80086a0:	d50b      	bpl.n	80086ba <_printf_i+0x162>
 80086a2:	07ca      	lsls	r2, r1, #31
 80086a4:	bf44      	itt	mi
 80086a6:	f041 0120 	orrmi.w	r1, r1, #32
 80086aa:	6021      	strmi	r1, [r4, #0]
 80086ac:	b91b      	cbnz	r3, 80086b6 <_printf_i+0x15e>
 80086ae:	6822      	ldr	r2, [r4, #0]
 80086b0:	f022 0220 	bic.w	r2, r2, #32
 80086b4:	6022      	str	r2, [r4, #0]
 80086b6:	2210      	movs	r2, #16
 80086b8:	e7b7      	b.n	800862a <_printf_i+0xd2>
 80086ba:	064d      	lsls	r5, r1, #25
 80086bc:	bf48      	it	mi
 80086be:	b29b      	uxthmi	r3, r3
 80086c0:	e7ef      	b.n	80086a2 <_printf_i+0x14a>
 80086c2:	4665      	mov	r5, ip
 80086c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80086c8:	fb02 3311 	mls	r3, r2, r1, r3
 80086cc:	5cc3      	ldrb	r3, [r0, r3]
 80086ce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80086d2:	460b      	mov	r3, r1
 80086d4:	2900      	cmp	r1, #0
 80086d6:	d1f5      	bne.n	80086c4 <_printf_i+0x16c>
 80086d8:	e7b9      	b.n	800864e <_printf_i+0xf6>
 80086da:	6813      	ldr	r3, [r2, #0]
 80086dc:	6825      	ldr	r5, [r4, #0]
 80086de:	6961      	ldr	r1, [r4, #20]
 80086e0:	1d18      	adds	r0, r3, #4
 80086e2:	6010      	str	r0, [r2, #0]
 80086e4:	0628      	lsls	r0, r5, #24
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	d501      	bpl.n	80086ee <_printf_i+0x196>
 80086ea:	6019      	str	r1, [r3, #0]
 80086ec:	e002      	b.n	80086f4 <_printf_i+0x19c>
 80086ee:	066a      	lsls	r2, r5, #25
 80086f0:	d5fb      	bpl.n	80086ea <_printf_i+0x192>
 80086f2:	8019      	strh	r1, [r3, #0]
 80086f4:	2300      	movs	r3, #0
 80086f6:	6123      	str	r3, [r4, #16]
 80086f8:	4665      	mov	r5, ip
 80086fa:	e7b9      	b.n	8008670 <_printf_i+0x118>
 80086fc:	6813      	ldr	r3, [r2, #0]
 80086fe:	1d19      	adds	r1, r3, #4
 8008700:	6011      	str	r1, [r2, #0]
 8008702:	681d      	ldr	r5, [r3, #0]
 8008704:	6862      	ldr	r2, [r4, #4]
 8008706:	2100      	movs	r1, #0
 8008708:	4628      	mov	r0, r5
 800870a:	f7f7 fd71 	bl	80001f0 <memchr>
 800870e:	b108      	cbz	r0, 8008714 <_printf_i+0x1bc>
 8008710:	1b40      	subs	r0, r0, r5
 8008712:	6060      	str	r0, [r4, #4]
 8008714:	6863      	ldr	r3, [r4, #4]
 8008716:	6123      	str	r3, [r4, #16]
 8008718:	2300      	movs	r3, #0
 800871a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800871e:	e7a7      	b.n	8008670 <_printf_i+0x118>
 8008720:	6923      	ldr	r3, [r4, #16]
 8008722:	462a      	mov	r2, r5
 8008724:	4639      	mov	r1, r7
 8008726:	4630      	mov	r0, r6
 8008728:	47c0      	blx	r8
 800872a:	3001      	adds	r0, #1
 800872c:	d0aa      	beq.n	8008684 <_printf_i+0x12c>
 800872e:	6823      	ldr	r3, [r4, #0]
 8008730:	079b      	lsls	r3, r3, #30
 8008732:	d413      	bmi.n	800875c <_printf_i+0x204>
 8008734:	68e0      	ldr	r0, [r4, #12]
 8008736:	9b03      	ldr	r3, [sp, #12]
 8008738:	4298      	cmp	r0, r3
 800873a:	bfb8      	it	lt
 800873c:	4618      	movlt	r0, r3
 800873e:	e7a3      	b.n	8008688 <_printf_i+0x130>
 8008740:	2301      	movs	r3, #1
 8008742:	464a      	mov	r2, r9
 8008744:	4639      	mov	r1, r7
 8008746:	4630      	mov	r0, r6
 8008748:	47c0      	blx	r8
 800874a:	3001      	adds	r0, #1
 800874c:	d09a      	beq.n	8008684 <_printf_i+0x12c>
 800874e:	3501      	adds	r5, #1
 8008750:	68e3      	ldr	r3, [r4, #12]
 8008752:	9a03      	ldr	r2, [sp, #12]
 8008754:	1a9b      	subs	r3, r3, r2
 8008756:	42ab      	cmp	r3, r5
 8008758:	dcf2      	bgt.n	8008740 <_printf_i+0x1e8>
 800875a:	e7eb      	b.n	8008734 <_printf_i+0x1dc>
 800875c:	2500      	movs	r5, #0
 800875e:	f104 0919 	add.w	r9, r4, #25
 8008762:	e7f5      	b.n	8008750 <_printf_i+0x1f8>
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1ac      	bne.n	80086c2 <_printf_i+0x16a>
 8008768:	7803      	ldrb	r3, [r0, #0]
 800876a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800876e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008772:	e76c      	b.n	800864e <_printf_i+0xf6>
 8008774:	0800a0c9 	.word	0x0800a0c9
 8008778:	0800a0da 	.word	0x0800a0da

0800877c <memmove>:
 800877c:	4288      	cmp	r0, r1
 800877e:	b510      	push	{r4, lr}
 8008780:	eb01 0302 	add.w	r3, r1, r2
 8008784:	d807      	bhi.n	8008796 <memmove+0x1a>
 8008786:	1e42      	subs	r2, r0, #1
 8008788:	4299      	cmp	r1, r3
 800878a:	d00a      	beq.n	80087a2 <memmove+0x26>
 800878c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008790:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008794:	e7f8      	b.n	8008788 <memmove+0xc>
 8008796:	4283      	cmp	r3, r0
 8008798:	d9f5      	bls.n	8008786 <memmove+0xa>
 800879a:	1881      	adds	r1, r0, r2
 800879c:	1ad2      	subs	r2, r2, r3
 800879e:	42d3      	cmn	r3, r2
 80087a0:	d100      	bne.n	80087a4 <memmove+0x28>
 80087a2:	bd10      	pop	{r4, pc}
 80087a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80087a8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80087ac:	e7f7      	b.n	800879e <memmove+0x22>
	...

080087b0 <_free_r>:
 80087b0:	b538      	push	{r3, r4, r5, lr}
 80087b2:	4605      	mov	r5, r0
 80087b4:	2900      	cmp	r1, #0
 80087b6:	d045      	beq.n	8008844 <_free_r+0x94>
 80087b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087bc:	1f0c      	subs	r4, r1, #4
 80087be:	2b00      	cmp	r3, #0
 80087c0:	bfb8      	it	lt
 80087c2:	18e4      	addlt	r4, r4, r3
 80087c4:	f000 f8d2 	bl	800896c <__malloc_lock>
 80087c8:	4a1f      	ldr	r2, [pc, #124]	; (8008848 <_free_r+0x98>)
 80087ca:	6813      	ldr	r3, [r2, #0]
 80087cc:	4610      	mov	r0, r2
 80087ce:	b933      	cbnz	r3, 80087de <_free_r+0x2e>
 80087d0:	6063      	str	r3, [r4, #4]
 80087d2:	6014      	str	r4, [r2, #0]
 80087d4:	4628      	mov	r0, r5
 80087d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087da:	f000 b8c8 	b.w	800896e <__malloc_unlock>
 80087de:	42a3      	cmp	r3, r4
 80087e0:	d90c      	bls.n	80087fc <_free_r+0x4c>
 80087e2:	6821      	ldr	r1, [r4, #0]
 80087e4:	1862      	adds	r2, r4, r1
 80087e6:	4293      	cmp	r3, r2
 80087e8:	bf04      	itt	eq
 80087ea:	681a      	ldreq	r2, [r3, #0]
 80087ec:	685b      	ldreq	r3, [r3, #4]
 80087ee:	6063      	str	r3, [r4, #4]
 80087f0:	bf04      	itt	eq
 80087f2:	1852      	addeq	r2, r2, r1
 80087f4:	6022      	streq	r2, [r4, #0]
 80087f6:	6004      	str	r4, [r0, #0]
 80087f8:	e7ec      	b.n	80087d4 <_free_r+0x24>
 80087fa:	4613      	mov	r3, r2
 80087fc:	685a      	ldr	r2, [r3, #4]
 80087fe:	b10a      	cbz	r2, 8008804 <_free_r+0x54>
 8008800:	42a2      	cmp	r2, r4
 8008802:	d9fa      	bls.n	80087fa <_free_r+0x4a>
 8008804:	6819      	ldr	r1, [r3, #0]
 8008806:	1858      	adds	r0, r3, r1
 8008808:	42a0      	cmp	r0, r4
 800880a:	d10b      	bne.n	8008824 <_free_r+0x74>
 800880c:	6820      	ldr	r0, [r4, #0]
 800880e:	4401      	add	r1, r0
 8008810:	1858      	adds	r0, r3, r1
 8008812:	4282      	cmp	r2, r0
 8008814:	6019      	str	r1, [r3, #0]
 8008816:	d1dd      	bne.n	80087d4 <_free_r+0x24>
 8008818:	6810      	ldr	r0, [r2, #0]
 800881a:	6852      	ldr	r2, [r2, #4]
 800881c:	605a      	str	r2, [r3, #4]
 800881e:	4401      	add	r1, r0
 8008820:	6019      	str	r1, [r3, #0]
 8008822:	e7d7      	b.n	80087d4 <_free_r+0x24>
 8008824:	d902      	bls.n	800882c <_free_r+0x7c>
 8008826:	230c      	movs	r3, #12
 8008828:	602b      	str	r3, [r5, #0]
 800882a:	e7d3      	b.n	80087d4 <_free_r+0x24>
 800882c:	6820      	ldr	r0, [r4, #0]
 800882e:	1821      	adds	r1, r4, r0
 8008830:	428a      	cmp	r2, r1
 8008832:	bf04      	itt	eq
 8008834:	6811      	ldreq	r1, [r2, #0]
 8008836:	6852      	ldreq	r2, [r2, #4]
 8008838:	6062      	str	r2, [r4, #4]
 800883a:	bf04      	itt	eq
 800883c:	1809      	addeq	r1, r1, r0
 800883e:	6021      	streq	r1, [r4, #0]
 8008840:	605c      	str	r4, [r3, #4]
 8008842:	e7c7      	b.n	80087d4 <_free_r+0x24>
 8008844:	bd38      	pop	{r3, r4, r5, pc}
 8008846:	bf00      	nop
 8008848:	20000218 	.word	0x20000218

0800884c <_malloc_r>:
 800884c:	b570      	push	{r4, r5, r6, lr}
 800884e:	1ccd      	adds	r5, r1, #3
 8008850:	f025 0503 	bic.w	r5, r5, #3
 8008854:	3508      	adds	r5, #8
 8008856:	2d0c      	cmp	r5, #12
 8008858:	bf38      	it	cc
 800885a:	250c      	movcc	r5, #12
 800885c:	2d00      	cmp	r5, #0
 800885e:	4606      	mov	r6, r0
 8008860:	db01      	blt.n	8008866 <_malloc_r+0x1a>
 8008862:	42a9      	cmp	r1, r5
 8008864:	d903      	bls.n	800886e <_malloc_r+0x22>
 8008866:	230c      	movs	r3, #12
 8008868:	6033      	str	r3, [r6, #0]
 800886a:	2000      	movs	r0, #0
 800886c:	bd70      	pop	{r4, r5, r6, pc}
 800886e:	f000 f87d 	bl	800896c <__malloc_lock>
 8008872:	4a21      	ldr	r2, [pc, #132]	; (80088f8 <_malloc_r+0xac>)
 8008874:	6814      	ldr	r4, [r2, #0]
 8008876:	4621      	mov	r1, r4
 8008878:	b991      	cbnz	r1, 80088a0 <_malloc_r+0x54>
 800887a:	4c20      	ldr	r4, [pc, #128]	; (80088fc <_malloc_r+0xb0>)
 800887c:	6823      	ldr	r3, [r4, #0]
 800887e:	b91b      	cbnz	r3, 8008888 <_malloc_r+0x3c>
 8008880:	4630      	mov	r0, r6
 8008882:	f000 f863 	bl	800894c <_sbrk_r>
 8008886:	6020      	str	r0, [r4, #0]
 8008888:	4629      	mov	r1, r5
 800888a:	4630      	mov	r0, r6
 800888c:	f000 f85e 	bl	800894c <_sbrk_r>
 8008890:	1c43      	adds	r3, r0, #1
 8008892:	d124      	bne.n	80088de <_malloc_r+0x92>
 8008894:	230c      	movs	r3, #12
 8008896:	6033      	str	r3, [r6, #0]
 8008898:	4630      	mov	r0, r6
 800889a:	f000 f868 	bl	800896e <__malloc_unlock>
 800889e:	e7e4      	b.n	800886a <_malloc_r+0x1e>
 80088a0:	680b      	ldr	r3, [r1, #0]
 80088a2:	1b5b      	subs	r3, r3, r5
 80088a4:	d418      	bmi.n	80088d8 <_malloc_r+0x8c>
 80088a6:	2b0b      	cmp	r3, #11
 80088a8:	d90f      	bls.n	80088ca <_malloc_r+0x7e>
 80088aa:	600b      	str	r3, [r1, #0]
 80088ac:	50cd      	str	r5, [r1, r3]
 80088ae:	18cc      	adds	r4, r1, r3
 80088b0:	4630      	mov	r0, r6
 80088b2:	f000 f85c 	bl	800896e <__malloc_unlock>
 80088b6:	f104 000b 	add.w	r0, r4, #11
 80088ba:	1d23      	adds	r3, r4, #4
 80088bc:	f020 0007 	bic.w	r0, r0, #7
 80088c0:	1ac3      	subs	r3, r0, r3
 80088c2:	d0d3      	beq.n	800886c <_malloc_r+0x20>
 80088c4:	425a      	negs	r2, r3
 80088c6:	50e2      	str	r2, [r4, r3]
 80088c8:	e7d0      	b.n	800886c <_malloc_r+0x20>
 80088ca:	428c      	cmp	r4, r1
 80088cc:	684b      	ldr	r3, [r1, #4]
 80088ce:	bf16      	itet	ne
 80088d0:	6063      	strne	r3, [r4, #4]
 80088d2:	6013      	streq	r3, [r2, #0]
 80088d4:	460c      	movne	r4, r1
 80088d6:	e7eb      	b.n	80088b0 <_malloc_r+0x64>
 80088d8:	460c      	mov	r4, r1
 80088da:	6849      	ldr	r1, [r1, #4]
 80088dc:	e7cc      	b.n	8008878 <_malloc_r+0x2c>
 80088de:	1cc4      	adds	r4, r0, #3
 80088e0:	f024 0403 	bic.w	r4, r4, #3
 80088e4:	42a0      	cmp	r0, r4
 80088e6:	d005      	beq.n	80088f4 <_malloc_r+0xa8>
 80088e8:	1a21      	subs	r1, r4, r0
 80088ea:	4630      	mov	r0, r6
 80088ec:	f000 f82e 	bl	800894c <_sbrk_r>
 80088f0:	3001      	adds	r0, #1
 80088f2:	d0cf      	beq.n	8008894 <_malloc_r+0x48>
 80088f4:	6025      	str	r5, [r4, #0]
 80088f6:	e7db      	b.n	80088b0 <_malloc_r+0x64>
 80088f8:	20000218 	.word	0x20000218
 80088fc:	2000021c 	.word	0x2000021c

08008900 <_realloc_r>:
 8008900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008902:	4607      	mov	r7, r0
 8008904:	4614      	mov	r4, r2
 8008906:	460e      	mov	r6, r1
 8008908:	b921      	cbnz	r1, 8008914 <_realloc_r+0x14>
 800890a:	4611      	mov	r1, r2
 800890c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008910:	f7ff bf9c 	b.w	800884c <_malloc_r>
 8008914:	b922      	cbnz	r2, 8008920 <_realloc_r+0x20>
 8008916:	f7ff ff4b 	bl	80087b0 <_free_r>
 800891a:	4625      	mov	r5, r4
 800891c:	4628      	mov	r0, r5
 800891e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008920:	f000 f826 	bl	8008970 <_malloc_usable_size_r>
 8008924:	42a0      	cmp	r0, r4
 8008926:	d20f      	bcs.n	8008948 <_realloc_r+0x48>
 8008928:	4621      	mov	r1, r4
 800892a:	4638      	mov	r0, r7
 800892c:	f7ff ff8e 	bl	800884c <_malloc_r>
 8008930:	4605      	mov	r5, r0
 8008932:	2800      	cmp	r0, #0
 8008934:	d0f2      	beq.n	800891c <_realloc_r+0x1c>
 8008936:	4631      	mov	r1, r6
 8008938:	4622      	mov	r2, r4
 800893a:	f7ff fc11 	bl	8008160 <memcpy>
 800893e:	4631      	mov	r1, r6
 8008940:	4638      	mov	r0, r7
 8008942:	f7ff ff35 	bl	80087b0 <_free_r>
 8008946:	e7e9      	b.n	800891c <_realloc_r+0x1c>
 8008948:	4635      	mov	r5, r6
 800894a:	e7e7      	b.n	800891c <_realloc_r+0x1c>

0800894c <_sbrk_r>:
 800894c:	b538      	push	{r3, r4, r5, lr}
 800894e:	4c06      	ldr	r4, [pc, #24]	; (8008968 <_sbrk_r+0x1c>)
 8008950:	2300      	movs	r3, #0
 8008952:	4605      	mov	r5, r0
 8008954:	4608      	mov	r0, r1
 8008956:	6023      	str	r3, [r4, #0]
 8008958:	f7fb fc6e 	bl	8004238 <_sbrk>
 800895c:	1c43      	adds	r3, r0, #1
 800895e:	d102      	bne.n	8008966 <_sbrk_r+0x1a>
 8008960:	6823      	ldr	r3, [r4, #0]
 8008962:	b103      	cbz	r3, 8008966 <_sbrk_r+0x1a>
 8008964:	602b      	str	r3, [r5, #0]
 8008966:	bd38      	pop	{r3, r4, r5, pc}
 8008968:	200003e4 	.word	0x200003e4

0800896c <__malloc_lock>:
 800896c:	4770      	bx	lr

0800896e <__malloc_unlock>:
 800896e:	4770      	bx	lr

08008970 <_malloc_usable_size_r>:
 8008970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008974:	1f18      	subs	r0, r3, #4
 8008976:	2b00      	cmp	r3, #0
 8008978:	bfbc      	itt	lt
 800897a:	580b      	ldrlt	r3, [r1, r0]
 800897c:	18c0      	addlt	r0, r0, r3
 800897e:	4770      	bx	lr

08008980 <sin>:
 8008980:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008982:	ec51 0b10 	vmov	r0, r1, d0
 8008986:	4a20      	ldr	r2, [pc, #128]	; (8008a08 <sin+0x88>)
 8008988:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800898c:	4293      	cmp	r3, r2
 800898e:	dc07      	bgt.n	80089a0 <sin+0x20>
 8008990:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8008a00 <sin+0x80>
 8008994:	2000      	movs	r0, #0
 8008996:	f000 fe37 	bl	8009608 <__kernel_sin>
 800899a:	ec51 0b10 	vmov	r0, r1, d0
 800899e:	e007      	b.n	80089b0 <sin+0x30>
 80089a0:	4a1a      	ldr	r2, [pc, #104]	; (8008a0c <sin+0x8c>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	dd09      	ble.n	80089ba <sin+0x3a>
 80089a6:	ee10 2a10 	vmov	r2, s0
 80089aa:	460b      	mov	r3, r1
 80089ac:	f7f7 fc74 	bl	8000298 <__aeabi_dsub>
 80089b0:	ec41 0b10 	vmov	d0, r0, r1
 80089b4:	b005      	add	sp, #20
 80089b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80089ba:	4668      	mov	r0, sp
 80089bc:	f000 f828 	bl	8008a10 <__ieee754_rem_pio2>
 80089c0:	f000 0003 	and.w	r0, r0, #3
 80089c4:	2801      	cmp	r0, #1
 80089c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80089ca:	ed9d 0b00 	vldr	d0, [sp]
 80089ce:	d004      	beq.n	80089da <sin+0x5a>
 80089d0:	2802      	cmp	r0, #2
 80089d2:	d005      	beq.n	80089e0 <sin+0x60>
 80089d4:	b970      	cbnz	r0, 80089f4 <sin+0x74>
 80089d6:	2001      	movs	r0, #1
 80089d8:	e7dd      	b.n	8008996 <sin+0x16>
 80089da:	f000 fa0d 	bl	8008df8 <__kernel_cos>
 80089de:	e7dc      	b.n	800899a <sin+0x1a>
 80089e0:	2001      	movs	r0, #1
 80089e2:	f000 fe11 	bl	8009608 <__kernel_sin>
 80089e6:	ec53 2b10 	vmov	r2, r3, d0
 80089ea:	ee10 0a10 	vmov	r0, s0
 80089ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80089f2:	e7dd      	b.n	80089b0 <sin+0x30>
 80089f4:	f000 fa00 	bl	8008df8 <__kernel_cos>
 80089f8:	e7f5      	b.n	80089e6 <sin+0x66>
 80089fa:	bf00      	nop
 80089fc:	f3af 8000 	nop.w
	...
 8008a08:	3fe921fb 	.word	0x3fe921fb
 8008a0c:	7fefffff 	.word	0x7fefffff

08008a10 <__ieee754_rem_pio2>:
 8008a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a14:	ec57 6b10 	vmov	r6, r7, d0
 8008a18:	4bc3      	ldr	r3, [pc, #780]	; (8008d28 <__ieee754_rem_pio2+0x318>)
 8008a1a:	b08d      	sub	sp, #52	; 0x34
 8008a1c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008a20:	4598      	cmp	r8, r3
 8008a22:	4604      	mov	r4, r0
 8008a24:	9704      	str	r7, [sp, #16]
 8008a26:	dc07      	bgt.n	8008a38 <__ieee754_rem_pio2+0x28>
 8008a28:	2200      	movs	r2, #0
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	ed84 0b00 	vstr	d0, [r4]
 8008a30:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008a34:	2500      	movs	r5, #0
 8008a36:	e027      	b.n	8008a88 <__ieee754_rem_pio2+0x78>
 8008a38:	4bbc      	ldr	r3, [pc, #752]	; (8008d2c <__ieee754_rem_pio2+0x31c>)
 8008a3a:	4598      	cmp	r8, r3
 8008a3c:	dc75      	bgt.n	8008b2a <__ieee754_rem_pio2+0x11a>
 8008a3e:	9b04      	ldr	r3, [sp, #16]
 8008a40:	4dbb      	ldr	r5, [pc, #748]	; (8008d30 <__ieee754_rem_pio2+0x320>)
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	ee10 0a10 	vmov	r0, s0
 8008a48:	a3a9      	add	r3, pc, #676	; (adr r3, 8008cf0 <__ieee754_rem_pio2+0x2e0>)
 8008a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4e:	4639      	mov	r1, r7
 8008a50:	dd36      	ble.n	8008ac0 <__ieee754_rem_pio2+0xb0>
 8008a52:	f7f7 fc21 	bl	8000298 <__aeabi_dsub>
 8008a56:	45a8      	cmp	r8, r5
 8008a58:	4606      	mov	r6, r0
 8008a5a:	460f      	mov	r7, r1
 8008a5c:	d018      	beq.n	8008a90 <__ieee754_rem_pio2+0x80>
 8008a5e:	a3a6      	add	r3, pc, #664	; (adr r3, 8008cf8 <__ieee754_rem_pio2+0x2e8>)
 8008a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a64:	f7f7 fc18 	bl	8000298 <__aeabi_dsub>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	e9c4 2300 	strd	r2, r3, [r4]
 8008a70:	4630      	mov	r0, r6
 8008a72:	4639      	mov	r1, r7
 8008a74:	f7f7 fc10 	bl	8000298 <__aeabi_dsub>
 8008a78:	a39f      	add	r3, pc, #636	; (adr r3, 8008cf8 <__ieee754_rem_pio2+0x2e8>)
 8008a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7e:	f7f7 fc0b 	bl	8000298 <__aeabi_dsub>
 8008a82:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008a86:	2501      	movs	r5, #1
 8008a88:	4628      	mov	r0, r5
 8008a8a:	b00d      	add	sp, #52	; 0x34
 8008a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a90:	a39b      	add	r3, pc, #620	; (adr r3, 8008d00 <__ieee754_rem_pio2+0x2f0>)
 8008a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a96:	f7f7 fbff 	bl	8000298 <__aeabi_dsub>
 8008a9a:	a39b      	add	r3, pc, #620	; (adr r3, 8008d08 <__ieee754_rem_pio2+0x2f8>)
 8008a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa0:	4606      	mov	r6, r0
 8008aa2:	460f      	mov	r7, r1
 8008aa4:	f7f7 fbf8 	bl	8000298 <__aeabi_dsub>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	460b      	mov	r3, r1
 8008aac:	e9c4 2300 	strd	r2, r3, [r4]
 8008ab0:	4630      	mov	r0, r6
 8008ab2:	4639      	mov	r1, r7
 8008ab4:	f7f7 fbf0 	bl	8000298 <__aeabi_dsub>
 8008ab8:	a393      	add	r3, pc, #588	; (adr r3, 8008d08 <__ieee754_rem_pio2+0x2f8>)
 8008aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008abe:	e7de      	b.n	8008a7e <__ieee754_rem_pio2+0x6e>
 8008ac0:	f7f7 fbec 	bl	800029c <__adddf3>
 8008ac4:	45a8      	cmp	r8, r5
 8008ac6:	4606      	mov	r6, r0
 8008ac8:	460f      	mov	r7, r1
 8008aca:	d016      	beq.n	8008afa <__ieee754_rem_pio2+0xea>
 8008acc:	a38a      	add	r3, pc, #552	; (adr r3, 8008cf8 <__ieee754_rem_pio2+0x2e8>)
 8008ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad2:	f7f7 fbe3 	bl	800029c <__adddf3>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	460b      	mov	r3, r1
 8008ada:	e9c4 2300 	strd	r2, r3, [r4]
 8008ade:	4630      	mov	r0, r6
 8008ae0:	4639      	mov	r1, r7
 8008ae2:	f7f7 fbd9 	bl	8000298 <__aeabi_dsub>
 8008ae6:	a384      	add	r3, pc, #528	; (adr r3, 8008cf8 <__ieee754_rem_pio2+0x2e8>)
 8008ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aec:	f7f7 fbd6 	bl	800029c <__adddf3>
 8008af0:	f04f 35ff 	mov.w	r5, #4294967295
 8008af4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008af8:	e7c6      	b.n	8008a88 <__ieee754_rem_pio2+0x78>
 8008afa:	a381      	add	r3, pc, #516	; (adr r3, 8008d00 <__ieee754_rem_pio2+0x2f0>)
 8008afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b00:	f7f7 fbcc 	bl	800029c <__adddf3>
 8008b04:	a380      	add	r3, pc, #512	; (adr r3, 8008d08 <__ieee754_rem_pio2+0x2f8>)
 8008b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0a:	4606      	mov	r6, r0
 8008b0c:	460f      	mov	r7, r1
 8008b0e:	f7f7 fbc5 	bl	800029c <__adddf3>
 8008b12:	4602      	mov	r2, r0
 8008b14:	460b      	mov	r3, r1
 8008b16:	e9c4 2300 	strd	r2, r3, [r4]
 8008b1a:	4630      	mov	r0, r6
 8008b1c:	4639      	mov	r1, r7
 8008b1e:	f7f7 fbbb 	bl	8000298 <__aeabi_dsub>
 8008b22:	a379      	add	r3, pc, #484	; (adr r3, 8008d08 <__ieee754_rem_pio2+0x2f8>)
 8008b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b28:	e7e0      	b.n	8008aec <__ieee754_rem_pio2+0xdc>
 8008b2a:	4b82      	ldr	r3, [pc, #520]	; (8008d34 <__ieee754_rem_pio2+0x324>)
 8008b2c:	4598      	cmp	r8, r3
 8008b2e:	f300 80d0 	bgt.w	8008cd2 <__ieee754_rem_pio2+0x2c2>
 8008b32:	f000 fe23 	bl	800977c <fabs>
 8008b36:	ec57 6b10 	vmov	r6, r7, d0
 8008b3a:	ee10 0a10 	vmov	r0, s0
 8008b3e:	a374      	add	r3, pc, #464	; (adr r3, 8008d10 <__ieee754_rem_pio2+0x300>)
 8008b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b44:	4639      	mov	r1, r7
 8008b46:	f7f7 fd5f 	bl	8000608 <__aeabi_dmul>
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	4b7a      	ldr	r3, [pc, #488]	; (8008d38 <__ieee754_rem_pio2+0x328>)
 8008b4e:	f7f7 fba5 	bl	800029c <__adddf3>
 8008b52:	f7f7 fff3 	bl	8000b3c <__aeabi_d2iz>
 8008b56:	4605      	mov	r5, r0
 8008b58:	f7f7 fcec 	bl	8000534 <__aeabi_i2d>
 8008b5c:	a364      	add	r3, pc, #400	; (adr r3, 8008cf0 <__ieee754_rem_pio2+0x2e0>)
 8008b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b66:	f7f7 fd4f 	bl	8000608 <__aeabi_dmul>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	4630      	mov	r0, r6
 8008b70:	4639      	mov	r1, r7
 8008b72:	f7f7 fb91 	bl	8000298 <__aeabi_dsub>
 8008b76:	a360      	add	r3, pc, #384	; (adr r3, 8008cf8 <__ieee754_rem_pio2+0x2e8>)
 8008b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7c:	4682      	mov	sl, r0
 8008b7e:	468b      	mov	fp, r1
 8008b80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b84:	f7f7 fd40 	bl	8000608 <__aeabi_dmul>
 8008b88:	2d1f      	cmp	r5, #31
 8008b8a:	4606      	mov	r6, r0
 8008b8c:	460f      	mov	r7, r1
 8008b8e:	dc0c      	bgt.n	8008baa <__ieee754_rem_pio2+0x19a>
 8008b90:	1e6a      	subs	r2, r5, #1
 8008b92:	4b6a      	ldr	r3, [pc, #424]	; (8008d3c <__ieee754_rem_pio2+0x32c>)
 8008b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b98:	4543      	cmp	r3, r8
 8008b9a:	d006      	beq.n	8008baa <__ieee754_rem_pio2+0x19a>
 8008b9c:	4632      	mov	r2, r6
 8008b9e:	463b      	mov	r3, r7
 8008ba0:	4650      	mov	r0, sl
 8008ba2:	4659      	mov	r1, fp
 8008ba4:	f7f7 fb78 	bl	8000298 <__aeabi_dsub>
 8008ba8:	e00e      	b.n	8008bc8 <__ieee754_rem_pio2+0x1b8>
 8008baa:	4632      	mov	r2, r6
 8008bac:	463b      	mov	r3, r7
 8008bae:	4650      	mov	r0, sl
 8008bb0:	4659      	mov	r1, fp
 8008bb2:	f7f7 fb71 	bl	8000298 <__aeabi_dsub>
 8008bb6:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008bba:	9305      	str	r3, [sp, #20]
 8008bbc:	9a05      	ldr	r2, [sp, #20]
 8008bbe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008bc2:	1ad3      	subs	r3, r2, r3
 8008bc4:	2b10      	cmp	r3, #16
 8008bc6:	dc02      	bgt.n	8008bce <__ieee754_rem_pio2+0x1be>
 8008bc8:	e9c4 0100 	strd	r0, r1, [r4]
 8008bcc:	e039      	b.n	8008c42 <__ieee754_rem_pio2+0x232>
 8008bce:	a34c      	add	r3, pc, #304	; (adr r3, 8008d00 <__ieee754_rem_pio2+0x2f0>)
 8008bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bd8:	f7f7 fd16 	bl	8000608 <__aeabi_dmul>
 8008bdc:	4606      	mov	r6, r0
 8008bde:	460f      	mov	r7, r1
 8008be0:	4602      	mov	r2, r0
 8008be2:	460b      	mov	r3, r1
 8008be4:	4650      	mov	r0, sl
 8008be6:	4659      	mov	r1, fp
 8008be8:	f7f7 fb56 	bl	8000298 <__aeabi_dsub>
 8008bec:	4602      	mov	r2, r0
 8008bee:	460b      	mov	r3, r1
 8008bf0:	4680      	mov	r8, r0
 8008bf2:	4689      	mov	r9, r1
 8008bf4:	4650      	mov	r0, sl
 8008bf6:	4659      	mov	r1, fp
 8008bf8:	f7f7 fb4e 	bl	8000298 <__aeabi_dsub>
 8008bfc:	4632      	mov	r2, r6
 8008bfe:	463b      	mov	r3, r7
 8008c00:	f7f7 fb4a 	bl	8000298 <__aeabi_dsub>
 8008c04:	a340      	add	r3, pc, #256	; (adr r3, 8008d08 <__ieee754_rem_pio2+0x2f8>)
 8008c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0a:	4606      	mov	r6, r0
 8008c0c:	460f      	mov	r7, r1
 8008c0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c12:	f7f7 fcf9 	bl	8000608 <__aeabi_dmul>
 8008c16:	4632      	mov	r2, r6
 8008c18:	463b      	mov	r3, r7
 8008c1a:	f7f7 fb3d 	bl	8000298 <__aeabi_dsub>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	460b      	mov	r3, r1
 8008c22:	4606      	mov	r6, r0
 8008c24:	460f      	mov	r7, r1
 8008c26:	4640      	mov	r0, r8
 8008c28:	4649      	mov	r1, r9
 8008c2a:	f7f7 fb35 	bl	8000298 <__aeabi_dsub>
 8008c2e:	9a05      	ldr	r2, [sp, #20]
 8008c30:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008c34:	1ad3      	subs	r3, r2, r3
 8008c36:	2b31      	cmp	r3, #49	; 0x31
 8008c38:	dc20      	bgt.n	8008c7c <__ieee754_rem_pio2+0x26c>
 8008c3a:	e9c4 0100 	strd	r0, r1, [r4]
 8008c3e:	46c2      	mov	sl, r8
 8008c40:	46cb      	mov	fp, r9
 8008c42:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008c46:	4650      	mov	r0, sl
 8008c48:	4642      	mov	r2, r8
 8008c4a:	464b      	mov	r3, r9
 8008c4c:	4659      	mov	r1, fp
 8008c4e:	f7f7 fb23 	bl	8000298 <__aeabi_dsub>
 8008c52:	463b      	mov	r3, r7
 8008c54:	4632      	mov	r2, r6
 8008c56:	f7f7 fb1f 	bl	8000298 <__aeabi_dsub>
 8008c5a:	9b04      	ldr	r3, [sp, #16]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008c62:	f6bf af11 	bge.w	8008a88 <__ieee754_rem_pio2+0x78>
 8008c66:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008c6a:	6063      	str	r3, [r4, #4]
 8008c6c:	f8c4 8000 	str.w	r8, [r4]
 8008c70:	60a0      	str	r0, [r4, #8]
 8008c72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c76:	60e3      	str	r3, [r4, #12]
 8008c78:	426d      	negs	r5, r5
 8008c7a:	e705      	b.n	8008a88 <__ieee754_rem_pio2+0x78>
 8008c7c:	a326      	add	r3, pc, #152	; (adr r3, 8008d18 <__ieee754_rem_pio2+0x308>)
 8008c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c86:	f7f7 fcbf 	bl	8000608 <__aeabi_dmul>
 8008c8a:	4606      	mov	r6, r0
 8008c8c:	460f      	mov	r7, r1
 8008c8e:	4602      	mov	r2, r0
 8008c90:	460b      	mov	r3, r1
 8008c92:	4640      	mov	r0, r8
 8008c94:	4649      	mov	r1, r9
 8008c96:	f7f7 faff 	bl	8000298 <__aeabi_dsub>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	4682      	mov	sl, r0
 8008ca0:	468b      	mov	fp, r1
 8008ca2:	4640      	mov	r0, r8
 8008ca4:	4649      	mov	r1, r9
 8008ca6:	f7f7 faf7 	bl	8000298 <__aeabi_dsub>
 8008caa:	4632      	mov	r2, r6
 8008cac:	463b      	mov	r3, r7
 8008cae:	f7f7 faf3 	bl	8000298 <__aeabi_dsub>
 8008cb2:	a31b      	add	r3, pc, #108	; (adr r3, 8008d20 <__ieee754_rem_pio2+0x310>)
 8008cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb8:	4606      	mov	r6, r0
 8008cba:	460f      	mov	r7, r1
 8008cbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cc0:	f7f7 fca2 	bl	8000608 <__aeabi_dmul>
 8008cc4:	4632      	mov	r2, r6
 8008cc6:	463b      	mov	r3, r7
 8008cc8:	f7f7 fae6 	bl	8000298 <__aeabi_dsub>
 8008ccc:	4606      	mov	r6, r0
 8008cce:	460f      	mov	r7, r1
 8008cd0:	e764      	b.n	8008b9c <__ieee754_rem_pio2+0x18c>
 8008cd2:	4b1b      	ldr	r3, [pc, #108]	; (8008d40 <__ieee754_rem_pio2+0x330>)
 8008cd4:	4598      	cmp	r8, r3
 8008cd6:	dd35      	ble.n	8008d44 <__ieee754_rem_pio2+0x334>
 8008cd8:	ee10 2a10 	vmov	r2, s0
 8008cdc:	463b      	mov	r3, r7
 8008cde:	4630      	mov	r0, r6
 8008ce0:	4639      	mov	r1, r7
 8008ce2:	f7f7 fad9 	bl	8000298 <__aeabi_dsub>
 8008ce6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008cea:	e9c4 0100 	strd	r0, r1, [r4]
 8008cee:	e6a1      	b.n	8008a34 <__ieee754_rem_pio2+0x24>
 8008cf0:	54400000 	.word	0x54400000
 8008cf4:	3ff921fb 	.word	0x3ff921fb
 8008cf8:	1a626331 	.word	0x1a626331
 8008cfc:	3dd0b461 	.word	0x3dd0b461
 8008d00:	1a600000 	.word	0x1a600000
 8008d04:	3dd0b461 	.word	0x3dd0b461
 8008d08:	2e037073 	.word	0x2e037073
 8008d0c:	3ba3198a 	.word	0x3ba3198a
 8008d10:	6dc9c883 	.word	0x6dc9c883
 8008d14:	3fe45f30 	.word	0x3fe45f30
 8008d18:	2e000000 	.word	0x2e000000
 8008d1c:	3ba3198a 	.word	0x3ba3198a
 8008d20:	252049c1 	.word	0x252049c1
 8008d24:	397b839a 	.word	0x397b839a
 8008d28:	3fe921fb 	.word	0x3fe921fb
 8008d2c:	4002d97b 	.word	0x4002d97b
 8008d30:	3ff921fb 	.word	0x3ff921fb
 8008d34:	413921fb 	.word	0x413921fb
 8008d38:	3fe00000 	.word	0x3fe00000
 8008d3c:	0800a0ec 	.word	0x0800a0ec
 8008d40:	7fefffff 	.word	0x7fefffff
 8008d44:	ea4f 5528 	mov.w	r5, r8, asr #20
 8008d48:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8008d4c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8008d50:	4630      	mov	r0, r6
 8008d52:	460f      	mov	r7, r1
 8008d54:	f7f7 fef2 	bl	8000b3c <__aeabi_d2iz>
 8008d58:	f7f7 fbec 	bl	8000534 <__aeabi_i2d>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	460b      	mov	r3, r1
 8008d60:	4630      	mov	r0, r6
 8008d62:	4639      	mov	r1, r7
 8008d64:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008d68:	f7f7 fa96 	bl	8000298 <__aeabi_dsub>
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	4b1f      	ldr	r3, [pc, #124]	; (8008dec <__ieee754_rem_pio2+0x3dc>)
 8008d70:	f7f7 fc4a 	bl	8000608 <__aeabi_dmul>
 8008d74:	460f      	mov	r7, r1
 8008d76:	4606      	mov	r6, r0
 8008d78:	f7f7 fee0 	bl	8000b3c <__aeabi_d2iz>
 8008d7c:	f7f7 fbda 	bl	8000534 <__aeabi_i2d>
 8008d80:	4602      	mov	r2, r0
 8008d82:	460b      	mov	r3, r1
 8008d84:	4630      	mov	r0, r6
 8008d86:	4639      	mov	r1, r7
 8008d88:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008d8c:	f7f7 fa84 	bl	8000298 <__aeabi_dsub>
 8008d90:	2200      	movs	r2, #0
 8008d92:	4b16      	ldr	r3, [pc, #88]	; (8008dec <__ieee754_rem_pio2+0x3dc>)
 8008d94:	f7f7 fc38 	bl	8000608 <__aeabi_dmul>
 8008d98:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008d9c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8008da0:	f04f 0803 	mov.w	r8, #3
 8008da4:	2600      	movs	r6, #0
 8008da6:	2700      	movs	r7, #0
 8008da8:	4632      	mov	r2, r6
 8008daa:	463b      	mov	r3, r7
 8008dac:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8008db0:	f108 3aff 	add.w	sl, r8, #4294967295
 8008db4:	f7f7 fe90 	bl	8000ad8 <__aeabi_dcmpeq>
 8008db8:	b9b0      	cbnz	r0, 8008de8 <__ieee754_rem_pio2+0x3d8>
 8008dba:	4b0d      	ldr	r3, [pc, #52]	; (8008df0 <__ieee754_rem_pio2+0x3e0>)
 8008dbc:	9301      	str	r3, [sp, #4]
 8008dbe:	2302      	movs	r3, #2
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	462a      	mov	r2, r5
 8008dc4:	4643      	mov	r3, r8
 8008dc6:	4621      	mov	r1, r4
 8008dc8:	a806      	add	r0, sp, #24
 8008dca:	f000 f8dd 	bl	8008f88 <__kernel_rem_pio2>
 8008dce:	9b04      	ldr	r3, [sp, #16]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	4605      	mov	r5, r0
 8008dd4:	f6bf ae58 	bge.w	8008a88 <__ieee754_rem_pio2+0x78>
 8008dd8:	6863      	ldr	r3, [r4, #4]
 8008dda:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008dde:	6063      	str	r3, [r4, #4]
 8008de0:	68e3      	ldr	r3, [r4, #12]
 8008de2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008de6:	e746      	b.n	8008c76 <__ieee754_rem_pio2+0x266>
 8008de8:	46d0      	mov	r8, sl
 8008dea:	e7dd      	b.n	8008da8 <__ieee754_rem_pio2+0x398>
 8008dec:	41700000 	.word	0x41700000
 8008df0:	0800a16c 	.word	0x0800a16c
 8008df4:	00000000 	.word	0x00000000

08008df8 <__kernel_cos>:
 8008df8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dfc:	ec59 8b10 	vmov	r8, r9, d0
 8008e00:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8008e04:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8008e08:	ed2d 8b02 	vpush	{d8}
 8008e0c:	eeb0 8a41 	vmov.f32	s16, s2
 8008e10:	eef0 8a61 	vmov.f32	s17, s3
 8008e14:	da07      	bge.n	8008e26 <__kernel_cos+0x2e>
 8008e16:	ee10 0a10 	vmov	r0, s0
 8008e1a:	4649      	mov	r1, r9
 8008e1c:	f7f7 fe8e 	bl	8000b3c <__aeabi_d2iz>
 8008e20:	2800      	cmp	r0, #0
 8008e22:	f000 8089 	beq.w	8008f38 <__kernel_cos+0x140>
 8008e26:	4642      	mov	r2, r8
 8008e28:	464b      	mov	r3, r9
 8008e2a:	4640      	mov	r0, r8
 8008e2c:	4649      	mov	r1, r9
 8008e2e:	f7f7 fbeb 	bl	8000608 <__aeabi_dmul>
 8008e32:	2200      	movs	r2, #0
 8008e34:	4b4e      	ldr	r3, [pc, #312]	; (8008f70 <__kernel_cos+0x178>)
 8008e36:	4604      	mov	r4, r0
 8008e38:	460d      	mov	r5, r1
 8008e3a:	f7f7 fbe5 	bl	8000608 <__aeabi_dmul>
 8008e3e:	a340      	add	r3, pc, #256	; (adr r3, 8008f40 <__kernel_cos+0x148>)
 8008e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e44:	4682      	mov	sl, r0
 8008e46:	468b      	mov	fp, r1
 8008e48:	4620      	mov	r0, r4
 8008e4a:	4629      	mov	r1, r5
 8008e4c:	f7f7 fbdc 	bl	8000608 <__aeabi_dmul>
 8008e50:	a33d      	add	r3, pc, #244	; (adr r3, 8008f48 <__kernel_cos+0x150>)
 8008e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e56:	f7f7 fa21 	bl	800029c <__adddf3>
 8008e5a:	4622      	mov	r2, r4
 8008e5c:	462b      	mov	r3, r5
 8008e5e:	f7f7 fbd3 	bl	8000608 <__aeabi_dmul>
 8008e62:	a33b      	add	r3, pc, #236	; (adr r3, 8008f50 <__kernel_cos+0x158>)
 8008e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e68:	f7f7 fa16 	bl	8000298 <__aeabi_dsub>
 8008e6c:	4622      	mov	r2, r4
 8008e6e:	462b      	mov	r3, r5
 8008e70:	f7f7 fbca 	bl	8000608 <__aeabi_dmul>
 8008e74:	a338      	add	r3, pc, #224	; (adr r3, 8008f58 <__kernel_cos+0x160>)
 8008e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7a:	f7f7 fa0f 	bl	800029c <__adddf3>
 8008e7e:	4622      	mov	r2, r4
 8008e80:	462b      	mov	r3, r5
 8008e82:	f7f7 fbc1 	bl	8000608 <__aeabi_dmul>
 8008e86:	a336      	add	r3, pc, #216	; (adr r3, 8008f60 <__kernel_cos+0x168>)
 8008e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8c:	f7f7 fa04 	bl	8000298 <__aeabi_dsub>
 8008e90:	4622      	mov	r2, r4
 8008e92:	462b      	mov	r3, r5
 8008e94:	f7f7 fbb8 	bl	8000608 <__aeabi_dmul>
 8008e98:	a333      	add	r3, pc, #204	; (adr r3, 8008f68 <__kernel_cos+0x170>)
 8008e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9e:	f7f7 f9fd 	bl	800029c <__adddf3>
 8008ea2:	4622      	mov	r2, r4
 8008ea4:	462b      	mov	r3, r5
 8008ea6:	f7f7 fbaf 	bl	8000608 <__aeabi_dmul>
 8008eaa:	4622      	mov	r2, r4
 8008eac:	462b      	mov	r3, r5
 8008eae:	f7f7 fbab 	bl	8000608 <__aeabi_dmul>
 8008eb2:	ec53 2b18 	vmov	r2, r3, d8
 8008eb6:	4604      	mov	r4, r0
 8008eb8:	460d      	mov	r5, r1
 8008eba:	4640      	mov	r0, r8
 8008ebc:	4649      	mov	r1, r9
 8008ebe:	f7f7 fba3 	bl	8000608 <__aeabi_dmul>
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	4629      	mov	r1, r5
 8008ec8:	4620      	mov	r0, r4
 8008eca:	f7f7 f9e5 	bl	8000298 <__aeabi_dsub>
 8008ece:	4b29      	ldr	r3, [pc, #164]	; (8008f74 <__kernel_cos+0x17c>)
 8008ed0:	429e      	cmp	r6, r3
 8008ed2:	4680      	mov	r8, r0
 8008ed4:	4689      	mov	r9, r1
 8008ed6:	dc11      	bgt.n	8008efc <__kernel_cos+0x104>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	460b      	mov	r3, r1
 8008edc:	4650      	mov	r0, sl
 8008ede:	4659      	mov	r1, fp
 8008ee0:	f7f7 f9da 	bl	8000298 <__aeabi_dsub>
 8008ee4:	460b      	mov	r3, r1
 8008ee6:	4924      	ldr	r1, [pc, #144]	; (8008f78 <__kernel_cos+0x180>)
 8008ee8:	4602      	mov	r2, r0
 8008eea:	2000      	movs	r0, #0
 8008eec:	f7f7 f9d4 	bl	8000298 <__aeabi_dsub>
 8008ef0:	ecbd 8b02 	vpop	{d8}
 8008ef4:	ec41 0b10 	vmov	d0, r0, r1
 8008ef8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008efc:	4b1f      	ldr	r3, [pc, #124]	; (8008f7c <__kernel_cos+0x184>)
 8008efe:	491e      	ldr	r1, [pc, #120]	; (8008f78 <__kernel_cos+0x180>)
 8008f00:	429e      	cmp	r6, r3
 8008f02:	bfcc      	ite	gt
 8008f04:	4d1e      	ldrgt	r5, [pc, #120]	; (8008f80 <__kernel_cos+0x188>)
 8008f06:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8008f0a:	2400      	movs	r4, #0
 8008f0c:	4622      	mov	r2, r4
 8008f0e:	462b      	mov	r3, r5
 8008f10:	2000      	movs	r0, #0
 8008f12:	f7f7 f9c1 	bl	8000298 <__aeabi_dsub>
 8008f16:	4622      	mov	r2, r4
 8008f18:	4606      	mov	r6, r0
 8008f1a:	460f      	mov	r7, r1
 8008f1c:	462b      	mov	r3, r5
 8008f1e:	4650      	mov	r0, sl
 8008f20:	4659      	mov	r1, fp
 8008f22:	f7f7 f9b9 	bl	8000298 <__aeabi_dsub>
 8008f26:	4642      	mov	r2, r8
 8008f28:	464b      	mov	r3, r9
 8008f2a:	f7f7 f9b5 	bl	8000298 <__aeabi_dsub>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	460b      	mov	r3, r1
 8008f32:	4630      	mov	r0, r6
 8008f34:	4639      	mov	r1, r7
 8008f36:	e7d9      	b.n	8008eec <__kernel_cos+0xf4>
 8008f38:	2000      	movs	r0, #0
 8008f3a:	490f      	ldr	r1, [pc, #60]	; (8008f78 <__kernel_cos+0x180>)
 8008f3c:	e7d8      	b.n	8008ef0 <__kernel_cos+0xf8>
 8008f3e:	bf00      	nop
 8008f40:	be8838d4 	.word	0xbe8838d4
 8008f44:	bda8fae9 	.word	0xbda8fae9
 8008f48:	bdb4b1c4 	.word	0xbdb4b1c4
 8008f4c:	3e21ee9e 	.word	0x3e21ee9e
 8008f50:	809c52ad 	.word	0x809c52ad
 8008f54:	3e927e4f 	.word	0x3e927e4f
 8008f58:	19cb1590 	.word	0x19cb1590
 8008f5c:	3efa01a0 	.word	0x3efa01a0
 8008f60:	16c15177 	.word	0x16c15177
 8008f64:	3f56c16c 	.word	0x3f56c16c
 8008f68:	5555554c 	.word	0x5555554c
 8008f6c:	3fa55555 	.word	0x3fa55555
 8008f70:	3fe00000 	.word	0x3fe00000
 8008f74:	3fd33332 	.word	0x3fd33332
 8008f78:	3ff00000 	.word	0x3ff00000
 8008f7c:	3fe90000 	.word	0x3fe90000
 8008f80:	3fd20000 	.word	0x3fd20000
 8008f84:	00000000 	.word	0x00000000

08008f88 <__kernel_rem_pio2>:
 8008f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f8c:	ed2d 8b02 	vpush	{d8}
 8008f90:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8008f94:	1ed4      	subs	r4, r2, #3
 8008f96:	9308      	str	r3, [sp, #32]
 8008f98:	9101      	str	r1, [sp, #4]
 8008f9a:	4bc5      	ldr	r3, [pc, #788]	; (80092b0 <__kernel_rem_pio2+0x328>)
 8008f9c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8008f9e:	9009      	str	r0, [sp, #36]	; 0x24
 8008fa0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008fa4:	9304      	str	r3, [sp, #16]
 8008fa6:	9b08      	ldr	r3, [sp, #32]
 8008fa8:	3b01      	subs	r3, #1
 8008faa:	9307      	str	r3, [sp, #28]
 8008fac:	2318      	movs	r3, #24
 8008fae:	fb94 f4f3 	sdiv	r4, r4, r3
 8008fb2:	f06f 0317 	mvn.w	r3, #23
 8008fb6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8008fba:	fb04 3303 	mla	r3, r4, r3, r3
 8008fbe:	eb03 0a02 	add.w	sl, r3, r2
 8008fc2:	9b04      	ldr	r3, [sp, #16]
 8008fc4:	9a07      	ldr	r2, [sp, #28]
 8008fc6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80092a0 <__kernel_rem_pio2+0x318>
 8008fca:	eb03 0802 	add.w	r8, r3, r2
 8008fce:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008fd0:	1aa7      	subs	r7, r4, r2
 8008fd2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008fd6:	ae22      	add	r6, sp, #136	; 0x88
 8008fd8:	2500      	movs	r5, #0
 8008fda:	4545      	cmp	r5, r8
 8008fdc:	dd13      	ble.n	8009006 <__kernel_rem_pio2+0x7e>
 8008fde:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80092a0 <__kernel_rem_pio2+0x318>
 8008fe2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8008fe6:	2600      	movs	r6, #0
 8008fe8:	9b04      	ldr	r3, [sp, #16]
 8008fea:	429e      	cmp	r6, r3
 8008fec:	dc32      	bgt.n	8009054 <__kernel_rem_pio2+0xcc>
 8008fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ff0:	9302      	str	r3, [sp, #8]
 8008ff2:	9b08      	ldr	r3, [sp, #32]
 8008ff4:	199d      	adds	r5, r3, r6
 8008ff6:	ab22      	add	r3, sp, #136	; 0x88
 8008ff8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008ffc:	9306      	str	r3, [sp, #24]
 8008ffe:	ec59 8b18 	vmov	r8, r9, d8
 8009002:	2700      	movs	r7, #0
 8009004:	e01f      	b.n	8009046 <__kernel_rem_pio2+0xbe>
 8009006:	42ef      	cmn	r7, r5
 8009008:	d407      	bmi.n	800901a <__kernel_rem_pio2+0x92>
 800900a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800900e:	f7f7 fa91 	bl	8000534 <__aeabi_i2d>
 8009012:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009016:	3501      	adds	r5, #1
 8009018:	e7df      	b.n	8008fda <__kernel_rem_pio2+0x52>
 800901a:	ec51 0b18 	vmov	r0, r1, d8
 800901e:	e7f8      	b.n	8009012 <__kernel_rem_pio2+0x8a>
 8009020:	9906      	ldr	r1, [sp, #24]
 8009022:	9d02      	ldr	r5, [sp, #8]
 8009024:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8009028:	9106      	str	r1, [sp, #24]
 800902a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800902e:	9502      	str	r5, [sp, #8]
 8009030:	f7f7 faea 	bl	8000608 <__aeabi_dmul>
 8009034:	4602      	mov	r2, r0
 8009036:	460b      	mov	r3, r1
 8009038:	4640      	mov	r0, r8
 800903a:	4649      	mov	r1, r9
 800903c:	f7f7 f92e 	bl	800029c <__adddf3>
 8009040:	3701      	adds	r7, #1
 8009042:	4680      	mov	r8, r0
 8009044:	4689      	mov	r9, r1
 8009046:	9b07      	ldr	r3, [sp, #28]
 8009048:	429f      	cmp	r7, r3
 800904a:	dde9      	ble.n	8009020 <__kernel_rem_pio2+0x98>
 800904c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8009050:	3601      	adds	r6, #1
 8009052:	e7c9      	b.n	8008fe8 <__kernel_rem_pio2+0x60>
 8009054:	9b04      	ldr	r3, [sp, #16]
 8009056:	aa0e      	add	r2, sp, #56	; 0x38
 8009058:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800905c:	930c      	str	r3, [sp, #48]	; 0x30
 800905e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009060:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009064:	9c04      	ldr	r4, [sp, #16]
 8009066:	930b      	str	r3, [sp, #44]	; 0x2c
 8009068:	ab9a      	add	r3, sp, #616	; 0x268
 800906a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800906e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009072:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009076:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800907a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800907e:	ab9a      	add	r3, sp, #616	; 0x268
 8009080:	445b      	add	r3, fp
 8009082:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8009086:	2500      	movs	r5, #0
 8009088:	1b63      	subs	r3, r4, r5
 800908a:	2b00      	cmp	r3, #0
 800908c:	dc78      	bgt.n	8009180 <__kernel_rem_pio2+0x1f8>
 800908e:	4650      	mov	r0, sl
 8009090:	ec49 8b10 	vmov	d0, r8, r9
 8009094:	f000 fc00 	bl	8009898 <scalbn>
 8009098:	ec57 6b10 	vmov	r6, r7, d0
 800909c:	2200      	movs	r2, #0
 800909e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80090a2:	ee10 0a10 	vmov	r0, s0
 80090a6:	4639      	mov	r1, r7
 80090a8:	f7f7 faae 	bl	8000608 <__aeabi_dmul>
 80090ac:	ec41 0b10 	vmov	d0, r0, r1
 80090b0:	f000 fb6e 	bl	8009790 <floor>
 80090b4:	2200      	movs	r2, #0
 80090b6:	ec51 0b10 	vmov	r0, r1, d0
 80090ba:	4b7e      	ldr	r3, [pc, #504]	; (80092b4 <__kernel_rem_pio2+0x32c>)
 80090bc:	f7f7 faa4 	bl	8000608 <__aeabi_dmul>
 80090c0:	4602      	mov	r2, r0
 80090c2:	460b      	mov	r3, r1
 80090c4:	4630      	mov	r0, r6
 80090c6:	4639      	mov	r1, r7
 80090c8:	f7f7 f8e6 	bl	8000298 <__aeabi_dsub>
 80090cc:	460f      	mov	r7, r1
 80090ce:	4606      	mov	r6, r0
 80090d0:	f7f7 fd34 	bl	8000b3c <__aeabi_d2iz>
 80090d4:	9006      	str	r0, [sp, #24]
 80090d6:	f7f7 fa2d 	bl	8000534 <__aeabi_i2d>
 80090da:	4602      	mov	r2, r0
 80090dc:	460b      	mov	r3, r1
 80090de:	4630      	mov	r0, r6
 80090e0:	4639      	mov	r1, r7
 80090e2:	f7f7 f8d9 	bl	8000298 <__aeabi_dsub>
 80090e6:	f1ba 0f00 	cmp.w	sl, #0
 80090ea:	4606      	mov	r6, r0
 80090ec:	460f      	mov	r7, r1
 80090ee:	dd6c      	ble.n	80091ca <__kernel_rem_pio2+0x242>
 80090f0:	1e62      	subs	r2, r4, #1
 80090f2:	ab0e      	add	r3, sp, #56	; 0x38
 80090f4:	f1ca 0118 	rsb	r1, sl, #24
 80090f8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80090fc:	9d06      	ldr	r5, [sp, #24]
 80090fe:	fa40 f301 	asr.w	r3, r0, r1
 8009102:	441d      	add	r5, r3
 8009104:	408b      	lsls	r3, r1
 8009106:	1ac0      	subs	r0, r0, r3
 8009108:	ab0e      	add	r3, sp, #56	; 0x38
 800910a:	9506      	str	r5, [sp, #24]
 800910c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009110:	f1ca 0317 	rsb	r3, sl, #23
 8009114:	fa40 f303 	asr.w	r3, r0, r3
 8009118:	9302      	str	r3, [sp, #8]
 800911a:	9b02      	ldr	r3, [sp, #8]
 800911c:	2b00      	cmp	r3, #0
 800911e:	dd62      	ble.n	80091e6 <__kernel_rem_pio2+0x25e>
 8009120:	9b06      	ldr	r3, [sp, #24]
 8009122:	2200      	movs	r2, #0
 8009124:	3301      	adds	r3, #1
 8009126:	9306      	str	r3, [sp, #24]
 8009128:	4615      	mov	r5, r2
 800912a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800912e:	4294      	cmp	r4, r2
 8009130:	f300 8095 	bgt.w	800925e <__kernel_rem_pio2+0x2d6>
 8009134:	f1ba 0f00 	cmp.w	sl, #0
 8009138:	dd07      	ble.n	800914a <__kernel_rem_pio2+0x1c2>
 800913a:	f1ba 0f01 	cmp.w	sl, #1
 800913e:	f000 80a2 	beq.w	8009286 <__kernel_rem_pio2+0x2fe>
 8009142:	f1ba 0f02 	cmp.w	sl, #2
 8009146:	f000 80c1 	beq.w	80092cc <__kernel_rem_pio2+0x344>
 800914a:	9b02      	ldr	r3, [sp, #8]
 800914c:	2b02      	cmp	r3, #2
 800914e:	d14a      	bne.n	80091e6 <__kernel_rem_pio2+0x25e>
 8009150:	4632      	mov	r2, r6
 8009152:	463b      	mov	r3, r7
 8009154:	2000      	movs	r0, #0
 8009156:	4958      	ldr	r1, [pc, #352]	; (80092b8 <__kernel_rem_pio2+0x330>)
 8009158:	f7f7 f89e 	bl	8000298 <__aeabi_dsub>
 800915c:	4606      	mov	r6, r0
 800915e:	460f      	mov	r7, r1
 8009160:	2d00      	cmp	r5, #0
 8009162:	d040      	beq.n	80091e6 <__kernel_rem_pio2+0x25e>
 8009164:	4650      	mov	r0, sl
 8009166:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80092a8 <__kernel_rem_pio2+0x320>
 800916a:	f000 fb95 	bl	8009898 <scalbn>
 800916e:	4630      	mov	r0, r6
 8009170:	4639      	mov	r1, r7
 8009172:	ec53 2b10 	vmov	r2, r3, d0
 8009176:	f7f7 f88f 	bl	8000298 <__aeabi_dsub>
 800917a:	4606      	mov	r6, r0
 800917c:	460f      	mov	r7, r1
 800917e:	e032      	b.n	80091e6 <__kernel_rem_pio2+0x25e>
 8009180:	2200      	movs	r2, #0
 8009182:	4b4e      	ldr	r3, [pc, #312]	; (80092bc <__kernel_rem_pio2+0x334>)
 8009184:	4640      	mov	r0, r8
 8009186:	4649      	mov	r1, r9
 8009188:	f7f7 fa3e 	bl	8000608 <__aeabi_dmul>
 800918c:	f7f7 fcd6 	bl	8000b3c <__aeabi_d2iz>
 8009190:	f7f7 f9d0 	bl	8000534 <__aeabi_i2d>
 8009194:	2200      	movs	r2, #0
 8009196:	4b4a      	ldr	r3, [pc, #296]	; (80092c0 <__kernel_rem_pio2+0x338>)
 8009198:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800919c:	f7f7 fa34 	bl	8000608 <__aeabi_dmul>
 80091a0:	4602      	mov	r2, r0
 80091a2:	460b      	mov	r3, r1
 80091a4:	4640      	mov	r0, r8
 80091a6:	4649      	mov	r1, r9
 80091a8:	f7f7 f876 	bl	8000298 <__aeabi_dsub>
 80091ac:	f7f7 fcc6 	bl	8000b3c <__aeabi_d2iz>
 80091b0:	ab0e      	add	r3, sp, #56	; 0x38
 80091b2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80091b6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80091ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091be:	f7f7 f86d 	bl	800029c <__adddf3>
 80091c2:	3501      	adds	r5, #1
 80091c4:	4680      	mov	r8, r0
 80091c6:	4689      	mov	r9, r1
 80091c8:	e75e      	b.n	8009088 <__kernel_rem_pio2+0x100>
 80091ca:	d105      	bne.n	80091d8 <__kernel_rem_pio2+0x250>
 80091cc:	1e63      	subs	r3, r4, #1
 80091ce:	aa0e      	add	r2, sp, #56	; 0x38
 80091d0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80091d4:	15c3      	asrs	r3, r0, #23
 80091d6:	e79f      	b.n	8009118 <__kernel_rem_pio2+0x190>
 80091d8:	2200      	movs	r2, #0
 80091da:	4b3a      	ldr	r3, [pc, #232]	; (80092c4 <__kernel_rem_pio2+0x33c>)
 80091dc:	f7f7 fc9a 	bl	8000b14 <__aeabi_dcmpge>
 80091e0:	2800      	cmp	r0, #0
 80091e2:	d139      	bne.n	8009258 <__kernel_rem_pio2+0x2d0>
 80091e4:	9002      	str	r0, [sp, #8]
 80091e6:	2200      	movs	r2, #0
 80091e8:	2300      	movs	r3, #0
 80091ea:	4630      	mov	r0, r6
 80091ec:	4639      	mov	r1, r7
 80091ee:	f7f7 fc73 	bl	8000ad8 <__aeabi_dcmpeq>
 80091f2:	2800      	cmp	r0, #0
 80091f4:	f000 80c7 	beq.w	8009386 <__kernel_rem_pio2+0x3fe>
 80091f8:	1e65      	subs	r5, r4, #1
 80091fa:	462b      	mov	r3, r5
 80091fc:	2200      	movs	r2, #0
 80091fe:	9904      	ldr	r1, [sp, #16]
 8009200:	428b      	cmp	r3, r1
 8009202:	da6a      	bge.n	80092da <__kernel_rem_pio2+0x352>
 8009204:	2a00      	cmp	r2, #0
 8009206:	f000 8088 	beq.w	800931a <__kernel_rem_pio2+0x392>
 800920a:	ab0e      	add	r3, sp, #56	; 0x38
 800920c:	f1aa 0a18 	sub.w	sl, sl, #24
 8009210:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009214:	2b00      	cmp	r3, #0
 8009216:	f000 80b4 	beq.w	8009382 <__kernel_rem_pio2+0x3fa>
 800921a:	4650      	mov	r0, sl
 800921c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80092a8 <__kernel_rem_pio2+0x320>
 8009220:	f000 fb3a 	bl	8009898 <scalbn>
 8009224:	00ec      	lsls	r4, r5, #3
 8009226:	ab72      	add	r3, sp, #456	; 0x1c8
 8009228:	191e      	adds	r6, r3, r4
 800922a:	ec59 8b10 	vmov	r8, r9, d0
 800922e:	f106 0a08 	add.w	sl, r6, #8
 8009232:	462f      	mov	r7, r5
 8009234:	2f00      	cmp	r7, #0
 8009236:	f280 80df 	bge.w	80093f8 <__kernel_rem_pio2+0x470>
 800923a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80092a0 <__kernel_rem_pio2+0x318>
 800923e:	f04f 0a00 	mov.w	sl, #0
 8009242:	eba5 030a 	sub.w	r3, r5, sl
 8009246:	2b00      	cmp	r3, #0
 8009248:	f2c0 810a 	blt.w	8009460 <__kernel_rem_pio2+0x4d8>
 800924c:	f8df b078 	ldr.w	fp, [pc, #120]	; 80092c8 <__kernel_rem_pio2+0x340>
 8009250:	ec59 8b18 	vmov	r8, r9, d8
 8009254:	2700      	movs	r7, #0
 8009256:	e0f5      	b.n	8009444 <__kernel_rem_pio2+0x4bc>
 8009258:	2302      	movs	r3, #2
 800925a:	9302      	str	r3, [sp, #8]
 800925c:	e760      	b.n	8009120 <__kernel_rem_pio2+0x198>
 800925e:	ab0e      	add	r3, sp, #56	; 0x38
 8009260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009264:	b94d      	cbnz	r5, 800927a <__kernel_rem_pio2+0x2f2>
 8009266:	b12b      	cbz	r3, 8009274 <__kernel_rem_pio2+0x2ec>
 8009268:	a80e      	add	r0, sp, #56	; 0x38
 800926a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800926e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8009272:	2301      	movs	r3, #1
 8009274:	3201      	adds	r2, #1
 8009276:	461d      	mov	r5, r3
 8009278:	e759      	b.n	800912e <__kernel_rem_pio2+0x1a6>
 800927a:	a80e      	add	r0, sp, #56	; 0x38
 800927c:	1acb      	subs	r3, r1, r3
 800927e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8009282:	462b      	mov	r3, r5
 8009284:	e7f6      	b.n	8009274 <__kernel_rem_pio2+0x2ec>
 8009286:	1e62      	subs	r2, r4, #1
 8009288:	ab0e      	add	r3, sp, #56	; 0x38
 800928a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800928e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009292:	a90e      	add	r1, sp, #56	; 0x38
 8009294:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009298:	e757      	b.n	800914a <__kernel_rem_pio2+0x1c2>
 800929a:	bf00      	nop
 800929c:	f3af 8000 	nop.w
	...
 80092ac:	3ff00000 	.word	0x3ff00000
 80092b0:	0800a2b8 	.word	0x0800a2b8
 80092b4:	40200000 	.word	0x40200000
 80092b8:	3ff00000 	.word	0x3ff00000
 80092bc:	3e700000 	.word	0x3e700000
 80092c0:	41700000 	.word	0x41700000
 80092c4:	3fe00000 	.word	0x3fe00000
 80092c8:	0800a278 	.word	0x0800a278
 80092cc:	1e62      	subs	r2, r4, #1
 80092ce:	ab0e      	add	r3, sp, #56	; 0x38
 80092d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092d4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80092d8:	e7db      	b.n	8009292 <__kernel_rem_pio2+0x30a>
 80092da:	a90e      	add	r1, sp, #56	; 0x38
 80092dc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80092e0:	3b01      	subs	r3, #1
 80092e2:	430a      	orrs	r2, r1
 80092e4:	e78b      	b.n	80091fe <__kernel_rem_pio2+0x276>
 80092e6:	3301      	adds	r3, #1
 80092e8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80092ec:	2900      	cmp	r1, #0
 80092ee:	d0fa      	beq.n	80092e6 <__kernel_rem_pio2+0x35e>
 80092f0:	9a08      	ldr	r2, [sp, #32]
 80092f2:	4422      	add	r2, r4
 80092f4:	00d2      	lsls	r2, r2, #3
 80092f6:	a922      	add	r1, sp, #136	; 0x88
 80092f8:	18e3      	adds	r3, r4, r3
 80092fa:	9206      	str	r2, [sp, #24]
 80092fc:	440a      	add	r2, r1
 80092fe:	9302      	str	r3, [sp, #8]
 8009300:	f10b 0108 	add.w	r1, fp, #8
 8009304:	f102 0308 	add.w	r3, r2, #8
 8009308:	1c66      	adds	r6, r4, #1
 800930a:	910a      	str	r1, [sp, #40]	; 0x28
 800930c:	2500      	movs	r5, #0
 800930e:	930d      	str	r3, [sp, #52]	; 0x34
 8009310:	9b02      	ldr	r3, [sp, #8]
 8009312:	42b3      	cmp	r3, r6
 8009314:	da04      	bge.n	8009320 <__kernel_rem_pio2+0x398>
 8009316:	461c      	mov	r4, r3
 8009318:	e6a6      	b.n	8009068 <__kernel_rem_pio2+0xe0>
 800931a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800931c:	2301      	movs	r3, #1
 800931e:	e7e3      	b.n	80092e8 <__kernel_rem_pio2+0x360>
 8009320:	9b06      	ldr	r3, [sp, #24]
 8009322:	18ef      	adds	r7, r5, r3
 8009324:	ab22      	add	r3, sp, #136	; 0x88
 8009326:	441f      	add	r7, r3
 8009328:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800932a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800932e:	f7f7 f901 	bl	8000534 <__aeabi_i2d>
 8009332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009334:	461c      	mov	r4, r3
 8009336:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009338:	e9c7 0100 	strd	r0, r1, [r7]
 800933c:	eb03 0b05 	add.w	fp, r3, r5
 8009340:	2700      	movs	r7, #0
 8009342:	f04f 0800 	mov.w	r8, #0
 8009346:	f04f 0900 	mov.w	r9, #0
 800934a:	9b07      	ldr	r3, [sp, #28]
 800934c:	429f      	cmp	r7, r3
 800934e:	dd08      	ble.n	8009362 <__kernel_rem_pio2+0x3da>
 8009350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009352:	aa72      	add	r2, sp, #456	; 0x1c8
 8009354:	18eb      	adds	r3, r5, r3
 8009356:	4413      	add	r3, r2
 8009358:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800935c:	3601      	adds	r6, #1
 800935e:	3508      	adds	r5, #8
 8009360:	e7d6      	b.n	8009310 <__kernel_rem_pio2+0x388>
 8009362:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009366:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800936a:	f7f7 f94d 	bl	8000608 <__aeabi_dmul>
 800936e:	4602      	mov	r2, r0
 8009370:	460b      	mov	r3, r1
 8009372:	4640      	mov	r0, r8
 8009374:	4649      	mov	r1, r9
 8009376:	f7f6 ff91 	bl	800029c <__adddf3>
 800937a:	3701      	adds	r7, #1
 800937c:	4680      	mov	r8, r0
 800937e:	4689      	mov	r9, r1
 8009380:	e7e3      	b.n	800934a <__kernel_rem_pio2+0x3c2>
 8009382:	3d01      	subs	r5, #1
 8009384:	e741      	b.n	800920a <__kernel_rem_pio2+0x282>
 8009386:	f1ca 0000 	rsb	r0, sl, #0
 800938a:	ec47 6b10 	vmov	d0, r6, r7
 800938e:	f000 fa83 	bl	8009898 <scalbn>
 8009392:	ec57 6b10 	vmov	r6, r7, d0
 8009396:	2200      	movs	r2, #0
 8009398:	4b99      	ldr	r3, [pc, #612]	; (8009600 <__kernel_rem_pio2+0x678>)
 800939a:	ee10 0a10 	vmov	r0, s0
 800939e:	4639      	mov	r1, r7
 80093a0:	f7f7 fbb8 	bl	8000b14 <__aeabi_dcmpge>
 80093a4:	b1f8      	cbz	r0, 80093e6 <__kernel_rem_pio2+0x45e>
 80093a6:	2200      	movs	r2, #0
 80093a8:	4b96      	ldr	r3, [pc, #600]	; (8009604 <__kernel_rem_pio2+0x67c>)
 80093aa:	4630      	mov	r0, r6
 80093ac:	4639      	mov	r1, r7
 80093ae:	f7f7 f92b 	bl	8000608 <__aeabi_dmul>
 80093b2:	f7f7 fbc3 	bl	8000b3c <__aeabi_d2iz>
 80093b6:	4680      	mov	r8, r0
 80093b8:	f7f7 f8bc 	bl	8000534 <__aeabi_i2d>
 80093bc:	2200      	movs	r2, #0
 80093be:	4b90      	ldr	r3, [pc, #576]	; (8009600 <__kernel_rem_pio2+0x678>)
 80093c0:	f7f7 f922 	bl	8000608 <__aeabi_dmul>
 80093c4:	460b      	mov	r3, r1
 80093c6:	4602      	mov	r2, r0
 80093c8:	4639      	mov	r1, r7
 80093ca:	4630      	mov	r0, r6
 80093cc:	f7f6 ff64 	bl	8000298 <__aeabi_dsub>
 80093d0:	f7f7 fbb4 	bl	8000b3c <__aeabi_d2iz>
 80093d4:	1c65      	adds	r5, r4, #1
 80093d6:	ab0e      	add	r3, sp, #56	; 0x38
 80093d8:	f10a 0a18 	add.w	sl, sl, #24
 80093dc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80093e0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80093e4:	e719      	b.n	800921a <__kernel_rem_pio2+0x292>
 80093e6:	4630      	mov	r0, r6
 80093e8:	4639      	mov	r1, r7
 80093ea:	f7f7 fba7 	bl	8000b3c <__aeabi_d2iz>
 80093ee:	ab0e      	add	r3, sp, #56	; 0x38
 80093f0:	4625      	mov	r5, r4
 80093f2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80093f6:	e710      	b.n	800921a <__kernel_rem_pio2+0x292>
 80093f8:	ab0e      	add	r3, sp, #56	; 0x38
 80093fa:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80093fe:	f7f7 f899 	bl	8000534 <__aeabi_i2d>
 8009402:	4642      	mov	r2, r8
 8009404:	464b      	mov	r3, r9
 8009406:	f7f7 f8ff 	bl	8000608 <__aeabi_dmul>
 800940a:	2200      	movs	r2, #0
 800940c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8009410:	4b7c      	ldr	r3, [pc, #496]	; (8009604 <__kernel_rem_pio2+0x67c>)
 8009412:	4640      	mov	r0, r8
 8009414:	4649      	mov	r1, r9
 8009416:	f7f7 f8f7 	bl	8000608 <__aeabi_dmul>
 800941a:	3f01      	subs	r7, #1
 800941c:	4680      	mov	r8, r0
 800941e:	4689      	mov	r9, r1
 8009420:	e708      	b.n	8009234 <__kernel_rem_pio2+0x2ac>
 8009422:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8009426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800942e:	f7f7 f8eb 	bl	8000608 <__aeabi_dmul>
 8009432:	4602      	mov	r2, r0
 8009434:	460b      	mov	r3, r1
 8009436:	4640      	mov	r0, r8
 8009438:	4649      	mov	r1, r9
 800943a:	f7f6 ff2f 	bl	800029c <__adddf3>
 800943e:	3701      	adds	r7, #1
 8009440:	4680      	mov	r8, r0
 8009442:	4689      	mov	r9, r1
 8009444:	9b04      	ldr	r3, [sp, #16]
 8009446:	429f      	cmp	r7, r3
 8009448:	dc01      	bgt.n	800944e <__kernel_rem_pio2+0x4c6>
 800944a:	45ba      	cmp	sl, r7
 800944c:	dae9      	bge.n	8009422 <__kernel_rem_pio2+0x49a>
 800944e:	ab4a      	add	r3, sp, #296	; 0x128
 8009450:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009454:	e9c3 8900 	strd	r8, r9, [r3]
 8009458:	f10a 0a01 	add.w	sl, sl, #1
 800945c:	3e08      	subs	r6, #8
 800945e:	e6f0      	b.n	8009242 <__kernel_rem_pio2+0x2ba>
 8009460:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009462:	2b03      	cmp	r3, #3
 8009464:	d85b      	bhi.n	800951e <__kernel_rem_pio2+0x596>
 8009466:	e8df f003 	tbb	[pc, r3]
 800946a:	264a      	.short	0x264a
 800946c:	0226      	.short	0x0226
 800946e:	ab9a      	add	r3, sp, #616	; 0x268
 8009470:	441c      	add	r4, r3
 8009472:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8009476:	46a2      	mov	sl, r4
 8009478:	46ab      	mov	fp, r5
 800947a:	f1bb 0f00 	cmp.w	fp, #0
 800947e:	dc6c      	bgt.n	800955a <__kernel_rem_pio2+0x5d2>
 8009480:	46a2      	mov	sl, r4
 8009482:	46ab      	mov	fp, r5
 8009484:	f1bb 0f01 	cmp.w	fp, #1
 8009488:	f300 8086 	bgt.w	8009598 <__kernel_rem_pio2+0x610>
 800948c:	2000      	movs	r0, #0
 800948e:	2100      	movs	r1, #0
 8009490:	2d01      	cmp	r5, #1
 8009492:	f300 80a0 	bgt.w	80095d6 <__kernel_rem_pio2+0x64e>
 8009496:	9b02      	ldr	r3, [sp, #8]
 8009498:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800949c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	f040 809e 	bne.w	80095e2 <__kernel_rem_pio2+0x65a>
 80094a6:	9b01      	ldr	r3, [sp, #4]
 80094a8:	e9c3 7800 	strd	r7, r8, [r3]
 80094ac:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80094b0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80094b4:	e033      	b.n	800951e <__kernel_rem_pio2+0x596>
 80094b6:	3408      	adds	r4, #8
 80094b8:	ab4a      	add	r3, sp, #296	; 0x128
 80094ba:	441c      	add	r4, r3
 80094bc:	462e      	mov	r6, r5
 80094be:	2000      	movs	r0, #0
 80094c0:	2100      	movs	r1, #0
 80094c2:	2e00      	cmp	r6, #0
 80094c4:	da3a      	bge.n	800953c <__kernel_rem_pio2+0x5b4>
 80094c6:	9b02      	ldr	r3, [sp, #8]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d03d      	beq.n	8009548 <__kernel_rem_pio2+0x5c0>
 80094cc:	4602      	mov	r2, r0
 80094ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094d2:	9c01      	ldr	r4, [sp, #4]
 80094d4:	e9c4 2300 	strd	r2, r3, [r4]
 80094d8:	4602      	mov	r2, r0
 80094da:	460b      	mov	r3, r1
 80094dc:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80094e0:	f7f6 feda 	bl	8000298 <__aeabi_dsub>
 80094e4:	ae4c      	add	r6, sp, #304	; 0x130
 80094e6:	2401      	movs	r4, #1
 80094e8:	42a5      	cmp	r5, r4
 80094ea:	da30      	bge.n	800954e <__kernel_rem_pio2+0x5c6>
 80094ec:	9b02      	ldr	r3, [sp, #8]
 80094ee:	b113      	cbz	r3, 80094f6 <__kernel_rem_pio2+0x56e>
 80094f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094f4:	4619      	mov	r1, r3
 80094f6:	9b01      	ldr	r3, [sp, #4]
 80094f8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80094fc:	e00f      	b.n	800951e <__kernel_rem_pio2+0x596>
 80094fe:	ab9a      	add	r3, sp, #616	; 0x268
 8009500:	441c      	add	r4, r3
 8009502:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8009506:	2000      	movs	r0, #0
 8009508:	2100      	movs	r1, #0
 800950a:	2d00      	cmp	r5, #0
 800950c:	da10      	bge.n	8009530 <__kernel_rem_pio2+0x5a8>
 800950e:	9b02      	ldr	r3, [sp, #8]
 8009510:	b113      	cbz	r3, 8009518 <__kernel_rem_pio2+0x590>
 8009512:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009516:	4619      	mov	r1, r3
 8009518:	9b01      	ldr	r3, [sp, #4]
 800951a:	e9c3 0100 	strd	r0, r1, [r3]
 800951e:	9b06      	ldr	r3, [sp, #24]
 8009520:	f003 0007 	and.w	r0, r3, #7
 8009524:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8009528:	ecbd 8b02 	vpop	{d8}
 800952c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009530:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009534:	f7f6 feb2 	bl	800029c <__adddf3>
 8009538:	3d01      	subs	r5, #1
 800953a:	e7e6      	b.n	800950a <__kernel_rem_pio2+0x582>
 800953c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009540:	f7f6 feac 	bl	800029c <__adddf3>
 8009544:	3e01      	subs	r6, #1
 8009546:	e7bc      	b.n	80094c2 <__kernel_rem_pio2+0x53a>
 8009548:	4602      	mov	r2, r0
 800954a:	460b      	mov	r3, r1
 800954c:	e7c1      	b.n	80094d2 <__kernel_rem_pio2+0x54a>
 800954e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8009552:	f7f6 fea3 	bl	800029c <__adddf3>
 8009556:	3401      	adds	r4, #1
 8009558:	e7c6      	b.n	80094e8 <__kernel_rem_pio2+0x560>
 800955a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800955e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8009562:	4640      	mov	r0, r8
 8009564:	ec53 2b17 	vmov	r2, r3, d7
 8009568:	4649      	mov	r1, r9
 800956a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800956e:	f7f6 fe95 	bl	800029c <__adddf3>
 8009572:	4602      	mov	r2, r0
 8009574:	460b      	mov	r3, r1
 8009576:	4606      	mov	r6, r0
 8009578:	460f      	mov	r7, r1
 800957a:	4640      	mov	r0, r8
 800957c:	4649      	mov	r1, r9
 800957e:	f7f6 fe8b 	bl	8000298 <__aeabi_dsub>
 8009582:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009586:	f7f6 fe89 	bl	800029c <__adddf3>
 800958a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800958e:	e9ca 0100 	strd	r0, r1, [sl]
 8009592:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8009596:	e770      	b.n	800947a <__kernel_rem_pio2+0x4f2>
 8009598:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800959c:	ed3a 7b02 	vldmdb	sl!, {d7}
 80095a0:	4630      	mov	r0, r6
 80095a2:	ec53 2b17 	vmov	r2, r3, d7
 80095a6:	4639      	mov	r1, r7
 80095a8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80095ac:	f7f6 fe76 	bl	800029c <__adddf3>
 80095b0:	4602      	mov	r2, r0
 80095b2:	460b      	mov	r3, r1
 80095b4:	4680      	mov	r8, r0
 80095b6:	4689      	mov	r9, r1
 80095b8:	4630      	mov	r0, r6
 80095ba:	4639      	mov	r1, r7
 80095bc:	f7f6 fe6c 	bl	8000298 <__aeabi_dsub>
 80095c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095c4:	f7f6 fe6a 	bl	800029c <__adddf3>
 80095c8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80095cc:	e9ca 0100 	strd	r0, r1, [sl]
 80095d0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80095d4:	e756      	b.n	8009484 <__kernel_rem_pio2+0x4fc>
 80095d6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80095da:	f7f6 fe5f 	bl	800029c <__adddf3>
 80095de:	3d01      	subs	r5, #1
 80095e0:	e756      	b.n	8009490 <__kernel_rem_pio2+0x508>
 80095e2:	9b01      	ldr	r3, [sp, #4]
 80095e4:	9a01      	ldr	r2, [sp, #4]
 80095e6:	601f      	str	r7, [r3, #0]
 80095e8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80095ec:	605c      	str	r4, [r3, #4]
 80095ee:	609d      	str	r5, [r3, #8]
 80095f0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80095f4:	60d3      	str	r3, [r2, #12]
 80095f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80095fa:	6110      	str	r0, [r2, #16]
 80095fc:	6153      	str	r3, [r2, #20]
 80095fe:	e78e      	b.n	800951e <__kernel_rem_pio2+0x596>
 8009600:	41700000 	.word	0x41700000
 8009604:	3e700000 	.word	0x3e700000

08009608 <__kernel_sin>:
 8009608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800960c:	ec55 4b10 	vmov	r4, r5, d0
 8009610:	b085      	sub	sp, #20
 8009612:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009616:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800961a:	ed8d 1b00 	vstr	d1, [sp]
 800961e:	9002      	str	r0, [sp, #8]
 8009620:	da06      	bge.n	8009630 <__kernel_sin+0x28>
 8009622:	ee10 0a10 	vmov	r0, s0
 8009626:	4629      	mov	r1, r5
 8009628:	f7f7 fa88 	bl	8000b3c <__aeabi_d2iz>
 800962c:	2800      	cmp	r0, #0
 800962e:	d051      	beq.n	80096d4 <__kernel_sin+0xcc>
 8009630:	4622      	mov	r2, r4
 8009632:	462b      	mov	r3, r5
 8009634:	4620      	mov	r0, r4
 8009636:	4629      	mov	r1, r5
 8009638:	f7f6 ffe6 	bl	8000608 <__aeabi_dmul>
 800963c:	4682      	mov	sl, r0
 800963e:	468b      	mov	fp, r1
 8009640:	4602      	mov	r2, r0
 8009642:	460b      	mov	r3, r1
 8009644:	4620      	mov	r0, r4
 8009646:	4629      	mov	r1, r5
 8009648:	f7f6 ffde 	bl	8000608 <__aeabi_dmul>
 800964c:	a341      	add	r3, pc, #260	; (adr r3, 8009754 <__kernel_sin+0x14c>)
 800964e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009652:	4680      	mov	r8, r0
 8009654:	4689      	mov	r9, r1
 8009656:	4650      	mov	r0, sl
 8009658:	4659      	mov	r1, fp
 800965a:	f7f6 ffd5 	bl	8000608 <__aeabi_dmul>
 800965e:	a33f      	add	r3, pc, #252	; (adr r3, 800975c <__kernel_sin+0x154>)
 8009660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009664:	f7f6 fe18 	bl	8000298 <__aeabi_dsub>
 8009668:	4652      	mov	r2, sl
 800966a:	465b      	mov	r3, fp
 800966c:	f7f6 ffcc 	bl	8000608 <__aeabi_dmul>
 8009670:	a33c      	add	r3, pc, #240	; (adr r3, 8009764 <__kernel_sin+0x15c>)
 8009672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009676:	f7f6 fe11 	bl	800029c <__adddf3>
 800967a:	4652      	mov	r2, sl
 800967c:	465b      	mov	r3, fp
 800967e:	f7f6 ffc3 	bl	8000608 <__aeabi_dmul>
 8009682:	a33a      	add	r3, pc, #232	; (adr r3, 800976c <__kernel_sin+0x164>)
 8009684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009688:	f7f6 fe06 	bl	8000298 <__aeabi_dsub>
 800968c:	4652      	mov	r2, sl
 800968e:	465b      	mov	r3, fp
 8009690:	f7f6 ffba 	bl	8000608 <__aeabi_dmul>
 8009694:	a337      	add	r3, pc, #220	; (adr r3, 8009774 <__kernel_sin+0x16c>)
 8009696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969a:	f7f6 fdff 	bl	800029c <__adddf3>
 800969e:	9b02      	ldr	r3, [sp, #8]
 80096a0:	4606      	mov	r6, r0
 80096a2:	460f      	mov	r7, r1
 80096a4:	b9db      	cbnz	r3, 80096de <__kernel_sin+0xd6>
 80096a6:	4602      	mov	r2, r0
 80096a8:	460b      	mov	r3, r1
 80096aa:	4650      	mov	r0, sl
 80096ac:	4659      	mov	r1, fp
 80096ae:	f7f6 ffab 	bl	8000608 <__aeabi_dmul>
 80096b2:	a325      	add	r3, pc, #148	; (adr r3, 8009748 <__kernel_sin+0x140>)
 80096b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b8:	f7f6 fdee 	bl	8000298 <__aeabi_dsub>
 80096bc:	4642      	mov	r2, r8
 80096be:	464b      	mov	r3, r9
 80096c0:	f7f6 ffa2 	bl	8000608 <__aeabi_dmul>
 80096c4:	4602      	mov	r2, r0
 80096c6:	460b      	mov	r3, r1
 80096c8:	4620      	mov	r0, r4
 80096ca:	4629      	mov	r1, r5
 80096cc:	f7f6 fde6 	bl	800029c <__adddf3>
 80096d0:	4604      	mov	r4, r0
 80096d2:	460d      	mov	r5, r1
 80096d4:	ec45 4b10 	vmov	d0, r4, r5
 80096d8:	b005      	add	sp, #20
 80096da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096de:	2200      	movs	r2, #0
 80096e0:	4b1b      	ldr	r3, [pc, #108]	; (8009750 <__kernel_sin+0x148>)
 80096e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096e6:	f7f6 ff8f 	bl	8000608 <__aeabi_dmul>
 80096ea:	4632      	mov	r2, r6
 80096ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096f0:	463b      	mov	r3, r7
 80096f2:	4640      	mov	r0, r8
 80096f4:	4649      	mov	r1, r9
 80096f6:	f7f6 ff87 	bl	8000608 <__aeabi_dmul>
 80096fa:	4602      	mov	r2, r0
 80096fc:	460b      	mov	r3, r1
 80096fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009702:	f7f6 fdc9 	bl	8000298 <__aeabi_dsub>
 8009706:	4652      	mov	r2, sl
 8009708:	465b      	mov	r3, fp
 800970a:	f7f6 ff7d 	bl	8000608 <__aeabi_dmul>
 800970e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009712:	f7f6 fdc1 	bl	8000298 <__aeabi_dsub>
 8009716:	a30c      	add	r3, pc, #48	; (adr r3, 8009748 <__kernel_sin+0x140>)
 8009718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971c:	4606      	mov	r6, r0
 800971e:	460f      	mov	r7, r1
 8009720:	4640      	mov	r0, r8
 8009722:	4649      	mov	r1, r9
 8009724:	f7f6 ff70 	bl	8000608 <__aeabi_dmul>
 8009728:	4602      	mov	r2, r0
 800972a:	460b      	mov	r3, r1
 800972c:	4630      	mov	r0, r6
 800972e:	4639      	mov	r1, r7
 8009730:	f7f6 fdb4 	bl	800029c <__adddf3>
 8009734:	4602      	mov	r2, r0
 8009736:	460b      	mov	r3, r1
 8009738:	4620      	mov	r0, r4
 800973a:	4629      	mov	r1, r5
 800973c:	f7f6 fdac 	bl	8000298 <__aeabi_dsub>
 8009740:	e7c6      	b.n	80096d0 <__kernel_sin+0xc8>
 8009742:	bf00      	nop
 8009744:	f3af 8000 	nop.w
 8009748:	55555549 	.word	0x55555549
 800974c:	3fc55555 	.word	0x3fc55555
 8009750:	3fe00000 	.word	0x3fe00000
 8009754:	5acfd57c 	.word	0x5acfd57c
 8009758:	3de5d93a 	.word	0x3de5d93a
 800975c:	8a2b9ceb 	.word	0x8a2b9ceb
 8009760:	3e5ae5e6 	.word	0x3e5ae5e6
 8009764:	57b1fe7d 	.word	0x57b1fe7d
 8009768:	3ec71de3 	.word	0x3ec71de3
 800976c:	19c161d5 	.word	0x19c161d5
 8009770:	3f2a01a0 	.word	0x3f2a01a0
 8009774:	1110f8a6 	.word	0x1110f8a6
 8009778:	3f811111 	.word	0x3f811111

0800977c <fabs>:
 800977c:	ec51 0b10 	vmov	r0, r1, d0
 8009780:	ee10 2a10 	vmov	r2, s0
 8009784:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009788:	ec43 2b10 	vmov	d0, r2, r3
 800978c:	4770      	bx	lr
	...

08009790 <floor>:
 8009790:	ec51 0b10 	vmov	r0, r1, d0
 8009794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009798:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800979c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80097a0:	2e13      	cmp	r6, #19
 80097a2:	460c      	mov	r4, r1
 80097a4:	ee10 5a10 	vmov	r5, s0
 80097a8:	4680      	mov	r8, r0
 80097aa:	dc34      	bgt.n	8009816 <floor+0x86>
 80097ac:	2e00      	cmp	r6, #0
 80097ae:	da16      	bge.n	80097de <floor+0x4e>
 80097b0:	a335      	add	r3, pc, #212	; (adr r3, 8009888 <floor+0xf8>)
 80097b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b6:	f7f6 fd71 	bl	800029c <__adddf3>
 80097ba:	2200      	movs	r2, #0
 80097bc:	2300      	movs	r3, #0
 80097be:	f7f7 f9b3 	bl	8000b28 <__aeabi_dcmpgt>
 80097c2:	b148      	cbz	r0, 80097d8 <floor+0x48>
 80097c4:	2c00      	cmp	r4, #0
 80097c6:	da59      	bge.n	800987c <floor+0xec>
 80097c8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80097cc:	4a30      	ldr	r2, [pc, #192]	; (8009890 <floor+0x100>)
 80097ce:	432b      	orrs	r3, r5
 80097d0:	2500      	movs	r5, #0
 80097d2:	42ab      	cmp	r3, r5
 80097d4:	bf18      	it	ne
 80097d6:	4614      	movne	r4, r2
 80097d8:	4621      	mov	r1, r4
 80097da:	4628      	mov	r0, r5
 80097dc:	e025      	b.n	800982a <floor+0x9a>
 80097de:	4f2d      	ldr	r7, [pc, #180]	; (8009894 <floor+0x104>)
 80097e0:	4137      	asrs	r7, r6
 80097e2:	ea01 0307 	and.w	r3, r1, r7
 80097e6:	4303      	orrs	r3, r0
 80097e8:	d01f      	beq.n	800982a <floor+0x9a>
 80097ea:	a327      	add	r3, pc, #156	; (adr r3, 8009888 <floor+0xf8>)
 80097ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f0:	f7f6 fd54 	bl	800029c <__adddf3>
 80097f4:	2200      	movs	r2, #0
 80097f6:	2300      	movs	r3, #0
 80097f8:	f7f7 f996 	bl	8000b28 <__aeabi_dcmpgt>
 80097fc:	2800      	cmp	r0, #0
 80097fe:	d0eb      	beq.n	80097d8 <floor+0x48>
 8009800:	2c00      	cmp	r4, #0
 8009802:	bfbe      	ittt	lt
 8009804:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009808:	fa43 f606 	asrlt.w	r6, r3, r6
 800980c:	19a4      	addlt	r4, r4, r6
 800980e:	ea24 0407 	bic.w	r4, r4, r7
 8009812:	2500      	movs	r5, #0
 8009814:	e7e0      	b.n	80097d8 <floor+0x48>
 8009816:	2e33      	cmp	r6, #51	; 0x33
 8009818:	dd0b      	ble.n	8009832 <floor+0xa2>
 800981a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800981e:	d104      	bne.n	800982a <floor+0x9a>
 8009820:	ee10 2a10 	vmov	r2, s0
 8009824:	460b      	mov	r3, r1
 8009826:	f7f6 fd39 	bl	800029c <__adddf3>
 800982a:	ec41 0b10 	vmov	d0, r0, r1
 800982e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009832:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009836:	f04f 33ff 	mov.w	r3, #4294967295
 800983a:	fa23 f707 	lsr.w	r7, r3, r7
 800983e:	4207      	tst	r7, r0
 8009840:	d0f3      	beq.n	800982a <floor+0x9a>
 8009842:	a311      	add	r3, pc, #68	; (adr r3, 8009888 <floor+0xf8>)
 8009844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009848:	f7f6 fd28 	bl	800029c <__adddf3>
 800984c:	2200      	movs	r2, #0
 800984e:	2300      	movs	r3, #0
 8009850:	f7f7 f96a 	bl	8000b28 <__aeabi_dcmpgt>
 8009854:	2800      	cmp	r0, #0
 8009856:	d0bf      	beq.n	80097d8 <floor+0x48>
 8009858:	2c00      	cmp	r4, #0
 800985a:	da02      	bge.n	8009862 <floor+0xd2>
 800985c:	2e14      	cmp	r6, #20
 800985e:	d103      	bne.n	8009868 <floor+0xd8>
 8009860:	3401      	adds	r4, #1
 8009862:	ea25 0507 	bic.w	r5, r5, r7
 8009866:	e7b7      	b.n	80097d8 <floor+0x48>
 8009868:	2301      	movs	r3, #1
 800986a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800986e:	fa03 f606 	lsl.w	r6, r3, r6
 8009872:	4435      	add	r5, r6
 8009874:	4545      	cmp	r5, r8
 8009876:	bf38      	it	cc
 8009878:	18e4      	addcc	r4, r4, r3
 800987a:	e7f2      	b.n	8009862 <floor+0xd2>
 800987c:	2500      	movs	r5, #0
 800987e:	462c      	mov	r4, r5
 8009880:	e7aa      	b.n	80097d8 <floor+0x48>
 8009882:	bf00      	nop
 8009884:	f3af 8000 	nop.w
 8009888:	8800759c 	.word	0x8800759c
 800988c:	7e37e43c 	.word	0x7e37e43c
 8009890:	bff00000 	.word	0xbff00000
 8009894:	000fffff 	.word	0x000fffff

08009898 <scalbn>:
 8009898:	b570      	push	{r4, r5, r6, lr}
 800989a:	ec55 4b10 	vmov	r4, r5, d0
 800989e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80098a2:	4606      	mov	r6, r0
 80098a4:	462b      	mov	r3, r5
 80098a6:	b9aa      	cbnz	r2, 80098d4 <scalbn+0x3c>
 80098a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80098ac:	4323      	orrs	r3, r4
 80098ae:	d03b      	beq.n	8009928 <scalbn+0x90>
 80098b0:	4b31      	ldr	r3, [pc, #196]	; (8009978 <scalbn+0xe0>)
 80098b2:	4629      	mov	r1, r5
 80098b4:	2200      	movs	r2, #0
 80098b6:	ee10 0a10 	vmov	r0, s0
 80098ba:	f7f6 fea5 	bl	8000608 <__aeabi_dmul>
 80098be:	4b2f      	ldr	r3, [pc, #188]	; (800997c <scalbn+0xe4>)
 80098c0:	429e      	cmp	r6, r3
 80098c2:	4604      	mov	r4, r0
 80098c4:	460d      	mov	r5, r1
 80098c6:	da12      	bge.n	80098ee <scalbn+0x56>
 80098c8:	a327      	add	r3, pc, #156	; (adr r3, 8009968 <scalbn+0xd0>)
 80098ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ce:	f7f6 fe9b 	bl	8000608 <__aeabi_dmul>
 80098d2:	e009      	b.n	80098e8 <scalbn+0x50>
 80098d4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80098d8:	428a      	cmp	r2, r1
 80098da:	d10c      	bne.n	80098f6 <scalbn+0x5e>
 80098dc:	ee10 2a10 	vmov	r2, s0
 80098e0:	4620      	mov	r0, r4
 80098e2:	4629      	mov	r1, r5
 80098e4:	f7f6 fcda 	bl	800029c <__adddf3>
 80098e8:	4604      	mov	r4, r0
 80098ea:	460d      	mov	r5, r1
 80098ec:	e01c      	b.n	8009928 <scalbn+0x90>
 80098ee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80098f2:	460b      	mov	r3, r1
 80098f4:	3a36      	subs	r2, #54	; 0x36
 80098f6:	4432      	add	r2, r6
 80098f8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80098fc:	428a      	cmp	r2, r1
 80098fe:	dd0b      	ble.n	8009918 <scalbn+0x80>
 8009900:	ec45 4b11 	vmov	d1, r4, r5
 8009904:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8009970 <scalbn+0xd8>
 8009908:	f000 f83c 	bl	8009984 <copysign>
 800990c:	a318      	add	r3, pc, #96	; (adr r3, 8009970 <scalbn+0xd8>)
 800990e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009912:	ec51 0b10 	vmov	r0, r1, d0
 8009916:	e7da      	b.n	80098ce <scalbn+0x36>
 8009918:	2a00      	cmp	r2, #0
 800991a:	dd08      	ble.n	800992e <scalbn+0x96>
 800991c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009920:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009924:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009928:	ec45 4b10 	vmov	d0, r4, r5
 800992c:	bd70      	pop	{r4, r5, r6, pc}
 800992e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009932:	da0d      	bge.n	8009950 <scalbn+0xb8>
 8009934:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009938:	429e      	cmp	r6, r3
 800993a:	ec45 4b11 	vmov	d1, r4, r5
 800993e:	dce1      	bgt.n	8009904 <scalbn+0x6c>
 8009940:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8009968 <scalbn+0xd0>
 8009944:	f000 f81e 	bl	8009984 <copysign>
 8009948:	a307      	add	r3, pc, #28	; (adr r3, 8009968 <scalbn+0xd0>)
 800994a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994e:	e7e0      	b.n	8009912 <scalbn+0x7a>
 8009950:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009954:	3236      	adds	r2, #54	; 0x36
 8009956:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800995a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800995e:	4620      	mov	r0, r4
 8009960:	4629      	mov	r1, r5
 8009962:	2200      	movs	r2, #0
 8009964:	4b06      	ldr	r3, [pc, #24]	; (8009980 <scalbn+0xe8>)
 8009966:	e7b2      	b.n	80098ce <scalbn+0x36>
 8009968:	c2f8f359 	.word	0xc2f8f359
 800996c:	01a56e1f 	.word	0x01a56e1f
 8009970:	8800759c 	.word	0x8800759c
 8009974:	7e37e43c 	.word	0x7e37e43c
 8009978:	43500000 	.word	0x43500000
 800997c:	ffff3cb0 	.word	0xffff3cb0
 8009980:	3c900000 	.word	0x3c900000

08009984 <copysign>:
 8009984:	ec51 0b10 	vmov	r0, r1, d0
 8009988:	ee11 0a90 	vmov	r0, s3
 800998c:	ee10 2a10 	vmov	r2, s0
 8009990:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8009998:	ea41 0300 	orr.w	r3, r1, r0
 800999c:	ec43 2b10 	vmov	d0, r2, r3
 80099a0:	4770      	bx	lr
	...

080099a4 <_init>:
 80099a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099a6:	bf00      	nop
 80099a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099aa:	bc08      	pop	{r3}
 80099ac:	469e      	mov	lr, r3
 80099ae:	4770      	bx	lr

080099b0 <_fini>:
 80099b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099b2:	bf00      	nop
 80099b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099b6:	bc08      	pop	{r3}
 80099b8:	469e      	mov	lr, r3
 80099ba:	4770      	bx	lr
